
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function claim_element(nodes, name, attributes, svg) {
        for (let i = 0; i < nodes.length; i += 1) {
            const node = nodes[i];
            if (node.nodeName === name) {
                let j = 0;
                const remove = [];
                while (j < node.attributes.length) {
                    const attribute = node.attributes[j++];
                    if (!attributes[attribute.name]) {
                        remove.push(attribute.name);
                    }
                }
                for (let k = 0; k < remove.length; k++) {
                    node.removeAttribute(remove[k]);
                }
                return nodes.splice(i, 1)[0];
            }
        }
        return svg ? svg_element(name) : element(name);
    }
    function claim_text(nodes, data) {
        for (let i = 0; i < nodes.length; i += 1) {
            const node = nodes[i];
            if (node.nodeType === 3) {
                node.data = '' + data;
                return nodes.splice(i, 1)[0];
            }
        }
        return text(data);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.30.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src/FeatuedLink.svelte generated by Svelte v3.30.0 */

    const file = "src/FeatuedLink.svelte";

    function create_fragment(ctx) {
    	let div1;
    	let a;
    	let t0;
    	let t1;
    	let div0;
    	let t2;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			a = element("a");
    			t0 = text(/*title*/ ctx[0]);
    			t1 = space();
    			div0 = element("div");
    			t2 = text(/*subtext*/ ctx[2]);
    			attr_dev(a, "href", /*url*/ ctx[1]);
    			attr_dev(a, "class", "mb-1 text-gray-800 dark:text-gray-300 ");
    			add_location(a, file, 5, 2, 108);
    			attr_dev(div0, "class", "text-gray-400 ");
    			add_location(div0, file, 8, 0, 189);
    			attr_dev(div1, "class", "lg:text-xl block mt-2 mb-4 items-start");
    			add_location(div1, file, 4, 0, 53);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, a);
    			append_dev(a, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, t2);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

    			if (dirty & /*url*/ 2) {
    				attr_dev(a, "href", /*url*/ ctx[1]);
    			}

    			if (dirty & /*subtext*/ 4) set_data_dev(t2, /*subtext*/ ctx[2]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("FeatuedLink", slots, []);
    	let { title } = $$props, { url } = $$props, { subtext } = $$props;
    	const writable_props = ["title", "url", "subtext"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FeatuedLink> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("url" in $$props) $$invalidate(1, url = $$props.url);
    		if ("subtext" in $$props) $$invalidate(2, subtext = $$props.subtext);
    	};

    	$$self.$capture_state = () => ({ title, url, subtext });

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("url" in $$props) $$invalidate(1, url = $$props.url);
    		if ("subtext" in $$props) $$invalidate(2, subtext = $$props.subtext);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, url, subtext];
    }

    class FeatuedLink extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, url: 1, subtext: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FeatuedLink",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
    			console.warn("<FeatuedLink> was created without expected prop 'title'");
    		}

    		if (/*url*/ ctx[1] === undefined && !("url" in props)) {
    			console.warn("<FeatuedLink> was created without expected prop 'url'");
    		}

    		if (/*subtext*/ ctx[2] === undefined && !("subtext" in props)) {
    			console.warn("<FeatuedLink> was created without expected prop 'subtext'");
    		}
    	}

    	get title() {
    		throw new Error("<FeatuedLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<FeatuedLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<FeatuedLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<FeatuedLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get subtext() {
    		throw new Error("<FeatuedLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set subtext(value) {
    		throw new Error("<FeatuedLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Headline.svelte generated by Svelte v3.30.0 */

    const file$1 = "src/Headline.svelte";

    function create_fragment$1(ctx) {
    	let h2;
    	let t;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t = text(/*title*/ ctx[0]);
    			attr_dev(h2, "class", "mt-8 mb-4 text-gray-400 font-bold uppercase text-xs tracking-wider");
    			add_location(h2, file$1, 3, 0, 38);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 1) set_data_dev(t, /*title*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Headline", slots, []);
    	let { title } = $$props;
    	const writable_props = ["title"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Headline> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    	};

    	$$self.$capture_state = () => ({ title });

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title];
    }

    class Headline extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { title: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Headline",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
    			console.warn("<Headline> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<Headline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Headline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var build = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
         factory(exports) ;
    }(commonjsGlobal, (function (exports) {
        function noop() { }
        function run(fn) {
            return fn();
        }
        function blank_object() {
            return Object.create(null);
        }
        function run_all(fns) {
            fns.forEach(run);
        }
        function is_function(thing) {
            return typeof thing === 'function';
        }
        function safe_not_equal(a, b) {
            return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
        }

        function append(target, node) {
            target.appendChild(node);
        }
        function insert(target, node, anchor) {
            target.insertBefore(node, anchor || null);
        }
        function detach(node) {
            node.parentNode.removeChild(node);
        }
        function svg_element(name) {
            return document.createElementNS('http://www.w3.org/2000/svg', name);
        }
        function text(data) {
            return document.createTextNode(data);
        }
        function attr(node, attribute, value) {
            if (value == null)
                node.removeAttribute(attribute);
            else if (node.getAttribute(attribute) !== value)
                node.setAttribute(attribute, value);
        }
        function children(element) {
            return Array.from(element.childNodes);
        }
        function set_data(text, data) {
            data = '' + data;
            if (text.data !== data)
                text.data = data;
        }

        let current_component;
        function set_current_component(component) {
            current_component = component;
        }

        const dirty_components = [];
        const binding_callbacks = [];
        const render_callbacks = [];
        const flush_callbacks = [];
        const resolved_promise = Promise.resolve();
        let update_scheduled = false;
        function schedule_update() {
            if (!update_scheduled) {
                update_scheduled = true;
                resolved_promise.then(flush);
            }
        }
        function add_render_callback(fn) {
            render_callbacks.push(fn);
        }
        let flushing = false;
        const seen_callbacks = new Set();
        function flush() {
            if (flushing)
                return;
            flushing = true;
            do {
                // first, call beforeUpdate functions
                // and update components
                for (let i = 0; i < dirty_components.length; i += 1) {
                    const component = dirty_components[i];
                    set_current_component(component);
                    update(component.$$);
                }
                dirty_components.length = 0;
                while (binding_callbacks.length)
                    binding_callbacks.pop()();
                // then, once components are updated, call
                // afterUpdate functions. This may cause
                // subsequent updates...
                for (let i = 0; i < render_callbacks.length; i += 1) {
                    const callback = render_callbacks[i];
                    if (!seen_callbacks.has(callback)) {
                        // ...so guard against infinite loops
                        seen_callbacks.add(callback);
                        callback();
                    }
                }
                render_callbacks.length = 0;
            } while (dirty_components.length);
            while (flush_callbacks.length) {
                flush_callbacks.pop()();
            }
            update_scheduled = false;
            flushing = false;
            seen_callbacks.clear();
        }
        function update($$) {
            if ($$.fragment !== null) {
                $$.update();
                run_all($$.before_update);
                const dirty = $$.dirty;
                $$.dirty = [-1];
                $$.fragment && $$.fragment.p($$.ctx, dirty);
                $$.after_update.forEach(add_render_callback);
            }
        }
        const outroing = new Set();
        function transition_in(block, local) {
            if (block && block.i) {
                outroing.delete(block);
                block.i(local);
            }
        }
        function mount_component(component, target, anchor) {
            const { fragment, on_mount, on_destroy, after_update } = component.$$;
            fragment && fragment.m(target, anchor);
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
            after_update.forEach(add_render_callback);
        }
        function destroy_component(component, detaching) {
            const $$ = component.$$;
            if ($$.fragment !== null) {
                run_all($$.on_destroy);
                $$.fragment && $$.fragment.d(detaching);
                // TODO null out other refs, including component.$$ (but need to
                // preserve final state?)
                $$.on_destroy = $$.fragment = null;
                $$.ctx = [];
            }
        }
        function make_dirty(component, i) {
            if (component.$$.dirty[0] === -1) {
                dirty_components.push(component);
                schedule_update();
                component.$$.dirty.fill(0);
            }
            component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
        }
        function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
            const parent_component = current_component;
            set_current_component(component);
            const prop_values = options.props || {};
            const $$ = component.$$ = {
                fragment: null,
                ctx: null,
                // state
                props,
                update: noop,
                not_equal,
                bound: blank_object(),
                // lifecycle
                on_mount: [],
                on_destroy: [],
                before_update: [],
                after_update: [],
                context: new Map(parent_component ? parent_component.$$.context : []),
                // everything else
                callbacks: blank_object(),
                dirty
            };
            let ready = false;
            $$.ctx = instance
                ? instance(component, prop_values, (i, ret, ...rest) => {
                    const value = rest.length ? rest[0] : ret;
                    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                        if ($$.bound[i])
                            $$.bound[i](value);
                        if (ready)
                            make_dirty(component, i);
                    }
                    return ret;
                })
                : [];
            $$.update();
            ready = true;
            run_all($$.before_update);
            // `false` as a special case of no DOM component
            $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
            if (options.target) {
                if (options.hydrate) {
                    const nodes = children(options.target);
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    $$.fragment && $$.fragment.l(nodes);
                    nodes.forEach(detach);
                }
                else {
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    $$.fragment && $$.fragment.c();
                }
                if (options.intro)
                    transition_in(component.$$.fragment);
                mount_component(component, options.target, options.anchor);
                flush();
            }
            set_current_component(parent_component);
        }
        class SvelteComponent {
            $destroy() {
                destroy_component(this, 1);
                this.$destroy = noop;
            }
            $on(type, callback) {
                const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
                callbacks.push(callback);
                return () => {
                    const index = callbacks.indexOf(callback);
                    if (index !== -1)
                        callbacks.splice(index, 1);
                };
            }
            $set() {
                // overridden by instance, if it has props
            }
        }

        /* src/components/FortyTwo.svelte generated by Svelte v3.23.2 */

        function create_fragment(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 12.42l-4.428 4.415H24zm-4.428-4.417l-4.414 4.418v4.414h4.414V12.42L24 8.003V3.575h-4.428zm-4.414 0l4.414-4.428h-4.414zM0 15.996h8.842v4.43h4.412V12.42H4.428l8.826-8.846H8.842L0 12.421z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "42" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class FortyTwo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance, create_fragment, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/DotNet.svelte generated by Svelte v3.23.2 */

        function create_fragment$1(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.1672 7.5655v8.749H4.19v-6.325a8.979 8.979 0 0 0-.0488-1.1998h.0384a2.9082 2.9082 0 0 0 .2784.5473l4.4973 6.9774h1.2569V7.5655H9.1904v6.1526a9.2574 9.2574 0 0 0 .0619 1.286h-.0234c-.0544-.1056-.173-.3002-.3553-.585L4.4964 7.5656zm9.315 0v8.749h4.65l.0048-.9599h-3.6087v-3.0331h3.1579V11.4h-3.1579V8.4916h3.3884v-.926zm5.4374 0v.926h2.5149v7.823h1.0216v-7.823H24v-.926zM.6534 15.067a.643.643 0 0 0-.4565.2062A.6719.6719 0 0 0 0 15.753a.6623.6623 0 0 0 .1968.4799.6479.6479 0 0 0 .4799.2015.6623.6623 0 0 0 .4799-.2015.6575.6575 0 0 0 .2015-.48.667.667 0 0 0-.2015-.4798.6575.6575 0 0 0-.4799-.2062.643.643 0 0 0-.0234 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = ".NET" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class DotNet extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1, create_fragment$1, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/OneThousandOneTracklists.svelte generated by Svelte v3.23.2 */

        function create_fragment$2(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.422 10.723h-1.35v3.807h2.458v-4.048h2.94v4.337h-1.35v1.35h-1.349v2.458h2.458v-2.7h2.699v-5.204h-1.35v-1.35H9.422zm1.35 11.952h2.457v-2.458H10.77v2.458zm-2.676-20H6.747v1.35h-1.35v1.348H4.049v1.35h-1.35v6.699H1.35v1.35H0v2.457h1.35v1.35h1.349v1.349h2.458v-7.856h-1.35v-4.24h1.35v-1.35h1.349v-1.35h1.35V3.784h8.289v1.35h1.349v1.349h1.35v1.35h1.349v4.24h-1.35v7.856h2.458v-1.35h1.35v-1.35H24v-2.457h-1.35v-1.35h-1.349V6.724h-1.35v-1.35h-1.349V4.024h-1.349v-1.35h-1.35V1.326H8.097v1.35Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "1001Tracklists" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class OneThousandOneTracklists extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2, create_fragment$2, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/OnePassword.svelte generated by Svelte v3.23.2 */

        function create_fragment$3(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.51,10.013V7.299c0-0.306,0.248-0.554,0.554-0.554h1.911c0.306,0,0.554,0.248,0.554,0.554v4.968 c0,0.076-0.038,0.134-0.076,0.191l-0.478,0.478c-0.115,0.115-0.115,0.287,0,0.382l0.478,0.478c0.057,0.057,0.076,0.115,0.076,0.191 v2.713c0,0.306-0.248,0.554-0.554,0.554h-1.911c-0.306,0-0.554-0.248-0.554-0.554v-4.968c0-0.076,0.038-0.134,0.076-0.191 l0.478-0.478c0.115-0.115,0.115-0.287,0-0.382l-0.478-0.478C10.529,10.146,10.51,10.089,10.51,10.013z M19.127,12 c0-3.936-3.191-7.127-7.127-7.127S4.873,8.064,4.873,12S8.064,19.127,12,19.127S19.127,15.936,19.127,12z M21.382,12 c0,5.178-4.204,9.363-9.363,9.363c-5.178,0-9.363-4.204-9.363-9.363c0-5.178,4.204-9.363,9.363-9.363 C17.178,2.637,21.382,6.822,21.382,12z M0.764,12c0,6.21,5.025,11.236,11.236,11.236S23.236,18.21,23.236,12S18.21,0.764,12,0.764 S0.764,5.79,0.764,12z M0,12C0,5.369,5.369,0,12,0c6.631,0,12,5.369,12,12s-5.369,12-12,12S0,18.631,0,12z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "1Password" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class OnePassword extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3, create_fragment$3, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/FourD.svelte generated by Svelte v3.23.2 */

        function create_fragment$4(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.64 0v24H3.36V0h17.28zM10.49 11.827c-.115.138-5.882 6.789-5.983 6.9-.058.07-.187.194-.187.36 0 .153.187.208.36.208h4.4v-1.067H5.83c.49-.61 3.38-3.824 3.696-4.226v5.34c0 .194-.005.965-.043 1.602-.029.43-.13.637-.661.693-.23.027-.533.041-.662.041-.072 0-.115.083-.115.18 0 .097.072.167.23.167.777 0 1.539-.042 1.942-.042 1.236 0 2.646.097 3.178.097 2.618 0 4.099-.97 4.746-1.607.791-.776 1.539-2.093 1.539-3.81 0-1.622-.662-2.758-1.38-3.465-1.54-1.565-3.913-1.565-5.682-1.565-.56 0-1.035.027-1.064.027-.388.042-.345-.124-.59-.138-.158-.014-.258.055-.474.305zm1.898.443c1.108 0 2.719.166 4.027 1.372.604.554 1.367 1.676 1.367 3.408 0 1.414-.288 2.66-1.194 3.409-.849.706-1.812.984-3.265.984-1.122 0-1.683-.291-1.87-.54-.115-.153-.172-.694-.186-1.04 0-.097-.015-.29-.015-.568h1.021c.245 0 .317-.055.389-.18.1-.18.244-.735.244-.86 0-.11-.057-.166-.13-.166-.086 0-.273.139-.647.139h-.877v-5.584c0-.152.058-.222.173-.277.115-.056.676-.097.963-.097z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "4D" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class FourD extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4, create_fragment$4, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/FiveHundredPx.svelte generated by Svelte v3.23.2 */

        function create_fragment$5(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.433 9.01A2.994 2.994 0 0 0 4.443 12a2.993 2.993 0 0 0 2.99 2.99 2.994 2.994 0 0 0 2.99-2.99 2.993 2.993 0 0 0-2.99-2.99m0 5.343A2.357 2.357 0 0 1 5.079 12a2.357 2.357 0 0 1 2.354-2.353A2.356 2.356 0 0 1 9.786 12a2.356 2.356 0 0 1-2.353 2.353m6.471-5.343a2.994 2.994 0 0 0-2.99 2.99 2.993 2.993 0 0 0 2.99 2.99 2.994 2.994 0 0 0 2.99-2.99 2.994 2.994 0 0 0-2.99-2.99m0 5.343A2.355 2.355 0 0 1 11.552 12a2.355 2.355 0 0 1 2.352-2.353A2.356 2.356 0 0 1 16.257 12a2.356 2.356 0 0 1-2.353 2.353m-11.61-3.55a2.1 2.1 0 0 0-1.597.423V9.641h2.687c.093 0 .16-.017.16-.292 0-.269-.108-.28-.18-.28H.39c-.174 0-.265.14-.265.294v2.602c0 .136.087.183.247.214.141.028.223.012.285-.057l.006-.01c.283-.408.9-.804 1.486-.732.699.086 1.262.644 1.34 1.327a1.512 1.512 0 0 1-1.5 1.685c-.636 0-1.19-.408-1.422-1.001-.035-.088-.092-.152-.343-.062-.229.083-.243.18-.212.268a2.11 2.11 0 0 0 1.976 1.386 2.102 2.102 0 0 0 .305-4.18M18.938 9.04c-.805.062-1.434.77-1.434 1.61v2.66c0 .155.117.187.293.187s.293-.031.293-.186v-2.668c0-.524.382-.974.868-1.024a.972.972 0 0 1 .758.247.984.984 0 0 1 .322.73c0 .08-.039.34-.217.58-.135.182-.39.399-.844.399h-.009c-.115 0-.215.005-.234.28-.013.186-.012.269.148.29.286.04.576-.016.865-.166.492-.256.822-.741.861-1.267a1.562 1.562 0 0 0-.452-1.222 1.56 1.56 0 0 0-1.218-.45m3.919 1.56l1.085-1.086c.04-.039.132-.132-.055-.324-.08-.083-.153-.125-.217-.125h-.001a.163.163 0 0 0-.121.058L22.46 10.21l-1.086-1.093c-.088-.088-.19-.067-.322.065-.135.136-.157.24-.069.328l1.086 1.092-1.064 1.064-.007.007c-.026.025-.065.063-.065.125-.001.063.042.139.126.223.07.071.138.107.2.107.069 0 .114-.045.139-.07l1.068-1.067 1.09 1.092a.162.162 0 0 0 .115.045h.002c.069 0 .142-.04.217-.118.122-.129.143-.236.06-.319z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "500px" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class FiveHundredPx extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5, create_fragment$5, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/AFrame.svelte generated by Svelte v3.23.2 */

        function create_fragment$6(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.37 17.07H6.57L4.24 24H3.01l8.23-24h1.52l8.23 24h-1.3zm-.39-1.13l-5-14.96-5.03 14.98h10.03Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "A-Frame" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class AFrame extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6, create_fragment$6, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Abbrobotstudio.svelte generated by Svelte v3.23.2 */

        function create_fragment$7(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 12.46a9.6 9.6 0 01-19.2 0h1.07a8.53 8.53 0 108.53-8.53V2.86a9.6 9.6 0 019.6 9.6zm-9.6-3.2a3.2 3.2 0 103.2 3.2 3.2 3.2 0 00-3.2-3.2zm-2 0l-.6-6.67-2.46 1.92-1.46-1.44a4.67 4.67 0 00-5.62-.37L.24 4a.54.54 0 00-.15.74.54.54 0 00.74.15l2-1.31a3.64 3.64 0 014.29.22l1.37 1.38L6.2 7z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ABB RobotStudio" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Abbrobotstudio extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7, create_fragment$7, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Abletonlive.svelte generated by Svelte v3.23.2 */

        function create_fragment$8(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 6.4v11.2h1.6V6.4zm3.2 0v11.2h1.6V6.4zm3.2 0v11.2H8V6.4zm3.2 0v11.2h1.6V6.4zm3.2 0V8H24V6.4zm0 3.2v1.6H24V9.6zm0 3.2v1.6H24v-1.6zm0 3.2v1.6H24V16z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ableton Live" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Abletonlive extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8, create_fragment$8, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/AboutDotMe.svelte generated by Svelte v3.23.2 */

        function create_fragment$9(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.536 9.15c-1.373 0-2.133 1.014-2.294 2.116h4.608c-.125-1.05-.867-2.115-2.314-2.115m-2.26 3.617c.235 1.156 1.193 1.97 2.532 1.97.725 0 1.77-.27 2.384-.914l1.175 1.35c-1.064 1.11-2.653 1.426-3.74 1.426-2.64 0-4.697-1.906-4.697-4.606 0-2.535 1.894-4.62 4.57-4.62 2.585 0 4.5 1.98 4.5 4.604v.766h-6.723v.023zm-6.487 3.83v-5.69c0-.976-.435-1.536-1.338-1.536-.814 0-1.355.585-1.717 1.007v6.24h-2.35v-5.7c0-.976-.415-1.532-1.318-1.532-.813 0-1.375.586-1.717 1.006v6.24H0V7.508h2.35v1.15c.4-.464 1.302-1.26 2.71-1.26 1.247 0 2.096.525 2.477 1.59.524-.762 1.5-1.59 2.91-1.59 1.7 0 2.69 1.01 2.69 2.962v6.24h-2.353l.005-.006z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "About.me" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class AboutDotMe extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9, create_fragment$9, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Abstract.svelte generated by Svelte v3.23.2 */

        function create_fragment$a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0c9.601 0 12 2.399 12 12 0 9.601-2.399 12-12 12-9.601 0-12-2.399-12-12C0 2.399 2.399 0 12 0zm-1.969 18.564c2.524.003 4.604-2.07 4.609-4.595 0-2.521-2.074-4.595-4.595-4.595S5.45 11.449 5.45 13.969c0 2.516 2.065 4.588 4.581 4.595zm8.344-.189V5.625H5.625v2.247h10.498v10.503h2.252zm-8.344-6.748a2.343 2.343 0 11-.002 4.686 2.343 2.343 0 01.002-4.686z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Abstract" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Abstract extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a, create_fragment$a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Academia.svelte generated by Svelte v3.23.2 */

        function create_fragment$b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.033,21.18L13.77,0.459H7.869l1.049,2.623L1.836,21.18C1.574,22.098,0.787,22.23,0,22.361v1.18 h6.82v-1.18l0,0l0,0l0,0l0,0C4.984,22.23,3.934,21.967,4.721,20c0.131-0.131,0.656-1.574,1.311-3.41h8.393l1.18,3.016 c0.131,0.525,0.262,0.918,0.262,1.311c0,1.049-0.918,1.443-2.623,1.443v1.18H24v-1.18C23.082,22.23,22.295,21.967,22.033,21.18z M6.82,14.361c1.311-3.279,2.754-7.082,3.279-8.525l3.41,8.525H6.82z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Academia" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Academia extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b, create_fragment$b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Accusoft.svelte generated by Svelte v3.23.2 */

        function create_fragment$c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.078,16.345c-0.209-0.261-8.709-11.13-9.005-11.496 c-0.279-0.366-0.209-0.47-0.157-0.523c0.105-0.122,0.261-0.105,0.871-0.105c0.366,0,3.989-0.017,4.372-0.017 c0.784,0,0.906,0.07,0.993,0.087c0.087,0.035,0.296,0.209,0.453,0.383c0.087,0.105,7.699,9.214,7.768,9.301 c0.087,0.105,0.209,0.279,0.314,0.435c0.087,0.157,0.105,0.366-0.035,0.453c-0.087,0.052-4.302,1.794-4.424,1.829 c-0.122,0.052-0.348,0.139-0.523,0.105C18.618,16.798,18.357,16.676,18.078,16.345 M22.38,16.136l0.314,0.052 c0,0,1.01,0.192,1.115,0.226C23.913,16.432,24,16.519,24,16.554c0,0.087-0.052,0.122-0.139,0.174 c-0.07,0.052-4.633,2.856-4.72,2.909c-0.087,0.052-0.192,0.105-0.435,0.139c-0.453,0.087-1.306-0.157-1.585-0.209 c-0.261-0.052-11.461-2.543-11.548-2.578c-0.105-0.035-0.174-0.035-0.174-0.139c-0.017-0.157,0.226-0.209,0.418-0.279 c0.192-0.07,5.452-1.968,5.643-2.055c0.192-0.087,0.418-0.105,0.54-0.105s0.853,0.105,1.184,0.157s1.271,0.192,1.271,0.192 l2.142,2.769c0.366,0.435,0.61,0.61,0.923,0.627c0.157,0.017,0.331-0.035,0.453-0.087C18.061,18.035,22.38,16.136,22.38,16.136 M10.153,9.343c0,0,1.846,2.369,1.864,2.386c0.017,0.035,0.035,0.07,0.07,0.087v0.035c-0.07,0.052-3.362,3.1-3.379,3.118 l-3.466,1.271c0,0-0.105,0.035-0.157,0.07c-0.052,0.035-0.122,0.105-0.105,0.261c0,0.052,0.017,0.853,0.035,1.045 c-0.017,0.017,0,0-0.017,0.017c0,0-4.267,1.359-4.302,1.359c-0.209,0.07-0.61,0.209-0.662,0.174 c-0.087-0.07,0.017-0.174,0.07-0.244c0.052-0.07,8.796-8.674,9.127-9.022C9.7,9.395,10.153,9.343,10.153,9.343");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Accusoft" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Accusoft extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c, create_fragment$c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Acm.svelte generated by Svelte v3.23.2 */

        function create_fragment$d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.435 12.25c-.08.025-.15.072-.202.135-.048.072-.073.158-.07.245 0 .15.038.252.12.308.077.056.194.082.352.082.087 0 .174-.02.264-.06.09-.038.174-.095.245-.165v-.66c-.168.015-.303.03-.405.045-.105.01-.207.034-.305.07zM12 0L0 12l12 12 12-12L12 0zm0 19.357C7.938 19.355 4.645 16.063 4.643 12 4.645 7.938 7.938 4.644 12 4.642c4.063.002 7.355 3.295 7.357 7.358-.002 4.063-3.294 7.355-7.357 7.357zM12 5.377v.002c-3.654 0-6.62 2.966-6.62 6.62s2.966 6.62 6.62 6.62 6.62-2.966 6.62-6.62c0-3.656-2.964-6.62-6.62-6.623zm-2.862 8.246h-.995v-.336l-.182.154c-.142.108-.304.188-.477.233-.082.02-.202.035-.352.035-.262.007-.515-.097-.698-.285-.187-.19-.277-.426-.277-.716 0-.238.046-.427.14-.574.1-.15.24-.27.405-.348.205-.09.423-.152.646-.18.25-.033.516-.06.803-.078v-.017c0-.176-.066-.297-.196-.363-.13-.07-.322-.102-.58-.102-.117 0-.254.02-.41.063-.158.044-.308.1-.458.164H6.42v-.77c.097-.03.256-.062.48-.1.217-.04.438-.06.663-.06.55 0 .95.092 1.2.276.25.183.375.462.375.837v2.168zm3.22-.167c-.07.028-.134.056-.2.086-.074.03-.15.058-.23.08-.094.024-.186.044-.27.06-.084.014-.196.022-.336.022-.263 0-.506-.033-.723-.1-.21-.062-.406-.165-.57-.307-.163-.142-.292-.32-.373-.52-.09-.21-.135-.457-.135-.738-.008-.27.042-.535.146-.78.09-.204.224-.384.392-.53.165-.134.355-.233.56-.29.22-.066.447-.096.675-.096.37 0 .732.087 1.06.255v.854h-.127c-.048-.043-.096-.085-.147-.124-.06-.048-.122-.09-.188-.126-.167-.095-.357-.144-.55-.14-.254 0-.45.086-.59.263-.138.177-.21.414-.21.714 0 .32.075.56.225.715.15.157.347.235.592.235.11 0 .222-.013.33-.042.153-.043.295-.12.415-.225.048-.04.088-.082.123-.11h.13v.843zm4.333.173v-1.597c0-.157 0-.29-.007-.397-.002-.09-.02-.18-.052-.263-.023-.066-.07-.12-.13-.15-.153-.064-.325-.063-.478.002-.086.04-.168.087-.244.14v2.263h-.993v-1.595c0-.156-.003-.286-.01-.396-.003-.09-.02-.18-.05-.264-.027-.066-.076-.12-.136-.15-.06-.033-.145-.048-.25-.048-.083 0-.165.02-.24.056-.078.04-.152.086-.228.136v2.262h-.995V10.44h.993v.356c.144-.125.296-.233.46-.323.148-.08.314-.12.484-.12.182-.004.36.045.514.14.153.1.27.244.34.414.19-.177.37-.314.54-.41.17-.096.34-.145.515-.145.136-.002.27.023.396.075.115.044.22.116.3.21.09.106.16.23.2.364.045.142.066.328.066.553v2.076h-.995z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ACM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Acm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d, create_fragment$d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Actigraph.svelte generated by Svelte v3.23.2 */

        function create_fragment$e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.043 0c.413 0 .83.266 1.054.546.224.28.191.342.21.529.018.187.16.265.16.62s-.16.494-.272.644c-.112.15-.047.2-.14.406-.094.206-.118.168-.193.336-.075.168.123.462.319.61.196.147.378.262.938.318.56.056.683.03.963.05.28.018.453.174.882.23.43.056.449 0 .803 0 .355 0 .462.053.78.053.317 0 .75-.14 1.141-.122.393.018 1.43.115 1.86.115.43 0 .931-.442 1.38-.423.448.018.832.119.85.455.019.336-.165.762-.37.837-.206.074-.609-.067-.852-.067-.242 0-.496.03-.606.025-.133-.007-.232-.09-.381-.053-.15.038-.76.297-.984.315-.224.02-.689-.034-.875.003-.187.038-.822.15-1.083.168-.262.02-.786-.02-1.029.018-.243.037-.615.113-.839.113-.224 0-.702-.172-.866-.054-.397.288-.336.683-.532 1.247-.187.538-.488.88-.525 1.29-.038.412.224 1.738.355 2.205.13.467.504 1.083.747 1.848.242.766.58 2.31.711 2.945.131.635.004.62.11.977.108.362.616.934.878 1.83.261.896.547 2.744.64 3.23.094.485.135.558.172.707.037.15-.045.214.039.35.378.613.848.849.792 1.222-.056.374-.652.513-1.083.448-.326-.048-.523-.672-.597-.859-.075-.186.003-.239-.072-.37-.075-.13-.089-.199-.126-.535-.037-.336.016-.36-.039-.582-.294-1.197-1.144-2.367-1.35-3.07-.117-.393-.049-.444-.124-.799-.074-.355-2.402-5.42-2.883-5.42-.496 0-2.783 5.006-2.877 5.323-.093.318-.04.638-.133.899s-1.208 2.388-1.36 3.042c-.1.428-.012.556-.068.8-.056.242-.266 1.303-.659 1.509-.392.205-1.086.046-1.178-.292-.142-.52.678-.906.765-1.382.076-.41.804-4.165 1.102-4.893.299-.728.486-.654.616-1.064.042-.13.043-.514.113-.945.153-.934.433-2.294.765-3.201.486-1.326 1.157-2.611 1.032-3.893-.053-.539-.23-.606-.417-1.222-.187-.616-.428-1.347-.67-1.384-.244-.037-.449.093-.748.093s-.896-.13-1.12-.13c-.224 0-.992-.05-1.31-.05-.318 0-.54-.081-.726-.063-.187.02-.36.007-.584.007-.28 0-1.017-.34-1.204-.34-.187 0-.245.036-.413.036-.168 0-.325-.063-.512-.063-.186 0-.532.108-.71.108-.186 0-.54-.419-.484-.886.056-.466.805-.42.991-.42.263 0 .889.355 1.131.392.243.038 1.538-.101 1.818-.101s1.08.126 1.509.126c.43 0 1.014.01 1.369-.046s.68-.244.903-.262c.224-.019 1.238.091 1.807-.306.375-.261.411-.486.392-.654-.018-.168-.14-.192-.234-.36-.094-.168-.053-.305-.109-.417-.056-.112-.269-.212-.273-.623-.004-.322.035-.278.147-.596.112-.317.116-.451.378-.707.19-.184.575-.371.988-.371");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ActiGraph" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Actigraph extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$e, create_fragment$e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Activision.svelte generated by Svelte v3.23.2 */

        function create_fragment$f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.88 8.91L0 14.284h.985l.27-.718h1.252l.269.718h.985zm3.224.359l-.537.984h2.15v4.03H7.7v-4.03h1.522l1.882 4.837 1.791-4.837h4.567l-.537-.984H12.18l-1.074 2.865L9.94 9.269zm16.21 1.163v3.762h.986v-1.523l1.7 1.702v-3.76h-.896v1.342zm-15.94.09c-1.075 0-1.881.807-1.881 1.881 0 1.075.806 1.88 1.88 1.88.448 0 .895-.179 1.164-.447L6 12.94c-.18.18-.358.27-.627.27a.897.897 0 0 1-.895-.896c0-.448.358-.896.895-.896.18 0 .448.089.537.268l.627-.715c-.27-.269-.716-.448-1.164-.448zm7.522 0v3.672h.985v-3.671zm2.148 0c-.358 0-.804.18-.804.896 0 .896 1.074 1.433.985 1.792-.09.179-.27.178-.359.178h-.626v.806h1.074c.448 0 .895-.269.895-.806 0-.985-1.253-1.611-.984-1.97 0-.09.178-.09.178-.09h.628v-.805zm1.255 0v3.672h.984v-3.671zm3.045 0c-1.075 0-1.88.807-1.88 1.881 0 .985.805 1.88 1.88 1.88 1.074 0 1.88-.805 1.88-1.88 0-1.074-.806-1.88-1.88-1.88zm-11.016.09v3.672h.986v-3.672zm11.016.896c.448 0 .895.358.895.895a.897.897 0 0 1-.895.896c-.538 0-.985-.358-.896-.896 0-.448.358-.895.896-.895zm-17.464.178l.27.896h-.54z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Activision" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Activision extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$f, create_fragment$f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adblock.svelte generated by Svelte v3.23.2 */

        function create_fragment$g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.775 0a1.8 1.8 0 0 0-1.273.527L.528 6.503A1.8 1.8 0 0 0 0 7.775v8.45c0 .478.19.936.528 1.274l5.974 5.974A1.8 1.8 0 0 0 7.775 24h8.45a1.8 1.8 0 0 0 1.273-.527l5.975-5.974A1.8 1.8 0 0 0 24 16.225v-8.45a1.8 1.8 0 0 0-.527-1.272L17.498.527A1.8 1.8 0 0 0 16.225 0zm4.427 3c1.02 0 .958 1.108.958 1.108v6.784s-.009.218.16.218c.188 0 .175-.226.175-.226l-.002-5.63s-.05-.986.959-.986c1.01 0 .97.983.97.983v7.621s.014.158.141.158c.127 0 .944-2.122.944-2.122s.451-1.497 2.576-1.1c.038.008-.167.688-.167.688l-2.283 6.556S15.69 20.7 11.714 20.7c-5.044 0-4.808-5.407-4.814-5.405V7.562s-.016-.99.897-.99c.858 0 .849.99.849.99l.007 3.583s-.004.172.167.172c.16 0 .141-.172.141-.172l.01-5.926s-.055-1.162.966-1.162c1.04 0 .983 1.142.983 1.142v5.611s-.005.204.152.204c.168 0 .154-.206.154-.206l.01-6.693S11.18 3 12.202 3Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AdBlock" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adblock extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$g, create_fragment$g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adblockplus.svelte generated by Svelte v3.23.2 */

        function create_fragment$h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.027 0L0 7.027v9.941L7.027 24h9.941L24 16.968v-9.94L16.973 0zm.202.48h9.542l6.749 6.749v9.542l-6.749 6.749H7.23L.48 16.771V7.23zm.557 1.344L1.824 7.786v8.428l5.962 5.962h8.428l5.962-5.962V7.786l-5.962-5.962zM4.396 7.68H6.38l2.285 8.41H6.917l-.447-2.002H4.238l-.446 1.997h-1.68zm5.3 0h2.491c.355-.005.71.029 1.061.096.302.058.595.173.85.34.24.164.436.385.57.644.14.269.207.605.207 1.008 0 .192-.024.384-.072.566-.048.188-.12.365-.216.528-.1.168-.23.317-.379.437-.163.13-.35.226-.547.283v.053c.523.11.917.327 1.18.643.265.317.399.759.399 1.33 0 .432-.072.802-.216 1.109-.14.302-.346.561-.605.768-.269.206-.576.36-.902.451-.36.1-.735.154-1.109.149H9.696zm6.667 0h2.669c.374-.005.749.043 1.114.134.33.082.643.236.907.452.269.225.48.513.61.84.148.345.225.772.225 1.281 0 .49-.077.917-.23 1.277-.14.34-.35.643-.624.888a2.553 2.553 0 0 1-.908.518 3.551 3.551 0 0 1-1.099.168H18.01v2.852h-1.647zM5.328 9.125c-.091.446-.182.907-.274 1.373-.09.465-.192.912-.297 1.334l-.178.773h1.555l-.168-.773a31.5 31.5 0 0 1-.302-1.34 55.623 55.623 0 0 0-.293-1.367zm6.005.029v1.92h.773c.403 0 .696-.092.878-.279.182-.187.274-.437.274-.753 0-.317-.092-.548-.279-.682-.187-.134-.475-.206-.864-.206zm6.681.038v2.54h.917c.898 0 1.344-.447 1.344-1.34 0-.437-.115-.749-.34-.931-.226-.183-.562-.269-1.004-.269zm-6.681 3.22v2.204h.931c.902 0 1.354-.384 1.354-1.147 0-.37-.11-.639-.336-.807-.226-.168-.562-.25-1.018-.25z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adblock Plus" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adblockplus extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$h, create_fragment$h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Addthis.svelte generated by Svelte v3.23.2 */

        function create_fragment$i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18 13.496h-4.501v4.484h-3v-4.484H6v-2.99h4.5V6.021h3.001v4.485H18v2.99zM21 .041H3C1.348.043.008 1.379 0 3.031v17.94c.008 1.65 1.348 2.986 3 2.988h18c1.651-.002 2.991-1.338 3-2.988V3.031c-.009-1.652-1.348-2.987-3-2.99z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AddThis" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Addthis extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$i, create_fragment$i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adguard.svelte generated by Svelte v3.23.2 */

        function create_fragment$j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C8.519 0 4.426.828.931 2.628l-.545.279v.616c0 3.711.071 13.613 11.101 20.169L12 24l.513-.308c11.03-6.556 11.1-16.458 11.1-20.17v-.608l-.538-.282C19.622.825 15.481 0 12 0zm0 2.012c2.978 0 6.584.763 9.576 2.197-.008 3.888-.418 11.543-9.576 17.33-9.158-5.787-9.569-13.442-9.576-17.33C5.46 2.77 9.022 2.012 12 2.012zm5.035 5.565c-.26.008-.484.173-.61.299l-5.38 5.58-2.012-2.413c-.955-1.106-2.262-.251-2.564-.05l4.677 5.43 6.385-8.648a.7.7 0 00-.496-.198z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AdGuard" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adguard extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$j, create_fragment$j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobe.svelte generated by Svelte v3.23.2 */

        function create_fragment$k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobe extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$k, create_fragment$k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobeacrobatreader.svelte generated by Svelte v3.23.2 */

        function create_fragment$l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.63 15.3c-.71-.745-2.166-1.17-4.224-1.17-1.1 0-2.377.106-3.761.354a19.443 19.443 0 0 1-2.307-2.661c-.532-.71-.994-1.49-1.42-2.236.817-2.484 1.207-4.507 1.207-5.962 0-1.632-.603-3.336-2.342-3.336-.532 0-1.065.32-1.349.781-.78 1.384-.425 4.4.923 7.381a60.277 60.277 0 0 1-1.703 4.507c-.568 1.349-1.207 2.733-1.917 4.01C2.834 18.53.314 20.34.03 21.758c-.106.533.071 1.03.462 1.42.142.107.639.533 1.49.533 2.59 0 5.323-4.188 6.707-6.707 1.065-.355 2.13-.71 3.194-.994a34.963 34.963 0 0 1 3.407-.745c2.732 2.448 5.145 2.839 6.352 2.839 1.49 0 2.023-.604 2.2-1.1.32-.64.106-1.349-.213-1.704zm-1.42 1.03c-.107.532-.64.887-1.384.887-.213 0-.39-.036-.604-.071-1.348-.32-2.626-.994-3.903-2.059a17.717 17.717 0 0 1 2.98-.248c.746 0 1.385.035 1.81.142.497.106 1.278.426 1.1 1.348zm-7.524-1.668a38.01 38.01 0 0 0-2.945.674 39.68 39.68 0 0 0-2.52.745 40.05 40.05 0 0 0 1.207-2.555c.426-.994.78-2.023 1.136-2.981.354.603.745 1.207 1.135 1.739a50.127 50.127 0 0 0 1.987 2.378zM10.038 1.46a.768.768 0 0 1 .674-.425c.745 0 .887.851.887 1.526 0 1.135-.355 2.874-.958 4.861-1.03-2.768-1.1-5.074-.603-5.962zM6.134 17.997c-1.81 2.981-3.549 4.826-4.613 4.826a.872.872 0 0 1-.532-.177c-.213-.213-.32-.461-.249-.745.213-1.065 2.271-2.555 5.394-3.904Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Acrobat Reader" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobeacrobatreader extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$l, create_fragment$l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobeaftereffects.svelte generated by Svelte v3.23.2 */

        function create_fragment$m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.54 10.73c-.1-.31-.19-.61-.29-.92s-.19-.6-.27-.89c-.08-.28-.15-.54-.22-.78h-.02c-.09.43-.2.86-.34 1.29-.15.48-.3.98-.46 1.48-.13.51-.29.98-.44 1.4h2.54c-.06-.21-.14-.46-.23-.72-.09-.27-.18-.56-.27-.86zm8.58-.29c-.55-.03-1.07.26-1.33.76-.12.23-.19.47-.22.72h2.109c.26 0 .45 0 .57-.01.08-.01.16-.03.23-.08v-.1c0-.13-.021-.25-.061-.37-.178-.56-.708-.94-1.298-.92zM19.75.3H4.25C1.9.3 0 2.2 0 4.55v14.9c0 2.35 1.9 4.25 4.25 4.25h15.5c2.35 0 4.25-1.9 4.25-4.25V4.55C24 2.2 22.1.3 19.75.3zm-7.04 16.511h-2.09c-.07.01-.14-.041-.16-.11l-.82-2.4H5.92l-.76 2.36c-.02.09-.1.15-.19.14H3.09c-.11 0-.14-.06-.11-.18L6.2 7.39c.03-.1.06-.19.1-.31.04-.21.06-.43.06-.65-.01-.05.03-.1.08-.11h2.59c.07 0 .12.03.13.08l3.65 10.25c.03.11.001.161-.1.161zm7.851-3.991c-.021.189-.031.33-.041.42-.01.07-.069.13-.14.13-.06 0-.17.01-.33.021-.159.02-.35.029-.579.029-.23 0-.471-.04-.73-.04h-3.17c.039.31.14.62.31.89.181.271.431.48.729.601.4.17.841.26 1.281.25.35-.011.699-.04 1.039-.11.311-.039.61-.119.891-.23.05-.039.08-.02.08.08v1.531c0 .039-.01.08-.021.119-.021.03-.04.051-.069.07-.32.14-.65.24-1 .3-.471.09-.94.13-1.42.12-.761 0-1.4-.12-1.92-.35-.49-.211-.921-.541-1.261-.95-.319-.39-.55-.83-.69-1.31-.14-.471-.209-.961-.209-1.461 0-.539.08-1.07.25-1.59.16-.5.41-.96.75-1.37.33-.4.739-.72 1.209-.95.471-.23 1.03-.31 1.67-.31.531-.01 1.06.09 1.55.31.41.18.77.45 1.05.8.26.34.47.72.601 1.14.129.4.189.81.189 1.22 0 .24-.01.45-.019.64z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe After Effects" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobeaftereffects extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$m, create_fragment$m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobeaudition.svelte generated by Svelte v3.23.2 */

        function create_fragment$n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.75.3H4.25C1.9.3 0 2.2 0 4.55v14.9c0 2.35 1.9 4.25 4.25 4.25h15.5c2.35 0 4.25-1.9 4.25-4.25V4.55C24 2.2 22.1.3 19.75.3zM12.5 16.8h-2.09c-.07.011-.14-.04-.16-.11l-.82-2.39H5.71l-.76 2.36c-.02.09-.1.15-.19.14H2.88c-.11 0-.14-.06-.11-.18l3.22-9.24c.03-.1.06-.21.1-.33.05-.21.08-.42.08-.64-.01-.05.03-.1.08-.11h2.59c.07 0 .12.03.13.08l3.63 10.261c.03.109 0 .159-.1.159zm7.75.011h-1.721c-.079.01-.159-.041-.189-.11-.02-.08-.04-.171-.061-.25-.02-.07-.02-.14-.02-.21-.32.289-.71.5-1.13.619-.36.101-.739.15-1.11.15-.369 0-.74-.05-1.09-.17-.32-.109-.619-.3-.85-.55-.26-.28-.45-.61-.561-.97-.14-.461-.209-.94-.199-1.42V8.94c-.01-.06.029-.12.1-.13h1.939c.061-.01.121.03.131.1v4.731c0 .439.1.789.289 1.039.191.25.58.381 1.031.381.229 0 .459-.041.68-.121.23-.08.439-.189.63-.33V8.92c0-.07.05-.11.14-.11h1.91c.051-.01.109.03.109.08v6.16c0 .271 0 .511.011.72.01.211.021.391.03.551.02.16.029.25.039.359.012.09-.028.131-.108.131zM8.33 10.73c-.1-.31-.19-.61-.29-.92s-.19-.6-.27-.89c-.08-.28-.15-.54-.22-.78h-.02c-.09.43-.2.86-.34 1.29-.15.48-.3.98-.46 1.48-.13.51-.29.98-.44 1.4h2.54c-.06-.21-.14-.46-.23-.72-.09-.27-.18-.56-.27-.86z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Audition" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobeaudition extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$n, create_fragment$n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobecreativecloud.svelte generated by Svelte v3.23.2 */

        function create_fragment$o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.782 3.153c-.231.02-.472.04-.703.07a8.453 8.453 0 0 0-2.832.834 8.951 8.951 0 0 0-2.46 1.777c-.03.04-.09.06-.141.05a7.44 7.44 0 0 0-1.496-.07 7.424 7.424 0 0 0-2.932.763c-1.768.884-3.013 2.26-3.736 4.108a7.089 7.089 0 0 0-.462 2.139c0 .05-.01.09-.02.13v.773c.02.201.05.392.07.593.1.813.332 1.596.703 2.33.824 1.646 2.089 2.851 3.786 3.594a7.127 7.127 0 0 0 2.45.593c.032 0 .06.004.086.01h8.576c.183-.017.362-.035.547-.06a8.344 8.344 0 0 0 2.811-.834 8.836 8.836 0 0 0 3.646-3.304 8.187 8.187 0 0 0 1.184-3.093c.05-.34.08-.692.121-1.034 0-.05.01-.09.02-.13v-.794c-.02-.23-.05-.452-.05-.662a8.345 8.345 0 0 0-.834-2.812 8.952 8.952 0 0 0-3.324-3.645 8.245 8.245 0 0 0-3.072-1.175c-.362-.06-.713-.09-1.075-.13-.05 0-.09-.01-.14-.02zm.369 1.693c2.126.005 3.93.826 5.395 2.455a6.93 6.93 0 0 1 1.616 3.323c.15.764.181 1.547.07 2.32-.19 1.346-.702 2.55-1.576 3.605a7.082 7.082 0 0 1-3.997 2.45 7.297 7.297 0 0 1-2.56.1c-1.095-.14-2.099-.501-3.003-1.154a5.2 5.2 0 0 1-.672-.573c-1.226-1.205-2.44-2.42-3.666-3.625-.301-.3-.321-.632-.18-.934a.822.822 0 0 1 .863-.472c.21.02.372.141.522.292 1.105 1.114 2.2 2.209 3.304 3.324a5.263 5.263 0 0 0 3.093 1.536c1.948.261 3.605-.341 4.92-1.798.713-.793 1.145-1.747 1.326-2.811.26-1.587-.11-3.013-1.095-4.268-.873-1.115-2.018-1.808-3.404-2.059-1.416-.25-2.751.02-3.966.794-.03.02-.1.03-.131.01a9.04 9.04 0 0 0-1.406-.854s-.01-.01-.02-.03a6.603 6.603 0 0 1 1.255-.823 6.646 6.646 0 0 1 2.641-.784 8.45 8.45 0 0 1 .67-.024zM7.546 7.509c1.455-.024 2.791.525 3.982 1.63.854.802 1.637 1.636 2.46 2.47.231.23.281.522.171.833-.11.311-.362.462-.683.512a.722.722 0 0 1-.632-.23c-.784-.784-1.567-1.557-2.34-2.35-.633-.653-1.386-1.025-2.27-1.186-1.958-.351-3.936.784-4.639 2.641-.904 2.36.522 5.031 2.982 5.594.482.11.995.11 1.497.1.14-.01.22.04.32.13.483.473.995.945 1.497 1.416.03.03.07.06.1.09-.06 0-.1.01-.14.01h-2.3a5.833 5.833 0 0 1-5.693-4.568c-.653-2.942 1.034-5.925 3.926-6.798a6.33 6.33 0 0 1 1.762-.294Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Creative Cloud" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobecreativecloud extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$o, create_fragment$o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobedreamweaver.svelte generated by Svelte v3.23.2 */

        function create_fragment$p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.69 8.4c-.43-.13-.87-.2-1.32-.19-.2 0-.37 0-.51.01-.14 0-.3.01-.47.02v6.67c.11 0 .21 0 .31.01.09.01.19.01.28.02.1.011.21.011.33.011.46.01.92-.07 1.36-.229.4-.141.75-.371 1.05-.681.3-.319.53-.7.67-1.11.16-.479.24-.99.24-1.5.01-.48-.07-.96-.23-1.41C8.12 9.24 7.49 8.64 6.69 8.4zM19.75.3H4.25C1.9.3 0 2.2 0 4.55v14.9c0 2.35 1.9 4.25 4.25 4.25h15.5c2.35 0 4.25-1.9 4.25-4.25V4.55C24 2.2 22.1.3 19.75.3zm-9.24 13.13c-.19.561-.48 1.08-.86 1.541-.35.42-.77.779-1.23 1.069-.45.28-.95.489-1.47.63-.5.13-1.02.2-1.54.2H4.28c-.4 0-.78 0-1.12-.011-.35-.01-.61-.01-.78-.02-.07 0-.1-.061-.1-.16V6.44c-.01-.06.04-.12.1-.13h.01c.15-.01.38-.02.67-.02.3-.01.64-.01 1.04-.02s.82-.01 1.27-.01c1.22 0 2.24.22 3.04.66.77.41 1.4 1.04 1.81 1.81.4.77.6 1.65.6 2.65.01.7-.09 1.39-.31 2.05zm9.42 3.24c-.01.04-.029.08-.06.109 0 .051-.04.07-.091.061H17.91c-.04.01-.09-.01-.12-.04-.03-.04-.05-.079-.06-.12-.19-.8-.351-1.52-.48-2.13-.13-.62-.24-1.14-.32-1.569-.08-.431-.15-.791-.209-1.09-.051-.3-.101-.55-.131-.76h-.01c-.1.44-.189.87-.28 1.28-.079.41-.18.83-.28 1.25-.1.42-.209.88-.34 1.38-.119.5-.26 1.05-.41 1.64-.02.11-.069.16-.16.16h-1.87c-.051.01-.1-.01-.141-.029-.029-.031-.05-.07-.07-.11L11.08 8.97c-.03-.09.01-.13.12-.13h1.89c.09 0 .141.03.15.1.199.88.369 1.64.5 2.28.13.64.24 1.18.31 1.629.07.45.14.82.19 1.101.05.28.09.521.119.7h.031c.02-.16.039-.311.069-.471.04-.189.09-.439.149-.75.061-.31.131-.67.221-1.09s.189-.9.311-1.46c.109-.55.27-1.18.459-1.89 0-.04.021-.09.041-.13.01-.02.049-.03.109-.03h1.96c.06 0 .09.04.101.11.17.73.31 1.37.43 1.92.109.55.21 1.04.3 1.47.08.42.149.79.19 1.09.039.311.09.561.129.77.031.17.061.34.07.511h.03c.05-.2.09-.44.13-.71.04-.271.09-.57.16-.91.061-.34.13-.71.21-1.12.069-.41.17-.86.28-1.37.109-.5.23-1.05.369-1.64.021-.09.061-.13.131-.13h1.75c.09 0 .119.05.1.14l-2.159 7.71z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Dreamweaver" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobedreamweaver extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$p, create_fragment$p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobefonts.svelte generated by Svelte v3.23.2 */

        function create_fragment$q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.272 10.083c-.531 1.828-.977 3.588-1.508 5.31a9.623 9.623 0 0 1-1.052 2.488 2.952 2.952 0 0 1-2.351 1.294c-.73 0-1.45-.35-1.45-1.138a1.007 1.007 0 0 1 .872-.943.44.44 0 0 1 .398.233c.36.662.701 1.05.863 1.05.16 0 .285-.224.55-1.177l1.887-7.117h-1.347a.699.699 0 0 1 .218-.768h1.346a12.251 12.251 0 0 1 .996-2.49c.644-1.195 1.677-2.139 3.1-2.139 1.08 0 1.526.535 1.526 1.206a1.109 1.109 0 0 1-.92 1.089c-.227 0-.34-.175-.417-.429-.246-.943-.56-1.225-.749-1.225-.19 0-.476.35-.787 1.09a18.332 18.332 0 0 0-.948 2.888h1.64a.66.66 0 0 1-.227.768h-1.64zM0 .553v22.893h24V.554H0zm1.12.953h21.928v20.988H1.12Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Fonts" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobefonts extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$q, create_fragment$q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobeillustrator.svelte generated by Svelte v3.23.2 */

        function create_fragment$r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.53 10.73c-.1-.31-.19-.61-.29-.92-.1-.31-.19-.6-.27-.89-.08-.28-.15-.54-.22-.78h-.02c-.09.43-.2.86-.34 1.29-.15.48-.3.98-.46 1.48-.14.51-.29.98-.44 1.4h2.54c-.06-.211-.14-.46-.23-.721-.09-.269-.18-.559-.27-.859zM19.75.3H4.25C1.9.3 0 2.2 0 4.55v14.9c0 2.35 1.9 4.25 4.25 4.25h15.5c2.35 0 4.25-1.9 4.25-4.25V4.55C24 2.2 22.1.3 19.75.3zM14.7 16.83h-2.091c-.069.01-.139-.04-.159-.11l-.82-2.38H7.91l-.76 2.35c-.02.09-.1.15-.19.141H5.08c-.11 0-.14-.061-.11-.18L8.19 7.38c.03-.1.06-.21.1-.33.04-.21.06-.43.06-.65-.01-.05.03-.1.08-.11h2.59c.08 0 .12.03.13.08l3.65 10.3c.03.109 0 .16-.1.16zm3.4-.15c0 .11-.039.16-.129.16H16.01c-.1 0-.15-.061-.15-.16v-7.7c0-.1.041-.14.131-.14h1.98c.09 0 .129.05.129.14v7.7zm-.209-9.03c-.231.24-.571.37-.911.35-.33.01-.65-.12-.891-.35-.23-.25-.35-.58-.34-.92-.01-.34.12-.66.359-.89.242-.23.562-.35.892-.35.391 0 .689.12.91.35.22.24.34.56.33.89.01.34-.11.67-.349.92z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Illustrator" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobeillustrator extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$r, create_fragment$r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobeindesign.svelte generated by Svelte v3.23.2 */

        function create_fragment$s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 .3v23.4h24V.3H0zm1 1h22v21.4H1V1.3zm7.775 15.218c0 .1-.017.132-.132.132H7.107c-.1 0-.132-.05-.132-.132V5.782c0-.1.05-.132.132-.132H8.66c.082 0 .115.033.115.116v10.752zm1.77-3.872c0-2.393 1.578-4.257 4.102-4.257.214 0 .33 0 .528.015V5.75c0-.066.05-.1.1-.1H16.9c.084 0 .1.034.1.084v9.355c0 .28 0 .625.05 1.004 0 .066-.02.083-.087.116-.858.413-1.766.595-2.624.595-2.213 0-3.797-1.37-3.797-4.158zm4.63-2.624c-.148-.066-.347-.1-.594-.1-1.285 0-2.187.99-2.187 2.64 0 1.882.918 2.64 2.073 2.64.247 0 .512-.032.71-.115v-5.065z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe InDesign" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobeindesign extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$s, create_fragment$s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobelightroomcc.svelte generated by Svelte v3.23.2 */

        function create_fragment$t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.75.3H4.25C1.9.3 0 2.2 0 4.55v14.9c0 2.35 1.9 4.25 4.25 4.25h15.5c2.35 0 4.25-1.9 4.25-4.25V4.55C24 2.2 22.1.3 19.75.3zm-6.99 16.389c0 .051-.029.09-.06.121-.03.02-.06.029-.101.029H6.26c-.11 0-.16-.061-.16-.18V6.44c-.01-.07.04-.13.11-.14h2c.05-.01.11.03.11.08v8.43h4.62c.101 0 .131.049.11.14l-.29 1.739zm6.25-7.859v1.95c0 .08-.05.11-.16.11-.649-.04-1.3.08-1.89.34-.2.09-.39.21-.54.37v5.1c0 .1-.04.14-.13.14h-1.95c-.08.01-.15-.04-.16-.119V11.14c0-.24 0-.49-.01-.75s-.01-.52-.02-.78c-.01-.22-.03-.44-.061-.66-.01-.05.02-.1.07-.11.01-.01.02-.01.04 0h1.75c.1 0 .18.07.21.16.04.07.07.15.08.23.02.1.039.21.05.31.01.11.021.23.021.36.299-.35.66-.64 1.069-.86.46-.25.97-.37 1.49-.36.069-.01.13.04.14.11.001.01.001.02.001.04z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Lightroom CC" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobelightroomcc extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$t, create_fragment$t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobelightroomclassic.svelte generated by Svelte v3.23.2 */

        function create_fragment$u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.75.3H4.25C1.9.3 0 2.2 0 4.55v14.9c0 2.35 1.9 4.25 4.25 4.25h15.5c2.35 0 4.25-1.9 4.25-4.25V4.55C24 2.2 22.1.3 19.75.3zM8.57 16.689c-.01.061-.03.101-.06.121-.03.02-.06.029-.09.029H2.71c-.1 0-.14-.061-.14-.18V6.44c0-.1.04-.14.13-.14h1.77c.07 0 .1.04.1.11v8.4h4.16c.09 0 .12.049.1.14l-.26 1.739zm5.6-5.919c0 .08-.05.11-.141.11-.319-.02-.639 0-.949.07-.26.06-.51.15-.75.27-.18.09-.35.22-.49.37v5.1c0 .101-.04.141-.12.141H9.98c-.1 0-.14-.051-.14-.16v-5.54c0-.24 0-.49-.01-.75 0-.26-.01-.52-.02-.78-.01-.221-.03-.441-.06-.661 0-.03 0-.06.02-.09.03-.01.05-.02.08-.01h1.58c.09 0 .15.05.19.16.03.07.06.15.07.23.02.1.03.21.04.31.01.11.01.23.01.36.26-.34.59-.64.96-.86.399-.24.87-.37 1.34-.36.09 0 .13.05.13.14v1.95zm7.2-1.61c.01.06-.021.11-.06.15-.041.02-.09.02-.131 0-.229-.12-.47-.2-.72-.24-.31-.06-.63-.08-.94-.08-.51-.01-1.02.12-1.459.38-.41.25-.73.62-.94 1.05-.229.5-.341 1.05-.33 1.6-.011.4.05.791.16 1.169.1.311.25.601.44.86.17.229.379.431.629.58.24.14.49.25.76.32.25.069.521.11.781.11.289 0 .58-.011.869-.041.24-.029.48-.09.7-.17.08-.06.13-.029.16-.01.04.04.06.1.05.15v1.49c.01.119-.05.22-.15.27-.26.1-.529.17-.81.2-.339.052-.679.072-1.029.072-.49 0-.99-.069-1.459-.199-.461-.12-.891-.33-1.271-.6-.38-.271-.71-.601-.979-.99-.291-.42-.5-.881-.641-1.371-.15-.58-.23-1.17-.221-1.759 0-.98.191-1.86.58-2.6.381-.73.951-1.34 1.66-1.75.711-.41 1.57-.62 2.551-.62.34 0 .68.02 1.02.06.23.03.46.08.67.17.08.05.12.14.11.24V9.16z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Lightroom Classic" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobelightroomclassic extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$u, create_fragment$u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobephonegap.svelte generated by Svelte v3.23.2 */

        function create_fragment$v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.463 15.549l-.856.061c0 .17.008.309.008.41.023 1.063.624 1.287 1.126 1.287.069 0 .115-.008.115-.008h.016l1.426-.139c.054-.17.062-.293.062-.293s-.193-8.983-.24-10.116a1.215 1.215 0 0 0-.184-.617 92.108 92.108 0 0 1-1.35-.108l-.162-.008c-.347 0-.609.093-.778.27-.255.27-.232.687-.232.687v.015c0 .015.008.254.016.64.694.039 1.203.07 1.203.07s.794.169.832.986c.039.887.031 5.876.031 5.876s.093.81-1.033.987zm-2.737.193l-1.434.107s-1.18.162-1.211-1.133c-.015-.956-.139-6.361-.139-6.361s-.085-1.003 1.134-.918c.362.023.91.054 1.495.093-.015-.895-.03-1.673-.038-2.275a60.468 60.468 0 0 1-2.005-.17C.924 4.909 1.025 6.259 1.025 6.259s.192 9.923.231 11.134c.046 1.45 1.604 1.21 1.604 1.21l1.927-.208c-.023-.717-.038-1.627-.061-2.652zM21.889 3.443c-.069-1.858-1.704-2.251-1.704-2.251S14.525.336 12.051.027c-2.483-.308-2.329 2.09-2.329 2.09s.563 17.518.625 19.685c.07 2.583 2.475 2.174 2.475 2.174l8.528-1.472c1.55-.309 1.627-2.244 1.627-2.244S21.974 5.463 21.889 3.443zm-1.904 14.874l-6.338.655s-1.843.278-1.89-1.958c-.03-1.65-.393-11.119-.393-11.119S11.241 4.16 13.138 4.3c1.935.147 6.585.494 6.585.494s1.241.293 1.295 1.711c.062 1.542.594 10.101.594 10.101s.139 1.411-1.627 1.712zm-6.377.324l2.445-.255c-.116-2.49-.548-12.16-.61-13.563V4.8c-.894-.07-1.742-.13-2.336-.177-.062-.008-.131-.008-.193-.008-.408 0-.717.108-.917.324-.34.355-.3.91-.3.918v.007c0 .008 0 .062.007.147.994.085 1.742.154 1.742.154s1.072.239 1.118 1.403c.047 1.265.355 8.112.355 8.112s.123 1.156-1.403 1.403l-1.419.139c.1 1.164.779 1.419 1.35 1.419.084 0 .138-.008.138-.008.016.008.023.008.023.008zm-3.732-1.195l-1.974.185s-1.596.23-1.626-1.604c-.024-1.357-.186-9.03-.186-9.03S5.983 5.58 7.617 5.696c.478.03 1.164.092 1.89.146-.047-1.457-.086-2.621-.101-3.23-.956-.093-1.874-.186-2.537-.263-2.159-.246-2.028 1.666-2.028 1.666s.255 14.08.309 15.806c.061 2.06 2.159 1.728 2.159 1.728l2.683-.34a691.29 691.29 0 0 0-.116-3.762Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe PhoneGap" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobephonegap extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$v, create_fragment$v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobephotoshop.svelte generated by Svelte v3.23.2 */

        function create_fragment$w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.85 8.42c-.37-.15-.77-.21-1.18-.2-.26 0-.49 0-.68.01-.2-.01-.34 0-.41.01v3.36c.14.01.27.02.39.02h.53c.39 0 .78-.06 1.15-.18.32-.09.6-.28.82-.53.21-.25.31-.59.31-1.03.01-.31-.07-.62-.23-.89-.17-.26-.41-.46-.7-.57zM19.75.3H4.25C1.9.3 0 2.2 0 4.55v14.899c0 2.35 1.9 4.25 4.25 4.25h15.5c2.35 0 4.25-1.9 4.25-4.25V4.55C24 2.2 22.1.3 19.75.3zm-7.391 11.65c-.399.56-.959.98-1.609 1.22-.68.25-1.43.34-2.25.34-.24 0-.4 0-.5-.01s-.24-.01-.43-.01v3.209c.01.07-.04.131-.11.141H5.52c-.08 0-.12-.041-.12-.131V6.42c0-.07.03-.11.1-.11.17 0 .33 0 .56-.01.24-.01.49-.01.76-.02s.56-.01.87-.02c.31-.01.61-.01.91-.01.82 0 1.5.1 2.06.31.5.17.96.45 1.34.82.32.32.57.71.73 1.14.149.42.229.85.229 1.3.001.86-.199 1.57-.6 2.13zm7.091 3.89c-.28.4-.671.709-1.12.891-.49.209-1.09.318-1.811.318-.459 0-.91-.039-1.359-.129-.35-.061-.7-.17-1.02-.32-.07-.039-.121-.109-.111-.189v-1.74c0-.029.011-.07.041-.09.029-.02.06-.01.09.01.39.23.8.391 1.24.49.379.1.779.15 1.18.15.38 0 .65-.051.83-.141.16-.07.27-.24.27-.42 0-.141-.08-.27-.24-.4-.16-.129-.489-.279-.979-.471-.51-.18-.979-.42-1.42-.719-.31-.221-.569-.51-.761-.85-.159-.32-.239-.67-.229-1.021 0-.43.12-.84.341-1.21.25-.4.619-.72 1.049-.92.469-.239 1.059-.349 1.769-.349.41 0 .83.03 1.24.09.3.04.59.12.86.23.039.01.08.05.1.09.01.04.02.08.02.12v1.63c0 .04-.02.08-.05.1-.09.02-.14.02-.18 0-.3-.16-.62-.27-.96-.34-.37-.08-.74-.13-1.12-.13-.2-.01-.41.02-.601.07-.129.03-.24.1-.31.2-.05.08-.08.18-.08.27s.04.18.101.26c.09.11.209.2.34.27.229.12.47.23.709.33.541.18 1.061.43 1.541.73.33.209.6.49.789.83.16.318.24.67.23 1.029.011.471-.129.94-.389 1.331z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Photoshop" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobephotoshop extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$w, create_fragment$w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobepremierepro.svelte generated by Svelte v3.23.2 */

        function create_fragment$x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.297 5.778c0-.066.016-.116.099-.116.643-.033 1.584-.05 2.574-.05 2.772 0 3.976 1.519 3.976 3.466 0 2.54-1.838 3.63-4.099 3.63-.379 0-.511-.017-.775-.017v3.843c0 .083-.033.116-.116.116H6.412c-.082 0-.115-.033-.115-.116zm1.775 5.313c.231.016.412.016.808.016 1.172 0 2.268-.412 2.268-1.996 0-1.27-.783-1.914-2.119-1.914-.396 0-.776.016-.957.033zm6.4-.908c0-.115 0-.412-.05-.973 0-.083.012-.1.078-.132a10.42 10.42 0 0 1 3.656-.693c.083 0 .116.016.116.099v1.452c0 .082-.027.099-.11.099-.626-.033-1.544.05-1.89.198v6.301c0 .083-.033.116-.116.116h-1.569c-.082 0-.115-.033-.115-.116zM0 .3v23.4h24V.3zm1 1h22v21.4H1Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe Premiere Pro" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobepremierepro extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$x, create_fragment$x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adobexd.svelte generated by Svelte v3.23.2 */

        function create_fragment$y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.75.3H4.25C1.9.3 0 2.2 0 4.55v14.9c0 2.35 1.9 4.25 4.25 4.25h15.5c2.35 0 4.25-1.9 4.25-4.25V4.55C24 2.2 22.1.3 19.75.3zm3.24 18.76a3.623 3.623 0 0 1-3.62 3.64H4.63c-2 0-3.63-1.63-3.63-3.63V4.93c0-2 1.63-3.63 3.63-3.63h14.73a3.63 3.63 0 0 1 3.63 3.63v14.13zm-13.5-7.81l2.8 5.38c.05.08.02.16-.06.16h-1.74c-.11 0-.16-.03-.21-.13-.64-1.32-1.29-2.64-1.96-4.06H8.3c-.6 1.34-1.26 2.75-1.9 4.07-.05.08-.1.11-.18.11H4.57c-.1 0-.11-.08-.06-.14l2.74-5.22L4.6 6.14c-.06-.08 0-.14.06-.14h1.72c.1 0 .14.02.18.11.63 1.32 1.27 2.68 1.87 4.01h.02c.58-1.32 1.22-2.69 1.84-4 .05-.08.08-.13.18-.13h1.61c.08 0 .11.06.06.14l-2.65 5.12zm3.29 1.63c0-2.33 1.55-4.15 4.01-4.15.21 0 .32 0 .52.02V6.1c0-.06.05-.1.1-.1h1.58c.08 0 .1.03.1.08v9.18c0 .27 0 .61.05.98 0 .06-.02.08-.08.11-.84.4-1.72.58-2.56.58-2.17.01-3.72-1.33-3.72-4.05zm4.53-2.56c-.14-.06-.34-.1-.58-.1-1.26 0-2.14.97-2.14 2.58 0 1.84.9 2.58 2.03 2.58.24 0 .5-.03.69-.11v-4.95z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Adobe XD" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adobexd extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$y, create_fragment$y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Adonisjs.svelte generated by Svelte v3.23.2 */

        function create_fragment$z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.333 1.333l-.596 1.193-2.404 4.807L8 2.667l-8 16h4.667l-2 4H24zm0 2.982l8.51 17.018H4.823l1.334-2.666H16l-4.922-9.843Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AdonisJS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Adonisjs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$z, create_fragment$z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Aerlingus.svelte generated by Svelte v3.23.2 */

        function create_fragment$A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.857 13.511c-.48 1.545-2.081 2.995-4.002 3.296.31.48.452 1.074.377 1.733-.208 1.789-1.921 3.23-3.758 3.249-1.243.009-2.928-.528-4.115-2.402-1.064-1.666-1.215-4.313-1.14-5.113-1.299 1.328-2.109 2.618-2.495 3.512-.866 2.025-1.196 4.492-1.177 5.65 0 0-.16.151-.31.18-.48-.085-.895-.264-1.206-.537-.376-.34-.461-.66-.461-.66.574-2.872 1.488-4.66 2.853-6.704 1.836-2.76 4.67-4.464 8.032-5.49 2.43-.744 4.954-.904 6.686.565.933.772.989 1.883.716 2.721zM9.544 11.986c-.575.96-2.147 2.505-3.39 3.305-2.59 1.657-4.454 1.77-5.387 1.177a1.451 1.451 0 0 1-.292-.235c-.725-.763-.602-2.119.245-3.23.415-.546.951-.932 1.47-1.111-.406-.189-.679-.584-.735-1.14-.113-1.11.725-2.57 1.883-3.164 1.017-.518 3.211-1.036 4.821 1.366.631.932 1.196 2.26 1.385 3.032zM20.184 1.89c-.14-1.384-1.62-1.893-3.248-1.196-.772.33-1.45.885-1.93 1.516.075-.63-.104-1.186-.556-1.516-.895-.65-2.524-.17-3.635 1.036-.386.424-1.648 1.95-1.714 4.19-.028 1.083.452 3.485 2.034 5.142 4.219-1.591 6.488-4.03 7.354-5.038.999-1.168 1.422-2.194 1.601-2.947.132-.594.113-1.017.094-1.187z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Aer Lingus" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Aerlingus extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$A, create_fragment$A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Affinity.svelte generated by Svelte v3.23.2 */

        function create_fragment$B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.368 1.08h3.778l.318.55h1.082L24 18.004v.001l-2.036 3.47H13.69l.84 1.445h-.365l-.84-1.446H3.057l-.526-.923h-.652L0 17.298l.002-.001 2.41-4.176 2.23-1.288 3.69-6.39-.742-1.285L9.368 1.08zm2.224 5.652L5.066 18.008h6.25l-.723-1.246 6.808.006-5.809-10.036Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Affinity" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Affinity extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$B, create_fragment$B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Affinitydesigner.svelte generated by Svelte v3.23.2 */

        function create_fragment$C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.44 0L0 18.083v5.197a.72.72 0 00.713.72h10.023L5.7 15.277 14.52 0zm5.16 0l-4.86 8.418 3.718 6.439H24V.718A.72.72 0 0023.28 0zm-5.4 9.353l-2.064 3.575a1.289 1.289 0 000 1.288c.23.4.656.64 1.117.64h4.125zm-3.122 6.44L11.816 24h11.471a.72.72 0 00.713-.718v-7.49Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Affinity Designer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Affinitydesigner extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$C, create_fragment$C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Affinityphoto.svelte generated by Svelte v3.23.2 */

        function create_fragment$D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.44 0l-.48.831 5.88 10.185L22.2 0zm12.84 0l-8.577 14.856H24V.711A.72.72 0 0023.28 0zM9.42 1.767L5.76 8.106h7.32zm1.563 7.257h-.018c-.36.005-.7.216-.879.523l-1.083 1.88-.008.014a1.052 1.052 0 000 1.02 16710.388 16710.388 0 001.093 1.894c.184.31.53.5.885.501.002 0 1.38.002 2.067-.001.36-.005.699-.205.878-.512.364-.631.731-1.261 1.093-1.894.176-.314.17-.703-.007-1.011l-.01-.015-1.078-1.87-.006-.009a1.053 1.053 0 00-.879-.52h-.012zM5.22 9.04L0 18.082v.39l.003 4.871a.72.72 0 00.662.655L9.3 9.04zm2.94 3.845L1.736 24h12.84zm2.757 2.906L15.657 24h7.623a.72.72 0 00.72-.72v-7.488Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Affinity Photo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Affinityphoto extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$D, create_fragment$D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Affinitypublisher.svelte generated by Svelte v3.23.2 */

        function create_fragment$E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.44 0L9.36 1.87 22.136 24h1.144a.72.72 0 00.72-.72v-3.119L12.36 0zm3 0L24 18.29V.72a.72.72 0 00-.72-.72zM8.82 2.806l-1.98 3.43L16.976 24h4.08zM6.24 7.274L4.76 9.837a1.941 1.941 0 000 1.942C6.531 14.842 11.816 24 11.816 24h4.08zm-2.58 4.47L0 18.082v5.197c0 .397.323.72.72.72h10.016Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Affinity Publisher" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Affinitypublisher extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$E, create_fragment$E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Aiqfome.svelte generated by Svelte v3.23.2 */

        function create_fragment$F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.748 9.195c.607.277.992 1.139 1.04 2.342.033.797-.06 1.399-.303 1.925-.564 1.209-1.578 1.252-2.163.092-.25-.488-.358-1.025-.358-1.778.006-.803.092-1.274.347-1.795.363-.742.895-1.035 1.437-.786zm9.768.076c.591.39.998 1.627.916 2.776-.092 1.371-.699 2.358-1.436 2.358-.407 0-.824-.358-1.095-.943-.45-.976-.423-2.613.065-3.567.363-.716 1.024-.981 1.55-.624zM12.388.029c.223.032.255.06.38.292.184.336.298.456.64.678.314.2.314.211.206.726-.093.434-.039.862.162 1.247.293.58 1.111 1.187 1.86 1.377.281.076.395.081.737.022.222-.033.439-.049.482-.033.049.022.163.2.26.401.217.467.76 1.025 1.193 1.226.705.33 1.47.314 2.206-.05.206-.102.412-.167.461-.151.043.016.168.14.276.271.109.136.326.309.478.385.249.13.341.146.753.14.325-.005.488.012.526.06.157.19.59 2.201.775 3.584.163 1.241.179 4.017.027 5.23-.2 1.644-.498 3.053-.91 4.321-.293.9-.553 1.491-1.09 2.456C20.997 23.675 20.682 24 20.086 24a2.01 2.01 0 0 1-.493-.06c-.353-.119-.895-.536-1.73-1.328-.986-.932-1.404-1.257-1.924-1.512-.634-.315-1.258-.342-1.8-.076-.13.065-.498.358-.807.656-.65.618-.9.753-1.47.791-.704.044-1.1-.135-2.206-.992-.471-.363-.818-.526-1.203-.558-.466-.038-.808.081-1.561.537-.743.45-1.139.59-1.654.59-1.073 0-2.006-.66-2.965-2.097C1.205 18.34.424 16.09.17 13.863c-.098-.84-.114-2.537-.033-3.367.428-4.266 2.494-7.53 5.828-9.193C7.005.783 8.149.419 9.455.197c.976-.163 2.413-.244 2.933-.168zm-2.239 1.48C7.64 1.758 5.2 3.113 3.731 5.065c-1.529 2.033-2.38 5.399-2.07 8.19.2 1.85.964 3.947 1.989 5.487.52.78.72.997 1.084 1.176.553.271 1.122.174 1.827-.309.629-.434 1.28-.623 1.978-.585.71.043.982.184 2.055 1.1.634.542 1.182.602 1.794.195.136-.092.44-.325.678-.52.764-.634 1.35-.857 2.277-.862 1.16-.006 1.913.428 2.981 1.73.868 1.05 1.204 1.268 1.68 1.089.781-.298 1.567-2.082 2.082-4.716.683-3.48.553-6.522-.352-8.37-.293-.608-.645-.998-.976-1.095-.206-.06-.27-.055-.704.086-.418.136-.564.158-1.106.158-.51 0-.689-.028-.992-.13-.58-.196-.84-.434-1.486-1.356-.298-.428-.558-.569-1.263-.71-1.3-.25-1.832-.477-2.293-.976-.434-.466-.71-1.09-.91-2.054-.055-.282-.152-.591-.212-.689-.222-.357-.759-.488-1.643-.395z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Aiqfome" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Aiqfome extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$F, create_fragment$F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Aircanada.svelte generated by Svelte v3.23.2 */

        function create_fragment$G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.394 16.958c0-.789.338-.902 1.127-.451a54.235 54.235 0 0 0 2.704 1.465c0-.45.451-.789 1.24-.564.789.226 1.577.338 1.577.338s-.45-1.014-.676-1.464c-.338-.789 0-1.24.338-1.352 0 0-.45-.338-.789-.564-.676-.45-.563-1.014.113-1.24.902-.45 2.141-.9 2.141-.9-.338-.226-.789-.79-.338-1.578.45-.676 1.24-1.69 1.24-1.69H18.93c-.79 0-1.015-.676-1.015-1.127 0 0-1.239.901-2.14 1.465-.79.563-1.465 0-1.352-.902a37 37 0 0 0 .338-2.93c-.451.451-1.24.339-1.69-.337-.564-1.127-1.127-2.48-1.127-2.48S11.38 4 10.817 5.128c-.338.676-1.127.788-1.578.45a37 37 0 0 0 .338 2.93c.113.789-.563 1.352-1.352.789-.901-.564-2.253-1.465-2.253-1.465 0 .45-.226 1.014-1.014 1.127H2.817s.789 1.014 1.24 1.69c.45.676 0 1.352-.339 1.577 0 0 1.127.564 2.141.902.676.338.902.788.113 1.24-.226.225-.789.563-.789.563.45.112.789.563.45 1.352-.225.45-.675 1.464-.675 1.464s.788-.225 1.577-.338c.789-.225 1.127.226 1.24.564 0 0 1.352-.789 2.704-1.465.676-.45 1.127-.225 1.127.45v1.916c0 1.127-.226 2.254-.564 2.93-5.07-.564-9.352-4.62-9.352-10.028 0-5.521 4.62-10.029 10.366-10.029 5.747 0 10.367 4.508 10.367 10.029 0 5.183-4.057 9.464-9.24 10.028v1.352C19.268 22.592 24 17.746 24 11.775 24 5.352 18.592.282 11.944.282 5.408.282 0 5.352 0 11.662c0 5.521 4.169 10.14 9.69 11.155.902.225 1.465.338 2.028.901.564-1.126.676-3.38.676-4.62Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Air Canada" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Aircanada extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$G, create_fragment$G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Airfrance.svelte generated by Svelte v3.23.2 */

        function create_fragment$H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.776 3.9L5.184 16.332C4.051 17.969 2.208 19.548 0 19.721v.379h9.552c2.544 0 4.397-1.656 5.616-3.48L24 3.9Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Air France" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Airfrance extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$H, create_fragment$H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Airbnb.svelte generated by Svelte v3.23.2 */

        function create_fragment$I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.998 18.267c-1.352-1.696-2.147-3.182-2.412-4.455-.263-1.026-.159-1.847.291-2.464.477-.71 1.187-1.055 2.12-1.055s1.642.345 2.119 1.062c.446.61.558 1.432.286 2.464-.291 1.298-1.085 2.784-2.411 4.456zm9.597 1.14c-.185 1.245-1.034 2.278-2.2 2.782-2.251.98-4.48-.583-6.388-2.703 3.155-3.95 3.738-7.025 2.384-9.014-.795-1.14-1.933-1.695-3.393-1.695-2.943 0-4.561 2.49-3.925 5.38.37 1.564 1.351 3.342 2.915 5.33-.98 1.084-1.909 1.855-2.73 2.332-.636.344-1.245.557-1.828.608-2.677.399-4.776-2.198-3.823-4.877.132-.345.395-.98.845-1.961l.025-.053C4.94 12.36 6.717 8.75 8.759 4.746l.053-.132.58-1.115c.45-.822.635-1.19 1.351-1.643.345-.209.769-.314 1.245-.314.954 0 1.697.557 2.015 1.006.158.239.345.557.582.953l.558 1.088.08.159c2.04 4.002 3.819 7.605 5.276 10.789l.026.025.533 1.22.318.764c.243.612.294 1.221.213 1.857zm1.219-2.389c-.186-.583-.504-1.271-.9-2.093v-.03c-1.887-4.005-3.64-7.605-5.304-10.84l-.111-.162C15.313 1.461 14.464 0 11.998 0 9.56 0 8.524 1.694 7.465 3.897l-.081.16c-1.668 3.234-3.42 6.839-5.301 10.842v.053l-.558 1.219c-.21.504-.317.768-.345.847-1.35 3.712 1.432 6.972 4.8 6.972.027 0 .132 0 .264-.027h.372c1.75-.213 3.553-1.325 5.382-3.316 1.828 1.988 3.633 3.103 5.38 3.316h.372c.132.027.238.027.264.027 3.368.003 6.15-3.26 4.8-6.972z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Airbnb" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Airbnb extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$I, create_fragment$I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Airbus.svelte generated by Svelte v3.23.2 */

        function create_fragment$J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.062 11.296c0 .74-.389 1.161-.993 1.304-.007 0 .967 1.531.967 1.531h-1.18l-1.427-2.277h1.006c.435 0 .597-.24.597-.532 0-.285-.156-.532-.59-.532H8.266v3.341H7.228V9.869h2.206c1.096 0 1.628.616 1.628 1.427m-5.573 2.835h1.038V9.869H5.489v4.262zM2.174 9.869L0 14.131h1.168l.352-.714h1.75l-.435-.895h-.873l.646-1.311h.013l1.453 2.92h1.194L3.095 9.869h-.921zm12.678 2.05c.409.143.688.519.688 1.019 0 .72-.577 1.194-1.46 1.194h-2.524V9.869h2.427c.863 0 1.376.461 1.376 1.148-.001.428-.176.72-.507.902m-2.258-.396h1.382a.368.368 0 0 0 .376-.376.367.367 0 0 0-.37-.376h-1.388v.752zm1.414 1.713a.435.435 0 0 0 .448-.441c0-.247-.195-.428-.448-.428h-1.414v.869h1.414m4.808-.986c0 .647-.298 1.006-.889 1.006-.584 0-.882-.359-.882-1.006V9.869h-1.064v2.303c0 1.317.694 2.05 1.946 2.05s1.953-.733 1.953-2.05V9.869h-1.064v2.381zm3.834-.688c-.985-.24-1.2-.263-1.2-.545 0-.218.246-.324.662-.324.551 0 1.139.138 1.473.344l.331-.869c-.428-.227-1.058-.389-1.791-.389-1.097 0-1.713.545-1.713 1.278 0 .789.46 1.109 1.518 1.337.824.182.999.295.999.526 0 .251-.227.363-.675.363a3.565 3.565 0 0 1-1.706-.415l-.318.908c.513.273 1.278.448 2.05.448 1.077 0 1.719-.5 1.719-1.337.001-.673-.433-1.104-1.349-1.325");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Airbus" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Airbus extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$J, create_fragment$J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Aircall.svelte generated by Svelte v3.23.2 */

        function create_fragment$K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.451 5.906a6.978 6.978 0 0 0-5.375-5.39C16.727.204 14.508 0 12 0S7.273.204 5.924.516a6.978 6.978 0 0 0-5.375 5.39C.237 7.26.034 9.485.034 12s.203 4.74.515 6.094a6.978 6.978 0 0 0 5.375 5.39C7.273 23.796 9.492 24 12 24s4.727-.204 6.076-.516a6.978 6.978 0 0 0 5.375-5.39c.311-1.354.515-3.578.515-6.094 0-2.515-.203-4.74-.515-6.094zm-5.873 12.396l-.003.001c-.428.152-1.165.283-2.102.377l-.147.014a.444.444 0 0 1-.45-.271 1.816 1.816 0 0 0-1.296-1.074c-.351-.081-.928-.134-1.58-.134s-1.229.053-1.58.134a1.817 1.817 0 0 0-1.291 1.062.466.466 0 0 1-.471.281 8 8 0 0 0-.129-.012c-.938-.094-1.676-.224-2.105-.377l-.003-.001a.76.76 0 0 1-.492-.713c0-.032.003-.066.005-.098.073-.979.666-3.272 1.552-5.89C8.5 8.609 9.559 6.187 10.037 5.714a1.029 1.029 0 0 1 .404-.26l.004-.002c.314-.106.892-.178 1.554-.178.663 0 1.241.071 1.554.178l.005.002a1.025 1.025 0 0 1 .405.26c.478.472 1.537 2.895 2.549 5.887.886 2.617 1.479 4.91 1.552 5.89.002.032.005.066.005.098a.76.76 0 0 1-.491.713z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Aircall" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Aircall extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$K, create_fragment$K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Airplayaudio.svelte generated by Svelte v3.23.2 */

        function create_fragment$L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.9082.1836c-2.8774.0227-5.7566 1.0743-8.045 3.1719-4.8816 4.4748-5.1662 12.0812-.6913 16.9629.2034.244.4473.4473.6914.6914.122.0813.2861.083.4082-.0391l.5293-.6113c.122-.122.122-.3252 0-.4473C.5293 15.9661.2438 9.254 4.2305 4.9824 8.2172.711 14.8887.4274 19.1602 4.4141c4.2714 3.9867 4.555 10.6562.5683 14.9277-.2034.2034-.365.4076-.5683.5703-.122.122-.122.3252 0 .4473l.5293.6113c.122.122.3252.1204.4472.039 4.8817-4.5155 5.1663-12.0811.6914-16.9628-2.3989-2.5934-5.6588-3.889-8.9199-3.8633zm.3867 3.5176C10.0982 3.63 7.8715 4.3932 6.1426 6c-3.4579 3.2138-3.661 8.6242-.4473 12.082.122.122.2435.2842.4063.4063.122.122.3252.122.4472 0l.5293-.6094c.122-.122.122-.3252 0-.4473-1.4238-1.3424-2.2773-3.2547-2.2773-5.248 0-3.946 3.2122-7.1602 7.1582-7.1602 3.946 0 7.1601 3.2532 7.1601 7.1993 0 1.9526-.8144 3.8665-2.2382 5.209-.122.122-.122.3252 0 .4472l.5293.6094c.122.122.3252.163.4472.041 3.4579-3.2545 3.622-8.6652.4082-12.123-1.6069-1.729-3.774-2.634-5.9707-2.7051zm-.2656 3.3164c-1.3221-.0204-2.654.4662-3.6914 1.4629-2.0747 1.9933-2.1145 5.2475-.1211 7.3222l.121.123c.1221.1221.3253.1221.4474 0l.5293-.6112c.122-.122.122-.3253 0-.4473-.6916-.6916-1.0977-1.6666-1.0977-2.6836a3.732 3.732 0 013.7422-3.7422 3.732 3.732 0 013.7422 3.7422c0 1.017-.4064 1.9513-1.1387 2.6836-.122.122-.122.3252 0 .4473l.5293.6113c.122.122.3252.122.4473 0 2.034-1.9934 2.1164-5.2476.123-7.3223-.9967-1.0373-2.3107-1.5656-3.6328-1.586zm.0059 7.7441c-.1373-.005-.2803.0448-.4024.1465l-.039.041-7.1602 8.0547c-.1627.2034-.1624.488.041.6914.0814.0814.2019.123.2832.123h14.3613c.2441 0 .4883-.2035.4883-.4882 0-.122-.0397-.2448-.121-.3262l-7.0801-8.0547c-.1018-.122-.2338-.1824-.3711-.1875Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AirPlay Audio" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Airplayaudio extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$L, create_fragment$L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Airplayvideo.svelte generated by Svelte v3.23.2 */

        function create_fragment$M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.412 1.32c-1.178 0-1.584.122-2.031.366A2.449 2.449 0 00.365 2.7C.122 3.148 0 3.553 0 4.771v9.137c0 1.178.122 1.585.365 2.031.244.447.57.772 1.016 1.016.406.244.813.365 2.031.365h2.72l1.138-1.34H3.006c-.325.041-.69-.001-1.016-.164-.203-.08-.366-.283-.488-.486-.122-.325-.203-.65-.162-1.016V4.406c-.04-.325 0-.69.162-1.015.081-.203.285-.365.488-.487.325-.122.65-.204 1.016-.164h17.867c.325-.04.69.002 1.016.164.203.082.364.284.486.487.122.324.203.65.162 1.015v9.95c.04.324 0 .69-.162 1.015-.081.203-.283.365-.486.486-.325.122-.65.203-1.016.163h-4.264l1.137 1.341 2.803-.04c1.218 0 1.623-.122 2.07-.366a2.449 2.449 0 001.016-1.016c.243-.406.365-.813.365-2.03V4.77c0-1.218-.122-1.623-.365-2.07a2.449 2.449 0 00-1.016-1.015c-.447-.244-.852-.366-2.07-.366H3.412zm8.451 12.198a.501.501 0 00-.37.187l-7.106 8.162a.465.465 0 00-.123.326.47.47 0 00.488.487h14.293c.122 0 .245-.04.326-.121.203-.163.204-.489.041-.692l-7.107-8.162-.041-.04a.594.594 0 00-.4-.147z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AirPlay Video" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Airplayvideo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$M, create_fragment$M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Airtable.svelte generated by Svelte v3.23.2 */

        function create_fragment$N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.992 1.966c-.434 0-.87.086-1.28.257L1.779 5.917c-.503.208-.49.908.012 1.116l8.982 3.558a3.266 3.266 0 0 0 2.454 0l8.982-3.558c.503-.196.503-.908.012-1.116l-8.957-3.694a3.255 3.255 0 0 0-1.272-.257zM23.4 8.056a.589.589 0 0 0-.222.045l-10.012 3.877a.612.612 0 0 0-.38.564v8.896a.6.6 0 0 0 .821.552L23.62 18.1a.583.583 0 0 0 .38-.551V8.653a.6.6 0 0 0-.6-.596zM.676 8.095a.644.644 0 0 0-.48.19C.086 8.396 0 8.53 0 8.69v8.355c0 .442.515.737.908.54l6.27-3.006.307-.147 2.969-1.436c.466-.22.43-.908-.061-1.092L.883 8.138a.57.57 0 0 0-.207-.044z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Airtable" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Airtable extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$N, create_fragment$N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Alfaromeo.svelte generated by Svelte v3.23.2 */

        function create_fragment$O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.539 5.4052a.2158.2158 0 1 0 0-.4318.2158.2158 0 1 0 0 .4318zm-9.3055 1.576l-.6533 1.2987-1.3365-.7-.276.5514a.4317.4317 0 0 1 .0917-.0097c.0556 0 .1107.0105.1536.0301l1.4923.7814.8869-1.764zm15.7221.4324l.3109-.1689.509.9792.3498-.1894-.5095-.9791.2969-.1608.7336 1.4093.3494-.1896-1.0138-1.9486c-.0371.0863-.1084.1592-.1651.1888l-1.451.787 1.0071 1.9358.3497-.1897zm-7.2864-2.0084a.2158.2158 0 1 0 0-.4318.2158.2158 0 1 0 0 .4318zm5.0574 1.5187l.0027.0031c1.1982 1.3498 1.9262 3.1265 1.9262 5.0732 0 3.1035-1.8496 5.7747-4.5065 6.9728-.009.0044-.0178.0093-.0271.0134l.0021-.0018.025-.0116c.4345-.2065.7352-.6488.7352-1.1619 0-.7107-.576-1.2865-1.2867-1.2865l-1.3545-.0012a.1656.1656 0 1 1 0-.3312h2.2875c1.0767 0 1.9496-.8729 1.9496-1.9497 0-1.0767-.8729-1.9497-1.9496-1.9497l-.2906.0003h-1.9184a.1656.1656 0 1 1 0-.3311l1.6868-.0019c1.7798 0 3.2227-1.4428 3.2227-3.2226a3.207 3.207 0 0 0-.5307-1.772l-.0085-.012a.023.023 0 0 1-.0046-.0135c0-.013.0106-.0235.0236-.0235.008 0 .0114.0012.0158.0074zm-3.258 12.3178a7.6339 7.6339 0 0 1-2.459.4041c-1.148 0-2.2368-.2534-3.214-.707v-6.0254h2.1652a2.4299 2.4299 0 0 1-.1227-.765c0-.4029.0986-.783.2719-1.1181H8.7957v-5.969c.9771-.4535 2.0658-.707 3.214-.707 1.3347 0 2.5898.3422 3.6818.9435h.0007c.1562.0988.26.273.26.4717a.5572.5572 0 0 1-.5573.5572l-.0122-.0004h-.1792l-.76.0009c-.2677 0-.4145.079-.5066.159-.2655.2302-.1745.5029-.7192.5029h-1.5022c.2032.4685.6696.8067.7856.8855h1.845a.1784.1784 0 0 1 .1655.112.1561.1561 0 0 1 .0102.0971.1786.1786 0 0 1-.1757.1483H12.468c-.1443.0754-.5827.3489-.785.9661h3.39a.4006.4006 0 1 1 0 .8012l-1.7171-.0002c-1.1836 0-2.1431.9595-2.1431 2.143 0 1.1837.9595 2.1432 2.143 2.1432h2.1414c.0915 0 .1656.0765.1656.168a.1638.1638 0 0 1-.1656.1634h-2.193c-.8671 0-1.5701.7028-1.5701 1.5697 0 .8671.703 1.57 1.57 1.57l.8284.0028c.4185 0 .7632.3512.7632.7667 0 .3396-.2049.5791-.427.7158zm-7.5559-8.2114H4.425c.2368-1.8715 1.1506-3.532 2.4878-4.7287zm0 6.6683c-1.3505-1.209-2.2688-2.8907-2.4943-4.7852h2.4943zm5.097-13.7579c-4.451 0-8.0594 3.6083-8.0594 8.0595 0 4.4508 3.6084 8.0594 8.0593 8.0594 4.4512 0 8.0595-3.6086 8.0595-8.0594 0-4.4512-3.6083-8.0595-8.0595-8.0595zm-.301 2.009h1.9023a.1443.1443 0 0 0 .144-.144.1445.1445 0 0 0-.144-.1442h-1.9023a.1445.1445 0 0 0-.144.1442c0 .0793.0649.144.144.144zm.072-.5445a.2159.2159 0 1 0 0-.4318.2158.2158 0 1 0 0 .4318zm.2988 2.6522l.027-.0257v-.0002l-.027-.0259c-.421-.3057-.6075-.6844-.7201-.9775-.0777-.202-.1652-.3679-.2925-.4893-.1322-.1258-.2285-.1927-.4192-.1927a.9713.9713 0 0 0-.2302.0292l-.0456.011.0283.0525c.0422.0783.1205.2238.2576.2656a.1193.1193 0 0 0 .0356.0046.386.386 0 0 0 .0332-.0019c.009-.0008.0178-.0017.0261-.0017.0093 0 .0123.0013.0124.0013.148.0856.2255.7166.2255 1.031 0 .0537-.0222.078-.0718.078-.0493 0-.1136-.027-.153-.0641-.0867-.0935-.2107-.146-.347-.146-.2223 0-.458.1499-.4673.4005v.0509c.0094.2506.245.4005.4674.4005.1362 0 .2602-.0525.3469-.146.0394-.037.1037-.0639.153-.0639.0496 0 .0718.024.0718.0778 0 .3144-.0776.9454-.2255 1.031 0 0-.003.0012-.0124.0012a.2845.2845 0 0 1-.026-.0016.386.386 0 0 0-.0333-.0019.1194.1194 0 0 0-.0356.0046c-.1371.0418-.2154.1873-.2576.2656l-.0283.0525.0456.0112a.9836.9836 0 0 0 .2302.029c.1907 0 .287-.0667.4192-.1927.1273-.1214.2148-.2873.2925-.4893.1126-.2931.299-.6718.7201-.9776zm-9.4412 2.1223l-.1222.8035-.6999-.5284zm-1.2738.6372a.2464.2464 0 0 1 .097-.0193.2522.2522 0 0 1 .1233.0318l.0028.0016 1.5266 1.1735.0775-.5098-.3103-.2336.1861-1.2242.3638-.1216.0773-.5089-2.0309.683zM12 23.52C5.6378 23.52.48 18.3622.48 12S5.6379.4803 12 .4803C18.3622.4803 23.5198 5.6378 23.5198 12c0 6.3622-5.1575 11.52-11.5198 11.52zM12 .0003C5.3727.0003 0 5.3728 0 12c0 6.6272 5.3727 11.9997 12 11.9997 6.6274 0 12-5.3725 12-11.9997C24 5.3728 18.6274.0003 12 .0003zm2.6675 2.643c.0793-.23.2747-.3568.5505-.3568.1153 0 .2378.023.364.0684.4398.1581.6498.4752.5349.8078-.0796.2313-.2755.3589-.5513.3589-.116 0-.2393-.0232-.3665-.0689-.4384-.1575-.6471-.4752-.5316-.8095zm.3924 1.2166c.195.0701.389.1057.5764.1057h.0001c.4753 0 .8395-.2332.9743-.624.0951-.276.052-.57-.1214-.828-.1655-.2464-.4383-.4475-.7682-.566-.1902-.0683-.3816-.103-.5682-.103-.4793 0-.8453.2316-.9795.6199-.1917.5552.181 1.1422.8865 1.3954zm3.0944.1594l-.1837 1.4554.023.0215 1.3938-.3266-.766 1.037.3757.3504 1.1621-1.5327-.4317-.4023-1.2158.2723.1485-1.2671-.452-.4215h-.0004l-.0554-.0512c-.0045.0915-.0427.184-.0945.234l-1.2044 1.1699.3777.3522zm3.6243 7.4815a.5396.5396 0 0 1-.0919.008c-.3011 0-.5317-.2627-.602-.6852-.0776-.4672.0937-.8074.437-.8671a.5656.5656 0 0 1 .0904-.0076c.2959 0 .5317.2678.6006.6827.078.4686-.0923.8099-.4341.8692zm.8493-.9418c-.1124-.6738-.5424-1.1443-1.0459-1.1443a.8997.8997 0 0 0-.1481.0128c-.568.0989-.8894.7165-.7643 1.4687.1143.6858.5346 1.1466 1.0457 1.1466a.883.883 0 0 0 .1512-.0132c.5663-.0983.8867-.7167.7614-1.4706zM12.4323 1.7271h.0001c.1613 0 .2707.1156.2722.288.0014.174-.104.2832-.2751.2846l-.9892.0087-.005-.5726zm-1.495 1.5232l.5109-.0045-.0045-.532.8572-.0077.3746.5292.5696-.005-.4303-.5697.053-.0254c.2187-.1048.3427-.3229.3402-.5984-.0037-.4345-.29-.7154-.7288-.7154l-1.5587.0134v.0006l-.09.0005c.0533.0645.0872.1498.0923.2213zm-3.3844.3238l-.7046.4047-.0227-.8766zm-1.1647-.4215l.0006.0034.0334 1.927.4472-.2571-.0108-.3882 1.0735-.6173.3217.209.4463-.2565-1.7995-1.1634-.64.3654a.2541.2541 0 0 1 .1276.1777zM3.748 5.5746L4.9572 6.735l.3507-.3805-.4455-.4277.744-.8074-.2887-.2772-.7443.8074-.344-.3301 1.0713-1.1627-.2887-.277-1.4859 1.6131c.0782.0052.1643.036.22.0802l.0018.0014Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Alfa Romeo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Alfaromeo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$O, create_fragment$O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Algolia.svelte generated by Svelte v3.23.2 */

        function create_fragment$P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.16 0A3.156 3.156 0 000 3.152v17.69A3.161 3.161 0 003.16 24h17.68c1.747 0 3.16-1.42 3.16-3.16V3.16C24 1.413 22.58 0 20.84 0H3.16zm7.87 3.494h2.429A1.04 1.04 0 0114.5 4.535v.822a.14.14 0 01-.174.14 7.679 7.647 0 00-2.043-.276 7.564 7.533 0 00-2.113.297c-.095.021-.182-.045-.182-.14v-.843a1.044 1.04 0 011.041-1.04zm-4.35 2.22a1.04 1.035 0 01.75.306l.414.416c.058.065.051.167-.022.21a7.544 7.513 0 00-.941.801 8 7.967 0 00-.793.932c-.058.065-.153.08-.219.016l-.408-.409a1.043 1.04 0 010-1.472l.496-.494a1.04 1.035 0 01.723-.305zm5.597.35a6.774 6.774 0 016.787 6.778 6.784 6.784 0 01-6.787 6.783c-3.748 0-6.789-3.028-6.789-6.777a6.786 6.786 0 016.79-6.784zm0 2.008a4.783 4.783 0 00-4.783 4.776 4.783 4.783 0 004.783 4.775 4.777 4.777 0 004.784-4.775 4.782 4.782 0 00-4.784-4.776zm.145.838a3.935 3.919 0 013.281 1.988c.036.073.015.16-.057.196l-3.166 1.638c-.093.052-.205-.023-.205-.125V9.05h.002c0-.08.072-.139.145-.139Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Algolia" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Algolia extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$P, create_fragment$P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Alipay.svelte generated by Svelte v3.23.2 */

        function create_fragment$Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.076,13.732c0.862-1.494,1.55-3.196,2.003-5.045h-4.731V6.988h5.795V6.04h-5.795V3.207h-2.365 c-0.415,0-0.415,0.408-0.415,0.408V6.04H4.707v0.948h5.861v1.699H5.729v0.948h9.386c-0.343,1.18-0.805,2.288-1.352,3.294 c-3.045-1.002-6.295-1.814-8.337-1.314c-1.305,0.321-2.146,0.893-2.641,1.493c-2.267,2.751-0.641,6.929,4.147,6.929 c2.831,0,5.559-1.574,7.673-4.168C17.758,17.381,24,19.976,24,19.976v0.157c0,2.117-1.719,3.833-3.843,3.833H3.845 C1.72,23.966,0,22.249,0,20.132V3.868C0,1.75,1.72,0.034,3.845,0.034h16.312C22.281,0.034,24,1.75,24,3.868v12.409 c0,0-0.784-0.062-4.24-1.216C18.8,14.74,17.511,14.25,16.076,13.732z M5.834,13.034c-0.6,0.059-1.725,0.324-2.341,0.866 c-1.845,1.604-0.741,4.537,2.993,4.537c2.17,0,4.339-1.384,6.042-3.599C10.104,13.659,8.052,12.816,5.834,13.034z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Alipay" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Alipay extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Alliedmodders.svelte generated by Svelte v3.23.2 */

        function create_fragment$R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.602 1.077A.615.615 0 000 1.692v20.615a.615.615 0 00.615.615h8.309a.615.615 0 00.615-.615v-1.744l.647 1.94a.615.615 0 00.584.42h6.77a.615.615 0 00.585-.427l.035-.107a.615.615 0 00.61.533h4.615a.615.615 0 00.615-.615V8.155a.615.615 0 00-.447-.592L19.246 6.33a.615.615 0 00-.744.372l-1.887 4.906V6.059a.615.615 0 00-.443-.592l-3.385-.98a.615.615 0 00-.787.59v6.15l-2.809-7.48a.615.615 0 00-.408-.377l-8-2.27a.615.615 0 00-.181-.023zm.628 1.43l6.918 1.962 3.891 10.363a.615.615 0 001.191-.216v-8.72l2.155.624v8.402a.615.615 0 001.19.223l2.874-7.475 3.32.948v13.074h-3.384v-1.23h1.23a.615.615 0 00.615-.616V12.77a.615.615 0 00-1.2-.19l-2.94 9.112h-5.877L6.738 8.266a.615.615 0 00-1.199.195v11.076a.615.615 0 00.615.618H8.31v1.537H1.23zm5.54 9.747l2.224 6.674a.615.615 0 00-.07-.006H6.77zM20 16.682v2.549h-.822z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AlliedModders" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Alliedmodders extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$R, create_fragment$R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Allocine.svelte generated by Svelte v3.23.2 */

        function create_fragment$S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.447 21.162L17.207.695a.815.815 0 0 0-.926-.686h-.004l-3.42.551a2.632 2.632 0 0 1-5.199.824l-3.42.542a.815.815 0 0 0-.687.926v.003l3.244 20.458c.069.443.484.746.928.677h.001l3.421-.542a2.636 2.636 0 1 1 5.208-.815l3.42-.541a.81.81 0 0 0 .675-.925v-.005zM14.77 8.21l-1.23 1.805a.854.854 0 0 1-.433.3c-.509.12-1.249-.962-1.772 1.505-.524 2.467.592 1.784 1.004 2.106a.875.875 0 0 1 .283.436l.394 2.142h-.012a.602.602 0 0 1-.343.644c-.454.183-1.167.427-1.588.337-.903-.193-2.338-2.428-1.562-6.072.777-3.643 2.994-5.078 3.896-4.885.413.09.972.601 1.315.953a.602.602 0 0 1 .048.729z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AlloCiné" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Allocine extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$S, create_fragment$S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Alpinelinux.svelte generated by Svelte v3.23.2 */

        function create_fragment$T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.998 1.607L0 12l5.998 10.393h12.004L24 12 18.002 1.607H5.998zM9.965 7.12L12.66 9.9l1.598 1.595.002-.002 2.41 2.363c-.2.14-.386.252-.563.344a3.756 3.756 0 01-.496.217 2.702 2.702 0 01-.425.111c-.131.023-.25.034-.358.034-.13 0-.242-.014-.338-.034a1.317 1.317 0 01-.24-.072.95.95 0 01-.2-.113l-1.062-1.092-3.039-3.041-1.1 1.053-3.07 3.072a.974.974 0 01-.2.111 1.274 1.274 0 01-.237.073c-.096.02-.209.033-.338.033-.108 0-.227-.009-.358-.031a2.7 2.7 0 01-.425-.114 3.748 3.748 0 01-.496-.217 5.228 5.228 0 01-.563-.343l6.803-6.727zm4.72.785l4.579 4.598 1.382 1.353a5.24 5.24 0 01-.564.344 3.73 3.73 0 01-.494.217 2.697 2.697 0 01-.426.111c-.13.023-.251.034-.36.034-.129 0-.241-.014-.337-.034a1.285 1.285 0 01-.385-.146c-.033-.02-.05-.036-.053-.04l-1.232-1.218-2.111-2.111-.334.334L12.79 9.8l1.896-1.897zm-5.966 4.12v2.529a2.128 2.128 0 01-.356-.035 2.765 2.765 0 01-.422-.116 3.708 3.708 0 01-.488-.214 5.217 5.217 0 01-.555-.34l1.82-1.825Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Alpine Linux" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Alpinelinux extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$T, create_fragment$T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Altiumdesigner.svelte generated by Svelte v3.23.2 */

        function create_fragment$U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.14 5.876a1.012 1.012 0 00-.442-.442L9.744.171c-.329-.226-.843-.226-1.203-.01L5.148 2.145c-.051.041-.102.082-.144.123a1.086 1.086 0 00-.288.72l.01 6.569-.02.215.062.123a.478.478 0 00.195.206.516.516 0 00.555.01L8.859 8.2a.573.573 0 00.175-.175l.082-.165V4.643l2.251 1.326 3.536 2.077a.413.413 0 01.164.185.442.442 0 01.062.226v7.052a.52.52 0 01-.072.257c-.041.072-.082.123-.154.154l-4.225 2.488-1.573.925v-3.228l1.953-1.172 1.049-.627.185-.175.021-.051a.542.542 0 00.062-.247V9.999a.51.51 0 00-.092-.288l-.062-.123-.144-.072c-.093-.041-.175-.041-.247-.041l-.175.01-6.363 3.865a1.129 1.129 0 00-.442.463 1.281 1.281 0 00-.144.607v6.559c0 .257.103.514.329.75.082.062.154.113.236.164l3.341 1.943c.186.113.381.164.597.164.216 0 .422-.051.596-.164l8.882-5.212c.195-.103.36-.267.442-.432.113-.185.164-.401.164-.617V6.483a1.236 1.236 0 00-.153-.607zM8.387 7.624L5.447 9.32V2.988c0-.072.031-.154.092-.216l.216-.123 2.632 1.563v3.412zm-2.951 6.795c0-.093.021-.185.062-.278a.409.409 0 01.175-.175l5.973-3.629v3.392l-.956.576-2.313 1.388-2.94 1.778v-3.052zm0 6.559v-2.663l2.94-1.768v3.218l-2.632 1.552-.103-.062c-.051-.031-.093-.051-.103-.062-.061-.071-.102-.143-.102-.215zm13.128-3.403a.518.518 0 01-.072.257.342.342 0 01-.165.154l-8.892 5.222a.405.405 0 01-.452 0l-2.508-1.47 4.575-2.693v-.01l4.215-2.478a.998.998 0 00.432-.442 1.13 1.13 0 00.175-.606V8.457c0-.216-.062-.421-.165-.596a1.189 1.189 0 00-.432-.442l-3.536-2.077-3.352-1.974-1.923-1.141L8.911.788a.446.446 0 01.452 0l8.985 5.294a.319.319 0 01.154.154.517.517 0 01.062.247v11.092z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Altium Designer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Altiumdesigner extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$U, create_fragment$U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Amazon.svelte generated by Svelte v3.23.2 */

        function create_fragment$V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.045 18.02c.072-.116.187-.124.348-.022 3.636 2.11 7.594 3.166 11.87 3.166 2.852 0 5.668-.533 8.447-1.595l.315-.14c.138-.06.234-.1.293-.13.226-.088.39-.046.525.13.12.174.09.336-.12.48-.256.19-.6.41-1.006.654-1.244.743-2.64 1.316-4.185 1.726a17.617 17.617 0 01-10.951-.577 17.88 17.88 0 01-5.43-3.35c-.1-.074-.151-.15-.151-.22 0-.047.021-.09.051-.13zm6.565-6.218c0-1.005.247-1.863.743-2.577.495-.71 1.17-1.25 2.04-1.615.796-.335 1.756-.575 2.912-.72.39-.046 1.033-.103 1.92-.174v-.37c0-.93-.105-1.558-.3-1.875-.302-.43-.78-.65-1.44-.65h-.182c-.48.046-.896.196-1.246.46-.35.27-.575.63-.675 1.096-.06.3-.206.465-.435.51l-2.52-.315c-.248-.06-.372-.18-.372-.39 0-.046.007-.09.022-.15.247-1.29.855-2.25 1.82-2.88.976-.616 2.1-.975 3.39-1.05h.54c1.65 0 2.957.434 3.888 1.29.135.15.27.3.405.48.12.165.224.314.283.45.075.134.15.33.195.57.06.254.105.42.135.51.03.104.062.3.076.615.01.313.02.493.02.553v5.28c0 .376.06.72.165 1.036.105.313.21.54.315.674l.51.674c.09.136.136.256.136.36 0 .12-.06.226-.18.314-1.2 1.05-1.86 1.62-1.963 1.71-.165.135-.375.15-.63.045a6.062 6.062 0 01-.526-.496l-.31-.347a9.391 9.391 0 01-.317-.42l-.3-.435c-.81.886-1.603 1.44-2.4 1.665-.494.15-1.093.227-1.83.227-1.11 0-2.04-.343-2.76-1.034-.72-.69-1.08-1.665-1.08-2.94l-.05-.076zm3.753-.438c0 .566.14 1.02.425 1.364.285.34.675.512 1.155.512.045 0 .106-.007.195-.02.09-.016.134-.023.166-.023.614-.16 1.08-.553 1.424-1.178.165-.28.285-.58.36-.91.09-.32.12-.59.135-.8.015-.195.015-.54.015-1.005v-.54c-.84 0-1.484.06-1.92.18-1.275.36-1.92 1.17-1.92 2.43l-.035-.02zm9.162 7.027c.03-.06.075-.11.132-.17.362-.243.714-.41 1.05-.5a8.094 8.094 0 011.612-.24c.14-.012.28 0 .41.03.65.06 1.05.168 1.172.33.063.09.099.228.099.39v.15c0 .51-.149 1.11-.424 1.8-.278.69-.664 1.248-1.156 1.68-.073.06-.14.09-.197.09-.03 0-.06 0-.09-.012-.09-.044-.107-.12-.064-.24.54-1.26.806-2.143.806-2.64 0-.15-.03-.27-.087-.344-.145-.166-.55-.257-1.224-.257-.243 0-.533.016-.87.046-.363.045-.7.09-1 .135-.09 0-.148-.014-.18-.044-.03-.03-.036-.047-.02-.077 0-.017.006-.03.02-.063v-.06z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Amazon" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Amazon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$V, create_fragment$V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Amazonalexa.svelte generated by Svelte v3.23.2 */

        function create_fragment$W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.37 0 0 5.37 0 12C0 18.09 4.53 23.11 10.4 23.9V21.5A1.59 1.59 0 0 0 9.32 19.97A8.41 8.41 0 0 1 3.6 11.8A8.37 8.37 0 0 1 12.09 3.6A8.4 8.4 0 0 1 20.4 12.31L20.39 12.38A8.68 8.68 0 0 1 20.36 12.76C20.36 12.83 20.35 12.9 20.34 12.96C20.34 13.04 20.33 13.12 20.32 13.19L20.3 13.29C19.27 20.07 10.45 23.87 10.4 23.9C10.92 23.97 11.46 24 12 24C18.63 24 24 18.63 24 12S18.63 0 12 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Amazon Alexa" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Amazonalexa extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$W, create_fragment$W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Amazonaws.svelte generated by Svelte v3.23.2 */

        function create_fragment$X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.763 10.036c0 .296.032.535.088.71.064.176.144.368.256.576.04.063.056.127.056.183 0 .08-.048.16-.152.24l-.503.335a.383.383 0 0 1-.208.072c-.08 0-.16-.04-.239-.112a2.47 2.47 0 0 1-.287-.375 6.18 6.18 0 0 1-.248-.471c-.622.734-1.405 1.101-2.347 1.101-.67 0-1.205-.191-1.596-.574-.391-.384-.59-.894-.59-1.533 0-.678.239-1.23.726-1.644.487-.415 1.133-.623 1.955-.623.272 0 .551.024.846.064.296.04.6.104.918.176v-.583c0-.607-.127-1.03-.375-1.277-.255-.248-.686-.367-1.3-.367-.28 0-.568.031-.863.103-.295.072-.583.16-.862.272a2.287 2.287 0 0 1-.28.104.488.488 0 0 1-.127.023c-.112 0-.168-.08-.168-.247v-.391c0-.128.016-.224.056-.28a.597.597 0 0 1 .224-.167c.279-.144.614-.264 1.005-.36a4.84 4.84 0 0 1 1.246-.151c.95 0 1.644.216 2.091.647.439.43.662 1.085.662 1.963v2.586zm-3.24 1.214c.263 0 .534-.048.822-.144.287-.096.543-.271.758-.51.128-.152.224-.32.272-.512.047-.191.08-.423.08-.694v-.335a6.66 6.66 0 0 0-.735-.136 6.02 6.02 0 0 0-.75-.048c-.535 0-.926.104-1.19.32-.263.215-.39.518-.39.917 0 .375.095.655.295.846.191.2.47.296.838.296zm6.41.862c-.144 0-.24-.024-.304-.08-.064-.048-.12-.16-.168-.311L7.586 5.55a1.398 1.398 0 0 1-.072-.32c0-.128.064-.2.191-.2h.783c.151 0 .255.025.31.08.065.048.113.16.16.312l1.342 5.284 1.245-5.284c.04-.16.088-.264.151-.312a.549.549 0 0 1 .32-.08h.638c.152 0 .256.025.32.08.063.048.12.16.151.312l1.261 5.348 1.381-5.348c.048-.16.104-.264.16-.312a.52.52 0 0 1 .311-.08h.743c.127 0 .2.065.2.2 0 .04-.009.08-.017.128a1.137 1.137 0 0 1-.056.2l-1.923 6.17c-.048.16-.104.263-.168.311a.51.51 0 0 1-.303.08h-.687c-.151 0-.255-.024-.32-.08-.063-.056-.119-.16-.15-.32l-1.238-5.148-1.23 5.14c-.04.16-.087.264-.15.32-.065.056-.177.08-.32.08zm10.256.215c-.415 0-.83-.048-1.229-.143-.399-.096-.71-.2-.918-.32-.128-.071-.215-.151-.247-.223a.563.563 0 0 1-.048-.224v-.407c0-.167.064-.247.183-.247.048 0 .096.008.144.024.048.016.12.048.2.08.271.12.566.215.878.279.319.064.63.096.95.096.502 0 .894-.088 1.165-.264a.86.86 0 0 0 .415-.758.777.777 0 0 0-.215-.559c-.144-.151-.416-.287-.807-.415l-1.157-.36c-.583-.183-1.014-.454-1.277-.813a1.902 1.902 0 0 1-.4-1.158c0-.335.073-.63.216-.886.144-.255.335-.479.575-.654.24-.184.51-.32.83-.415.32-.096.655-.136 1.006-.136.175 0 .359.008.535.032.183.024.35.056.518.088.16.04.312.08.455.127.144.048.256.096.336.144a.69.69 0 0 1 .24.2.43.43 0 0 1 .071.263v.375c0 .168-.064.256-.184.256a.83.83 0 0 1-.303-.096 3.652 3.652 0 0 0-1.532-.311c-.455 0-.815.071-1.062.223-.248.152-.375.383-.375.71 0 .224.08.416.24.567.159.152.454.304.877.44l1.134.358c.574.184.99.44 1.237.767.247.327.367.702.367 1.117 0 .343-.072.655-.207.926-.144.272-.336.511-.583.703-.248.2-.543.343-.886.447-.36.111-.734.167-1.142.167zM21.698 16.207c-2.626 1.94-6.442 2.969-9.722 2.969-4.598 0-8.74-1.7-11.87-4.526-.247-.223-.024-.527.272-.351 3.384 1.963 7.559 3.153 11.877 3.153 2.914 0 6.114-.607 9.06-1.852.439-.2.814.287.383.607zM22.792 14.961c-.336-.43-2.22-.207-3.074-.103-.255.032-.295-.192-.063-.36 1.5-1.053 3.967-.75 4.254-.399.287.36-.08 2.826-1.485 4.007-.215.184-.423.088-.327-.151.32-.79 1.03-2.57.695-2.994z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Amazon AWS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Amazonaws extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$X, create_fragment$X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Amazonfiretv.svelte generated by Svelte v3.23.2 */

        function create_fragment$Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.196 15.12c.265.337-.294 1.73-.542 2.353-.077.19.085.266.257.123 1.106-.926 1.39-2.867 1.166-3.149-.226-.277-2.16-.516-3.341.314-.183.127-.151.304.05.279.665-.08 2.147-.257 2.41.08m-.858.981c-2.064 1.523-5.056 2.333-7.632 2.333-3.611 0-6.862-1.334-9.322-3.555-.194-.176-.02-.414.21-.28 2.655 1.545 5.939 2.477 9.328 2.477 2.287 0 4.803-.476 7.115-1.458.348-.147.642.231.3.483m2.034-3.155a.388.388 0 0 1-.201-.04c-.041-.026-.087-.1-.133-.225l-1.734-4.355a1.79 1.79 0 0 0-.046-.117.266.266 0 0 1-.023-.108c0-.084.049-.128.146-.128h.58c.098 0 .165.014.205.04.04.026.082.102.127.226l1.344 3.823 1.343-3.823c.046-.124.089-.2.128-.226a.402.402 0 0 1 .205-.04h.54c.1 0 .148.044.148.128a.3.3 0 0 1-.025.108c-.016.04-.032.078-.044.117l-1.727 4.355c-.045.124-.09.199-.132.225a.388.388 0 0 1-.201.04zm-3.644.068c-.929 0-1.392-.463-1.392-1.392V8.739h-.706c-.13 0-.197-.066-.197-.196v-.246a.22.22 0 0 1 .045-.147c.03-.031.086-.055.171-.067l.717-.09.127-1.215c.013-.13.082-.196.207-.196h.41c.13 0 .196.066.196.196v1.196h1.276c.13 0 .195.065.195.197v.372c0 .13-.064.196-.195.196h-1.276v2.834c0 .243.055.411.162.51.108.098.293.147.555.147.124 0 .277-.016.46-.049.099-.02.164-.03.197-.03.052 0 .088.014.108.044.02.03.029.077.029.142v.266a.366.366 0 0 1-.04.19c-.026.043-.078.078-.157.103a3.018 3.018 0 0 1-.892.118m-4.665-2.976c.006-.052.011-.137.011-.255 0-.399-.094-.698-.28-.901-.186-.204-.46-.306-.818-.306-.412 0-.732.123-.962.369-.228.245-.36.61-.392 1.093zm-.942 3.07c-.803 0-1.411-.222-1.824-.667-.412-.444-.616-1.102-.616-1.972 0-.83.204-1.475.616-1.937.413-.46.988-.691 1.728-.691.62 0 1.098.176 1.432.524.332.351.5.846.5 1.487 0 .21-.017.422-.05.638-.014.077-.034.13-.064.156-.029.027-.077.04-.142.04h-3.08c.013.563.154.977.418 1.245.265.268.674.403 1.23.403.196 0 .385-.014.564-.04a5.04 5.04 0 0 0 .682-.166l.117-.035a.284.284 0 0 1 .09-.016c.085 0 .125.06.125.177v.276c0 .085-.012.144-.037.18a.441.441 0 0 1-.167.114 3.38 3.38 0 0 1-.701.205 4.236 4.236 0 0 1-.82.079m-5.424-.147c-.13 0-.195-.066-.195-.197v-4.58c0-.13.064-.195.195-.195h.432c.064 0 .116.012.153.039.036.025.06.076.072.146l.07.55c.176-.19.343-.34.499-.452a1.725 1.725 0 0 1 1.02-.323c.079 0 .158.003.235.01.112.014.168.072.168.176v.53c0 .117-.058.177-.178.177-.058 0-.114-.004-.17-.01a1.638 1.638 0 0 0-.18-.01c-.524 0-.973.157-1.346.47v3.472c0 .131-.066.197-.195.197zm-2.249 0c-.13 0-.196-.066-.196-.197v-4.58c0-.13.066-.195.196-.195h.579c.13 0 .195.064.195.195v4.58c0 .131-.065.197-.195.197zm.295-5.856c-.19 0-.339-.054-.447-.16a.581.581 0 0 1-.161-.428c0-.176.054-.318.16-.426.11-.109.257-.163.448-.163.189 0 .337.054.446.163.107.108.16.25.16.426a.581.581 0 0 1-.16.427.608.608 0 0 1-.446.161m-3.625 5.856c-.132 0-.197-.066-.197-.197v-4.01H.195c-.13 0-.195-.066-.195-.197v-.245c0-.065.014-.114.043-.147.03-.033.088-.055.173-.07l.705-.087v-.804c0-1.091.523-1.638 1.57-1.638.248 0 .51.036.784.109.072.019.122.047.152.088.029.038.044.107.044.205v.255c0 .124-.048.186-.148.186-.058 0-.14-.01-.248-.029-.11-.02-.23-.03-.369-.03-.3 0-.51.057-.633.172-.121.115-.181.303-.181.564v.903h1.324c.131 0 .197.064.197.195v.373c0 .13-.066.197-.197.197H1.892v4.01c0 .131-.065.197-.196.197Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Amazon Fire TV" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Amazonfiretv extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Amazonlumberyard.svelte generated by Svelte v3.23.2 */

        function create_fragment$Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.927,12.153c-0.051-0.011-0.102-0.022-0.153-0.034c-0.077-0.017-0.091-0.011-0.119,0.061 c-0.036,0.093-0.082,0.178-0.158,0.244c-0.166,0.144-0.374,0.079-0.472-0.063c-0.047-0.068-0.073-0.145-0.088-0.226 c-0.013-0.075-0.014-0.091,0.016-0.146c0.069-0.127,0.127-0.277,0.161-0.424c0.067-0.287,0.107-0.563,0.137-0.868 c0.017-0.179,0.032-0.361,0.036-0.542c0.006-0.256,0.017-0.513-0.026-0.768c-0.019-0.111-0.045-0.221-0.103-0.319 c-0.072-0.123-0.178-0.193-0.322-0.202c-0.187-0.012-0.328,0.068-0.432,0.221c-0.069,0.101-0.108,0.215-0.138,0.333 c-0.047,0.183-0.06,0.37-0.066,0.557c-0.005,0.166,0.001,0.333,0.01,0.5c0.007,0.138,0.022,0.276,0.037,0.414 c0.012,0.113,0.026,0.227,0.044,0.339c0.018,0.113-0.013,0.132-0.121,0.116c-0.125-0.018-0.251-0.013-0.376,0.007 c-0.189,0.031-0.357,0.115-0.508,0.229c-0.168,0.126-0.294,0.284-0.341,0.494c-0.007,0.032-0.005,0.072-0.019,0.1 c-0.044,0.09-0.097,0.169-0.172,0.237c-0.084,0.077-0.179,0.1-0.286,0.091c-0.103-0.009-0.153-0.073-0.189-0.157 c-0.039-0.093-0.058-0.191-0.059-0.291c-0.001-0.111,0.008-0.222,0.009-0.333c0.001-0.112-0.045-0.202-0.132-0.272 c-0.078-0.062-0.17-0.089-0.266-0.103c-0.151-0.022-0.319-0.011-0.456,0.004c-0.028,0.003-0.036,0-0.059-0.023 c-0.094-0.096-0.208-0.122-0.337-0.099c-0.091,0.016-0.159,0.087-0.181,0.185c-0.019,0.086,0.008,0.178,0.083,0.227 c0.054,0.035,0.09,0.053,0.146,0.063c0.046,0.008,0.05,0.014,0.05,0.056c-0.002,0.06-0.003,0.121-0.01,0.181 c-0.013,0.116-0.039,0.228-0.096,0.332c-0.074,0.136-0.186,0.224-0.341,0.231c-0.228,0.011-0.394-0.131-0.423-0.372 c-0.008-0.066-0.007-0.134-0.008-0.2c-0.001-0.159-0.001-0.317-0.001-0.476c0-0.06-0.013-0.078-0.078-0.078 c-0.057,0-0.117-0.002-0.172-0.003c-0.061-0.001-0.086,0.002-0.091,0.071c-0.047-0.019-0.091-0.044-0.136-0.059 c-0.184-0.062-0.372-0.066-0.561-0.029c-0.238,0.047-0.449,0.149-0.62,0.323c-0.045,0.045-0.085,0.098-0.126,0.144 c-0.118,0.133-0.249,0.264-0.378,0.385c-0.018,0.017-0.047,0.026-0.072,0.016c-0.028-0.012-0.043-0.031-0.043-0.064 c0-0.212,0-0.435-0.001-0.653c0-0.057-0.017-0.074-0.072-0.075c-0.074-0.001-0.147-0.001-0.221,0c-0.042,0-0.051,0.001-0.051,0.044 c0.001,0.129-0.011,0.214-0.025,0.301c-0.03,0.177-0.067,0.288-0.143,0.427c-0.049,0.089-0.108,0.172-0.192,0.232 c-0.121,0.087-0.237,0.085-0.355-0.006c-0.074-0.057-0.13-0.129-0.175-0.21c-0.123-0.222-0.175-0.462-0.179-0.714 c-0.001-0.053-0.02-0.074-0.072-0.075c-0.077-0.001-0.154-0.001-0.231,0c-0.05,0.001-0.07,0.021-0.072,0.072 c-0.003,0.057-0.006,0.114-0.01,0.171c-0.011,0.15-0.041,0.297-0.093,0.439c-0.037,0.104-0.087,0.2-0.167,0.28 c-0.105,0.104-0.253,0.109-0.369,0.015c-0.054-0.044-0.095-0.099-0.127-0.161c-0.093-0.18-0.136-0.384-0.144-0.575 c-0.008-0.206-0.151-0.331-0.324-0.367c-0.106-0.022-0.203-0.022-0.316-0.002c-0.036,0.007-0.064,0.007-0.092-0.03 c-0.047-0.06-0.099-0.09-0.174-0.097c-0.04-0.004-0.091-0.003-0.131,0.002c-0.191,0.022-0.303,0.225-0.224,0.399 c0.03,0.065,0.08,0.115,0.146,0.146c0.064,0.031,0.072,0.044,0.041,0.116c-0.051,0.111-0.114,0.214-0.199,0.301 c-0.248,0.261-0.578,0.401-0.962,0.365c-0.105-0.01-0.201-0.047-0.286-0.11c-0.062-0.046-0.112-0.098-0.127-0.179 c-0.004-0.021-0.001-0.048,0.015-0.057c0.012-0.007,0.039,0,0.052,0.008c0.189,0.1,0.388,0.126,0.596,0.1 c0.152-0.019,0.285-0.09,0.394-0.199c0.204-0.205,0.151-0.502-0.051-0.654c-0.169-0.127-0.36-0.168-0.561-0.125 c-0.354,0.074-0.611,0.286-0.743,0.629c-0.054,0.139-0.069,0.288-0.018,0.434c0.067,0.19,0.202,0.32,0.38,0.406 c0.218,0.106,0.455,0.119,0.689,0.082c0.35-0.056,0.65-0.213,0.887-0.479c0.152-0.17,0.256-0.36,0.326-0.579 c0.011-0.033,0.019-0.064,0.02-0.106c0.001-0.023,0.009-0.026,0.034-0.029c0.075-0.009,0.137-0.012,0.213-0.01 c0.042,0.001,0.072,0.022,0.076,0.062c0.012,0.139,0.029,0.261,0.057,0.383c0.043,0.188,0.117,0.355,0.242,0.506 c0.2,0.242,0.545,0.299,0.79,0.151c0.121-0.073,0.219-0.184,0.283-0.308c0.042-0.082,0.105-0.092,0.155-0.002 c0.061,0.108,0.142,0.2,0.242,0.275c0.169,0.127,0.364,0.174,0.568,0.107c0.121-0.04,0.218-0.103,0.306-0.195 c0.014-0.014,0.038-0.036,0.05-0.051c0.004,0.109,0.004,0.118-0.04,0.166c-0.185,0.197-0.362,0.4-0.511,0.626 c-0.139,0.211-0.263,0.429-0.34,0.671c-0.061,0.19-0.091,0.383-0.054,0.583c0.042,0.226,0.152,0.396,0.347,0.511 c0.117,0.069,0.277,0.092,0.4,0.048c0.137-0.049,0.248-0.115,0.329-0.262c0.034-0.063,0.067-0.137,0.09-0.205 c0.054-0.158,0.077-0.326,0.095-0.496c0.014-0.126,0.021-0.273,0.026-0.41c0.005-0.134,0.002-0.268,0.002-0.402 c0-0.175,0.002-0.351,0.003-0.526c0-0.037-0.003-0.045,0.027-0.077c0.106-0.109,0.201-0.204,0.3-0.311 c0.045-0.046,0.09-0.047,0.121,0.011c0.073,0.135,0.175,0.224,0.303,0.288c0.189,0.095,0.395,0.11,0.601,0.083 c0.245-0.032,0.456-0.131,0.642-0.294c0.052-0.046,0.079-0.042,0.126,0.013c0.194,0.221,0.44,0.302,0.725,0.244 c0.218-0.044,0.378-0.178,0.49-0.366c0.105-0.177,0.141-0.375,0.156-0.577c0.003-0.042,0.004-0.087,0.004-0.127 c0-0.041,0.027-0.07,0.069-0.072c0.073-0.004,0.156-0.004,0.229-0.003c0.047,0.001,0.086,0.003,0.132,0.013 c0.039,0.009,0.046,0.026,0.041,0.064c-0.006,0.052-0.014,0.104-0.014,0.156c-0.002,0.146,0.01,0.29,0.048,0.432 c0.028,0.105,0.069,0.208,0.137,0.294c0.105,0.132,0.244,0.197,0.412,0.203c0.204,0.007,0.383-0.051,0.531-0.195 c0.042-0.041,0.075-0.04,0.12,0.005c0.14,0.136,0.311,0.199,0.5,0.218c0.22,0.022,0.433-0.017,0.635-0.111 c0.127-0.059,0.243-0.135,0.34-0.237c0.048-0.05,0.098-0.048,0.141,0.019c0.181,0.284,0.537,0.401,0.859,0.223 c0.204-0.112,0.327-0.284,0.394-0.507C24.012,12.195,23.995,12.167,23.927,12.153z M10.849,11.723 c0.085-0.063,0.181-0.094,0.287-0.102c0.089-0.007,0.173,0.012,0.243,0.071c0.055,0.046,0.058,0.091,0.007,0.141 c-0.082,0.079-0.164,0.107-0.288,0.104c-0.081-0.002-0.156-0.01-0.233-0.04c-0.018-0.007-0.037-0.014-0.053-0.024 c-0.026-0.015-0.037-0.033-0.037-0.053C10.774,11.783,10.806,11.754,10.849,11.723z M15.573,13.971 c-0.013,0.198-0.028,0.397-0.089,0.588c-0.025,0.078-0.062,0.184-0.125,0.238c-0.079,0.068-0.163,0.079-0.252,0.003 c-0.101-0.081-0.14-0.182-0.149-0.315c-0.013-0.197,0.05-0.377,0.132-0.552c0.096-0.207,0.218-0.392,0.357-0.572 c0.021-0.027,0.043-0.053,0.08-0.042c0.032,0.01,0.055,0.034,0.056,0.072c0.001,0.072,0,0.144,0,0.216 C15.583,13.673,15.581,13.85,15.573,13.971z M17.828,12.137c-0.051,0.112-0.138,0.194-0.24,0.259 c-0.145,0.092-0.304,0.14-0.456,0.141c-0.134,0-0.242-0.02-0.34-0.08c-0.085-0.052-0.143-0.123-0.15-0.227 c-0.005-0.08,0.02-0.154,0.068-0.215c0.091-0.117,0.205-0.218,0.339-0.271c0.189-0.075,0.392-0.102,0.577-0.029 c0.107,0.042,0.198,0.11,0.227,0.224C17.869,12.01,17.857,12.074,17.828,12.137z M22.444,12.166 c-0.064,0.117-0.163,0.199-0.279,0.261c-0.133,0.072-0.275,0.109-0.402,0.109c-0.131,0-0.235-0.017-0.326-0.072 c-0.069-0.042-0.116-0.081-0.148-0.161c-0.009-0.022-0.01-0.054,0.003-0.078c0.054-0.101,0.11-0.203,0.174-0.298 c0.076-0.114,0.184-0.186,0.319-0.221c0.162-0.042,0.322-0.051,0.481,0.009c0.113,0.043,0.197,0.114,0.223,0.24 C22.503,12.032,22.48,12.101,22.444,12.166z M22.875,11.009c-0.016,0.126-0.043,0.25-0.066,0.375 c-0.008,0.044-0.036,0.069-0.071,0.069c-0.032,0.001-0.061-0.022-0.069-0.065c-0.023-0.118-0.047-0.237-0.063-0.356 c-0.014-0.111-0.025-0.213-0.037-0.32c-0.013-0.117-0.018-0.234-0.023-0.352c-0.003-0.101-0.01-0.203-0.007-0.304 c0.006-0.197,0.011-0.395,0.067-0.586c0.019-0.065,0.04-0.121,0.074-0.18c0.02-0.035,0.05-0.072,0.091-0.079 c0.039-0.007,0.089,0.003,0.104,0.04c0.024,0.06,0.036,0.114,0.048,0.177c0.029,0.156,0.034,0.324,0.031,0.483 c-0.003,0.175-0.009,0.34-0.022,0.514C22.919,10.62,22.9,10.815,22.875,11.009z M9.912,11.638c-0.146-0.185-0.343-0.278-0.571-0.298 c-0.169-0.015-0.339,0.006-0.501,0.059c-0.058,0.019-0.122-0.004-0.123-0.065c0-0.038,0.021-0.154,0.033-0.235 c0.013-0.08,0.026-0.208,0.042-0.39c0.016-0.182,0.023-0.365,0.034-0.548c0.003-0.047,0.005-0.093,0.003-0.14 C8.827,9.927,8.819,9.834,8.812,9.741C8.803,9.617,8.779,9.496,8.732,9.38C8.6,9.038,8.262,9.054,8.072,9.169 C7.967,9.232,7.898,9.33,7.848,9.439c-0.087,0.19-0.107,0.402-0.121,0.607c-0.007,0.101-0.004,0.228-0.005,0.329 c-0.001,0.183,0.021,0.39,0.038,0.573c0.018,0.185,0.039,0.3,0.07,0.466c0.047,0.253,0.123,0.482,0.241,0.711 c0.017,0.033,0.016,0.064,0.005,0.097c-0.01,0.031-0.032,0.08-0.048,0.107c-0.097,0.162-0.338,0.276-0.538,0.04 c-0.074-0.091-0.111-0.187-0.141-0.303c-0.016-0.061-0.034-0.122-0.056-0.181c-0.06-0.16-0.144-0.314-0.286-0.416 c-0.149-0.107-0.316-0.155-0.494-0.089c-0.103,0.038-0.193,0.11-0.26,0.194c-0.033,0.041-0.056,0.081-0.086,0.127 c-0.038,0.058-0.106,0.062-0.144,0.005c-0.074-0.111-0.138-0.198-0.243-0.267c-0.083-0.055-0.176-0.088-0.274-0.084 c-0.099,0.004-0.198,0.029-0.277,0.093c-0.036,0.028-0.074,0.062-0.107,0.1c-0.013-0.051-0.033-0.087-0.082-0.088 c-0.057-0.001-0.115-0.001-0.174-0.001c-0.054,0-0.098,0.022-0.099,0.094c-0.001,0.029-0.003,0.104-0.003,0.133 c-0.007,0.176-0.029,0.311-0.078,0.485c-0.027,0.096-0.063,0.177-0.121,0.261c-0.067,0.097-0.145,0.091-0.208,0.027 c-0.038-0.039-0.071-0.087-0.096-0.135c-0.124-0.234-0.167-0.459-0.179-0.75c-0.003-0.07-0.027-0.113-0.109-0.115 c-0.046-0.001-0.091-0.001-0.137,0c-0.059,0.001-0.106,0.05-0.108,0.109c-0.007,0.185-0.05,0.373-0.123,0.548 c-0.049,0.119-0.097,0.209-0.212,0.305c-0.07,0.058-0.113,0.084-0.203,0.084c-0.069,0-0.133-0.035-0.183-0.075 c-0.081-0.065-0.135-0.138-0.181-0.227c-0.101-0.204-0.159-0.417-0.161-0.641c-0.001-0.06-0.041-0.102-0.096-0.103 c-0.062-0.001-0.124,0-0.187,0c-0.057,0-0.07-0.001-0.071,0.065c-0.003,0.108-0.008,0.234-0.023,0.344 c-0.018,0.128-0.045,0.24-0.102,0.356c-0.061,0.123-0.141,0.218-0.259,0.268c-0.042,0.018-0.084,0.028-0.147,0.028 c-0.07,0-0.134-0.019-0.198-0.054c-0.102-0.055-0.199-0.142-0.282-0.238c-0.026-0.033-0.03-0.082-0.007-0.116 c0.1-0.144,0.176-0.29,0.245-0.468c0.043-0.109,0.083-0.234,0.112-0.376c0.022-0.108,0.037-0.265,0.049-0.398 c0.013-0.156,0.022-0.314,0.023-0.47c0.001-0.09-0.004-0.205-0.014-0.326c-0.012-0.136-0.04-0.275-0.098-0.402 C1.535,9.514,1.423,9.383,1.247,9.35C1.096,9.321,0.925,9.353,0.806,9.454C0.729,9.519,0.677,9.606,0.638,9.697 c-0.083,0.189-0.106,0.395-0.114,0.597c-0.008,0.196-0.003,0.422,0.02,0.617c0.02,0.167,0.039,0.326,0.063,0.492 c0.035,0.238,0.092,0.436,0.192,0.655c0.025,0.055,0.033,0.094-0.009,0.136c-0.062,0.063-0.125,0.132-0.188,0.193 c-0.172,0.166-0.358,0.311-0.562,0.436c-0.035,0.021-0.048,0.065-0.032,0.102c0.023,0.054,0.06,0.115,0.089,0.168 c0.027,0.049,0.073,0.053,0.122,0.028c0.045-0.023,0.118-0.077,0.166-0.109c0.218-0.146,0.406-0.314,0.498-0.406 c0.04-0.04,0.073-0.07,0.097-0.093c0.033-0.033,0.088-0.027,0.129,0.019c0.079,0.088,0.192,0.173,0.297,0.232 c0.184,0.103,0.377,0.139,0.585,0.075c0.186-0.057,0.324-0.172,0.432-0.331c0.064-0.094,0.125-0.091,0.189,0.008 c0.042,0.066,0.106,0.132,0.167,0.181c0.101,0.081,0.237,0.148,0.385,0.152c0.182,0.005,0.317-0.046,0.45-0.158 c0.072-0.06,0.127-0.126,0.18-0.203c0.029-0.043,0.076-0.061,0.115-0.043c0.025,0.012,0.047,0.046,0.062,0.069 c0.051,0.082,0.11,0.152,0.184,0.217c0.179,0.157,0.404,0.153,0.555,0.043c0.015-0.011,0.041-0.031,0.061-0.044 c0.009,0.073,0.043,0.08,0.115,0.081c0.057,0.001,0.134,0,0.19,0c0.043,0,0.043,0,0.043-0.036c0-0.071,0.001-0.143,0.006-0.218 c0.012-0.171,0.05-0.36,0.107-0.527c0.037-0.108,0.093-0.203,0.178-0.282c0.03-0.029,0.07-0.047,0.103-0.047 c0.056,0,0.087,0.028,0.12,0.061c0.038,0.039,0.082,0.089,0.105,0.139c0.094,0.203,0.132,0.359,0.162,0.572 c0.009,0.078,0.011,0.163,0.009,0.241c-0.001,0.03,0.007,0.029,0.042,0.03c0.093,0.001,0.208-0.002,0.301-0.002 c0.027,0,0.026-0.001,0.026-0.028c0-0.079,0.004-0.181,0.015-0.259c0.023-0.157,0.05-0.291,0.107-0.434 c0.04-0.102,0.094-0.208,0.178-0.284c0.055-0.049,0.12-0.05,0.184-0.019c0.036,0.017,0.068,0.048,0.095,0.077 c0.098,0.112,0.138,0.254,0.171,0.397c0.049,0.21,0.142,0.386,0.337,0.53c0.103,0.076,0.224,0.121,0.352,0.128 c0.179,0.01,0.321-0.044,0.462-0.158c0.037-0.03,0.061-0.049,0.084-0.049c0.009,0,0.019,0,0.026,0.001 c0.015,0.002,0.042,0.02,0.075,0.047c0.138,0.122,0.299,0.172,0.477,0.189c0.169,0.016,0.334-0.005,0.496-0.061 c0.25-0.086,0.457-0.223,0.598-0.453C10.077,12.132,10.081,11.851,9.912,11.638z M1.099,11.664c-0.049,0-0.082-0.007-0.098-0.058 c-0.025-0.084-0.05-0.201-0.064-0.302C0.914,11.13,0.9,11.011,0.886,10.839c-0.012-0.143-0.017-0.281-0.016-0.425 c0.001-0.17,0.011-0.348,0.064-0.511c0.02-0.061,0.048-0.122,0.092-0.17c0.061-0.067,0.176-0.068,0.24,0.038 c0.052,0.083,0.072,0.17,0.082,0.266c0.014,0.126,0.019,0.246,0.019,0.379c0,0.181-0.011,0.365-0.027,0.55 c-0.02,0.211-0.069,0.408-0.156,0.61C1.167,11.615,1.146,11.664,1.099,11.664z M8.453,10.618c-0.027,0.275-0.053,0.487-0.098,0.726 c-0.013,0.071-0.033,0.108-0.078,0.108c-0.039,0-0.078-0.002-0.095-0.053c-0.028-0.084-0.04-0.171-0.052-0.26 c-0.019-0.147-0.036-0.3-0.044-0.448c-0.01-0.201-0.016-0.381-0.013-0.582c0.002-0.13,0.016-0.285,0.056-0.41 C8.15,9.634,8.175,9.573,8.208,9.513c0.024-0.043,0.069-0.071,0.123-0.069C8.365,9.446,8.384,9.45,8.405,9.51 c0.023,0.065,0.039,0.127,0.049,0.195c0.021,0.155,0.018,0.253,0.019,0.374C8.475,10.267,8.469,10.45,8.453,10.618z M9.675,12.102 c-0.035,0.097-0.097,0.173-0.179,0.24c-0.126,0.098-0.254,0.159-0.413,0.181c-0.138,0.019-0.279,0.021-0.406-0.039 c-0.101-0.048-0.18-0.114-0.194-0.231c-0.009-0.073,0.012-0.149,0.049-0.211c0.1-0.167,0.255-0.263,0.436-0.321 c0.084-0.027,0.171-0.035,0.26-0.033c0.126,0.002,0.247,0.024,0.352,0.1C9.69,11.866,9.713,11.982,9.675,12.102z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Amazon Lumberyard" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Amazonlumberyard extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Amazonprime.svelte generated by Svelte v3.23.2 */

        function create_fragment$_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.8054 12.403c-.0699-.096-.144-.1746-.144-.3538v-.5945c0-.2523.0179-.484-.168-.6576-.1466-.1408-.3892-.1903-.5752-.1903-.3635 0-.7688.136-.8542.5849-.0087.0476.0258.0728.0573.08l.3703.0398c.0345-.0014.0597-.0358.066-.0703.032-.1544.1616-.2292.3073-.2292.0786 0 .1679.0292.214.099.0538.0787.0466.1864.0466.2772v.0495c-.2214.0248-.511.0413-.7183.1325-.2393.1034-.4072.314-.4072.6242 0 .3965.2504.595.5717.595.2718 0 .4198-.064.6295-.2776.0694.1005.0922.1495.219.2548.0285.015.0649.0136.0902-.0092l.294-.2524c.0312-.0257.0253-.067.001-.102m-.68-.5765c0 .149.0035.2728-.0713.4053-.0606.1072-.1572.1732-.2645.1732-.1465 0-.232-.1116-.232-.2766 0-.3257.2917-.3844.5679-.3844zm5.6864.5766c-.0694-.0961-.1441-.1747-.1441-.3539v-.5945c0-.2523.018-.484-.168-.6576-.1465-.1408-.3892-.1903-.5751-.1903-.3636 0-.7688.136-.8537.5849-.0093.0476.0257.0728.0568.08l.3703.0398c.0344-.0014.0596-.0358.066-.0703.032-.1544.1616-.2292.3072-.2292.0786 0 .168.0292.214.099.0539.0787.0466.1864.0466.2772v.0495c-.2213.0248-.511.0413-.7178.1325-.2397.1034-.4076.314-.4076.6242 0 .3965.2504.595.5717.595.2717 0 .4202-.064.63-.2776.0689.1005.0916.1495.2188.2548a.0788.0788 0 0 0 .0898-.0092l.001.001c.0767-.068.215-.1883.293-.2534.0312-.0257.0259-.067.0011-.102m-.7513-.1712c-.0607.1072-.1572.1732-.2646.1732-.1465 0-.232-.1116-.232-.2766 0-.3257.2918-.3844.568-.3844v.0825c0 .149.0038.2728-.0714.4053m5.16.5307h-.3806a.0717.0717 0 0 1-.0684-.0704l-.0007-1.9608c.0032-.0359.0349-.064.0734-.064h.3542a.0725.0725 0 0 1 .0678.0547v.2999h.0073c.107-.2682.2566-.396.5204-.396.1711 0 .3387.0618.4457.231.0998.1567.0998.4206.0998.6104v1.2335c-.0043.0347-.0355.0617-.0732.0617h-.3829a.072.072 0 0 1-.068-.0617v-1.0643c0-.2145.025-.528-.2388-.528-.0927 0-.1782.0619-.221.1567-.0535.1197-.0607.2393-.0607.3713v1.0554a.073.073 0 0 1-.0743.0706M9.612 10.6259c.5668 0 .8733.4868.8733 1.1055 0 .598-.3385 1.0724-.8733 1.0724-.5561 0-.8592-.4868-.8592-1.0931 0-.6104.3066-1.0848.8592-1.0848m.0035.4002c-.2817 0-.2994.3835-.2994.6227 0 .2392-.0036.7507.296.7507.2958 0 .31-.4125.31-.664 0-.1649-.0071-.363-.057-.5197-.0428-.1362-.1285-.1897-.2496-.1897m-7.062 1.7364h-.3819a.0719.0719 0 0 1-.0683-.0646l.0003-1.96c0-.0393.033-.0706.0738-.0706h.3556c.0372.0017.067.03.0694.0657v.256h.0071c.0927-.2476.2674-.363.5027-.363.2388 0 .3886.1154.4954.363.0928-.2476.3031-.363.5277-.363.1605 0 .3351.066.4421.2144.1212.165.0963.4042.0963.6146l-.0004 1.237c0 .039-.033.0705-.0737.0705h-.3813a.0715.0715 0 0 1-.0686-.0704v-1.0392c0-.0824.007-.2886-.0109-.367-.0284-.132-.114-.1692-.2244-.1692-.0928 0-.189.062-.2283.1608-.0392.0991-.0356.264-.0356.3754v1.039c0 .0392-.033.0706-.0737.0706h-.3815a.0716.0716 0 0 1-.0685-.0704l-.0004-1.0392c0-.2185.0356-.5402-.2352-.5402-.2745 0-.2638.3134-.2638.5402l-.0002 1.039c0 .0392-.033.0706-.0737.0706m4.5791-1.7494v-.28a.0692.0692 0 0 1 .071-.071h1.2553c.0402 0 .0724.0291.0724.0706v.2402c-.0003.0403-.0343.0929-.0945.1763l-.6502.9284c.2413-.0056.4967.0306.716.1538.0494.0278.0627.069.0666.1093v.2989c0 .0411-.0451.0888-.0925.064-.3863-.2024-.8991-.2245-1.3263.0025-.0437.0232-.0894-.0238-.0894-.065v-.284c0-.0455.0009-.1233.0467-.1926l.7534-1.0808h-.656c-.04 0-.0722-.0286-.0725-.0706m.8171 2.1613c-.0917-.1174-.606-.0556-.8372-.028-.07.0084-.0809-.0527-.0179-.097.4105-.2882 1.0829-.205 1.1611-.1085.0787.0973-.0207.7715-.4052 1.0933-.0592.0494-.1155.023-.0892-.0423.0865-.2161.2802-.7.1884-.8175m-.2983.3406c-.717.529-1.7563.8105-2.6514.8105-1.2543 0-2.384-.4638-3.2388-1.2355-.067-.0607-.0072-.1434.0735-.0965.9222.5366 2.0628.8598 3.2406.8598.7947 0 1.6681-.1649 2.4719-.5058.1211-.0514.2228.0799.1042.1675m15.5297-.693c-.342 0-.6045-.0938-.7879-.2813-.1835-.1875-.275-.4563-.275-.8065 0-.3584.0935-.6397.2811-.8437.1875-.204.4481-.3061.7817-.3061.2565 0 .4571.062.6019.1861.1447.1241.2171.2895.2171.4963 0 .2068-.078.3634-.2337.4694-.1558.1063-.3853.1593-.6887.1593-.157 0-.2936-.0151-.4094-.0455.0165.1847.0724.3171.1675.397.0952.08.2392.12.4323.12.0771 0 .1522-.0048.2253-.0145.073-.0096.1744-.031.304-.064a.163.163 0 0 1 .0455-.0084c.0468 0 .0703.0318.0703.0952v.1902c0 .0441-.0062.0752-.0185.093-.0125.018-.0366.0339-.0725.0476-.2013.0772-.415.1158-.641.1158m-.1365-1.2986c.1406 0 .2426-.0214.306-.0641.0634-.0428.0952-.1083.0952-.1965 0-.1738-.1034-.2606-.3102-.2606-.2647 0-.4177.1628-.4591.488.1103.0221.233.0332.3681.0332M18.6275 12.76c-.0359 0-.0622-.0082-.0786-.0248-.0166-.0165-.0248-.0427-.0248-.0786V10.75c0-.0387.0082-.0655.0248-.0807.0164-.0151.0427-.0227.0786-.0227h.2977c.0634 0 .102.0303.1159.091l.033.1116c.1461-.0965.2778-.1647.395-.2047.1171-.04.2378-.06.362-.06.248 0 .4231.0882.5251.2647.1407-.0937.273-.1613.3972-.2026.124-.0414.2522-.062.3846-.062.193 0 .3425.0536.4487.1612.1061.1076.1593.258.1593.4508v1.46c0 .0359-.0077.062-.0228.0786-.0152.0166-.042.0248-.0807.0248h-.397c-.0359 0-.062-.0082-.0785-.0248-.0166-.0165-.025-.0427-.025-.0786V11.329c0-.1875-.084-.2813-.2522-.2813-.1489 0-.2992.0359-.4508.1075v1.5014c0 .0359-.0076.062-.0228.0786-.0152.0166-.042.0248-.0806.0248h-.397c-.036 0-.0621-.0082-.0787-.0248-.0165-.0165-.0248-.0427-.0248-.0786V11.329c0-.1875-.0842-.2813-.2523-.2813-.1544 0-.306.0373-.4549.1116v1.4973c0 .0359-.0077.062-.0227.0786-.0153.0166-.0422.0248-.0807.0248zm-.9174-2.4402c-.1048 0-.1888-.029-.2522-.0869-.0635-.0578-.0952-.1364-.0952-.2357s.0317-.1778.0952-.2357c.0634-.058.1474-.0869.2523-.0869.1046 0 .1888.029.2522.0869.0634.0579.0952.1364.0952.2357s-.0318.1779-.0952.2357c-.0634.058-.1476.087-.2523.087m-.1985 2.4401c-.0358 0-.062-.0083-.0786-.0249-.0166-.0164-.0248-.0426-.0248-.0785V10.75c0-.0386.0082-.0655.0248-.0807.0165-.0151.0428-.0227.0786-.0227h.397c.0386 0 .0655.0076.0807.0227.0151.0152.0228.042.0228.0807v1.9066c0 .036-.0077.062-.0228.0785-.0152.0166-.042.025-.0807.025zm-1.6527 0c-.0359 0-.0622-.0082-.0786-.0248-.0166-.0165-.0248-.0427-.0248-.0786V10.75c0-.0387.0082-.0655.0248-.0807.0164-.0151.0427-.0227.0786-.0227h.2977c.0634 0 .102.0303.1158.091l.0538.2233c.1103-.1214.2144-.2075.3123-.2585a.6664.6664 0 0 1 .3123-.0765h.0578c.0386 0 .0662.0076.0827.0227.0166.0152.0248.042.0248.0807v.3474c0 .0358-.0076.062-.0227.0785-.0151.0166-.042.025-.0807.025a.8293.8293 0 0 1-.0744-.0043 1.3657 1.3657 0 0 0-.1158-.0041c-.0634 0-.1406.009-.2316.0269-.091.018-.1682.0407-.2316.0683v1.3896c0 .0359-.0077.062-.0227.0786-.0153.0166-.0422.0248-.0807.0248zm-2.477.852c-.0358 0-.062-.0077-.0786-.0227-.0165-.0153-.0248-.042-.0248-.0807V10.75c0-.0386.0083-.0655.0248-.0807.0166-.0151.0428-.0227.0786-.0227h.2978c.0634 0 .102.0304.1157.091l.029.1075c.0828-.08.1827-.1433.2999-.1903a.9562.9562 0 0 1 .3578-.0703c.2673 0 .479.098.6348.2937.1558.1958.2337.4605.2337.794 0 .229-.0386.4288-.1157.5997-.0772.171-.1821.3027-.3144.395-.1324.0925-.284.1386-.4549.1386a.965.965 0 0 1-.3226-.0538c-.1021-.0358-.189-.0854-.2606-.1489v.9058c0 .0386-.0076.0654-.0227.0807-.0153.015-.0421.0227-.0807.0227zm.9057-1.2615c.1545 0 .2682-.0523.3413-.157.073-.1048.1097-.2703.1097-.4964 0-.2288-.036-.3956-.1076-.5005-.0718-.1048-.1862-.1571-.3434-.1571a.7883.7883 0 0 0-.4052.1116v1.0878c.1212.0744.2564.1116.4052.1116Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Amazon Prime" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Amazonprime extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$_, create_fragment$_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Amd.svelte generated by Svelte v3.23.2 */

        function create_fragment$$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.324 9.137l1.559 1.56h2.556v2.557L24 14.814V9.137zM2 9.52l-2 4.96h1.309l.37-.982H3.9l.408.982h1.338L3.432 9.52zm4.209 0v4.955h1.238v-3.092l1.338 1.562h.188l1.338-1.556v3.091h1.238V9.52H10.47l-1.592 1.845L7.287 9.52zm6.283 0v4.96h2.057c1.979 0 2.88-1.046 2.88-2.472 0-1.36-.937-2.488-2.747-2.488zm1.237.91h.792c1.17 0 1.63.711 1.63 1.57 0 .728-.372 1.572-1.616 1.572h-.806zm-10.985.273l.791 1.932H2.008zm17.137.307l-1.604 1.603v2.25h2.246l1.604-1.607h-2.246z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AMD" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Amd extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$$, create_fragment$$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Americanairlines.svelte generated by Svelte v3.23.2 */

        function create_fragment$10(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 .244h3.264c1.377 0 1.942.563 2.499 1.116.637.58 2.57 3.196 6.657 8.303H7.997c-1.809 0-2.38-.308-3.08-1.375zm10.424 17.072l-2.427-4.013c-.292-.455-.372-.854-.372-1.318 0-.51.217-.79 1.053-1.233.973-.466 2.933-.67 4.954-.67 3.283 0 4.07 1.055 4.405 2.192 0 0-.464-.185-1.554-.185-3.459 0-6.223 1.68-6.223 4.221 0 .534.164 1.006.164 1.006zm4.936-3.417c-2.547.089-5.032 1.869-4.936 3.416l2.7 4.486c.836 1.344 2.215 1.955 3.932 1.955H24l-8.13-9.852a5.55 5.55 0 0 0-.51-.005Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$10($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "American Airlines" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Americanairlines extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$10, create_fragment$10, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Americanexpress.svelte generated by Svelte v3.23.2 */

        function create_fragment$11(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.015 14.378c0-.32-.135-.496-.344-.622-.21-.12-.464-.135-.81-.135h-1.543v2.82h.675v-1.027h.72c.24 0 .39.024.478.125.12.13.104.38.104.55v.35h.66v-.555c-.002-.25-.017-.376-.108-.516-.06-.08-.18-.18-.33-.234l.02-.008c.18-.072.48-.297.48-.747zm-.87.407l-.028-.002c-.09.053-.195.058-.33.058h-.81v-.63h.824c.12 0 .24 0 .33.05.098.048.156.147.15.255 0 .12-.045.215-.134.27zM20.297 15.837H19v.6h1.304c.676 0 1.05-.278 1.05-.884 0-.28-.066-.448-.187-.582-.153-.133-.392-.193-.73-.207l-.376-.015c-.104 0-.18 0-.255-.03-.09-.03-.15-.105-.15-.21 0-.09.017-.166.09-.21.083-.046.177-.066.272-.06h1.23v-.602h-1.35c-.704 0-.958.437-.958.84 0 .9.776.855 1.407.87.104 0 .18.015.225.06.046.03.082.106.082.18 0 .077-.035.15-.08.18-.06.053-.15.07-.277.07zM0 0v10.096L.81 8.22h1.75l.225.464V8.22h2.043l.45 1.02.437-1.013h6.502c.295 0 .56.057.756.236v-.23h1.787v.23c.307-.17.686-.23 1.12-.23h2.606l.24.466v-.466h1.918l.254.465v-.466h1.858v3.948H20.87l-.36-.6v.585h-2.353l-.256-.63h-.583l-.27.614h-1.213c-.48 0-.84-.104-1.08-.24v.24h-2.89v-.884c0-.12-.03-.12-.105-.135h-.105v1.036H6.067v-.48l-.21.48H4.69l-.202-.48v.465H2.235l-.256-.624H1.4l-.256.624H0V24h23.786v-7.108c-.27.135-.613.18-.973.18H21.09v-.255c-.21.165-.57.255-.914.255H14.71v-.9c0-.12-.018-.12-.12-.12h-.075v1.022h-1.8v-1.066c-.298.136-.643.15-.928.136h-.214v.915h-2.18l-.54-.617-.57.6H4.742v-3.93h3.61l.518.602.554-.6h2.412c.28 0 .74.03.942.225v-.24h2.177c.202 0 .644.045.903.225v-.24h3.265v.24c.163-.164.508-.24.803-.24h1.89v.24c.194-.15.464-.24.84-.24h1.176V0H0zM21.156 14.955c.004.005.006.012.01.016.01.01.024.01.032.02l-.042-.035zM23.828 13.082h.065v.555h-.065zM23.865 15.03v-.005c-.03-.025-.046-.048-.075-.07-.15-.153-.39-.215-.764-.225l-.36-.012c-.12 0-.194-.007-.27-.03-.09-.03-.15-.105-.15-.21 0-.09.03-.16.09-.204.076-.045.15-.05.27-.05h1.223v-.588h-1.283c-.69 0-.96.437-.96.84 0 .9.78.855 1.41.87.104 0 .18.015.224.06.046.03.076.106.076.18 0 .07-.034.138-.09.18-.045.056-.136.07-.27.07h-1.288v.605h1.287c.42 0 .734-.118.9-.36h.03c.09-.134.135-.3.135-.523 0-.24-.045-.39-.135-.526zM18.597 14.208v-.583h-2.235V16.458h2.235v-.585h-1.57v-.57h1.533v-.584h-1.532v-.51M13.51 8.787h.685V11.6h-.684zM13.126 9.543l-.007.006c0-.314-.13-.5-.34-.624-.217-.125-.47-.135-.81-.135H10.43v2.82h.674v-1.034h.72c.24 0 .39.03.487.12.122.136.107.378.107.548v.354h.677v-.553c0-.25-.016-.375-.11-.516-.09-.107-.202-.19-.33-.237.172-.07.472-.3.472-.75zm-.855.396h-.015c-.09.054-.195.056-.33.056H11.1v-.623h.825c.12 0 .24.004.33.05.09.04.15.128.15.25s-.047.22-.134.266zM15.92 9.373h.632v-.6h-.644c-.464 0-.804.105-1.02.33-.286.3-.362.69-.362 1.11 0 .512.123.833.36 1.074.232.238.645.31.97.31h.78l.255-.627h1.39l.262.627h1.36v-2.11l1.272 2.11h.95l.002.002V8.786h-.684v1.963l-1.18-1.96h-1.02V11.4L18.11 8.744h-1.004l-.943 2.22h-.3c-.177 0-.362-.03-.468-.134-.125-.15-.186-.36-.186-.662 0-.285.08-.51.194-.63.133-.135.272-.165.516-.165zm1.668-.108l.464 1.118v.002h-.93l.466-1.12zM2.38 10.97l.254.628H4V9.393l.972 2.205h.584l.973-2.202.015 2.202h.69v-2.81H6.118l-.807 1.904-.876-1.905H3.343v2.663L2.205 8.787h-.997L.01 11.597h.72l.26-.626h1.39zm-.688-1.705l.46 1.118-.003.002h-.915l.457-1.12zM11.856 13.62H9.714l-.85.923-.825-.922H5.346v2.82H8l.855-.932.824.93h1.302v-.94h.838c.6 0 1.17-.164 1.17-.945l-.006-.003c0-.78-.598-.93-1.128-.93zM7.67 15.853l-.014-.002H6.02v-.557h1.47v-.574H6.02v-.51H7.7l.733.82-.764.824zm2.642.33l-1.03-1.147 1.03-1.108v2.253zm1.553-1.258h-.885v-.717h.885c.24 0 .42.098.42.344 0 .243-.15.372-.42.372zM9.967 9.373v-.586H7.73V11.6h2.237v-.58H8.4v-.564h1.527V9.88H8.4v-.507");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$11($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "American Express" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Americanexpress extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$11, create_fragment$11, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Anaconda.svelte generated by Svelte v3.23.2 */

        function create_fragment$12(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.37 18.34c-.9-.09-1.8-.26-2.68-.5l-.08-.02.02-.08c.26-.85.59-1.68.98-2.47l.04-.08.07.04c.59.33 1.22.63 1.85.89l.06.02-.01.06c-.1.67-.15 1.36-.17 2.05v.09h-.08zM6.31 6.23v-.02c-.52.01-1.04.04-1.55.1.06.53.16 1.05.27 1.56.36-.6.79-1.15 1.28-1.64zM4.46 18.95v-.07l-.07-.01c-.76-.07-1.53-.2-2.29-.38l-.2-.05.11.18c.69 1.04 1.53 1.96 2.5 2.74l.16.13-.03-.2c-.11-.8-.17-1.59-.18-2.34zM8.17.7c-.93.32-1.81.75-2.62 1.28.61.11 1.22.25 1.81.43.24-.59.51-1.15.81-1.71zm3.87-.64c-.46 0-.91.03-1.36.08.63.44 1.24.92 1.81 1.45l.48.44-.47.45c-.39.37-.76.77-1.12 1.2l-.02.02s-.07.08-.18.21c.28-.03.57-.05.86-.05 4.49 0 8.14 3.64 8.14 8.14 0 4.49-3.64 8.14-8.14 8.14-1.56 0-3.02-.44-4.25-1.2-.61.07-1.22.1-1.84.1-.29 0-.57-.01-.86-.02.02.93.11 1.88.26 2.88 1.91 1.29 4.21 2.05 6.69 2.05 6.6 0 11.94-5.35 11.94-11.94 0-6.6-5.34-11.95-11.94-11.95zm-1.58 2.82c.24-.28.48-.55.73-.82-.56-.48-1.15-.91-1.77-1.3-.38.64-.71 1.31-.99 1.99.54.2 1.06.43 1.58.68.23-.31.4-.49.45-.55zM2.35 9.7l.05.07.07-.05c.55-.4 1.13-.77 1.73-1.1l.06-.02-.02-.07c-.18-.67-.32-1.37-.41-2.08l-.01-.08-.08.02c-.88.16-1.76.4-2.6.7l-.08.03.03.08c.35.86.77 1.7 1.26 2.5zm-.14 1.15l-.07.05C1.5 11.42.89 12 .33 12.62l-.06.06.06.05c.62.54 1.29 1.04 1.99 1.48l.07.05.04-.07c.31-.56.67-1.11 1.05-1.64l.04-.05-.04-.05c-.44-.49-.85-1-1.23-1.54l-.04-.06zm4.69 7.53l.21-.01-.16-.13c-.64-.52-1.19-1.13-1.64-1.83v-.02l-.13-.06-.02.11c-.08.6-.13 1.22-.14 1.86v.08h.08c.28.02.57.02.85.02.31.01.63 0 .95-.02zM6.5 5.19c.13-.59.29-1.17.48-1.74-.75-.21-1.52-.37-2.29-.48-.07.78-.08 1.56-.03 2.33.61-.07 1.23-.1 1.84-.11zm1.15-.04c.52-.33 1.08-.61 1.67-.82-.42-.19-.84-.37-1.28-.53-.15.44-.28.9-.39 1.35zm-5.55 9.7l-.06-.04c-.62-.39-1.21-.82-1.77-1.28l-.16-.13.03.21c.15 1.15.47 2.26.94 3.32l.08.19.07-.19c.23-.68.52-1.35.84-1.99l.03-.09zM3.63 3.52c-.71.71-1.34 1.5-1.85 2.37.62-.18 1.24-.33 1.87-.44-.04-.64-.05-1.28-.02-1.93zm.36 8.38l.01-.21c.03-.73.15-1.44.37-2.13l.06-.2-.18.1c-.47.27-.93.57-1.37.89l-.07.05.05.07c.31.44.64.87.99 1.28l.14.15zm.08 1.22l-.03-.2-.12.18c-.33.47-.64.95-.92 1.45l-.04.07.07.04c.5.28 1.03.54 1.56.77l.19.08-.09-.19c-.31-.7-.52-1.44-.62-2.2zm-2.33-2.85l.06-.05-.04-.06c-.37-.6-.71-1.23-1.01-1.87l-.09-.18-.06.2C.25 9.39.06 10.52.03 11.66l-.01.21.15-.15c.49-.52 1.02-1.02 1.57-1.45z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$12($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Anaconda" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Anaconda extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$12, create_fragment$12, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Analogue.svelte generated by Svelte v3.23.2 */

        function create_fragment$13(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.468 12.804a5.145 5.145 0 10-.644 10.27 5.145 5.145 0 00.644-10.27zm17.841 2.562L16.45 3.484a5.146 5.146 0 00-8.912 5.15l6.86 11.878a5.148 5.148 0 007.031 1.885 5.146 5.146 0 001.881-7.031z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$13($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Analogue" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Analogue extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$13, create_fragment$13, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Anchor.svelte generated by Svelte v3.23.2 */

        function create_fragment$14(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.335 12.606c-.171.682-.586 1.261-1.139 1.564l-.428.234.78 1.32.41-.226a3.743 3.743 0 001.435-1.44 4.404 4.404 0 00.565-2.1v-.016a4.403 4.403 0 00-.565-2.1 3.744 3.744 0 00-1.434-1.44l-.41-.225-.78 1.32.427.234c.571.312.995.92 1.155 1.632H7.244a1.4 1.4 0 00-1.24-.743c-.77 0-1.396.617-1.396 1.377 0 .759.626 1.377 1.396 1.377a1.4 1.4 0 001.252-.768zM12 24C6.392 24 1.846 18.627 1.846 12S6.392 0 12 0s10.154 5.373 10.154 12S17.608 24 12 24zm5.591-11.164c-.29 2.825-1.867 5.206-4.06 6.377l.829 1.368c2.846-1.526 4.83-4.767 4.896-8.538-.066-3.771-2.05-7.012-4.896-8.539l-.83 1.37c2.194 1.17 3.771 3.55 4.061 6.375l.023.794zm-4.652 5.336l.194-.107c.995-.547 1.841-1.398 2.446-2.46a7.645 7.645 0 00.98-3.648v-.008a7.645 7.645 0 00-.98-3.647c-.605-1.063-1.451-1.914-2.446-2.46l-.194-.108-.79 1.336.203.11a4.892 4.892 0 011.772 1.702c.467.744.763 1.62.856 2.535l.015.536-.015.535a5.905 5.905 0 01-.856 2.536 4.89 4.89 0 01-1.772 1.701l-.203.111z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$14($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Anchor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Anchor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$14, create_fragment$14, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Andela.svelte generated by Svelte v3.23.2 */

        function create_fragment$15(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.166 7.911l.24-2.315-2.316.238-.64-2.16c0-.001 3.664-.308 4.04-.341.37-.03.727-.071.992.18v-.001a.106.106 0 01.003.003l.003.003c.25.266.208.623.178.991l-.339 4.042zM5.834 16.09l-.238 2.315 2.315-.238.64 2.16-4.04.34c-.37.03-.728.072-.993-.179l-.003-.002-.004-.003h.001c-.25-.265-.208-.623-.177-.993.03-.376.338-4.04.338-4.04zm13.418-2.62L21.058 12l-1.806-1.468 1.075-1.981s2.808 2.374 3.098 2.616c.281.241.564.464.574.829H24V12a.01.01 0 000 .004c-.01.365-.294.588-.576.827l-3.097 2.618zM4.749 10.532L2.943 12l1.806 1.468-1.076 1.981-3.096-2.617c-.283-.24-.566-.464-.576-.829V12L0 11.995h.001c.01-.364.293-.587.576-.827L3.673 8.55zm11.34 7.634l2.316.24-.239-2.316 2.161-.64.34 4.04c.03.37.071.727-.18.992h.001a.012.012 0 00-.003.003l-.003.003c-.265.25-.623.208-.991.178l-4.042-.34zM7.911 5.834l-2.315-.238.239 2.315-2.162.64-.338-4.04c-.031-.37-.073-.728.178-.993 0-.002.002-.003.002-.003l.003-.004.001.001c.265-.25.622-.208.993-.178l4.04.339zm2.62 13.418L12 21.058l1.468-1.806 1.981 1.075-2.616 3.098c-.241.281-.464.564-.829.574V24H12h-.004c-.365-.01-.588-.294-.827-.575L8.55 20.327zm2.937-14.503L12 2.943 10.532 4.75l-1.98-1.076L11.167.577c.24-.284.464-.566.829-.576h.008c.364.01.587.292.827.576l2.617 3.096zm-1.466 7.785H10.58L12 9.09v.003-.003l.002.003v-.003l1.42 3.445zm3.967 3.04l-3.302-8.17c-.073-.213-.263-.575-.668-.575-.404 0-.593.362-.667.575l-3.3 8.17c0 .005-.127.277-.102.312.025.035.067.053.121.053h1.013c.1 0 .169-.052.218-.167l.81-1.986h3.811l.816 1.986c.048.115.117.167.218.167h1.013c.053 0 .096-.018.12-.053.026-.035-.101-.307-.101-.311Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$15($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Andela" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Andela extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$15, create_fragment$15, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Android.svelte generated by Svelte v3.23.2 */

        function create_fragment$16(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 19.005H0a13.6 13.6 0 012.21-6.07 11.2 11.2 0 013.66-3.53l.41-.23-2.02-3.41a.51.51 0 01.17-.7.5.5 0 01.69.18l2.08 3.5a12.62 12.62 0 014.84-.9 12.2 12.2 0 014.75.9l2.07-3.5a.5.5 0 01.7-.17.51.51 0 01.16.7l-2.02 3.42.5.28a11.38 11.38 0 013.63 3.62 14.48 14.48 0 012.17 5.91zm-7.5-4.48a1 1 0 001 1 1 1 0 001-1 1 1 0 00-1-1 1 1 0 00-1 1zm-11 0a1 1 0 001 1 1 1 0 001-1 1 1 0 00-1-1 1 1 0 00-1 1z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$16($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Android" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Android extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$16, create_fragment$16, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Androidauto.svelte generated by Svelte v3.23.2 */

        function create_fragment$17(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0c-.6 0-1.11.32-1.39.8L.48 18.4a1.6 1.6 0 0 0 1.39 2.4h2l7.7-13.58.43-.77 8.13 14.35h2a1.6 1.6 0 0 0 1.39-2.4L13.39.8A1.6 1.6 0 0 0 12 0zm0 7.47l-9.07 16 .54.53L12 20.8l8.53 3.2.54-.53z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$17($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Android Auto" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Androidauto extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$17, create_fragment$17, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Androidstudio.svelte generated by Svelte v3.23.2 */

        function create_fragment$18(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C6.0697 0 1.254 4.8158 1.254 10.746c0 3.29 1.4819 6.237 3.8144 8.209l4.5097-7.7987-.3926-.3907c-.115-.1151-.173-.2124-.1757-.3027a.2386.2386 0 010-.0293H9V7.875c0-.6155.5095-1.123 1.125-1.123h.6348V4.7383H13.25V6.752h.625c.6253 0 1.125.5075 1.1348 1.1328v2.539H15v.0098h-.002c-.0032.0868-.0511.1996-.1738.3223l-.0097.0097-.3907.3907 1.9336 3.3417c.8695-1.016 1.3965-2.3255 1.3965-3.752h2.004c0 2.1788-.9096 4.1538-2.3556 5.5606l1.5293 2.6504c2.333-1.9721 3.8145-4.9207 3.8145-8.211C22.7559 4.806 17.94 0 12 0zm6.9316 18.957a10.7911 10.7911 0 01-1.6523 1.1504l1.5195 2.627a.5687.5687 0 00.1973.205L20.5 23.9649c.0586.0391.127.0391.1855.0098.0587-.039.088-.0976.088-.166l-.1563-1.8066c-.0098-.0977-.039-.1856-.0879-.2735l-1.5977-2.7715zm-1.6523 1.1504l-1.498-2.5898a7.6932 7.6932 0 01-3.7715.9863 7.6932 7.6932 0 01-3.7715-.9863l-1.5 2.5976c1.556.8767 3.3504 1.379 5.2617 1.379 1.9182 0 3.7195-.5042 5.2793-1.3868zm-10.541.0078a10.788 10.788 0 01-1.67-1.1601l-1.5976 2.7636c-.0488.088-.0781.1758-.0879.2735l-.1367 1.8164c-.0098.0684.0293.127.0879.166.0586.039.127.0293.1855-.0098l1.504-1.0156c.0781-.0586.1464-.1269.1952-.205l1.5196-2.629zM12 7.7285v.0195c-.8288 0-1.4915.6622-1.4941 1.5.0026.8283.675 1.498 1.4941 1.498h.0098c.819-.0097 1.4914-.6699 1.4941-1.498-.0026-.8281-.675-1.4902-1.4941-1.5L12 7.7285zm-.9473 4.9043l-1.8183 3.1465A5.7067 5.7067 0 0012 16.4922c1.0063 0 1.9547-.2537 2.7559-.7031l-1.8145-3.1504-.375.375c-.1465.1563-.3515.2343-.5566.2343h-.0196c-.1954 0-.4003-.078-.5566-.2343l-.3809-.3809Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$18($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Android Studio" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Androidstudio extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$18, create_fragment$18, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Angellist.svelte generated by Svelte v3.23.2 */

        function create_fragment$19(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.465 9.954c.735-2 1.31-3.65 1.723-4.954.41-1.3.618-2.1.618-2.4 0-.315-.07-.564-.21-.738-.135-.174-.324-.264-.567-.264-.31 0-.63.255-.94.765-.32.51-.67 1.334-1.06 2.467l-1.65 4.76 2.08.362h-.01v.002zm-2.193 4.435c-.474-.03-.923-.08-1.344-.15-.42-.08-.83-.19-1.216-.33.177.35.335.7.472 1.05.138.35.25.69.34 1.04.26-.33.54-.63.83-.9.292-.27.6-.51.915-.72zm-1.862-5l-1.78-5.14c-.464-1.31-.82-2.16-1.075-2.57-.25-.4-.525-.6-.822-.6-.23 0-.417.08-.56.26-.144.18-.214.41-.214.7 0 .5.19 1.38.57 2.64.38 1.25.96 2.89 1.73 4.93.06-.12.16-.21.28-.26.12-.05.28-.08.49-.08.06 0 .19.01.39.01.19.02.52.04.97.09zm-1.618 7.96c.188 0 .36-.09.51-.26.15-.18.234-.36.234-.55 0-.21-.15-.7-.452-1.46-.3-.76-.68-1.51-1.13-2.25-.33-.55-.655-.97-.97-1.25-.324-.28-.625-.42-.91-.42-.23 0-.484.14-.767.44-.28.29-.42.56-.42.81 0 .26.14.66.413 1.18.275.53.645 1.09 1.104 1.68.485.65.94 1.15 1.37 1.51.428.36.77.54 1.02.54h-.002zm-4.945-.4c.156.19.37.46.646.82.723 1 1.395 1.5 2.01 1.5.21 0 .397-.07.563-.2.164-.14.247-.27.247-.42 0-.17-.11-.44-.33-.83-.222-.39-.524-.82-.907-1.3-.44-.56-.805-.97-1.098-1.23-.288-.26-.525-.39-.697-.39-.38 0-.74.21-1.06.62-.32.4-.48.9-.48 1.46 0 .45.12.95.35 1.51.23.55.55 1.11.98 1.67.65.87 1.46 1.53 2.42 2 .96.46 2.03.69 3.19.69 2.14 0 3.94-.8 5.38-2.4 1.45-1.6 2.17-3.6 2.17-6.01 0-.74-.05-1.33-.16-1.76-.11-.43-.29-.75-.54-.95-.45-.38-1.33-.71-2.63-1.01-1.3-.3-2.66-.45-4.08-.45-.39 0-.68.07-.84.2-.16.13-.24.36-.24.673 0 .75.42 1.29 1.26 1.626.84.34 2.19.51 4.06.51h.676c.15 0 .28.06.37.174.09.11.15.28.18.52-.19.17-.57.37-1.154.6-.59.22-1.03.45-1.34.665-.66.484-1.19 1.06-1.59 1.724-.4.66-.6 1.29-.6 1.883 0 .36.086.8.258 1.31.17.51.26.823.26.95v.11l-.03.15c-.48-.03-.86-.313-1.14-.85-.287-.53-.42-1.24-.42-2.13v-.15c-.09.075-.176.135-.26.165-.086.034-.178.05-.27.05-.1 0-.198-.006-.29-.02-.09-.016-.18-.04-.29-.075.03.12.057.24.076.353.01.12.02.21.02.27 0 .406-.16.76-.48 1.05-.32.287-.7.43-1.14.43-.69 0-1.397-.34-2.11-1.01-.715-.674-1.07-1.34-1.07-1.985 0-.12.015-.23.04-.323s.075-.17.14-.24zm11.807-6.73c.985.18 1.685.6 2.09 1.25.41.64.61 1.66.61 3.06 0 2.77-.828 5.03-2.492 6.79-1.667 1.76-3.797 2.65-6.387 2.65-1.023 0-2.016-.19-2.976-.56-.97-.37-1.79-.89-2.49-1.54-.79-.73-1.39-1.49-1.78-2.3-.4-.81-.6-1.64-.6-2.48 0-.95.2-1.68.6-2.19.4-.52 1.05-.87 1.93-1.06-.17-.39-.29-.71-.36-.98-.08-.27-.12-.47-.12-.61 0-.5.26-1.01.78-1.52.52-.52 1.01-.78 1.47-.78.19 0 .4.03.62.11.22.07.47.19.75.35-.81-2.35-1.43-4.2-1.81-5.5-.39-1.31-.58-2.2-.58-2.7 0-.68.17-1.23.52-1.63.36-.4.84-.6 1.44-.6 1.03 0 2.34 2.31 3.93 6.923.28.79.48 1.4.63 1.83l.51-1.453c1.59-4.55 2.95-6.83 4.1-6.83.56 0 1.01.19 1.34.57.33.383.5.887.5 1.523 0 .48-.19 1.36-.56 2.65-.367 1.28-.92 2.96-1.67 5.04");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$19($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AngelList" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Angellist extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$19, create_fragment$19, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Angular.svelte generated by Svelte v3.23.2 */

        function create_fragment$1a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.93 12.645h4.134L11.996 7.74M11.996.009L.686 3.988l1.725 14.76 9.585 5.243 9.588-5.238L23.308 3.99 11.996.01zm7.058 18.297h-2.636l-1.42-3.501H8.995l-1.42 3.501H4.937l7.06-15.648 7.057 15.648z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Angular" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Angular extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1a, create_fragment$1a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Angularuniversal.svelte generated by Svelte v3.23.2 */

        function create_fragment$1b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.6 11.28v1.44a.48.48 0 0 1-.48.48H8.88a.48.48 0 0 1-.48-.48v-1.44a.48.48 0 0 1 .48-.48h6.24a.48.48 0 0 1 .48.48zM12 15.6a1.2 1.2 0 1 0 0 2.4 1.2 1.2 0 0 0 0-2.4zm3.12-8.4H8.88a.48.48 0 0 0-.48.48v1.44c0 .265.215.48.48.48h6.24a.48.48 0 0 0 .48-.48V7.68a.48.48 0 0 0-.48-.48zm8.04-3.204l-1.716 14.736L11.976 24 2.52 18.732.84 3.996 11.976 0 23.16 3.996zM16.8 6.24a1.44 1.44 0 0 0-1.44-1.44H8.64A1.44 1.44 0 0 0 7.2 6.24v11.52c0 .795.645 1.44 1.44 1.44h6.72a1.44 1.44 0 0 0 1.44-1.44V6.24z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Angular Universal" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Angularuniversal extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1b, create_fragment$1b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Angularjs.svelte generated by Svelte v3.23.2 */

        function create_fragment$1c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.964 0L.672 3.974l1.784 14.794L11.976 24l9.568-5.303 1.784-14.794zm-.027 1.258l10.265 3.5-1.663 13.232-8.602 4.76-8.469-4.697L1.939 4.822zm0 .78L4.957 17.57l2.604-.048 1.4-3.501h6.257l1.532 3.55 2.492.046zm.02 4.98l2.355 4.93H9.878Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AngularJS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Angularjs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1c, create_fragment$1c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ansible.svelte generated by Svelte v3.23.2 */

        function create_fragment$1d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.617 11.473l4.686 3.695-3.102-7.662zM12 0C5.371 0 0 5.371 0 12s5.371 12 12 12 12-5.371 12-12S18.629 0 12 0zm5.797 17.305c-.011.471-.403.842-.875.83-.236 0-.416-.09-.664-.293l-6.19-5-2.079 5.203H6.191L11.438 5.44c.124-.314.427-.52.764-.506.326-.014.63.189.742.506l4.774 11.494c.045.111.08.234.08.348-.001.009-.001.009-.001.023z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ansible" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ansible extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1d, create_fragment$1d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ansys.svelte generated by Svelte v3.23.2 */

        function create_fragment$1e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.0424 10.089l-.993 2.4233-.9932-2.4233h-1.227l1.6066 3.921-.7039 1.7179h1.227l2.3104-5.639zm4.667 2.1272c-.1936-.1936-.5004-.3377-.9209-.4332l-.6984-.1599c-.1678-.0447-.2858-.0923-.3531-.143-.0673-.0506-.101-.1207-.101-.2101 0-.1232.0562-.2186.1683-.2859.112-.0673.2664-.101.4628-.101.426 0 .858.1513 1.2954.4542l.3362-.841c-.2241-.1627-.4767-.2886-.757-.3784a2.8304 2.8304 0 0 0-.8663-.1347c-.3476 0-.6576.0562-.9292.1683-.2724.112-.4826.2665-.631.4624-.1485.1964-.223.4237-.223.6814 0 .3254.0939.582.282.7696.1876.188.4806.3267.8789.4165l.673.1517c.2075.0447.3492.0954.4248.1512.076.0562.1136.1346.1136.2356 0 .1124-.0546.2007-.1639.2648-.1092.0645-.262.0966-.4584.0966-.2748 0-.5468-.042-.816-.1259-.2692-.0843-.5163-.2019-.7403-.3531l-.3366.8745c.23.1628.5032.2875.8204.3746.3167.0867.6655.1302 1.0471.1302.555 0 .991-.1136 1.3081-.3408.3167-.2273.4751-.5397.4751-.938-.0008-.331-.0974-.593-.2906-.7866zm-9.3815-.4332l-.698-.1599c-.1682-.0447-.2862-.0923-.3535-.143-.0669-.0506-.1006-.1207-.1006-.2101 0-.1232.0558-.2186.168-.2859.112-.0673.2664-.101.4627-.101.426 0 .858.1513 1.2955.4542l.3365-.841c-.2245-.1627-.4767-.2886-.757-.3784a2.8323 2.8323 0 0 0-.8663-.1347c-.348 0-.6576.0562-.9296.1683-.272.112-.4822.2665-.6306.4624-.1489.1964-.223.4237-.223.6814 0 .3254.0943.582.282.7696.1876.188.481.3267.8793.4165l.673.1517c.2075.0447.3488.0954.4248.1512.0756.0562.1137.1346.1137.2356 0 .1124-.0546.2007-.164.2648-.1092.0645-.2624.0966-.4584.0966-.2748 0-.5468-.042-.816-.1259-.2688-.0843-.5159-.2019-.7403-.3531l-.3362.8745c.2297.1628.5032.2875.82.3746.3167.0867.6659.1302 1.0471.1302.5551 0 .991-.1136 1.3081-.3408.3168-.2273.4751-.5397.4751-.938 0-.3305-.0966-.593-.2902-.7862-.1944-.194-.5012-.3381-.922-.4336zM9.823 9.9828c-.2918 0-.5539.059-.7863.1766-.2328.1176-.422.2886-.5677.5131v-.5887H7.2325v4.1301h1.27v-2.3133c0-.2803.08-.5048.24-.673.1595-.1683.3713-.2526.635-.2526.219 0 .3797.0645.4838.1936.1037.129.1556.3337.1556.614v2.431h1.27v-2.49c0-.5831-.1207-1.019-.3618-1.308-.2415-.2882-.6089-.4328-1.1022-.4328zM4.4334 8.4594l-.8176 1.9954 1.5381 3.7544h1.7262zm-.3726-.1873H2.4325L0 14.2091h1.6284z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ansys" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ansys extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1e, create_fragment$1e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Antdesign.svelte generated by Svelte v3.23.2 */

        function create_fragment$1f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.4511 6.6808c.5091-.5064.5091-1.3316 0-1.838l-1.8729-1.873.0027.0027c-.4957-.4957-1.3478-1.3478-2.5535-2.5508-.568-.5547-1.487-.5493-2.0498.0134L.426 10.9787a1.4426 1.4426 0 0 0 0 2.047l10.549 10.541a1.4506 1.4506 0 0 0 2.0497 0l4.4238-4.4211c.509-.5064.509-1.3317 0-1.8381a1.3049 1.3049 0 0 0-1.8408 0l-3.3493 3.3546c-.1393.1394-.3564.1394-.4957 0l-8.4268-8.4188c-.1394-.1393-.1394-.3563 0-.4956L11.76 3.3289c.0107-.0108.0241-.0188.0349-.0295.1393-.1099.3322-.0992.4608.0295l3.3547 3.352c.509.509 1.3343.509 1.8407 0zm-8.2446 5.375a2.8482 2.8456 0 1 0 5.6965 0 2.8482 2.8456 0 1 0-5.6965 0zm14.3672-1.0343l-3.293-3.277c-.5092-.5063-1.3344-.5063-1.8408.0028a1.2968 1.2968 0 0 0 0 1.838l2.2239 2.2213c.1393.1393.1393.3564 0 .4957l-2.1918 2.189a1.2968 1.2968 0 0 0 0 1.8382 1.3049 1.3049 0 0 0 1.8408 0l3.2635-3.2609a1.445 1.445 0 0 0-.0026-2.047Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ant Design" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Antdesign extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1f, create_fragment$1f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Antena3.svelte generated by Svelte v3.23.2 */

        function create_fragment$1g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.997 10.755a7.222 7.222 0 00-.997-.083c-.111 0-.497.008-.998.083-2.919.438-4.948 2.08-6.201 4.695-.641 1.336-.357 2.255.8 3.166.068.054.137.106.205.158.213.143.423.28.627.414 3.026 1.975 4.133 2.676 4.58 2.881.186.085.512.244.962.255h.048c.45-.011.777-.17.963-.255.446-.205 1.553-.907 4.579-2.882.205-.134.415-.272.629-.415a22.7 22.7 0 00.203-.156c1.157-.911 1.441-1.83.8-3.166-1.251-2.614-3.281-4.257-6.2-4.695zm7.252 4.36c.637.774 1.205.834 1.843.387.85-.597 1.894-2.857 1.908-4.724-.05-5.112-5.337-8.666-10.648-9.093-.212-.02-.534-.026-.777.153-.247.182-.292.457-.113.812.305.603.708 1.147 1.092 1.7 1.928 2.77 3.56 5.72 5.298 8.607.442.734.85 1.492 1.397 2.157zM5.148 12.956c1.738-2.886 3.37-5.837 5.297-8.607.385-.553.787-1.097 1.092-1.7.18-.355.135-.63-.113-.812-.243-.18-.565-.173-.777-.153C5.337 2.112.05 5.665 0 10.778c.013 1.867 1.057 4.128 1.908 4.724.638.447 1.206.387 1.843-.388.546-.665.954-1.423 1.397-2.157Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Antena 3" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Antena3 extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1g, create_fragment$1g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apache.svelte generated by Svelte v3.23.2 */

        function create_fragment$1h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.826 0a.776.776 0 0 0-.404.114c-.376.222-1.002.851-1.748 1.763l-.156.192c-.198.246-.403.512-.614.793a38.775 38.775 0 0 0-2.016 2.971l-.022.036-.044.072a40.932 40.932 0 0 0-1.709 3.081 25.602 25.602 0 0 0-1.1 2.557c-.091.251-.174.493-.25.726-.062.199-.122.398-.178.596-.133.467-.248.934-.342 1.398l.001.002-.013.061a14 14 0 0 0-.233 1.692l-.005.059c-.28-.449-1.029-.886-1.028-.882.537.778.944 1.55 1.004 2.308-.287.059-.681-.026-1.136-.194.474.436.83.556.969.588-.436.027-.889.327-1.346.671.668-.273 1.208-.38 1.595-.293a131.873 131.873 0 0 0-1.843 5.688.535.535 0 0 0 .364-.354c.11-.369.837-2.786 1.977-5.964l.098-.273.028-.076c.12-.333.245-.673.374-1.02l.089-.237.002-.005-.604-1.193.604 1.192c.119-.317.24-.638.365-.963l.052-.136.053-.137.041-.104-.041.105-.053.136-.052.136c-.125.325-.246.646-.365.963l.106.208.094-.01.01-.028c.153-.417.304-.824.454-1.22l.005-.014a103.604 103.604 0 0 0-.458 1.234l-.01.028-.067.183c-.118.325-.237.655-.356.993l-.005.015-.051.143c-.08.228-.15.433-.309.899.263.12.474.436.674.794a1.44 1.44 0 0 0-.466-.989c1.296.058 2.413-.269 2.991-1.217.052-.085.099-.173.141-.268-.262.333-.588.474-1.2.439.902-.404 1.354-.791 1.754-1.433a6.71 6.71 0 0 0 .281-.503c-.789.81-1.702 1.04-2.665.865h-.002l-.041-.007c.863-.107 2.01-.752 2.752-1.548.342-.367.652-.8.939-1.306.214-.377.414-.795.605-1.258.167-.404.327-.842.482-1.317a2.65 2.65 0 0 1-.81.261 4.998 4.998 0 0 1-.138.022l.002-.001.003-.001c.045-.007.089-.013.133-.021.045-.008.09-.016.134-.026l-.133.024-.132.023c.802-.31 1.308-.907 1.676-1.637a2.877 2.877 0 0 1-.968.424 3.217 3.217 0 0 1-.171.031l-.043.006.001-.001.009-.001.032-.005a2.887 2.887 0 0 0 .157-.029l.014-.003-.016.003-.194.033c.278-.117.513-.247.717-.401a2.858 2.858 0 0 0 .411-.391c.08-.095.155-.198.225-.31l.064-.104.077-.152a9.024 9.024 0 0 0 .368-.851l.031-.088c.028-.085.052-.161.07-.227.027-.099.044-.178.053-.236a.731.731 0 0 1-.094.064c-.243.145-.66.277-.996.339l-.099.011-.001.001-2.267.249-.012.024-.077.158-.235.488-.044.093.044-.093c.079-.166.157-.329.235-.488l.077-.158c.004-.009.009-.017.012-.026l-.084.009-.067-.132a54.24 54.24 0 0 0-.378.763l-.204.424a72.02 72.02 0 0 0-1.092 2.406 102.271 102.271 0 0 0-1.081 2.603l.086-.216a99.75 99.75 0 0 1 .995-2.387 73.112 73.112 0 0 1 1.092-2.407l.204-.424c.118-.244.237-.485.358-.724l.02-.038c.191-.378.384-.75.579-1.116.208-.39.42-.771.633-1.141a33.1 33.1 0 0 1 .672-1.119l.04-.064c.224-.354.45-.695.677-1.021a16.736 16.736 0 0 1 1.522-1.899l-.058.062c-.16.176-.644.741-1.375 1.863.704-.035 1.785-.179 2.667-.33.262-1.47-.257-2.142-.257-2.142S16.418.007 15.83.001zm-1.648 7.507c.66-.304.956-.579 1.242-.976.076-.11.153-.224.229-.343.233-.363.461-.764.665-1.162.197-.384.371-.765.504-1.109a5.76 5.76 0 0 0 .2-.6c.041-.157.074-.307.099-.449-.883.15-1.964.295-2.668.329a29.873 29.873 0 0 0-.696 1.122c-.204.345-.422.723-.65 1.137a50.238 50.238 0 0 0-1.193 2.299l2.267-.249zm3.628-5.309v.066h.156v.439h.072v-.439h.157v-.066h-.384zm.463 0v.506h.066v-.401l.172.348h.046l.172-.348v.401h.066v-.506h-.087l-.174.353-.175-.353h-.087zm-4.008 5.301l-.102.016.001-.001.1-.016zm-.09.012l-.005.002.005-.002zm-2.74 1.242l-.106.227-.133.287a77.678 77.678 0 0 0-.921 2.085 93.883 93.883 0 0 0-.999 2.446c-.148.378-.298.765-.449 1.163l-.005.014a77.678 77.678 0 0 1 2.374-5.709l.133-.287.106-.226z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apache extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1h, create_fragment$1h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apacheairflow.svelte generated by Svelte v3.23.2 */

        function create_fragment$1i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.033 10.713c-.691 0-1.263.564-1.263 1.255 0 .69.572 1.262 1.263 1.262a1.258 1.258 0 000-2.517zm0 .797c.258 0 .457.2.457.458s-.2.458-.457.458c-.259 0-.458-.2-.458-.458s.199-.458.458-.458zM.65.001C.577.001.544.013.3.041.053.07-.027.364.03.673c.055.31.072.205.196.384.124.18 4.228 4.144 6.352 6.216l-3.625 3.72-.133.133-.007.008c-1.25 1.282-1.91 3.251-2.296 5.433C.13 18.748.03 21.161 0 23.35a.63.63 0 00.554.62.757.757 0 00.118 0 .608.608 0 00.384-.184h.007l6.209-6.37c4.021 3.721 4.12 5.08 9.294 6.067 2.182.386 4.595.487 6.784.517a.626.626 0 00.62-.546l.008-.008a.746.746 0 00-.008-.133.621.621 0 00-.177-.37v-.008l-6.378-6.208L21.047 13c.046-.043.089-.088.133-.133l.007-.008c1.25-1.281 1.918-3.244 2.304-5.426.385-2.182.479-4.595.509-6.783a.627.627 0 00-.546-.62L23.446.02a.668.668 0 00-.133.008.608.608 0 00-.369.178h-.007l-6.209 6.37-3.72-3.624-.133-.133-.008-.008C11.586 1.562 9.617.894 7.434.509 5.18.26 2.917.034.65 0zm.48.835c2.039.038 4.213.12 6.164.465 2.105.372 3.927 1.03 5.012 2.089h.008l.103.11c.023.023.049.053.074.082.002.003.005.004.007.008l.008.008.015.015c0 .002-.002.008 0 .008.002.003.005.004.007.008.128.176.354.52.42.664.049.101.093.208.134.325.179.519.268 1.166.206 1.985v.008c-.014.181-.038.37-.066.569-.014.095-.033.2-.052.31a10.753 10.753 0 01-.14.642c-.028.115-.056.232-.089.347v.008c-.13.468-.3.976-.51 1.52-.052.138-.103.272-.161.414-.046.111-.099.225-.148.34l-.258.051c-.875-1.655-1.831-2.8-2.688-3.455-.432-.33-.837-.54-1.225-.627h-.007c-.387-.084-.8-.027-1.07.251l.038.075.32-.239zm22.036.288c-.038 2.04-.12 4.218-.465 6.17-.372 2.105-1.031 3.928-2.09 5.013l-.11.103c-.03.026-.062.059-.096.088l-.015.016h-.007c-.174.126-.527.36-.672.428-.101.047-.21.1-.325.14h-.007c-.516.177-1.166.26-1.979.2-.183-.016-.375-.031-.576-.06l-.302-.052h-.008a10.905 10.905 0 01-.642-.14h-.007c-.117-.03-.234-.065-.347-.096a16.097 16.097 0 01-1.521-.502c-.136-.052-.279-.111-.421-.17a20.905 20.905 0 01-.317-.132c.009-.063-.079.096 0 0a.666.666 0 00-.052-.288c1.638-.87 2.78-1.814 3.433-2.665.331-.433.548-.844.635-1.233.087-.386.027-.806-.251-1.077l.007.008.11.351zM13.9 4.947l2.532 2.466.015.015.015.015c.038.038.078.11.03.332-.022.095-.146.264-.207.391-.082.166-.116.3-.274.502-.546.7-1.616 1.566-3.137 2.377.046-.107.09-.213.133-.317.06-.147.115-.294.17-.436.218-.568.4-1.103.538-1.602a11.804 11.804 0 00.244-1.063V7.62c.019-.107.043-.212.059-.324a8.97 8.97 0 00.067-.628c.05-.677-.07-1.196-.185-1.72zM7.774 7.51c1.592.72 2.634 2.424 3.277 3.617-.108-.047-.217-.089-.324-.133-.147-.06-.294-.115-.436-.17a17.265 17.265 0 00-1.595-.539H8.69c-.125-.034-.244-.067-.362-.096-.24-.059-.476-.106-.701-.148-.108-.018-.22-.034-.332-.051V9.98a10.394 10.394 0 00-.628-.067c-.68-.051-1.202.069-1.727.185l2.473-2.532.03-.03c.036-.039.11-.08.332-.03zm-1.167 3.203c.18.012.368.038.569.067h.007c.096.015.194.034.303.052.205.038.418.085.642.14l.177.044c.057.015.113.027.17.044h.007c.47.13.974.299 1.521.51.137.053.28.104.42.162.12.049.24.103.363.155l.014.266c-1.64.87-2.787 1.82-3.44 2.672-.332.433-.548.837-.635 1.225v.008c-.087.387-.027.8.251 1.07H6.97l-.188-.335-5.94 6.071c.04-2.037.114-4.208.458-6.156.372-2.105 1.031-3.928 2.09-5.012v-.008c.024-.027.053-.048.08-.074l.03-.03a1.788 1.788 0 01.089-.081h.007c.006-.004.01-.012.015-.016.171-.125.533-.367.68-.435a3.658 3.658 0 01.331-.133c.519-.18 1.166-.269 1.986-.207zm5.153.2c-.415.132-.698.42-.834.834l.44-.49zm.546.03l.18.323.146.095.405.313c-.148-.348-.372-.603-.73-.73zm-.288.517c.312 0 .554.242.554.553a.547.547 0 01-.554.554.547.547 0 01-.553-.554c0-.31.242-.554.554-.554zm-1.048.863c.14.363.381.61.746.746l-.241-.276-.203-.234zm2.06.038l-.282.116-.062.178-.284.327c.29-.142.498-.324.628-.62zm-.074.51c.106.045.213.096.318.14.147.06.292.115.435.17.566.217 1.098.394 1.595.53.128.039.253.067.369.097.24.059.476.114.701.155.107.019.22.034.332.051.216.03.426.058.628.074.68.052 1.202-.068 1.727-.184l-2.473 2.532-.015.015-.014.015c-.037.038-.115.074-.325.03h-.008c-.216-.05-.531-.204-.893-.487-.7-.547-1.567-1.618-2.377-3.137zm-1.83.088l-.134.317c-.06.147-.115.294-.17.436a17.065 17.065 0 00-.531 1.594c-.036.128-.067.251-.096.37-.06.24-.114.475-.155.7a12.379 12.379 0 00-.052.333 9.86 9.86 0 00-.073.628c-.052.68.068 1.202.184 1.727L7.567 16.59l-.015-.023-.015-.008v-.008c-.04-.04-.078-.101-.03-.317.002-.004 0-.002 0-.008.05-.216.206-.532.488-.893.546-.7 1.613-1.567 3.13-2.377zm1.04.258c.866 1.626 1.81 2.776 2.658 3.426.433.332.836.548 1.225.634h.008c.387.085.799.027 1.07-.25l-.035-.071-.304.27 6.09 5.942c-2.04-.04-4.22-.122-6.172-.467-2.105-.372-3.928-1.03-5.012-2.089h-.008l-.022-.023-.03-.03c-.008-.008-.013-.019-.022-.03l-.03-.03c-.023-.027-.053-.057-.08-.089v-.008c-.003-.004-.012-.01-.015-.015a6.316 6.316 0 01-.436-.679 3.49 3.49 0 01-.133-.332c-.18-.519-.269-1.166-.206-1.986.013-.18.037-.368.066-.568v-.008c.014-.094.033-.196.052-.303.037-.205.085-.419.14-.642v-.008l.044-.17.045-.17v-.008c.13-.47.298-.973.51-1.52.052-.137.111-.28.169-.42.047-.115.097-.231.148-.348l.28-.015z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Airflow" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apacheairflow extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1i, create_fragment$1i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apacheant.svelte generated by Svelte v3.23.2 */

        function create_fragment$1j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.802,11.885l-0.031,0.039c-0.063-0.008-0.127-0.014-0.19-0.02l0.764-0.64 C7.231,11.43,6.802,11.885,6.802,11.885z M8.543,10.385c0.388-0.228,0.696-0.402,0.696-0.402s0.057-0.01,0.127-0.01 c0.07,0,0.154,0.01,0.207,0.05c0.107,0.08,0.161,0.616,0.214,1.125c0.053,0.508-0.188,1.406-0.188,1.406l0.134,0.053 c0.134,0.054,0.134,0.576,0,0.656c-0.11,0.066-0.102,0.204-0.074,0.326c0.052,0.054,0.12,0.108,0.177,0.163 c0.018-0.012,0.034-0.023,0.044-0.034c0.08-0.081,0.067-0.187,0.161-0.469c0.047-0.141,0.209-0.262,0.386-0.36 c-0.046-0.388-0.069-1.381-0.091-1.448c-0.027-0.081-0.107-0.188-0.107-0.388c0-0.201,0.12-0.389,0.254-0.455 c0.134-0.067,0.214,0.054,0.255,0.214c0.033,0.13,0.1,1.395,0.125,1.877c0.013-0.005,0.025-0.011,0.036-0.015 c0.178-0.078,0.338-0.008,0.417,0.072c0.053-0.039,0.094-0.111,0.119-0.22c0.04-0.174,1.031-0.87,1.205-1.018 c0.051-0.043,0.144-0.071,0.26-0.073c0.139-0.159,0.344-0.379,0.49-0.476c0.241-0.161,0.482-0.161,0.482-0.161 s0.067,0.08,0.295,0.348c0.081,0.094,0.165,0.228,0.24,0.361c0.092-0.228,0.26-0.461,0.618-0.495 c0.381-0.037,1.299,0.254,1.526,0.442c0.227,0.188,0.589,0.576,0.804,0.763c0,0,0.429,0.415,0.495,0.455 c0.005,0.003,0.01,0.007,0.015,0.01c0.04-0.051,0.146-0.051,0.146-0.051c0.038-0.032,0.161-0.106,0.302-0.188l-3.24-7.59h-0.086 l-7.134,5.981C8.086,10.671,8.352,10.497,8.543,10.385z M3.817,17.421h10.291c-0.051-0.064-0.109-0.141-0.154-0.193 c-0.201-0.228-0.764-1.179-0.871-1.406c-0.107-0.228-0.348-0.495-0.469-0.388c-0.121,0.107-0.629,0.348-0.817,0.294 c-0.188-0.054-0.174-0.308-0.174-0.308s-0.094-0.147-0.228-0.147c-0.134,0-0.362-0.214-0.402-0.549 c-0.014-0.12-0.014-0.21-0.003-0.281c-0.159,0.051-0.319,0.04-0.319,0.04s-0.007,0.006-0.018,0.017 c0.068,0.054,0.112,0.132,0.112,0.224c0,0.214-0.08,0.375-0.268,0.496c-0.187,0.121-0.241-0.081-0.375,0.04 c-0.134,0.12-0.417,0.242-0.482,0.08c-0.027-0.067-0.147-0.027-0.281-0.04c-0.134-0.013-0.121-0.134-0.121-0.134 s-0.268-0.241-0.469-0.536c-0.201-0.295-0.428-0.79-0.428-1.018c0-0.227-0.214-0.161-0.348-0.134 c-0.043,0.009-0.162,0.093-0.312,0.211c-0.078,0.206-0.222,0.455-0.384,0.687c-0.281,0.402-0.857,0.857-1.218,1.004 c-0.055,0.023-0.115,0.035-0.18,0.04c-0.059,0.067-0.132,0.118-0.214,0.157c-0.122,0.225-1.241,1.344-1.307,1.436 C4.34,17.068,4.069,17.249,3.817,17.421z M4.298,16.813c0.153-0.153,0.555-0.683,0.884-1.111c-0.132,0.014-0.252,0.017-0.334,0.026 c-0.375,0.04-0.616-0.107-0.616-0.107c-0.31-0.665-0.325-1.18-0.24-1.546L0,17.421h3.621C3.936,17.148,4.21,16.901,4.298,16.813z M18.078,12.916c-0.026,0.022-0.06,0.019-0.093,0.003c0.002,0.077,0.013,0.171,0.013,0.171c0.107,0.148,0.227,0.737,0.201,1.004 c-0.023,0.229-0.085,0.399-0.102,0.443c0.012,0.048,0.024,0.092,0.036,0.133c0.067,0.228,0.053,0.268,0.094,0.268 c0.041,0,0.147,0.107,0.228,0.147c0.08,0.041,0.737,0.362,0.991,0.563c0.254,0.201,0.415,0.562,0.522,1.018 c0.107,0.455-0.013,0.469-0.12,0.455c-0.107-0.014-0.321-0.375-0.348-0.71c-0.027-0.335-0.308-0.696-0.509-0.884 c-0.201-0.188-0.75-0.268-0.83-0.308c-0.08-0.04-0.054-0.094-0.054-0.094s-0.08-0.067-0.134-0.161 c-0.011-0.019-0.027-0.056-0.045-0.103c-0.027,0.044-0.094,0.103-0.264,0.103c-0.268,0-0.911-0.201-1.286-0.321 c-0.258-0.083-0.679-0.248-0.953-0.365c0.208,0.51,0.747,1.465,0.771,1.517c0.028,0.061,0.258,0.138,0.409,0.199 c0.151,0.06,0.187,0.589,0.33,0.688c0.143,0.1,0.786,0.103,1.061,0.162c0.275,0.06,0.27,0.209,0.161,0.268 c-0.108,0.058-1.055-0.188-1.294-0.226c-0.238-0.038-0.339-0.266-0.436-0.451c-0.097-0.185-0.127-0.302-0.292-0.296 c-0.166,0.005-0.162-0.199-0.342-0.129c-0.18,0.07-0.134-0.139-0.41-0.637c-0.275-0.498-0.437-1.082-0.515-1.099 c-0.079-0.017-0.308,0.029-0.432,0.098c-0.124,0.069-0.824,0.451-0.982,0.609c-0.158,0.157-0.909-0.17-1.086-0.236 s-0.297-0.339-0.292-0.488c0.001-0.026,0.017-0.066,0.044-0.114c-0.052-0.001-0.093-0.004-0.121-0.008 c-0.188-0.027-0.174,0.04-0.227,0.188c-0.026,0.071-0.08,0.108-0.142,0.116c0.057,0.119,0.096,0.245,0.115,0.326 c0.054,0.227-0.054,0.388,0.04,0.455c0.094,0.067,0.174,0.121,0.361-0.04c0.187-0.161,0.522-0.241,0.79-0.174 c0.268,0.067,0.884,1.285,1.071,1.701c0.127,0.282,0.246,0.559,0.312,0.715h6.117l-2.048-4.797 C18.236,12.749,18.128,12.874,18.078,12.916z M9.264,10.178c-0.031,0-0.068,0.012-0.105,0.033c-0.12,0.067-0.991,0.938-1.218,1.098 c-0.228,0.161-0.549,0.187-0.549,0.187l-0.426,0.458c0.27,0.047,0.502,0.109,0.6,0.158c0.107,0.054,0.161,0.155,0.188,0.251 c0.074-0.012,0.279-0.049,0.387-0.103c0.134-0.067,0.509-0.214,0.71-0.08c0.201,0.134,0.04,0.67,0.094,0.683 c0.018,0.005,0.057,0.01,0.106,0.019c-0.019-0.131,0.148-0.247,0.148-0.247s-0.027-0.629-0.013-0.937 c0.013-0.308,0.147-1.125,0.174-1.326C9.378,10.234,9.333,10.178,9.264,10.178L9.264,10.178z M13.804,11.069 c-0.057,0-0.128,0.046-0.199,0.146c-0.087,0.122-0.14,0.255-0.188,0.362c0.13,0.075,0.257,0.183,0.368,0.333 c0.058-0.029,0.152-0.05,0.279-0.075c-0.054-0.246-0.126-0.572-0.151-0.66C13.894,11.106,13.855,11.07,13.804,11.069L13.804,11.069z M13.931,12.819c-0.116,0.25-0.343,0.483-0.541,0.78c-0.018,0.027-0.038,0.053-0.058,0.078c-0.016,0.118-0.103,0.252-0.219,0.34 c-0.295,0.223-0.636,0.341-0.509,0.383c0.128,0.041,0.296-0.1,0.497-0.207c0.201-0.107,1.291-0.327,1.291-0.327 c0.068-0.019,0.155-0.039,0.249-0.053c-0.159-0.119-0.306-0.249-0.368-0.361c-0.088-0.161-0.205-0.359-0.216-0.611 C14.017,12.838,13.973,12.83,13.931,12.819L13.931,12.819z M16.045,13.068c-0.173-0.001-0.413,0.203-0.142,0.571 c0.285,0.385,0.402,0.351,0.502,0.251c0.1-0.101,0.067-0.368-0.067-0.569c-0.134-0.201-0.134-0.234-0.268-0.251 C16.062,13.068,16.054,13.068,16.045,13.068L16.045,13.068z M7.703,13.082c-0.006,0.1-0.002,0.191,0.023,0.25 c0.015,0.035,0.019,0.079,0.015,0.13c0.099-0.074,0.189-0.147,0.284-0.193C7.904,13.206,7.769,13.123,7.703,13.082L7.703,13.082z M8.985,13.907c0.134,0.496,0.455,1.031,0.455,1.031s0.094,0.054,0.174-0.053c0.049-0.065,0.206-0.174,0.372-0.271 c-0.04-0.035-0.064-0.064-0.064-0.064s-0.174,0.094-0.375,0.027c-0.165-0.055-0.149-0.138-0.093-0.315 c-0.077-0.108-0.152-0.332-0.242-0.422c-0.076-0.076-0.174-0.077-0.28-0.099C8.951,13.791,8.968,13.846,8.985,13.907z M6.581,11.904 c-0.281-0.026-0.556-0.025-0.73,0.035c-0.429,0.147-1.352,0.696-1.5,1.031C4.23,13.245,4.1,13.484,4.088,13.784 c-0.039,0.082-0.071,0.182-0.097,0.291L6.581,11.904z M7.852,10.838c-0.24,0.172-0.446,0.336-0.501,0.417 c-0.001,0.002-0.005,0.006-0.006,0.008L7.852,10.838z M15.763,18.894c-0.268-0.094-0.616-0.321-0.656-0.388 c-0.04-0.067-0.161-0.12-0.161-0.12s-0.359-0.421-0.573-0.836c0,0-0.023-0.055-0.054-0.128h-0.211 c0.176,0.22,0.372,0.482,0.569,0.731c0.255,0.321,0.109,0.354,0.189,0.354c0.08,0,0.027,0.054,0.094,0.121 c0.067,0.067,0.429,0.281,0.522,0.348c0.094,0.067,0.482,0.201,0.535,0.161c0.054-0.04,0.08-0.174,0.08-0.174 S16.031,18.988,15.763,18.894z M23.85,13.603c0,0-0.308-0.312-0.576-0.433c-0.268-0.121-0.255-0.241-0.415-0.254 c-0.161-0.013-0.455-0.067-0.696-0.174c-0.241-0.107-0.924-0.388-1.218-0.549c-0.295-0.161-0.482-0.281-0.563-0.348 c-0.08-0.067-0.214-0.058-0.469-0.018c0,0-0.723,0.165-0.978,0.285c-0.152,0.072-0.412,0.213-0.623,0.335l0.076,0.177 c0.091-0.075,0.194-0.149,0.319-0.204c0.335-0.148,0.656-0.281,1.031-0.308c0.375-0.027,0.429-0.053,0.429-0.053 s0.174-0.027,0.375,0.08c0.201,0.107,1.393,0.71,1.567,0.777c0.174,0.067,0.442,0.188,0.63,0.335 c0.187,0.147,0.334,0.134,0.334,0.134s0.134,0.148,0.335,0.281c0.201,0.134,0.268,0.201,0.388,0.228 C23.916,13.92,24.158,14.045,23.85,13.603z M3.621,17.421c-0.499,0.432-1.104,0.931-1.252,0.972 c-0.241,0.067-0.321,0.04-0.121,0.147c0.201,0.107,0.558,0.027,0.687-0.161c0.129-0.187,0.304-0.495,0.451-0.642 c0.063-0.063,0.241-0.187,0.429-0.316H3.621z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Ant" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apacheant extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1j, create_fragment$1j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachecassandra.svelte generated by Svelte v3.23.2 */

        function create_fragment$1k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.51 6.535c-.002.003-.247.256-.387.408-.366.397-.92.975-1.312 1.12h-.004c-.052-.018-.103-.035-.159-.05l.704-1.425-.008.012c-.022.043-.719 1.415-1.666 1.218l-.002.002c-.014-.003-.026.002-.04-.002.455-.58.63-1.113.63-1.113s-.756 1.213-1.69.885a.075.075 0 0 1-.049-.047.153.153 0 0 1 0-.08c.01-.041.04-.092.067-.14.095-.176.256-.368.256-.368s-.156.152-.366.295l-.002.002c-.157.107-.345.208-.52.236a.512.512 0 0 1-.167 0c-.214-.037-.208-.25-.149-.455v-.002c.06-.204.174-.4.174-.4s-.19.298-.398.588c-.16.223-.311.396-.416.474l-.12.004c-.063-.176.1-.756.1-.76a4.983 4.983 0 0 1-.314.446 1.73 1.73 0 0 1-.34.336h-.027c-.082.007-.16.02-.239.031a.208.208 0 0 1-.064-.125c-.042-.268.123-.756.125-.762-.002.006-.09.26-.21.502v.004c-.032.067-.07.12-.107.178-.086.136-.176.244-.261.219-.127-.038-.202-.202-.246-.356-.044-.154-.057-.299-.057-.299s-.031.251-.117.485a.799.799 0 0 1-.145.265c-.024.027-.057.036-.086.055a12.55 12.55 0 0 0-2.617.764c-.223.082-.446.158-.674.256-.75.32-1.529.726-2.343 1.248a21.33 21.33 0 0 0-2.56 1.945c-.448.393-.906.82-1.376 1.29 3.558-1.917 4.97-4.743 11.633-4.995 5.044-.191 7.4 2.137 8.178 2.17 1.956.083 3.257-1.4 3.672-1.946.112-.142.179-.237.183-.244-.01.011-.328.373-.781.721l-.006.004c-.46.351-1.05.68-1.576.6h-.002c-.068-.01-.138-.007-.203-.032.743-.434 1.236-1.19 1.482-1.595.076-.125.233-.36.233-.36S21.395 9.53 20.094 9.41l-.002.002c-.051-.005-.105.007-.155-.004.567-.446.985-1.044 1.278-1.55v-.003h.002c.317-.548.482-.985.484-.992-.005.008-.326.498-.766 1.037l-.01.01c-.44.54-.998 1.121-1.464 1.299-.07.026-.14.066-.205.072 1.085-.959 1.539-2.322 1.539-2.322s-1.097 1.595-2.026 1.889c-.056.017-.114.047-.17.054.568-.512.869-.92 1.057-1.24V7.66c.238-.404.281-.65.281-.65l-.004.004a9.379 9.379 0 0 1-.271.334l-.016.017c-.255.3-.645.733-1.045 1.078l-.005.004a4.147 4.147 0 0 1-.32.248c-.03.021-.06.046-.089.065a1.7 1.7 0 0 1-.273.138c-.022.01-.044.022-.065.03-.068-.045-.132-.092-.205-.135-.046.06-.096.117-.142.176H17.5c-.02-.006-.044-.006-.063-.016.858-.934 1.44-2.119 1.44-2.119l-.004.004c-.008.01-1.193 1.61-1.73 1.71-.07-.035-.14-.07-.215-.103a.5.5 0 0 1 .044-.162c.122-.284.465-.717.465-.717s-.093.07-.123.096a4.25 4.25 0 0 1-.304.238c-.056.04-.114.072-.172.108-.064.04-.127.076-.188.105a.71.71 0 0 1-.263.086c-.043 0-.082-.005-.11-.027.453-.277 1.228-1.628 1.233-1.637zm-4.79 2.166a15.081 15.081 0 0 0-.913.006c-.286.01-.55.033-.817.053l-.002.002c-.28.123-.547.268-.783.459a.427.427 0 0 1 .035.168.431.431 0 0 1-.047.19l.885.642.022-.014-.36-1.264.623 1.114c.02-.008.042-.014.063-.02l-.02-1.236.397 1.162.476-1.149.018 1.268c.004.002.007.006.012.008l.712-1.006-.363 1.219.008.01 1.041-.692-.758 1.05v.007l.95-.34c.013-.017.03-.03.042-.047a.394.394 0 0 1 .395-.63c.119-.245.209-.504.268-.77a13.15 13.15 0 0 0-1.883-.19zm-2.507.133l-.02.002c-.308.036-.606.078-.892.125-.287.047-.562.1-.824.16l-.014.002c.115.388.294.756.531 1.08.108-.239.244-.461.402-.662a.436.436 0 0 1 .569-.557c.077-.058.166-.099.248-.15zm4.46.092a3.183 3.183 0 0 1-.163.826.394.394 0 0 1-.328.68 3.171 3.171 0 0 1-.55.63l.661.034-.994.236c-.026.018-.046.042-.072.059a3.194 3.194 0 0 1 1.537.691c.32-.574.504-1.235.504-1.94 0-.535-.237-.928-.594-1.216zm-6.318.226c-.296.07-.58.147-.85.23a1.462 1.462 0 0 0-.212.76c0 1.622.968 3.016 2.357 3.64l.002-.012a3.197 3.197 0 0 1-.58-.79.572.572 0 0 1-.336-1.078 3.18 3.18 0 0 1 .139-1.39 3.16 3.16 0 0 1-.52-1.36zm7.631.026c.14.41.225.842.225 1.293 0 2.44-2.203 4.418-4.92 4.418s-4.92-1.979-4.92-4.418c0-.236.023-.468.063-.694-.777.327-1.45.706-2.075 1.112-.214.388-.318.793-.283 1.2.085.985.951 1.807 2.274 2.364l-.256-.068c-2.29-.646-4.107.503-6.094-.494.46.364.984.717 2.498.722.513.002 2.158-.08 2.461.186.303.265-1.021 1.514-1.021 1.514s2.24-1.897 2.458-1.25c.137.402-.642 1.476-.642 1.476s.783-1.06 1.363-1.287c.4-.156.735-.136 1.022.266.19.265-.909 1.552-.909 1.552s1.476-1.439 1.74-1.363c.266.076 0 1.363 0 1.363s.545-1.306.835-1.402c.397-.133-.909 3.03-.909 3.03s1.595-2.925 1.893-2.991c.51-.114.852 2.043.852 2.043s-.249-1.885.02-2.006c1.694-.767.718 3.256.718 3.256s1.109-2.73.428-3.336C14.605 16.856 14.385 19 14.385 19s.472-1.02-.854-3.53c.72-.037 1.8 1.864 1.8 1.864s-1.173-2.081-.378-2.12c1.58-.074 1.74 2.765 1.74 2.765s.474-.398-.795-3.18c.808-.518 2.764 2.574 2.764 2.574s-1.804-3.017-1.514-3.219c.29-.202 1.35.96 1.35.96s-.808-1.11-.594-1.223c.215-.114 2.362 2.207 2.362 2.207s-1.895-2.271-1.567-2.55c.328-.277 1.717.784 1.717.784s-2.134-1.4-1.717-1.617c.58-.301 2.235.72 2.235.72s-.996-.82-.832-1.02c.164-.203 2.119 1.286 2.119 1.286s-1.728-1.364-1.817-1.705c-.088-.34 1.362.115 1.362.115s-1.602-.744-1.627-.959c-.026-.214 1.06.239 1.06.239s-1.49-1.224-1.855-.227c-.084.159-.187.3-.283.45.093-.27.135-.543.11-.82a1.87 1.87 0 0 0-.052-.28c-.683-.367-1.701-.933-3.133-1.336zm-5.83.455a.427.427 0 0 1-.508.164c-.054.073-.1.152-.148.23l1.277.471c.011-.014.02-.03.032-.043zm-.658.396c-.094.155-.18.316-.244.489.12.128.26.235.396.343l.922-.029.002-.004zm4.186.541l-.606.463.053.002c.201-.132.383-.29.553-.465zm-4.534.291c-.002.012-.007.023-.01.035a2.88 2.88 0 0 0-.048.958.567.567 0 0 1 .451.474l.937-.601c-.085-.03-.17-.06-.251-.096l-1.051-.076.638-.139a3.198 3.198 0 0 1-.666-.555zm.793.211c.138.086.28.16.43.223l.115-.024c0-.019.005-.037.006-.056zm3.12.68l.916.9-1.198-.466.703 1.078-1.072-.832-.012.006.346 1.279-.596-1.135-.097 1.33-.403-1.326-.47 1.262.113-1.36-.016-.007-.812 1.152.297-1.11a3.298 3.298 0 0 0-.793 1.19c.095.102.196.198.302.289a3.984 3.984 0 0 0 4.352-1.688 3.398 3.398 0 0 0-1.26-.539zm-2.436.223l-1.078.39c.001.018.01.033.01.051a.57.57 0 0 1-.184.42c.102.217.228.423.375.615a3.2 3.2 0 0 1 .32-.635l-.295.239zm3.633 2.79c-.186.049-.37.097-.56.137.192-.04.374-.09.56-.136zM13.172 15c-.114.02-.225.046-.34.063-.202.029-.391.042-.586.062.315-.033.624-.074.926-.125zm-1.35.17c-.11.008-.215.007-.324.012.11-.007.214-.003.324-.012z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Cassandra" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachecassandra extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1k, create_fragment$1k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachecloudstack.svelte generated by Svelte v3.23.2 */

        function create_fragment$1l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.446 11.386c.326-.116 1.077-.462 1.228-1.23l-1.692-.114s-.458-.161-.705-.94c0 0-1.022-.55-.951-1.342 0 0 .158-.987 1.004-1.128 0 0 .882-.218 1.062 1.192 0 0 .415 1.194-.394 1.278 0 0-.175.385.46.402 0 0 .773.23 1.32-.229 0 0 .371-.341.812-.276 0 0 .095-.169-.09-.274 0 0-1.097-.939-1.289-2.267 0 0-.905-.126-1.018-.766 0 0-.211-.992.608-1.19 0 0 .522-.119.787 0 0 0 .667-1.817 2.57-2.128 0 0 1.573-.37 2.134.82 0 0 .232.647.106 1.19 0 0-.132.594.007.746 0 0 .509-.12.72.211.211.33.304 1.038-.119 1.203 0 0 .126.562-.297.945 0 0-1.342.78-1.725 1.44 0 0-.118.151-.178.204a1.354 1.354 0 01-.516.283s-.159.07-.337-.018c0 0-.053.265.245.311 0 0 .565-.078 1.18-.266l4.443-1.59s-.206-.555-.041-.826c0 0 .091-.144.174-.175.154-.059.338-.352.346-.581 0 0-.043-.58.373-.606 0 0 .4-.024.366.465l-.029.321s.61-.23.814.185c0 0 .412.836-.025 1.51 0 0-.643.633-1.489.235l-.29-.179s-5.168 2.14-5.228 2.28c0 0-.405.205-.707.753 0 0-1.037 1.85-1.572 2.34 0 0-.35.423-.601.528l.054.146c.347.037.601-.047.601-.047.965-.462 1.105-.106 1.105-.106.352.252.204.978.204.978 2.696 2.59-.204 5.128-.204 5.128-.455.198-.669 0-.669 0-.079-.119.67-.766.67-.766 1.368-1.64.156-3.412.156-3.412-2.023-2.18-4.05-.553-4.05-.553-.912 1.018-.78 2.128-.78 2.128-.159.317-.423.185-.423.185-.357-.423 0-1.533 0-1.533.529-1.23 1.652-1.732 1.652-1.732l.169-.136c.204-.935-.134-2.062-.134-2.062-.925-2.206-2.488-2.578-3.03-2.64.008.057.006.046-.001 0-.12-.013-.189-.012-.189-.012-2.317-.22-3.379 1.789-3.379 1.789-.62.55-.581 1.815-.581 1.815 1.524.343 1.898 1.295 1.898 1.295.106.396-.348.269-.348.269C5.22 13.69 4.51 13.635 4.51 13.635c-1.44-.26-2.414.664-2.414.664-.584.405-1.102 1.281-1.102 1.281C.157 17.06.68 18.472.68 18.472c.287 1.433 1.997 2.385 1.997 2.385.814.422 1.684.297 1.684.297.708-.162.544.211.544.211-.2.3-.469.304-.469.304-1.528.101-2.216-.414-2.216-.414C-1.195 19.11.347 15.59.347 15.59c1.6-3.119 4.19-2.458 4.19-2.458.052-.939.819-2.247.819-2.247 1.14-1.42 2.416-1.726 3.181-1.764l.004-.004s-.018-1.007.29-1.862c0 0 .16-.435.723-1.286.089-.134.37-.493.458-.82 0 0 .476-1.497-1.229-1.735 0 0-.543-.096-.898.19-.225.18-.437.286-.6.33 0 0-.806.277-.78-.238 0 0-.145-.767 1.68-.978 0 0 2.23-.383 2.49 1.388 0 0 .364 1.083-.958 2.709 0 0-.722 1.118-.557 2.334.045.007.068.013.068.013 2.326.404 3.211 2.212 3.211 2.212l.007.012zm.322.648l.797 1.602c1.387-.564 1.98-2.434 1.98-2.434.38-.942-.211-1.083-.211-1.083-.406-.106-.696.3-.696.3-.91 1.104-1.671 1.519-1.87 1.615zm4.284-8.153c-1.295-1.242-2.538.343-2.538.343-.766.978.08 2.353.08 2.353-.344.08-.503.317-.503.317-.237 1.19 1.11 2.009 1.11 2.009 1.031.687 1.666-.212 1.666-.212.264-.608 1.691-1.612 1.691-1.612.476-.476 0-1.004 0-1.004-.502-.357-.581-.978-.581-.978-.04-.529.04-1.176.04-1.176-.265-.476-.965-.04-.965-.04zm-3.714 1.19c-.08-.212-.35-.146-.35-.146-.535.099-.423.7-.423.7.04.417.476.483.476.483.013-.621.297-1.038.297-1.038zm4.943.468c-.06.126.066.212.066.212.177.117.343.324.343.324.08.072.205 0 .205 0 .17-.247-.125-.536-.125-.536-.198-.198-.49 0-.49 0zm-6.159 2.333s-.132-.674-.572-.86c0 0-.318-.083-.555.19 0 0-.437.445-.291.987 0 0 .251.595.916.718 0 0 .375.115.59-.454 0 0 .055-.176-.088-.581zm9.829-.328c.099.114.158.304.158.304.013.445.627.42.627.42.688.03.933-.4.933-.4.206-.357.127-1.049-.1-1.178-.228-.13-.732 0-.732 0 .122-.238.048-.615.048-.615-.044-.406-.386-.172-.386-.172-.206.154-.106.595-.106.595-.01.28-.372.405-.372.405-.276.283-.07.64-.07.64zm-5.92-1.962c-.01.12-.149.066-.149.066-.036-.26-.377-.323-.377-.323-.357.015-.356.28-.356.28-.199.123-.242-.056-.242-.056.116-.452.589-.36.589-.36.498.03.535.393.535.393zm.758.055s.027-.37.334-.44c0 0 .446-.143.64.256 0 0 .07.162.007.207 0 0-.14.051-.181-.192 0 0-.113-.22-.336-.173 0 0-.198.021-.248.23 0 0-.01.22-.216.112zm-1.676 1.235c.102-.062.247-.009.34.047.1.062.21.12.316.17.209.099.425.162.661.162.123 0 .254.012.374-.005.1-.014.203-.025.304-.035a.991.991 0 00.359-.096c.055-.029.11-.052.164-.084.05-.031.096-.072.144-.102.023-.014.082-.058.11-.053.035.006.069.103.06.136-.068.02-.133.074-.198.105-.09.044-.173.103-.255.16-.116.08-.252.192-.326.313-.173.283-.37.572-.656.749a.917.917 0 01-.495.119c-.166 0-.376-.03-.519-.12a.61.61 0 01-.29-.356c-.044-.158 0-.317 0-.478 0-.125.033-.31-.026-.42-.02-.038-.028-.027-.062-.057-.026-.022-.04-.065-.027-.113.002-.008.014-.043.022-.042zm1.291-.515a.137.137 0 01-.14.134.137.137 0 01-.14-.134c0-.074.062-.134.14-.134.077 0 .14.06.14.134zm.575-.023a.137.137 0 01-.14.134.137.137 0 01-.14-.134c0-.074.062-.134.14-.134.077 0 .14.06.14.134z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache CloudStack" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachecloudstack extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1l, create_fragment$1l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachecordova.svelte generated by Svelte v3.23.2 */

        function create_fragment$1m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.545,0.545H5.455L0,9.273l2.182,14.182h3.886l-0.273-3.273h1.909l0.273,3.273 h8.045l0.273-3.273h1.909l-0.273,3.273h3.886L24,9.273L18.545,0.545z M18.545,18H5.455L4.364,9.273l2.182-4.364h3.506L9.818,6.545 h4.364l-0.234-1.636h3.506l2.182,4.364L18.545,18z M15.545,11.045c0.301,0,0.545,0.908,0.545,2.029 c0,1.121-0.244,2.029-0.545,2.029c-0.301,0-0.545-0.908-0.545-2.029C15,11.954,15.244,11.045,15.545,11.045z M8.659,11.215 c0.301,0,0.545,0.908,0.545,2.029c0,1.121-0.244,2.029-0.545,2.029c-0.301,0-0.545-0.908-0.545-2.029 C8.114,12.123,8.358,11.215,8.659,11.215z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Cordova" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachecordova extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1m, create_fragment$1m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachedruid.svelte generated by Svelte v3.23.2 */

        function create_fragment$1n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.932 20.806c-.369 0-.738.007-1.109 0-.35-.007-.587-.206-.623-.5a.587.587 0 0 1 .53-.636c.79-.062 1.582-.063 2.372-.003a.548.548 0 0 1 .522.602c-.024.326-.253.526-.616.54zM1.792 8.345c-.392 0-.782.008-1.173.002-.327-.006-.577-.22-.614-.512-.037-.293.146-.544.499-.615.192-.032.388-.045.583-.039a81.515 81.515 0 0 1 1.597 0c.163 0 .325.019.483.056.288.073.445.318.411.617-.034.298-.214.477-.515.487-.424.014-.848.004-1.272.004zm7.588 8.417H4.292a2.464 2.464 0 0 1-.326-.007c-.294-.04-.48-.209-.508-.506-.029-.298.11-.501.391-.606.179-.065.365-.051.549-.051 3.347 0 6.695.005 10.042-.006 1.174-.004 2.187-.439 2.993-1.3.69-.738 1.053-1.63 1.16-2.635.085-.788-.027-1.513-.516-2.156-.544-.718-1.28-1.078-2.163-1.082-3.163-.013-6.328-.005-9.487-.01-.336 0-.673-.027-1.007-.058-.29-.027-.45-.201-.469-.492-.021-.317.141-.545.429-.6a1.55 1.55 0 0 1 .29-.015h10.177c1.71.004 3.187 1.038 3.726 2.654.383 1.147.246 2.304-.182 3.416-.824 2.135-2.762 3.448-5.055 3.454-1.652.005-3.304 0-4.956 0zm2.906-13.568c1.533 0 3.066-.008 4.598 0 2.935.018 5.629 1.892 6.653 4.626.442 1.181.538 2.403.412 3.657-.185 1.842-.735 3.552-1.776 5.084-1.608 2.365-3.873 3.68-6.679 4.118-.95.148-1.905.13-2.86.13-.397 0-.61-.181-.633-.51-.025-.351.196-.621.587-.645.434-.026.87-.004 1.305-.016 2.641-.072 4.928-.982 6.74-2.935 1.269-1.37 1.912-3.039 2.13-4.878.151-1.275.135-2.544-.37-3.752-.773-1.85-2.159-2.983-4.068-3.509-.74-.204-1.5-.243-2.26-.247-2.837-.017-5.675-.007-8.511-.007-.12 0-.24.004-.359-.006a.57.57 0 0 1-.517-.536.557.557 0 0 1 .456-.557c.13-.018.261-.024.392-.019h4.762Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Druid" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachedruid extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1n, create_fragment$1n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apacheecharts.svelte generated by Svelte v3.23.2 */

        function create_fragment$1o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0zm-.792 5.307c2.192-.025 4.366 1.134 5.43 3.304.909 1.852.878 3.61-.098 5.645-.477.995-.487 1.06-.241 1.578.214.452.727.779 1.221.779.454 0 1.15-.586 1.252-1.054.1-.454-.193-1.118-.607-1.377a10.11 10.11 0 0 1-.393-.255c-.129-.1.42-.38.741-.38.687 0 1.247.526 1.375 1.29.055.333.134.422.44.502.859.222 1.297 1.451.755 2.116-.22.27-.23.271-.305.042-.267-.801-.666-1.12-1.403-1.12-.319 0-.572.128-1.098.556-1.006.82-1.866 1.303-2.907 1.632-1.276.384-2.752.478-4.086.156-2.162-.431-4.232-2.11-5.252-4.257C4.758 11.782 5.135 9 7.033 7.077a5.924 5.924 0 0 1 4.175-1.77Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache ECharts" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apacheecharts extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1o, create_fragment$1o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apacheflink.svelte generated by Svelte v3.23.2 */

        function create_fragment$1p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.302 23.976c-.58-.044-1.34-.187-1.979-.372a9.06 9.06 0 0 1-2.944-1.511c-.368-.285-1.153-1.07-1.473-1.473C.716 19.121.11 17.49.05 15.622a8.333 8.333 0 0 1 .328-2.602c.068-.229.071-.255.057-.53a4.173 4.173 0 0 1 .1-1.116c.061-.244.23-.61.34-.742l.068-.08-.01.434c-.012.622-.011.623.187.275A8.388 8.388 0 0 1 2.84 9.11c.194-.176.369-.338.388-.359.019-.021.09-.178.159-.349.207-.514.392-.796.593-.898.175-.09.334-.044.371.104a.856.856 0 0 1-.007.217.727.727 0 0 0-.013.16c.005 0 .157-.079.339-.175.65-.347 1.115-.546 2.094-.892.323-.115.628-.225.676-.246.276-.116.425-.506.398-1.039a1.446 1.446 0 0 0-.102-.505 4.148 4.148 0 0 0-.122-.317c-.05-.098-.043-.115.038-.092.233.067.512.292.687.555.102.154.273.522.274.592 0 .056.036.03.113-.084.307-.454.309-.97.004-1.488-.111-.19-.429-.503-.645-.637-.277-.17-.444-.22-.74-.217-.229.002-.25-.002-.317-.057-.083-.07-.13-.219-.109-.343.025-.142.266-.6.431-.82.195-.26.636-.684.917-.884.912-.648 2.056-1.04 3.386-1.16.32-.03.332-.032.398-.103.062-.066.082-.073.22-.073.133 0 .17.012.319.097.157.091.173.096.239.066.05-.022.132-.027.28-.017.169.01.22.007.264-.024.077-.054.171-.047.31.024.067.033.264.093.438.13.819.182 1.477.436 2.103.815.111.067.206.122.211.122.009 0-.003-.088-.032-.246L16.39.9l.152.09c.2.12.38.307.479.496.069.133.085.15.121.127.029-.017.064-.019.11-.003.054.019.093.075.2.293.074.149.142.277.15.286.01.01.084-.058.167-.148.176-.192.337-.3.55-.373.2-.067.32-.053.41.048.09.1.09.23-.004.427-.18.38-.26.728-.23.994l.017.137.108-.076c.1-.07.122-.076.305-.076.192 0 .4.058.4.112 0 .012-.051.083-.113.159-.184.226-.23.353-.227.626.003.251.014.308.177.868.059.205.128.473.152.595a.87.87 0 0 0 .06.222c.04 0 .313-.226.478-.394.099-.1.187-.182.195-.182.033 0 .091.19.117.376.03.22.007.432-.073.692-.048.156-.049.17-.012.247.061.128.07.266.028.444-.07.302-.199.51-.533.858l-.172.18-.028.24c-.016.133-.05.332-.076.442a.9.9 0 0 0-.035.214c.007.007.029-.002.049-.019.053-.044.216-.019.378.058.333.158.972.741 1.222 1.116l.135.201.215.054c.884.224 1.572.866 1.952 1.823.12.3.204.683.264 1.186.019.154.06.29.18.589.085.213.168.447.183.519.042.193.018.442-.06.626-.037.086-.087.23-.113.32-.091.323-.239.533-.487.693-.08.051-.204.11-.277.13-.137.037-.599.25-.6.277-.001.008.032.022.073.03.22.044.509.252.582.42.015.035.073.123.129.197.213.28.265.537.188.943l-.04.213.062.076c.22.271.409.622.478.892.098.379.096.747-.005 1.303l-.044.235.08.116c.154.223.184.436.106.737-.194.752-.766 1.31-1.563 1.522l-.156.041v.208c0 .16-.012.234-.05.317a.66.66 0 0 1-.32.319c-.224.099-.558-.007-.722-.23-.082-.11-.089-.113-.208-.113a.817.817 0 0 1-.226-.037c-.248-.087-.362-.257-.368-.547l-.004-.168-.156-.094a2.384 2.384 0 0 1-.563-.457l-.15-.165.078.155c.336.667-.045 1.39-.846 1.604-.164.045-.289.053-.992.07-1.085.026-9.019.022-9.366-.005zm13.506-.401c.101-.088.143-.312.08-.433-.058-.115-.14-.15-.384-.17-.277-.02-.354-.06-.354-.178 0-.153.025-.16.64-.168.597-.008.777-.037 1.038-.17.23-.116.522-.478.549-.682l.013-.095-.165.047c-.625.175-1.467.207-2.083.079-.665-.14-1.28-.52-1.497-.926l-.054-.101-.03.07a1.26 1.26 0 0 0-.03.334c-.002.247.003.275.073.42.145.305.46.601.842.793.2.101.205.105.192.178l-.042.242c-.037.212-.016.326.081.437a.516.516 0 0 0 .404.175c.094 0 .152.014.192.045.206.16.421.202.535.103zm-5.004-.184c.464-.067.614-.069.863-.014.51.113 1.036.023 1.267-.218.152-.158.198-.41.104-.565-.116-.19-.42-.32-.756-.32-.234 0-.355.034-.764.208a3.774 3.774 0 0 1-.377.144c-.174.035-.265-.062-.265-.279 0-.232.065-.308.56-.66.427-.3.681-.647.744-1.01.028-.169-.003-.402-.061-.458a1.582 1.582 0 0 0-.295-.107c-.83-.244-1.212-.561-1.573-1.308a5.485 5.485 0 0 1-.35-.909 4.378 4.378 0 0 0-.152-.435c-.27-.595-.927-1.133-1.683-1.377-.32-.104-.523-.14-1.033-.184a14.72 14.72 0 0 1-.564-.057l-.12-.018.168-.086c.206-.104.356-.153.576-.185.314-.047.528-.055.757-.03.922.104 1.617.578 2.108 1.438.182.32.313.647.44 1.102.147.526.28.792.534 1.06.41.435.959.63 1.769.63.178 0 .4-.012.492-.025.378-.053.77-.188 1.06-.363.318-.191.614-.542.71-.84.029-.09.064-.165.078-.165.014 0 .104.018.2.04.164.039.188.039.386 0 .318-.06.403-.054.484.032.122.13.275.154.45.07a.555.555 0 0 0 .178-.15c.058-.08.07-.118.064-.207-.007-.107-.01-.11-.193-.23a1.342 1.342 0 0 1-.186-.132c0-.007.045-.043.101-.08.077-.05.125-.064.192-.058.103.009.104-.004.005-.197a.832.832 0 0 0-.402-.396c-.337-.164-.719-.164-1.145 0-.256.1-.295.101-.47.024-.231-.102-.466-.138-.785-.12-.392.024-.651-.017-.75-.118l-.073-.073.315-.029c.49-.045.632-.088 1.066-.327.268-.148.428-.188.83-.211.58-.033.855-.132 1.01-.363.055-.082.083-.106.108-.09a.636.636 0 0 0 .778-.486c.016-.084.012-.089-.238-.31a2.533 2.533 0 0 1-.255-.241c0-.01.039-.05.085-.092.143-.125.245-.104.534.108.05.037.054.037.054-.005 0-.095-.059-.25-.228-.61-.199-.42-.215-.47-.253-.804-.12-1.03-.675-1.892-1.542-2.395a2.065 2.065 0 0 0-.212-.115c-.009 0-.05.071-.093.158a1.23 1.23 0 0 1-.168.252c-.075.078-.107.095-.182.095-.106 0-.18-.055-.18-.133 0-.03.032-.123.072-.207.12-.259.155-.44.12-.645-.08-.478-.53-1.016-1.092-1.31-.22-.114-.245-.11-.259.031-.015.162.02.49.077.71.026.102.117.346.202.541.218.5.284.72.285.94a.732.732 0 0 1-.039.271.83.83 0 0 1-.282.32c-.083.043-.175.045-.157.004.127-.29.169-.431.179-.609.014-.25-.02-.365-.234-.804-.214-.439-.274-.68-.261-1.042l.01-.254-.058.115a6.699 6.699 0 0 1-.249.409c-.305.472-.403.726-.403 1.044 0 .294.114.704.278 1 .032.058.054.11.048.117a.57.57 0 0 1-.145-.116c-.134-.126-.325-.452-.325-.554 0-.068-.044-.055-.24.07-.365.235-.628.473-.975.885-.506.602-1.196 1.05-2.04 1.328-.198.065-.845.238-1.437.386-1.62.402-2.188.602-2.937 1.034-1.484.854-2.26 2-2.413 3.565-.054.56.023 1.409.184 2.017.025.091-.13-.112-.227-.3-.174-.333-.285-.744-.34-1.26-.05-.461.005-1.38.112-1.872l.015-.07-.357.015c-.886.037-1.618.288-2.217.76a2.451 2.451 0 0 0-.255.225l-.06.072.015-.07c.028-.127.17-.404.285-.555.24-.317.723-.62 1.227-.771.132-.04.537-.139.9-.22.364-.08.678-.152.7-.158.02-.006.09-.108.154-.226.064-.118.18-.303.257-.41.077-.109.136-.201.131-.206a3.854 3.854 0 0 0-.391.05c-.21.033-.674.098-1.03.145-.719.095-1.124.17-1.5.278-1.16.335-1.83.983-2.179 2.11l-.09.292.047.137c.075.223.33.72.5.972.663.99 1.704 1.793 2.981 2.299.29.114.324.135.474.283.089.087.158.162.154.166-.018.019-.754-.174-1.072-.28a6.756 6.756 0 0 1-2.114-1.146 2.898 2.898 0 0 0-.443-.284 5.35 5.35 0 0 1-1.402-1.033 2.975 2.975 0 0 1-.487-.672l-.103-.192.147.135c.32.294.783.595 1.012.659.052.014.05.005-.044-.161a5.613 5.613 0 0 1-.364-.787 1.602 1.602 0 0 0-.282-.492c-.747-.971-1.293-1.946-1.674-2.99l-.117-.323-.02.106a5.454 5.454 0 0 0-.025.539l-.004.432.14.385c.145.396.665 1.798.71 1.915.014.036.02.066.015.066-.005 0-.091-.104-.19-.23-.229-.288-.484-.67-.53-.793l-.037-.094.014.084c.074.448.273 1.12.466 1.573.586 1.376 1.55 2.583 2.722 3.407 1.142.803 2.692 1.367 4.063 1.478.132.01 2.083.021 4.335.023 3.518.002 4.13-.002 4.347-.034zm1.685-6.667a2.756 2.756 0 0 1-.76-.276c-.461-.27-.788-.742-.82-1.184-.01-.155-.01-.156.023-.073.208.529.61.955 1.163 1.233.254.128.394.18.69.257l.264.068-.216-.002c-.119-.001-.274-.011-.344-.023zm2.631-2.4c-.241-.058-.51-.273-.584-.47a.743.743 0 0 1 .02-.479l.038-.07.017.096c.044.24.214.446.457.554.072.032.256.08.41.107.229.04.376.083.465.136.007.004.014-.104.017-.239.005-.237.004-.244-.035-.186-.083.122-.2.216-.271.216-.095 0-.513-.152-.628-.228-.143-.094-.188-.186-.188-.383 0-.14-.009-.176-.054-.224l-.054-.058.114-.104c.19-.172.305-.216.57-.216.257 0 .367.04.547.193.256.22.342.757.193 1.204l-.055.164-.444.004a4.386 4.386 0 0 1-.535-.017zm.29-.85c.085-.043.135-.137.132-.248-.002-.069-.022-.105-.089-.167-.14-.129-.328-.092-.41.08-.108.228.139.454.368.336zm-2.035 8.588a2.086 2.086 0 0 1-.256-.599c-.08-.356-.008-.927.152-1.203l.06-.106-.2.015a5.06 5.06 0 0 1-.316.016H18.7v.177c0 .354-.164.786-.422 1.108l-.134.168.245.017c.134.009.316.038.405.065.18.055.404.192.529.323.1.105.118.112.051.019zm3.292-.84a.807.807 0 0 0 .417-.375c.086-.175.179-.638.196-.976.011-.215.005-.32-.027-.468-.04-.187-.184-.519-.273-.631l-.045-.057-.118.084c-.26.186-.467.215-.73.1-.128-.055-.2-.07-.398-.078l-.243-.01-.08.14a2.15 2.15 0 0 1-1.013.922l-.184.084-.017.128c-.068.525.283.887 1.052 1.084.402.103.536.118.955.111.318-.005.392-.013.508-.059zm-19.311-3.72c.22-1.066 1.028-1.779 2.4-2.12.343-.085.907-.196 1.933-.382 1.346-.243 1.761-.372 2.257-.703l.3-.2-1.266-.007c-1.552-.009-1.755.01-2.36.21-.383.128-.759.296-1.798.808-.494.244-.903.439-.908.434-.009-.01.374-.345.57-.498.642-.506 1.693-1.09 2.365-1.315 1.148-.384 2.03-.458 3.891-.325l.89.063.347-.086c.34-.085.688-.151 1.344-.257a4.31 4.31 0 0 0 .334-.061c.005-.005-.011-.016-.036-.025a1.502 1.502 0 0 1-.364-.181.996.996 0 0 1-.15-.11c0-.005.31-.006.69-.002.69.008.692.008.934-.058 1.502-.406 2.734-1.512 3.392-3.045.137-.32.376-1.003.358-1.022-.007-.007-.087.033-.178.088-.23.142-.72.384-1.005.498a7.14 7.14 0 0 1-2.207.498l-.214.016-.17.16c-.6.565-1.503 1.102-2.328 1.386-.46.158-.746.223-2.226.504-.733.139-1.565.302-1.85.361-2.068.435-3.391.979-4.106 1.689-.243.24-.374.427-.516.73-.072.154-.15.274-.263.4a2.032 2.032 0 0 0-.422.802c-.093.372-.051.916.108 1.381.056.166.203.507.218.507a.79.79 0 0 0 .036-.138zm-.82-.868l-.025-.366-.26-.39a21.757 21.757 0 0 1-.468-.737c-.19-.319-.63-1.166-.753-1.452l-.051-.12.013.096c.026.182.15.674.237.943.193.6.513 1.261.86 1.783.157.235.453.628.464.617a3.887 3.887 0 0 0-.016-.374zm-.01-1.4c-.076-.396-.04-.932.086-1.249.053-.135.163-.356.176-.356.005 0 .044.095.086.21.076.212.18.415.211.414.01 0 .059-.071.11-.158.05-.086.16-.248.244-.36l.154-.203-.095-.06c-.306-.193-.585-.636-.705-1.117-.117-.475-.153-1.2-.088-1.794.018-.162.028-.3.022-.306-.017-.016-.35.399-.558.692a7.86 7.86 0 0 0-.865 1.589l-.106.264.104.294a9.417 9.417 0 0 0 1.255 2.35 1.269 1.269 0 0 0-.03-.21zm1.469-1.875c-.07-.29-.1-.672-.1-1.351 0-.653.005-.75.056-1.033.067-.368.191-.793.304-1.038.083-.178.323-.592.337-.578.004.004-.023.237-.06.517-.108.806-.13 1.103-.113 1.568.019.533.114 1.2.172 1.2.023 0 .03-.113.028-.498a5.641 5.641 0 0 1 .24-1.76c.2-.698.622-1.618 1.01-2.196a.872.872 0 0 0 .08-.135c0-.008-.063-.005-.139.006-.922.141-1.671.76-2.045 1.69l-.093.23.01-.163c.032-.469.125-1.128.19-1.345.008-.024-.015.01-.05.074-.277.512-.54 1.976-.539 3.004 0 .753.134 1.297.406 1.658.128.17.336.271.306.15zm1.274-.919c.212-.104.503-.187 1.772-.507.555-.14 1.138-.296 1.297-.349a4.045 4.045 0 0 0 1.568-.944c.462-.444.617-.68.763-1.162.067-.223.067-.224.11-.168.185.245.182.832-.005 1.2-.026.05-.038.093-.027.093.05 0 .315-.196.426-.315.291-.311.426-.595.66-1.39a3.77 3.77 0 0 1 .12-.368c.021-.024.108.176.16.373.028.104.04.24.04.44-.003.329-.063.58-.214.879l-.086.17.128-.069c.31-.166.875-.858 1.116-1.367a1.83 1.83 0 0 0 .21-.887c.002-.425-.087-.704-.344-1.075-.336-.485-1.093-1.05-1.755-1.311-.102-.04-.168-.091-.284-.22-.083-.092-.14-.167-.126-.167.03 0 .472.12.77.209.705.21 1.258.52 1.684.942.493.488.727 1.001.724 1.586-.003.518-.185.988-.586 1.519-.078.102-.14.19-.14.197 0 .02.384-.152.624-.278.303-.16.792-.49.98-.658.261-.237.61-.82.76-1.272.145-.441.169-.936.063-1.345-.093-.361-.33-.777-.625-1.099l-.127-.138h.122c.066 0 .127-.01.134-.022.03-.048-.04-.15-.148-.219-.186-.118-.263-.128-.606-.085-.385.049-.999.05-1.296.001-.257-.042-.543-.132-.681-.214l-.094-.056.873-.012c.665-.01.921-.022 1.075-.052.223-.043.38-.103.432-.167.03-.036.023-.051-.06-.138-.268-.277-.767-.62-1.27-.875a6.067 6.067 0 0 0-2.787-.659c-.387 0-.86.04-1.068.089l-.06.014.072-.077c.094-.1.408-.254.64-.312.41-.104.979-.14 1.533-.1.774.058 1.33.2 2.077.532.158.07.308.127.333.125.06-.005.134-.074.171-.162l.031-.072.075.161c.041.09.075.173.075.188 0 .059.044-.007.072-.11a.347.347 0 0 1 .052-.121c.024-.016.087.125.166.37l.056.173.124-.123c.147-.145.151-.14.172.174l.013.208.11-.069c.062-.038.118-.06.126-.052.008.01.038.093.068.185.087.27.205.494.342.652.07.081.166.219.212.306.046.087.094.155.105.152.038-.012.204-.307.284-.502a.733.733 0 0 1 .094-.187c.033 0 .052.267.04.567a2.001 2.001 0 0 0 0 .297.97.97 0 0 0 .125-.084.692.692 0 0 1 .133-.084c.051 0-.061.75-.145.967-.032.08.035.04.191-.116.087-.086.158-.143.158-.126 0 .061-.141.586-.192.716a3.69 3.69 0 0 1-.156.324 2.98 2.98 0 0 0-.237.547l-.017.067.117-.08c.128-.088.19-.115.893-.391.621-.244.971-.413 1.112-.539.15-.134.233-.297.233-.46v-.124l-.069.094c-.132.181-.446.44-.736.61l-.096.056.075-.082c.318-.35.536-.836.537-1.202 0-.132-.034-.324-.076-.427-.031-.075-.032-.073-.21.363-.205.504-.4.908-.531 1.102-.194.286-.483.544-.658.588-.06.015-.064.012-.042-.03.041-.076.097-.321.122-.536.014-.112.03-.669.038-1.237.013-1.012.03-1.281.093-1.551.031-.133.031-.136-.072-.408a5.899 5.899 0 0 0-.168-.402c-.067-.134-.215-.34-.244-.34-.01 0-.07.12-.137.267l-.12.267-.012-.225c-.01-.18-.022-.24-.064-.298a1.697 1.697 0 0 0-.437-.385 5.05 5.05 0 0 0-.721-.36c-.057-.017-.057-.016-.04.112.009.07.023.155.03.186.014.055.01.057-.077.04a.728.728 0 0 1-.407-.234c-.061-.066-.117-.115-.124-.108a.939.939 0 0 0 .06.224c.038.117.066.218.06.224-.016.016-.182-.048-.254-.1a1.152 1.152 0 0 1-.187-.247 1.473 1.473 0 0 0-.22-.287c-.156-.133-.228-.15-.97-.227a1.392 1.392 0 0 1-.449-.11c-.036-.015-.034 0 .016.114.032.072.066.17.074.216l.016.084-.104-.02c-.16-.03-.355-.108-.534-.216-.158-.096-.169-.098-.451-.116a3.625 3.625 0 0 0-.98.065l-.18.044.18.02c.24.025.45.092.577.185.103.074.189.16.19.191 0 .008-.19.02-.425.027-.676.018-1.102.125-1.701.425-.3.15-1.124.682-1.328.856-.12.103-.339.392-.34.447 0 .03.046.054.175.09.97.279 1.577.984 1.697 1.97.087.709.074 1.148-.045 1.62-.183.725-.656 1.424-1.186 1.753-.195.121-.6.277-.721.278h-.068l.124-.136c.29-.317.5-.72.642-1.233.079-.285.087-.586.02-.812-.048-.163-.063-.165-.11-.017a2.59 2.59 0 0 1-.255.536c-.05.077-.387.432-.766.81-.862.856-1.223 1.301-1.56 1.919a5.181 5.181 0 0 0-.54 1.635c-.05.396-.037 1.068.021 1.068.01 0 .094-.037.188-.084zm11.427-3.6c.621-.209 1.103-.434 1.51-.703.294-.194.681-.575.9-.884.214-.304.525-.963.477-1.012-.027-.026-.45.134-.592.224-.153.098-.245.172-.698.561-.446.383-.535.448-.763.557-.238.115-.38.126-.532.04a.33.33 0 0 1-.098-.068c0-.007.044-.04.096-.072.104-.065.304-.258.285-.277a2.006 2.006 0 0 0-.31.158c-.812.463-1.238.85-1.308 1.192-.02.098.005.1.263.016.628-.205 1.372-.596 2.308-1.213.272-.179.406-.252.528-.287a.664.664 0 0 1 .174-.036c.03.03-.27.375-.513.592-.608.542-1.16.908-1.798 1.189-.16.07-.279.128-.265.128.014 0 .165-.046.336-.104zm.89-3.788c.256-.385.336-.674.37-1.33.032-.619.098-.988.265-1.47.04-.114.067-.21.062-.216-.025-.025-.266.291-.35.46-.24.487-.428 1.344-.517 2.36-.02.222-.036.413-.036.425 0 .042.1-.07.206-.23z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Flink" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apacheflink extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1p, create_fragment$1p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachekafka.svelte generated by Svelte v3.23.2 */

        function create_fragment$1q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.262,13.293c-0.935,0-1.772,0.414-2.346,1.066l-1.47-1.041c0.156-0.43,0.246-0.891,0.246-1.374 c0-0.475-0.086-0.928-0.237-1.352l1.467-1.03c0.574,0.649,1.409,1.06,2.341,1.06c1.725,0,3.129-1.403,3.129-3.129 s-1.404-3.129-3.129-3.129s-3.129,1.403-3.129,3.129c0,0.309,0.047,0.607,0.13,0.889l-1.468,1.03 C11.183,8.653,10.3,8.121,9.294,7.959V6.19c1.417-0.298,2.485-1.557,2.485-3.061C11.779,1.403,10.375,0,8.65,0 S5.522,1.403,5.522,3.129c0,1.484,1.04,2.728,2.429,3.047v1.792c-1.895,0.333-3.341,1.987-3.341,3.976 c0,1.999,1.46,3.659,3.37,3.981v1.892c-1.403,0.308-2.457,1.56-2.457,3.054C5.522,22.597,6.925,24,8.65,24s3.129-1.403,3.129-3.129 c0-1.495-1.054-2.746-2.457-3.054v-1.892c0.966-0.163,1.84-0.671,2.46-1.431l1.48,1.048c-0.082,0.279-0.128,0.574-0.128,0.88 c0,1.725,1.404,3.129,3.129,3.129s3.129-1.403,3.129-3.129S17.987,13.293,16.262,13.293z M16.262,5.977 c0.837,0,1.517,0.681,1.517,1.517s-0.68,1.517-1.517,1.517c-0.836,0-1.517-0.681-1.517-1.517S15.426,5.977,16.262,5.977z M7.133,3.129c0-0.836,0.68-1.517,1.517-1.517s1.517,0.681,1.517,1.517S9.487,4.646,8.65,4.646S7.133,3.965,7.133,3.129z M10.167,20.871c0,0.836-0.68,1.517-1.517,1.517s-1.517-0.681-1.517-1.517s0.68-1.517,1.517-1.517S10.167,20.035,10.167,20.871z M8.65,14.06c-1.167,0-2.116-0.949-2.116-2.116c0-1.167,0.949-2.116,2.116-2.116c1.167,0,2.116,0.949,2.116,2.116 C10.766,13.111,9.817,14.06,8.65,14.06z M16.262,17.939c-0.837,0-1.517-0.681-1.517-1.517c0-0.836,0.68-1.517,1.517-1.517 s1.517,0.681,1.517,1.517C17.779,17.258,17.099,17.939,16.262,17.939z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Kafka" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachekafka extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1q, create_fragment$1q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachemaven.svelte generated by Svelte v3.23.2 */

        function create_fragment$1r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.2355.0012c-.3117-.0129-.6643.0706-.8275.4559-.1585.3741-.2832 1.1874-.3402 2.2758l1.2238.5928c-.0202-.7792.0086-1.5128.087-2.1787-.0248.2192-.0766.9074-.0055 2.1493.0189.3418.0488.7267.0876 1.152.0022.024.002.0453.0075.067.0353.3711.0812.7704.139 1.2074.0493.3763.1046.7743.1725 1.204.0554.3678.1225.7529.1923 1.1608l-.0096.009c.0132.0109.0153.0201.0144.026.0094.0549.0193.1044.0287.1594.0316.1624.0598.327.0938.4928.0347.1808.0719.3645.1082.5544.018.095.0362.1906.0568.2889.0593.2916.1237.5899.1896.8973.0817.3783.1706.7663.2662 1.1705.09.3825.1868.781.2882 1.1861.0982.3868.1977.7824.3073 1.1917.096.3626.1996.7352.3046 1.117.0031.0184.012.0379.015.0562.1059.376.2159.7642.3306 1.1595a.0606.0606 0 00.0083.0253c.0176.0592.033.1146.0506.1738.0772.2619.158.5328.2416.805a4.1973 4.1973 0 01-.295-.1349 166.5148 166.5148 0 01-.1875-.653c-.0208-.0775-.0422-.1497-.063-.2272l-.0027-.0027-.0048-.002c-.087-.3006-.1674-.6056-.256-.9152-.0224-.0867-.0443-.1735-.0691-.2635-.1041-.3877-.2072-.7812-.3128-1.178a77.1318 77.1318 0 01-.2903-1.154c-.0949-.3892-.1863-.7808-.2778-1.1725a54.4975 54.4975 0 01-.2643-1.2026c-.0848-.3966-.1632-.7987-.2423-1.1944a17.1806 17.1806 0 01-.0794-.4312c-.0456-.2449-.0877-.4919-.13-.7392-.004-.0126-.0049-.028-.0089-.0404l-1.0465-.534 1.05.532c-.0568-.3864-.117-.7708-.1746-1.1513a60.6963 60.6963 0 01-.1547-1.2006 27.4722 27.4722 0 01-.1123-1.2067.711.711 0 01-.004-.0691 24.9895 24.9895 0 01-.0548-1.1356l-1.2211-.5886c-.0024.074-.0083.1502-.0116.23a27.5407 27.5407 0 00-.0233.9302c-.003.3682.0002.7522.0068 1.1546.0087.37.0238.756.0438 1.1486.0198.336.042.6758.0692 1.0219.0006.015.0027.024.0034.039l.0055.0027c.0023.0237.0072.0501.0061.076.0328.3678.0647.7417.1082 1.117.0426.3813.0904.763.1471 1.1493.0482.3255.1.649.154.9754.011.064.0247.1316.0356.1957.0748.404.1548.794.2416 1.1581.0972.4134.2008.8012.306 1.1623.0707.2368.1399.4643.2108.6803.0613.1819.1284.3648.193.5442.1553.4222.3273.8319.5127 1.232l.0055.0027a.3195.3195 0 00.0191.0514c.2261.4836.4753.9506.755 1.395.0098.0133.019.0324.0288.0458-.4537-.1826-1.2577-.0981-1.252-.0972.83.2879 1.558.641 2.0172 1.1752-.1825.201-.524.3534-.9535.4778.5938.0643.9248-.0397 1.0459-.0924-.3103.2586-.4835.7314-.6359 1.2402.3493-.5708.6955-.9486 1.0329-1.093.0776.2572.1619.5238.2443.7877-.727 1.4194-1.4698 2.9455-2.2245 4.5538.2036-.0272.3395-.145.4306-.3121.129-.2809.8344-1.7797 1.9076-3.8734.413 1.3029.8798 2.678 1.3853 4.1068.1112-.1435.1239-.3023.0774-.464-.098-.2699-.6338-1.7978-1.3046-3.946.1525-.2959.318-.6111.4839-.9275a3.504 3.504 0 01.4031.1588c.1949.1875.3368.4938.4634.833.0334-.3895-.0712-.7758-.3326-1.0992 1.3353.2577 2.548.089 3.2881-.8098a3.9744 3.9744 0 00.1896-.2573c-.3249.3039-.6817.4038-1.3134.273.9963-.2814 1.5254-.6173 2.037-1.2217a7.5242 7.5242 0 00.3695-.4778c-.9421.7218-1.926.8196-2.8994.4915-.0132-.0067-.0272-.0084-.0451-.0158.914.0201 2.2034-.4756 3.0924-1.191.4094-.3295.7956-.7288 1.1704-1.2107.2806-.358.549-.7606.82-1.215.2335-.3933.4677-.8245.6982-1.2943-.2204.077-.4692.1214-.7379.139l-.1437.0075c-.048.0025-.0947.0002-.1472.002.8843-.198 1.5005-.7394 1.9939-1.4462-.2405.1167-.6276.2594-1.0699.2943-.0578.0057-.1195.0064-.1813.0068-.014-.002-.0287 0-.0473-.0027.3062-.0786.5726-.1773.8104-.3087.0513-.0257.0985-.0566.1458-.0876.0733-.0463.1429-.0976.2122-.1492.0434-.0364.086-.0684.1294-.1048a2.3833 2.3833 0 00.2792-.2868c.0288-.0338.0574-.0634.0815-.0978.036-.0518.0712-.0988.102-.1465a8.3873 8.3873 0 00.3758-.586 6.8254 6.8254 0 00.1355-.2415c.014-.0312.0318-.0571.0458-.0883.041-.0843.0807-.1595.1095-.2266.043-.0982.0736-.179.0918-.2382a.5171.5171 0 01-.1075.0507c-.273.112-.7258.1886-1.0842.2026-.0046-.0007-.009-.002-.0144.002-.02 0-.0438.0015-.0664.002.718-.2145 1.0662-.4526 1.4217-.82.0954-.1.192-.209.2895-.323.2972-.3412.5951-.7208.8652-1.104.2633-.37.5032-.7382.69-1.0719.1217-.215.222-.4142.3004-.5927a7.1872 7.1872 0 00.1704-.4504 36.4173 36.4173 0 01-1.4798.0007c.4951.0097 1.0156.007 1.4853-.0048.4983-1.4854.061-2.2622.061-2.2622S20.2693.4027 19.3943.7637c-.4248.1753-1.1722.731-2.0828 1.562l.5147 1.4483c.6028-.6433 1.2086-1.21 1.8008-1.6838-.194.1569-.7824.6693-1.7118 1.7256-.2564.2902-.5381.624-.8447.9972-.0173.0212-.0345.0377-.0472.0596-.2665.3267-.5467.685-.8474 1.0828-.2592.342-.5312.7063-.818 1.1061-.2475.3402-.4987.7038-.7665 1.0876l-.0158-.0007c.002.0193-.0042.0282-.0095.0322-.0361.0517-.0666.0996-.1027.1513-.1036.1558-.212.311-.3162.4716-.1157.173-.2322.3508-.3539.5325-.0608.0908-.122.1817-.1834.2772-.184.2819-.3686.573-.56.8727a69.9708 69.9708 0 00-.7159 1.154 97.513 97.513 0 00-.7105 1.1834c-.2281.3894-.4625.7874-.6995 1.204-.2108.3682-.4238.7503-.6427 1.141-.012.0173-.0201.0396-.0322.0568-.2135.3868-.4334.7871-.655 1.1965-.006.0086-.0123.0174-.0137.0267-.0328.0617-.065.119-.0979.1807-.17.3171-.346.6423-.5188.978-.0007.0047-.0062.0091-.0068.0138-.0262.0484-.0511.0919-.0726.141-.116.22-.2214.4298-.449.8686a1.3507 1.3507 0 00-.23-.1787c.1183-.2248.2165-.4202.3409-.6536.0462-.0883.0968-.1761.1437-.269.0134-.0266.0263-.0481.0397-.0747.1761-.3257.3581-.6604.5462-1.0034.0449-.079.0845-.1538.1294-.2327l.0007-.0048-.002-.0055c.1685-.3109.3463-.6203.5208-.9397.0509-.0876.1018-.1754.1533-.2677.2242-.3947.4536-.793.6838-1.1964a87.081 87.081 0 01.6838-1.1595c.2328-.3887.4702-.7762.7077-1.1643.2435-.3966.4905-.788.7427-1.1786.2468-.3867.5028-.772.7536-1.1534.0916-.1386.183-.2727.2792-.4106.1578-.2335.3201-.4661.4826-.6989.0067-.0132.018-.0257.0246-.039l-.4333-1.3066.4381 1.3073c.2613-.356.5182-.713.7741-1.065.278-.3726.5544-.7357.8296-1.0897.2866-.3666.5761-.7183.8686-1.0602.0174-.0213.0346-.043.0513-.0596.2865-.3333.5706-.6521.8577-.9569l-.5147-1.4442c-.0608.0576-.1263.1143-.1924.176a31.0491 31.0491 0 00-.7584.7296c-.295.294-.5973.6064-.9117.9356-.287.3048-.581.6277-.8768.9596-.251.2863-.5032.5766-.7563.8768-.0114.0126-.0174.0217-.0288.0343l.0028.0075c-.017.0209-.0347.045-.0562.065-.2658.3221-.5369.6482-.8001.985a38.087 38.087 0 00-.7947 1.043 65.572 65.572 0 00-.6509.907c-.0421.0603-.0845.1252-.1266.1855-.2608.3846-.5061.7624-.7255 1.1246-.2503.4099-.4748.8044-.677 1.1786a30.076 30.076 0 00-.371.7153c-.0951.1951-.186.3956-.2765.5914-.2105.4632-.398.9296-.5667 1.399l.002.0062a.3593.3593 0 00-.0253.0568c-.1077.303-.2044.6079-.2923.9138a2.5679 2.5679 0 01-.4832.4606c-.0423-.0526-.0874-.0978-.1321-.1472.4144-.5983.7383-1.4386.8275-2.2156.053-.4616.0477-.9527-.0157-1.4887-.0458-.3995-.1265-.8196-.2382-1.2738a16.3456 16.3456 0 00-.3648-1.2478c-.091.1853-.2197.3676-.3779.5456-.0286.0313-.0576.0624-.0862.0937-.0286.0313-.0591.0594-.091.0931.4334-.6739.4844-1.3973.3559-2.1485-.0788.2228-.2335.5528-.4901.8494a1.78 1.78 0 01-.1102.117c-.01.0074-.0174.0176-.0308.0274.1438-.2396.2502-.467.3183-.6975.0163-.048.0265-.0968.037-.1457a2.9911 2.9911 0 00.041-.226c.0047-.0497.0118-.0959.0164-.1457a2.107 2.107 0 00-.0027-.3539c-.003-.039-.0033-.0749-.0096-.1115-.0094-.055-.0164-.107-.0267-.1561a7.4225 7.4225 0 00-.1273-.6023 6.0144 6.0144 0 00-.065-.2362c-.0105-.0283-.0148-.0558-.0253-.0842-.0267-.0784-.0484-.15-.072-.21a2.0823 2.0823 0 00-.0903-.2068.4575.4575 0 01-.0362.0986c-.1023.24-.3396.5687-.5565.8001-.0034.0025-.0066.0051-.0075.011-.0126.0122-.0267.0275-.0404.0417.3183-.5806.3897-.9466.3853-1.3984a7.1255 7.1255 0 00-.0184-.3833 12.2819 12.2819 0 00-.141-1.232c-.0641-.3964-.143-.7767-.2328-1.1027-.0568-.2109-.1171-.3988-.1786-.5599a6.3763 6.3763 0 00-.1718-.3894c-.4317.4444-.95.9495-1.3956 1.3484.4456-.3991.964-.9051 1.3963-1.354C5.5759.341 4.8179.1239 4.8179.1239S4.5473.014 4.2356.0012zM7.6161 15.783c.011.0278.021.0558.0315.0835-.059.0335-.1166.0683-.1787.0985-.0125.004-.0224.0114-.0383.0178.0631-.0596.1247-.1282.1855-.1998zm-.6058 1.6167c.1304.137.2527.252.3573.3306.0175.0573.0513.1652.0705.2265-.0799.0115-.1625.0363-.245.0596-.011-.037-.0204-.0662-.0315-.1034-.0257-.0842-.0485-.1711-.0767-.2587-.008-.025-.0138-.0462-.0219-.0712-.0172-.0594-.0353-.1233-.0527-.1834zm.2656.885c.0944-.0015.1835.002.2676.0103.0275.0877.0346.1101.0712.2286.0763-.0158.159-.0134.245-.0034-.1065.2025-.2137.413-.321.6208-.087-.2818-.1723-.5557-.2628-.8563Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Maven" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachemaven extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1r, create_fragment$1r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachenetbeanside.svelte generated by Svelte v3.23.2 */

        function create_fragment$1s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.988 0a.093.093 0 00-.004.002.093.093 0 00-.023.006.093.093 0 00-.004.002.093.093 0 00-.004.002L11.94.02 1.643 5.958a.093.093 0 00-.008.004l-.004.002a.093.093 0 00-.002.002.093.093 0 00-.004.002.093.093 0 00-.002.002.093.093 0 00-.004.002.093.093 0 00-.004.004.093.093 0 00-.003.004.093.093 0 00-.004.002.093.093 0 00-.002.004.093.093 0 00-.004.004.093.093 0 00-.002.004.093.093 0 00-.002.004.093.093 0 00-.004.004.093.093 0 00-.002.004.093.093 0 00-.002.004.093.093 0 000 .004.093.093 0 00-.002.006.093.093 0 00-.002.004.093.093 0 000 .004.093.093 0 00-.002.006.093.093 0 000 .004.093.093 0 000 .004.093.093 0 000 .006.093.093 0 000 .014v11.876a.093.093 0 000 .01v.004a.093.093 0 000 .006.093.093 0 000 .004.093.093 0 000 .004.093.093 0 00.002.004.093.093 0 000 .006.093.093 0 00.002.004.093.093 0 00.002.006.093.093 0 00.004.008.093.093 0 00.002.004.093.093 0 00.002.004.093.093 0 00.002.004.093.093 0 00.004.004.093.093 0 00.002.004.093.093 0 00.004.004.093.093 0 00.002.002.093.093 0 00.003.004.093.093 0 00.004.002.093.093 0 00.004.004.093.093 0 00.004.002.093.093 0 00.004.002.093.093 0 00.012.006l10.298 5.938.006.004a.093.093 0 00.002.002l.004.002a.093.093 0 00.014.008.093.093 0 00.003 0 .093.093 0 00.004.002.093.093 0 00.004.002.093.093 0 00.006 0 .093.093 0 00.004 0 .093.093 0 00.006.002.093.093 0 00.004 0 .093.093 0 00.017-.002.093.093 0 00.01-.002.093.093 0 00.014-.006.093.093 0 00.008-.004l.006-.004a.093.093 0 00.006-.004l10.29-5.934a.093.093 0 00.016-.008l.004-.002a.093.093 0 00.005-.002.093.093 0 00.002-.002.093.093 0 00.004-.004.093.093 0 00.004-.002.093.093 0 00.004-.004.093.093 0 00.004-.004.093.093 0 00.002-.002.093.093 0 00.004-.004.093.093 0 00.002-.004.093.093 0 00.002-.004.093.093 0 00.004-.004.093.093 0 00.002-.004.093.093 0 00.002-.006.093.093 0 000-.004.093.093 0 00.002-.004.093.093 0 00.002-.004.093.093 0 000-.006.093.093 0 00.002-.004.093.093 0 000-.004.093.093 0 000-.006.093.093 0 000-.004v-.006a.093.093 0 000-.008V6.06a.093.093 0 000-.012.093.093 0 000-.006.093.093 0 000-.004.093.093 0 000-.006.093.093 0 00-.002-.004.093.093 0 000-.004.093.093 0 00-.002-.004.093.093 0 000-.002.093.093 0 00-.002-.004.093.093 0 00-.004-.008.093.093 0 00-.002-.002.093.093 0 00-.002-.008.093.093 0 00-.002-.002.093.093 0 00-.004-.004.093.093 0 00-.002-.004.093.093 0 00-.004-.004.093.093 0 00-.002-.004.093.093 0 00-.004-.002.093.093 0 00-.004-.004.093.093 0 00-.004-.002.093.093 0 00-.003-.002.093.093 0 00-.016-.01L12.059.02a.093.093 0 00-.006-.004L12.05.014a.093.093 0 00-.008-.004.093.093 0 00-.004-.002.093.093 0 00-.01-.004.093.093 0 00-.004 0 .093.093 0 00-.004-.002.093.093 0 00-.005-.002.093.093 0 00-.004 0 .093.093 0 00-.006 0 .093.093 0 00-.004 0 .093.093 0 00-.004 0 .093.093 0 00-.01 0zm-.082.256v4.388L8.79 6.454 5.675 8.262 1.863 6.046zm.187 0l10.043 5.79-3.812 2.216-6.23-3.618zM12 4.804l6.139 3.565-6.14 3.519-6.138-3.519zM1.77 6.208l3.813 2.216V15.57L1.77 17.787zm20.46 0v11.579l-3.814-2.216V8.424zM5.769 8.53l6.137 3.519v7.084l-6.137-3.563zm12.462 0v7.04l-6.138 3.563V12.05zm-12.556 7.2l6.23 3.62v4.388l-10.044-5.79zm12.65 0l3.813 2.218-10.045 5.79V19.35l3.117-1.81z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache NetBeans IDE" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachenetbeanside extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1s, create_fragment$1s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apacheopenoffice.svelte generated by Svelte v3.23.2 */

        function create_fragment$1t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0A12 12 0 000 12a12.44 12.44 0 00.25 2.46A13 13 0 013.56 14a12.45 12.45 0 015.15 1.1l.76-.5a12.64 12.64 0 0111.36-.88.19.19 0 01.11.17.16.16 0 01-.06.13.19.19 0 01-.13 0h-.25a8.7 8.7 0 00-.89 0 12.9 12.9 0 00-9.11 3.34 10.7 10.7 0 00-1.17 1.34l-.11.15a.16.16 0 01-.12 0 .17.17 0 01-.12 0A12 12 0 00.68 16 12 12 0 1012 0zm9.39 7.18h-.56a7.08 7.08 0 00-6.21 2.17c-.06.06-.12.07-.18 0a7 7 0 00-4.79-2.19 7.44 7.44 0 00-2 .09.13.13 0 01-.13-.13.14.14 0 010-.1 7.27 7.27 0 016.94.12 7.33 7.33 0 016.8-.26l.14.08a.11.11 0 01.07.11.16.16 0 010 .09.11.11 0 01-.08.02z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache OpenOffice" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apacheopenoffice extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1t, create_fragment$1t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachepulsar.svelte generated by Svelte v3.23.2 */

        function create_fragment$1u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 8.925h-5.866c-1.586-3.041-3.262-5.402-5.544-5.402-2.97 0-4.367 2.593-5.717 5.115l-.118.22H0v1.5h3.934c1.39 0 1.673.468 1.673.468-1.09 1.691-2.4 3.363-4.584 3.363H0v1.574h1.03c4.234 0 6.083-3.434 7.567-6.193 1.361-2.541 2.31-4.08 3.993-4.08 1.747 0 3.584 3.801 5.201 7.157.237.488.477.988.72 1.483-6.2.197-9.155 1.649-11.559 2.833-1.759.866-3.147 1.94-5.433 1.94H0v1.574h1.507c2.754 0 4.47-.85 6.295-1.751 2.53-1.243 5.398-2.652 12.157-2.652h3.907V14.5H21.66a1.18 1.18 0 01-.972-.393 70.83 70.83 0 01-1.133-2.321l-.511-1.047s.366-.393 1.38-.393H24Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Pulsar" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachepulsar extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1u, create_fragment$1u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apacherocketmq.svelte generated by Svelte v3.23.2 */

        function create_fragment$1v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12,24c-1.89-1.755-1.813-3.743-1.813-3.743h3.626C13.813,20.257,13.89,22.245,12,24z M12,1.988 c-1.595,2.106-4.693,6.893-4.693,12.291c0,1.562,0.293,2.87,0.589,3.793h8.208c0.296-0.923,0.589-2.231,0.589-3.793 C16.693,8.881,13.595,4.094,12,1.988z M17.95,14.279c0,3.556-1.363,5.903-1.363,5.903l-1.458-0.853H8.871l-1.458,0.853 c0,0-1.363-2.347-1.363-5.903C6.05,6.446,11.998,0.002,12,0C12.002,0.002,17.95,6.446,17.95,14.279z M18.773,16.614 c0,1.363-0.605,2.845-1.022,3.47h2.889l-0.32-1.965L18.773,16.614z M3.68,18.12l-0.32,1.965h2.889 c-0.418-0.625-1.022-2.107-1.022-3.47L3.68,18.12z M10.867,12.448c-0.154,0-0.279,0.125-0.279,0.279s0.125,0.279,0.279,0.279 s0.279-0.125,0.279-0.279S11.021,12.448,10.867,12.448z M11.762,12.448c-0.154,0-0.279,0.125-0.279,0.279s0.125,0.279,0.279,0.279 s0.279-0.125,0.279-0.279S11.916,12.448,11.762,12.448z M12.657,12.448c-0.154,0-0.279,0.125-0.279,0.279s0.125,0.279,0.279,0.279 s0.279-0.125,0.279-0.279S12.811,12.448,12.657,12.448z M15.715,15.98c0,0.799-0.647,1.446-1.446,1.446 c-0.799,0-1.446-0.647-1.446-1.446c0-0.262,0.071-0.507,0.192-0.719l-0.361-0.493c-0.273,0.12-0.575,0.187-0.892,0.187 c-0.551,0-1.054-0.201-1.443-0.532l-0.403,0.35c0.013,0.059,0.02,0.119,0.02,0.181c0,0.478-0.387,0.865-0.865,0.865 c-0.478,0-0.865-0.387-0.865-0.865s0.387-0.865,0.865-0.865c0.104,0,0.202,0.021,0.294,0.055l0.429-0.373 c-0.166-0.312-0.261-0.667-0.261-1.045c0-0.506,0.171-0.971,0.455-1.345l-0.451-0.49c-0.033,0.004-0.065,0.01-0.098,0.01 c-0.406,0-0.735-0.329-0.735-0.735c0-0.406,0.329-0.735,0.735-0.735c0.406,0,0.735,0.329,0.735,0.735 c0,0.055-0.007,0.109-0.019,0.161l0.455,0.495c0.337-0.204,0.73-0.324,1.153-0.324c0.398,0,0.771,0.106,1.094,0.288l0.385-0.385 c-0.04-0.116-0.063-0.241-0.063-0.371c0-0.632,0.512-1.144,1.144-1.144c0.632,0,1.144,0.512,1.144,1.144 c0,0.632-0.512,1.144-1.144,1.144c-0.13,0-0.255-0.023-0.371-0.063l-0.353,0.353c0.247,0.359,0.393,0.793,0.393,1.262 c0,0.551-0.201,1.054-0.531,1.442l0.329,0.449c0.151-0.053,0.312-0.084,0.481-0.084C15.068,14.534,15.715,15.182,15.715,15.98z M11.762,14.481c0.969,0,1.754-0.785,1.754-1.754c0-0.969-0.785-1.754-1.754-1.754c-0.969,0-1.754,0.785-1.754,1.754 C10.008,13.695,10.793,14.481,11.762,14.481z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache RocketMQ" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apacherocketmq extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1v, create_fragment$1v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachesolr.svelte generated by Svelte v3.23.2 */

        function create_fragment$1w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.74 3.797L8.919 16.585l14.866-6.842a11.695 11.695 0 0 0-3.045-5.946zM11.964 0a11.7 11.7 0 0 0-4.621.931L5.767 14.293 13.683.144C13.146.036 12.573 0 11.964 0zm11.929 10.46L9.815 18.34l13.218-1.576c.609-1.468.967-3.045.967-4.728 0-.537-.036-1.075-.107-1.576zm-5.194 11.534a12.403 12.403 0 0 0 3.797-4.155l-12.358 2.436 8.561 1.719zM14.436.251L7.558 15.188 20.346 3.367c-1.647-1.54-3.653-2.651-5.91-3.116zM13.003 24a11.838 11.838 0 0 0 3.761-.931l-6.949-.824L13.003 24zm-12-16.907A11.626 11.626 0 0 0 0 10.961l1.863 3.331-.86-7.199zm5.301-5.696a11.957 11.957 0 0 0-4.226 3.797l1.755 8.776L6.304 1.397z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Solr" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachesolr extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1w, create_fragment$1w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apachespark.svelte generated by Svelte v3.23.2 */

        function create_fragment$1x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.812 0c-.425.013-.845.215-1.196.605a3.593 3.593 0 00-.493.722c-.355.667-.425 1.415-.556 2.143a551.9 551.9 0 00-.726 4.087c-.027.16-.096.227-.244.273C5.83 8.386 4.06 8.94 2.3 9.514c-.387.125-.773.289-1.114.506-1.042.665-1.196 1.753-.415 2.71.346.422.79.715 1.284.936 1.1.49 2.202.976 3.3 1.47.019.01.036.013.053.019h-.004l1.306.535c0 .023.002.045 0 .073-.2 2.03-.39 4.063-.58 6.095-.04.419-.012.831.134 1.23.317.87 1.065 1.148 1.881.701.372-.204.666-.497.937-.818 1.372-1.623 2.746-3.244 4.113-4.872.111-.133.205-.15.363-.098.349.117.697.231 1.045.347h.001c.02.012.045.02.073.03l.142.042c1.248.416 2.68.775 3.929 1.19.4.132.622.164 1.045.098.311-.048.592-.062.828-.236.602-.33.995-.957.988-1.682-.005-.427-.154-.813-.35-1.186-.82-1.556-1.637-3.113-2.461-4.666-.078-.148-.076-.243.037-.375 1.381-1.615 2.756-3.236 4.133-4.855.272-.32.513-.658.653-1.058.308-.878-.09-1.57-1-1.741a2.783 2.783 0 00-1.235.069c-1.974.521-3.947 1.041-5.918 1.57-.175.047-.26.015-.355-.144a353.08 353.08 0 00-2.421-4.018 4.61 4.61 0 00-.652-.849c-.371-.37-.802-.549-1.227-.536zm.172 3.703a.592.592 0 01.189.211c.87 1.446 1.742 2.89 2.609 4.338.07.118.135.16.277.121 1.525-.41 3.052-.813 4.579-1.217.367-.098.735-.193 1.103-.289a.399.399 0 01-.1.2c-1.259 1.48-2.516 2.962-3.779 4.438-.11.13-.12.22-.04.37.937 1.803 1.768 3.309 2.498 4.76l-3.696-1.019c-.538-.18-1.077-.358-1.615-.539-.163-.055-.25-.03-.36.1-1.248 1.488-2.504 2.97-3.759 4.454a.398.398 0 01-.18.132c.035-.378.068-.757.104-1.136.149-1.572.297-3.144.451-4.716-.03-.318.117-.405-.322-.545-1.493-.593-3.346-1.321-4.816-1.905a.595.595 0 01.24-.134c1.797-.57 3.595-1.14 5.394-1.705.127-.04.199-.092.211-.233.013-.148.05-.294.076-.441.241-1.363.483-2.726.726-4.088.068-.386.14-.771.21-1.157z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apache Spark" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apachespark extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1x, create_fragment$1x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apollographql.svelte generated by Svelte v3.23.2 */

        function create_fragment$1y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12,0C5.372,0 0,5.373 0,12 0,18.628 5.372,24 12,24 18.627,24 24,18.628 24,12A12.014,12.014 0 0 0 23.527,8.657 0.6,0.6 0 0 0 22.4,9.066H22.398C22.663,10.009 22.8,10.994 22.8,12A10.73,10.73 0 0 1 19.637,19.637 10.729,10.729 0 0 1 12,22.8 10.73,10.73 0 0 1 4.363,19.637 10.728,10.728 0 0 1 1.2,12 10.73,10.73 0 0 1 4.363,4.363 10.728,10.728 0 0 1 12,1.2C14.576,1.2 17.013,2.096 18.958,3.74A1.466,1.466 0 1 0 19.82,2.9 11.953,11.953 0 0 0 12,0ZM10.56,5.88 6.36,16.782H8.99L9.677,14.934H13.646L12.927,12.892H10.314L12.014,8.201 15.038,16.781H17.669L13.47,5.88Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apollo GraphQL" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apollographql extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1y, create_fragment$1y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Appstore.svelte generated by Svelte v3.23.2 */

        function create_fragment$1z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.8086 14.9194l6.1107-11.0368c.0837-.1513.1682-.302.2437-.4584.0685-.142.1267-.2854.1646-.4403.0803-.3259.0588-.6656-.066-.9767-.1238-.3095-.3417-.5678-.6201-.7355a1.4175 1.4175 0 0 0-.921-.1924c-.3207.043-.6135.1935-.8443.4288-.1094.1118-.1996.2361-.2832.369-.092.1463-.175.2979-.259.4492l-.3864.6979-.3865-.6979c-.0837-.1515-.1667-.303-.2587-.4492-.0837-.1329-.1739-.2572-.2835-.369-.2305-.2353-.5233-.3857-.844-.429a1.4181 1.4181 0 0 0-.921.1926c-.2784.1677-.4964.426-.6203.7355-.1246.311-.1461.6508-.066.9767.038.155.0962.2984.1648.4403.0753.1564.1598.307.2437.4584l1.248 2.2543-4.8625 8.7825H2.0295c-.1676 0-.3351-.0007-.5026.0092-.1522.009-.3004.0284-.448.0714-.3108.0906-.5822.2798-.7783.548-.195.2665-.3006.5929-.3006.9279 0 .3352.1057.6612.3006.9277.196.2683.4675.4575.7782.548.1477.043.296.0623.4481.0715.1675.01.335.009.5026.009h13.0974c.0171-.0357.059-.1294.1-.2697.415-1.4151-.6156-2.843-2.0347-2.843zM3.113 18.5418l-.7922 1.5008c-.0818.1553-.1644.31-.2384.4705-.067.1458-.124.293-.1611.452-.0785.3346-.0576.6834.0645 1.0029.1212.3175.3346.583.607.7549.2727.172.5891.2416.9013.1975.3139-.044.6005-.1986.8263-.4402.1072-.1148.1954-.2424.2772-.3787.0902-.1503.1714-.3059.2535-.4612L6 19.4636c-.0896-.149-.9473-1.4704-2.887-.9218m20.5861-3.0056a1.4707 1.4707 0 0 0-.779-.5407c-.1476-.0425-.2961-.0616-.4483-.0705-.1678-.0099-.3352-.0091-.503-.0091H18.648l-4.3891-7.817c-.6655.7005-.9632 1.485-1.0773 2.1976-.1655 1.0333.0367 2.0934.546 3.0004l5.2741 9.3933c.084.1494.167.299.2591.4435.0837.131.1739.2537.2836.364.231.2323.5238.3809.8449.4232.3192.0424.643-.0244.9217-.1899.2784-.1653.4968-.4204.621-.7257.1246-.3072.146-.6425.0658-.9641-.0381-.1529-.0962-.2945-.165-.4346-.0753-.1543-.1598-.303-.2438-.4524l-1.216-2.1662h1.596c.1677 0 .3351.0009.5029-.009.1522-.009.3007-.028.4483-.0705a1.4707 1.4707 0 0 0 .779-.5407A1.5386 1.5386 0 0 0 24 16.452a1.539 1.539 0 0 0-.3009-.9158Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "App Store" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Appstore extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1z, create_fragment$1z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Apple.svelte generated by Svelte v3.23.2 */

        function create_fragment$1A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.078 23.55c-.473-.316-.893-.703-1.244-1.15-.383-.463-.738-.95-1.064-1.454-.766-1.12-1.365-2.345-1.78-3.636-.5-1.502-.743-2.94-.743-4.347 0-1.57.34-2.94 1.002-4.09.49-.9 1.22-1.653 2.1-2.182.85-.53 1.84-.82 2.84-.84.35 0 .73.05 1.13.15.29.08.64.21 1.07.37.55.21.85.34.95.37.32.12.59.17.8.17.16 0 .39-.05.645-.13.145-.05.42-.14.81-.31.386-.14.692-.26.935-.35.37-.11.728-.21 1.05-.26.39-.06.777-.08 1.148-.05.71.05 1.36.2 1.94.42 1.02.41 1.843 1.05 2.457 1.96-.26.16-.5.346-.725.55-.487.43-.9.94-1.23 1.505-.43.77-.65 1.64-.644 2.52.015 1.083.29 2.035.84 2.86.387.6.904 1.114 1.534 1.536.31.21.582.355.84.45-.12.375-.252.74-.405 1.1-.347.807-.76 1.58-1.25 2.31-.432.63-.772 1.1-1.03 1.41-.402.48-.79.84-1.18 1.097-.43.285-.935.436-1.452.436-.35.015-.7-.03-1.034-.127-.29-.095-.576-.202-.856-.323-.293-.134-.596-.248-.905-.34-.38-.1-.77-.148-1.164-.147-.4 0-.79.05-1.16.145-.31.088-.61.196-.907.325-.42.175-.695.29-.855.34-.324.096-.656.154-.99.175-.52 0-1.004-.15-1.486-.45zm6.854-18.46c-.68.34-1.326.484-1.973.436-.1-.646 0-1.31.27-2.037.24-.62.56-1.18 1-1.68.46-.52 1.01-.95 1.63-1.26.66-.34 1.29-.52 1.89-.55.08.68 0 1.35-.25 2.07-.228.64-.568 1.23-1 1.76-.435.52-.975.95-1.586 1.26z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apple" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Apple extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1A, create_fragment$1A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Applemusic.svelte generated by Svelte v3.23.2 */

        function create_fragment$1B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.997 6.124c0-.738-.065-1.47-.24-2.19-.317-1.31-1.062-2.31-2.18-3.043C21.003.517 20.373.285 19.7.164c-.517-.093-1.038-.135-1.564-.15-.04-.003-.083-.01-.124-.013H5.988c-.152.01-.303.017-.455.026C4.786.07 4.043.15 3.34.428 2.004.958 1.04 1.88.475 3.208c-.192.448-.292.925-.363 1.408-.056.392-.088.785-.1 1.18 0 .032-.007.062-.01.093v12.223c.01.14.017.283.027.424.05.815.154 1.624.497 2.373.65 1.42 1.738 2.353 3.234 2.802.42.127.856.187 1.293.228.555.053 1.11.06 1.667.06h11.03c.525 0 1.048-.034 1.57-.1.823-.106 1.597-.35 2.296-.81.84-.553 1.472-1.287 1.88-2.208.186-.42.293-.87.37-1.324.113-.675.138-1.358.137-2.04-.002-3.8 0-7.595-.003-11.393zm-6.423 3.99v5.712c0 .417-.058.827-.244 1.206-.29.59-.76.962-1.388 1.14-.35.1-.706.157-1.07.173-.95.045-1.773-.6-1.943-1.536-.142-.773.227-1.624 1.038-2.022.323-.16.67-.25 1.018-.324.378-.082.758-.153 1.134-.24.274-.063.457-.23.51-.516.014-.063.02-.13.02-.193 0-1.815 0-3.63-.002-5.443 0-.062-.01-.125-.026-.185-.04-.15-.15-.243-.304-.234-.16.01-.318.035-.475.066-.76.15-1.52.303-2.28.456l-2.326.47-1.374.278c-.016.003-.032.01-.048.013-.277.077-.377.203-.39.49-.002.042 0 .086 0 .13-.002 2.602 0 5.204-.003 7.805 0 .42-.047.836-.215 1.227-.278.64-.77 1.04-1.434 1.233-.35.1-.71.16-1.075.172-.96.036-1.755-.6-1.92-1.544-.14-.812.23-1.685 1.154-2.075.357-.15.73-.232 1.108-.31.287-.06.575-.116.86-.177.383-.083.583-.323.6-.714v-.15c0-2.96 0-5.922.002-8.882 0-.123.013-.25.042-.37.07-.285.273-.448.546-.518.255-.066.515-.112.774-.165.733-.15 1.466-.296 2.2-.444l2.27-.46c.67-.134 1.34-.27 2.01-.403.22-.043.443-.088.664-.106.31-.025.523.17.554.482.008.073.012.148.012.223.002 1.91.002 3.822 0 5.732z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apple Music" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Applemusic extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1B, create_fragment$1B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Applepay.svelte generated by Svelte v3.23.2 */

        function create_fragment$1C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.388 8.284c-.282.337-.732.602-1.182.564-.056-.455.164-.938.422-1.237C3.91 7.265 4.402 7.02 4.8 7c.047.474-.136.938-.412 1.284zm.407.654c-.651-.038-1.21.375-1.518.375-.315 0-.788-.356-1.304-.346-.67.01-1.293.393-1.635 1.005C-.366 11.194.155 13.005.834 14c.333.493.732 1.033 1.257 1.014.496-.019.693-.327 1.293-.327.605 0 .778.327 1.304.318.543-.01.885-.493 1.218-.986.38-.56.535-1.104.544-1.133-.01-.01-1.05-.412-1.06-1.625-.009-1.015.82-1.498.858-1.526-.468-.702-1.2-.778-1.453-.797zM8.56 7.564v7.389h1.135v-2.526h1.57c1.434 0 2.442-.996 2.442-2.436 0-1.441-.989-2.427-2.404-2.427H8.559zm1.135.967h1.308c.984 0 1.546.53 1.546 1.464 0 .934-.562 1.47-1.551 1.47H9.694V8.53zm6.084 6.478c.713 0 1.374-.364 1.674-.943h.023v.887h1.05v-3.678c0-1.066-.844-1.754-2.142-1.754-1.205 0-2.095.697-2.128 1.654h1.022c.084-.455.501-.753 1.073-.753.694 0 1.083.327 1.083.929v.407l-1.416.086c-1.317.08-2.03.625-2.03 1.573 0 .957.736 1.592 1.791 1.592zm.305-.876c-.605 0-.99-.294-.99-.744 0-.465.371-.735 1.079-.778l1.26-.08v.417c0 .692-.58 1.185-1.35 1.185zm3.844 2.83c1.106 0 1.626-.427 2.08-1.721L24 9.592h-1.153l-1.336 4.365h-.023l-1.336-4.365h-1.186l1.921 5.38-.103.327c-.173.554-.454.767-.956.767-.089 0-.262-.01-.333-.019v.887c.066.019.347.028.432.028z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apple Pay" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Applepay extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1C, create_fragment$1C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Applepodcasts.svelte generated by Svelte v3.23.2 */

        function create_fragment$1D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.34 0A5.328 5.328 0 000 5.34v13.32A5.328 5.328 0 005.34 24h13.32A5.328 5.328 0 0024 18.66V5.34A5.328 5.328 0 0018.66 0zm6.525 2.568c2.336 0 4.448.902 6.056 2.587 1.224 1.272 1.912 2.619 2.264 4.392.12.59.12 2.2.007 2.864a8.506 8.506 0 01-3.24 5.296c-.608.46-2.096 1.261-2.336 1.261-.088 0-.096-.091-.056-.46.072-.592.144-.715.48-.856.536-.224 1.448-.874 2.008-1.435a7.644 7.644 0 002.008-3.536c.208-.824.184-2.656-.048-3.504-.728-2.696-2.928-4.792-5.624-5.352-.784-.16-2.208-.16-3 0-2.728.56-4.984 2.76-5.672 5.528-.184.752-.184 2.584 0 3.336.456 1.832 1.64 3.512 3.192 4.512.304.2.672.408.824.472.336.144.408.264.472.856.04.36.03.464-.056.464-.056 0-.464-.176-.896-.384l-.04-.03c-2.472-1.216-4.056-3.274-4.632-6.012-.144-.706-.168-2.392-.03-3.04.36-1.74 1.048-3.1 2.192-4.304 1.648-1.737 3.768-2.656 6.128-2.656zm.134 2.81c.409.004.803.04 1.106.106 2.784.62 4.76 3.408 4.376 6.174-.152 1.114-.536 2.03-1.216 2.88-.336.43-1.152 1.15-1.296 1.15-.023 0-.048-.272-.048-.603v-.605l.416-.496c1.568-1.878 1.456-4.502-.256-6.224-.664-.67-1.432-1.064-2.424-1.246-.64-.118-.776-.118-1.448-.008-1.02.167-1.81.562-2.512 1.256-1.72 1.704-1.832 4.342-.264 6.222l.413.496v.608c0 .336-.027.608-.06.608-.03 0-.264-.16-.512-.36l-.034-.011c-.832-.664-1.568-1.842-1.872-2.997-.184-.698-.184-2.024.008-2.72.504-1.878 1.888-3.335 3.808-4.019.41-.145 1.133-.22 1.814-.211zm-.13 2.99c.31 0 .62.06.844.178.488.253.888.745 1.04 1.259.464 1.578-1.208 2.96-2.72 2.254h-.015c-.712-.331-1.096-.956-1.104-1.77 0-.733.408-1.371 1.112-1.745.224-.117.534-.176.844-.176zm-.011 4.728c.988-.004 1.706.349 1.97.97.198.464.124 1.932-.218 4.302-.232 1.656-.36 2.074-.68 2.356-.44.39-1.064.498-1.656.288h-.003c-.716-.257-.87-.605-1.164-2.644-.341-2.37-.416-3.838-.218-4.302.262-.616.974-.966 1.97-.97z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apple Podcasts" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Applepodcasts extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1D, create_fragment$1D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Appletv.svelte generated by Svelte v3.23.2 */

        function create_fragment$1E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.57 17.735h-1.815l-3.34-9.203h1.633l2.02 5.987c.075.231.273.9.586 2.012l.297-.997.33-1.006 2.094-6.004H24zm-5.344-.066a5.76 5.76 0 0 1-1.55.207c-1.23 0-1.84-.693-1.84-2.087V9.646h-1.063V8.532h1.121V7.081l1.476-.602v2.062h1.707v1.113H13.38v5.805c0 .446.074.75.214.932.14.182.396.264.75.264.207 0 .495-.041.883-.115zm-7.29-5.343c.017 1.764 1.55 2.358 1.567 2.366-.017.042-.248.842-.808 1.658-.487.71-.99 1.418-1.79 1.435-.783.016-1.03-.462-1.93-.462-.89 0-1.17.445-1.913.478-.758.025-1.344-.775-1.838-1.484-.998-1.451-1.765-4.098-.734-5.88.51-.89 1.426-1.451 2.416-1.46.75-.016 1.468.512 1.93.512.461 0 1.327-.627 2.234-.536.38.016 1.452.157 2.136 1.154-.058.033-1.278.743-1.27 2.219M6.468 7.988c.404-.495.685-1.18.61-1.864-.585.025-1.294.388-1.723.883-.38.437-.71 1.138-.619 1.806.652.05 1.328-.338 1.732-.825Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Apple TV" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Appletv extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1E, create_fragment$1E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Appsignal.svelte generated by Svelte v3.23.2 */

        function create_fragment$1F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.005 7.326c-1.781 0-3.055 1.57-4.368 3.318-.815-3.714-1.72-7.424-4.601-7.424s-3.789 3.71-4.617 7.427c-1.31-1.752-2.584-3.32-4.365-3.32-1.134 0-3.052.769-3.052 3.657v5.24c0 2.832 1.512 3.527 2.42 3.766 1.565.406 5.334.786 9.578.786s8.013-.38 9.579-.786c.907-.24 2.423-.934 2.423-3.766v-5.24c0-2.888-1.92-3.658-3.052-3.658m-8.914-2.469c1.726 0 2.384 3.406 3.3 7.493-1.004 1.238-2.072 2.236-3.3 2.236s-2.292-.998-3.3-2.236c.857-3.822 1.519-7.493 3.3-7.493M1.666 16.24V11c0-1.823.981-2.02 1.414-2.02 1.257 0 2.62 2.096 3.893 3.78-.91 3.818-1.873 6.143-4.145 5.664-.593-.16-1.15-.537-1.15-2.167m4.46 2.655c1.006-1.093 1.638-2.8 2.139-4.607 1.05 1.103 2.266 1.935 3.772 1.935s2.718-.832 3.773-1.935c.488 1.807 1.13 3.514 2.135 4.607a67.507 67.507 0 01-11.806 0m16.282-2.655c0 1.637-.556 2.007-1.15 2.167-2.275.482-3.235-1.846-4.145-5.665 1.287-1.683 2.62-3.779 3.894-3.779.425 0 1.414.197 1.414 2.02z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AppSignal" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Appsignal extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1F, create_fragment$1F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Appveyor.svelte generated by Svelte v3.23.2 */

        function create_fragment$1G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M 12,0 C 18.6,0 24,5.4 24,12 24,18.6 18.6,24 12,24 5.4,24 0,18.6 0,12 0,5.4 5.4,0 12,0 Z m 2.94,14.34 C 16.26,12.66 16.08,10.26 14.4,9 12.78,7.74 10.38,8.04 9,9.72 7.68,11.4 7.86,13.8 9.54,15.06 c 1.68,1.26 4.08,0.96 5.4,-0.72 z m -6.42,7.8 c 0.72,0.3 2.28,0.6 3.06,0.6 l 5.22,-7.56 c 1.68,-2.52 1.26,-5.94 -1.08,-7.8 -2.1,-1.68 -5.04,-1.62 -7.14,0 l -7.26,5.58 c 0.18,1.92 0.72,2.88 0.72,2.94 l 4.14,-4.5 c -0.3,1.98 0.42,4.02 2.1,5.28 1.44,1.14 3.18,1.44 4.86,1.08 z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AppVeyor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Appveyor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1G, create_fragment$1G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Aral.svelte generated by Svelte v3.23.2 */

        function create_fragment$1H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.393 10.02l-.48 1.959.99.001-.51-1.96zm3.892.082v1.187c.549-.002.958.03 1.229-.033.27-.062.404-.217.404-.592 0-.334-.12-.469-.385-.523-.264-.055-.672-.028-1.248-.04zm5.326-.079l-.48 1.96h.99l-.51-1.96zM11.996 0L0 11.998 12.004 24 24 12.004 11.996 0zM5.393 8.896c.366 0 .606.117.775.295.169.18.267.421.35.67l1.07 3.211s.134.276.144.567c.01.29-.104.599-.6.666-.355-.054-.536-.156-.657-.35-.122-.194-.184-.482-.305-.91H4.645c-.147.468-.195.757-.295.941-.1.184-.254.263-.616.317-.508-.054-.636-.369-.636-.67 0-.301.129-.588.129-.588l1.015-3.152c.08-.246.176-.495.348-.682.172-.187.42-.315.803-.315zm9.191.002c.366 0 .607.117.775.295.17.18.267.421.35.67l1.072 3.211s.135.276.145.567c.01.29-.104.599-.6.666-.356-.054-.536-.156-.658-.35-.122-.194-.186-.482-.307-.91h-1.525c-.147.468-.193.757-.293.941-.1.184-.256.263-.617.317-.509-.054-.635-.367-.635-.668 0-.301.127-.59.127-.59l1.016-3.152c.075-.233.17-.484.343-.674.174-.19.424-.323.807-.323zm3.346.002c.308 0 .483.114.58.291.097.178.117.418.117.672v3.207c.215.005 1.23 0 1.23 0 .29 0 .53.02.694.106.164.086.252.239.244.504-.01.361-.18.517-.406.582-.226.065-.509.039-.744.039h-1.766c-.375 0-.536-.165-.604-.436-.067-.27-.04-.645-.04-1.062v-2.94c-.014-.254.02-.496.126-.674.107-.177.288-.289.569-.289zm-8.645.104h1.098c.254 0 .51-.002.767.084.259.086.52.26.786.613.28.378.35.933.222 1.414-.128.481-.456.889-.972.969.187.348.804 1.283.804 1.283s.066.11.078.266c.012.155-.03.357-.25.539-.388.147-.633.106-.78.03-.149-.078-.2-.192-.2-.192s-.562-.964-.91-1.633h-.643v1.338s.01.154-.064.305c-.075.15-.236.298-.578.285-.327 0-.488-.155-.567-.309C7.997 13.842 8 13.69 8 13.69V9.861c0-.334.006-.549.17-.68.164-.13.486-.177 1.115-.177z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ARAL" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Aral extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1H, create_fragment$1H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Archlinux.svelte generated by Svelte v3.23.2 */

        function create_fragment$1I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.390232.60509C10.375655 3.09168 9.764285 4.7185 8.63513 7.13162c.692712.734695 1.542857 1.589214 2.923032 2.553937-1.484256-.610496-2.49621-1.223615-3.25277-1.859475-1.444897 3.015743-3.710204 7.311953-8.30554 15.568513 3.612246-2.08513 6.411955-3.36997 9.020993-3.861516-.111954-.48105-.175802-1.003208-.17143-1.54723l.0035-.115453c.057725-2.314286 1.261224-4.09417 2.68688-3.972595 1.425656.119825 2.53382 2.095627 2.477843 4.409038-.010496.43557-.06035.85452-.146064 1.242857 2.58105.504665 5.351895 1.78688 8.914286 3.844024-.702333-1.29271-1.329447-2.4586-1.928572-3.569387-.943732-.731196-1.926822-1.6828-3.933236-2.71312 1.3793.3586 2.366764.77143 3.136443 1.23411C13.970407 7.010922 13.478862 5.503924 11.390232.60509zM22.897813 21.360193v-.623615h-.233528v-.083965h.561516v.083965h-.2344v.623615h-.093587M23.322886 21.360193v-.70758h.14169l.167056.501166c.015744.04723.027114.082215.03411.10583.007873-.025365.020118-.06385.038485-.113703l.168805-.493294h.126822v.70758h-.090962v-.593003l-.206414.593003h-.083965l-.204665-.602624v.602623h-.090962");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Arch Linux" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Archlinux extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1I, create_fragment$1I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Archicad.svelte generated by Svelte v3.23.2 */

        function create_fragment$1J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.5896 16.3222c-.779 0-1.4104-.6315-1.4104-1.4105 0-.779.6314-1.4104 1.4104-1.4104S24 14.1328 24 14.9117c0 .779-.6315 1.4105-1.4104 1.4105zM.1507 19.8272c-.35.6959-.0696 1.5438.6263 1.8938.6959.35 1.5438.0695 1.8938-.6263 0 0 7.8494-16.0114 14.2545-16.1487 4.2299-.0907 4.2313 5.642 4.2313 5.642 0 .779.6314 1.4104 1.4104 1.4104s1.4104-.6314 1.4104-1.4104c0 0 .0566-8.3813-7.0196-8.4569C8.7634 1.8711.1507 19.8272.1507 19.8272z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Archicad" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Archicad extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1J, create_fragment$1J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Archiveofourown.svelte generated by Svelte v3.23.2 */

        function create_fragment$1K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.417 9.883c-.687 1.116-1.823 1.722-2.99 1.855-4.227.484-6.047-4.149-3.469-6.728 2.31-2.31 7.082-.9 7.005 2.899-.011.611-.166 1.357-.546 1.974zm-6.459-2.029c.142 3.596 4.764 3.682 5.687 1.054.815-2.324-1.12-4.199-3.19-3.897-1.523.221-2.553 1.411-2.497 2.843zM23.123 6.003c.284-.131.697-.412.837-.246.211.251-.459.475-.748.664-.918.6-1.731 1.227-2.477 2.049-.959 1.059-1.944 2.376-2.55 3.818.618.032 3.021.157 3.6 1.481.464 1.062-.387 2.156-1.32 2.627.663.414 1.81.945 1.745 1.898-.158 2.343-3.696 2.241-5.178.695-.244-.289-.358-.482-.25-.578.151-.134.326.186.676.476.225.187.377.251.572.354 1.301.683 3.339.403 3.478-.792.064-.554-.664-.955-1.217-1.204-.498-.224-1.514-.386-1.494-.952.02-.554.524-.45 1.03-.65.55-.217 1.004-.901 1.003-1.116-.005-.905-2.062-.888-3.221-.92-.275.606-.471 1.226-.692 2.158-.139.583-.151 1.897-.748 2.029-.737.164-1.014-.477-1.455-.991-.594-.69-1.436-1.637-1.942-2.223-3.033 1.002-5.392 2.091-8.256 3.712-1.311.742-2.063 1.59-2.545 1.354-.396-.194-.339-.633-.147-.887.393-.521.927-1.225 1.396-1.888.6-.849 1.054-1.667 1.373-2.445.692-1.688 1.23-4.72 1.475-5.859.088-.412.309-.348.322-.148.027.419-.237 2.047-.29 2.383-.436 2.781-.772 4.41-2.009 6.349 2.196-1.358 4.805-3.019 7.592-3.955C8.846 9.936 5.847 6.85 1.676 4.905 1.037 4.542 0 4.464 0 4.22c0-.271.781-.06 1.043.007 2.383.596 4.817 2.141 6.601 3.444 2.145 1.567 4.714 3.967 5.679 5.081.657-.226 2.286-.457 3.696-.496.752-1.58 2.55-4.018 4.788-5.442.413-.263.842-.594 1.316-.811zm-8.594 8.071c.423.428.742.934 1.11 1.398.174-.59.405-1.216.643-1.758-.619.082-1.281.203-1.753.36z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Archive of Our Own" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Archiveofourown extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1K, create_fragment$1K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ardour.svelte generated by Svelte v3.23.2 */

        function create_fragment$1L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 1.606L0 22.394c1.45 0 .832-.885 1.565-.93.703 0 .559.44 1.044.44.846 0 .273-2.82 1.043-2.82.665 0 .48 2.038 1.044 2.038.288 0 .521-.811.521-1.81v-.945c0-1.304.234-2.364.522-2.364.288 0 .522 1.066.522 2.005 0 1.178.233 2.43.522 2.43.288 0 .521-1.263.521-2.805v-.44c0-1.69.234-3.065.522-3.065.288 0 .522 1.369.522 2.967 0 1.661.233 3.098.522 3.098.288 0 .521-1.437.521-3.18 0-1.737.234-3.146.522-3.146.288 0 .522 1.424.522 3.277 0 1.786.233 3.147.522 3.147.288 0 .521-1.367.521-2.87 0-1.386.234-2.657.522-2.657.288 0 .522 1.271.522 2.837v.472c0 1.415.233 2.56.521 2.56.289 0 .522-1.152.522-2.299 0-.973.234-1.989.522-1.989.288 0 .522 1.01.522 2.25v.57c0 1.058.233 1.908.521 1.908.289 0 .522-.84.522-1.614 0-.589.234-1.304.522-1.304.288 0 .522.709.522 1.581v.538c0 .696.233 1.272.521 1.272.595 0 .45-1.728 1.044-1.728.288 0 .522.43.522.962v.456c0 .385.233.685.521.685.59 0 .462-.782 1.044-.782.76 0 .197 1.076 1.043 1.076.512 0 .426-.18 1.044-.18.563 0 .493.359 1.565.359z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ardour" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ardour extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1L, create_fragment$1L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Arduino.svelte generated by Svelte v3.23.2 */

        function create_fragment$1M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.82 12a5.78 5.78 0 0 0-5.88-5.67c-.29 0-.6.02-.9.05-2.52.37-4.2 2.18-5.13 3.57-.95-1.39-2.64-3.2-5.14-3.57-.3-.03-.6-.05-.9-.05A5.78 5.78 0 0 0 0 12a5.78 5.78 0 0 0 5.87 5.67c.3 0 .6-.02.92-.06 2.52-.36 4.2-2.17 5.14-3.56.95 1.39 2.63 3.2 5.14 3.57.31.03.6.05.91.05A5.78 5.78 0 0 0 23.82 12zM6.48 15.6c-.2.04-.43.04-.63.04A3.77 3.77 0 0 1 2 11.98a3.78 3.78 0 0 1 3.86-3.66c.2 0 .42.02.63.04 2.37.35 3.82 2.67 4.31 3.62-.5.95-1.95 3.3-4.31 3.62zM13 12c.49-.93 1.94-3.27 4.31-3.62.2-.04.42-.04.62-.04A3.76 3.76 0 0 1 21.8 12a3.78 3.78 0 0 1-3.86 3.66c-.2 0-.42-.02-.62-.04-2.36-.35-3.82-2.69-4.31-3.62zm-8.79.59h3.54v-1.16H4.22v1.16zm14.13 0h1.19v-1.16h-1.2v-1.19H17.2v1.2H16v1.15h1.2v1.18h1.15V12.6zM24 7.06c0 .3-.22.51-.53.51a.51.51 0 0 1-.53-.5c0-.28.24-.52.53-.52.31 0 .53.22.53.51zm-.91 0c0 .22.16.4.4.4.22 0 .38-.18.38-.4s-.16-.4-.38-.4c-.24-.02-.4.16-.4.4zm.3.26h-.1V6.8l.2-.01c.09 0 .14.01.18.03.04.02.06.06.06.11 0 .06-.04.1-.11.11.05.02.07.06.09.13l.03.13h-.12c-.02-.02-.02-.07-.04-.13-.02-.05-.04-.07-.11-.07h-.05l-.02.22zm.02-.3h.06c.07 0 .1-.01.1-.07 0-.05-.03-.07-.1-.07h-.07v.14h.01z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Arduino" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Arduino extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1M, create_fragment$1M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Arlo.svelte generated by Svelte v3.23.2 */

        function create_fragment$1N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.493 16.075c1.38 1.042 2.642 2.295 2.495 2.218-3.829-2.005-6.533-1.494-7.6-.805-4.155 2.683-7.952-1.534-9.87-4.341-.63-.918-6.518-.87-6.518-.87.47-.347 5.526-.414 6.593-1.613 2.145-2.409 4.027-2.14 5.558-1.4.21.1.567.325 1.02.633v1.712c-.983-.623-1.726-1.08-1.885-1.147-.556-.235-1.573-.886-3.084.067-1.652 1.043-.024 2.892 1.28 4.403 1.64 1.905 4.531 3.538 7.318.571.559-.593 2.888.303 2.888.303s-1.941-1.264-3.962-2.565h2.035c1.65 1.243 3.156 2.398 3.732 2.834M10.302 11.84a.797.797 0 0 1-.788.806.797.797 0 0 1-.787-.806c0-.445.352-.807.787-.807.436 0 .788.362.788.807m6.847-2.636a4.217 4.217 0 0 1 1.192 2.965h-1.08a3.099 3.099 0 0 0-.876-2.182 2.953 2.953 0 0 0-2.098-.9V7.984a4.02 4.02 0 0 1 2.862 1.22m1.688-1.567a6.807 6.807 0 0 1 1.932 4.53h-1.202a5.537 5.537 0 0 0-1.57-3.67 5.286 5.286 0 0 0-3.71-1.613v-1.23a6.486 6.486 0 0 1 4.55 1.982m-3.22 3.136c.375.382.56.885.558 1.388h-1.888v-1.956c.501.005.98.21 1.33.57Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Arlo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Arlo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1N, create_fragment$1N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Artstation.svelte generated by Svelte v3.23.2 */

        function create_fragment$1O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 17.723l2.027 3.505h.001a2.424 2.424 0 0 0 2.164 1.333h13.457l-2.792-4.838H0zm24 .025c0-.484-.143-.935-.388-1.314L15.728 2.728a2.424 2.424 0 0 0-2.142-1.289H9.419L21.598 22.54l1.92-3.325c.378-.637.482-.919.482-1.467zm-11.129-3.462L7.428 4.858l-5.444 9.428h10.887z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ArtStation" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Artstation extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1O, create_fragment$1O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Arxiv.svelte generated by Svelte v3.23.2 */

        function create_fragment$1P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.7 15.404l-1.894-4.967h1.411l1.39 3.582 1.379-3.582h.96l-1.92 4.967zM16.298 9.6V8.48h1.34V9.6zm0 5.808v-4.971h1.34v4.967zm-6.965-.003l2.146-3.3L9.43 8.707h1.627l1.364 2.254L13.9 8.707h1.12l-2.046 3.156 2.126 3.537h-1.622l-1.45-2.4-1.557 2.4H9.333zm-3.346 0v-4.968h1.338v.937c.344-.7.875-1.051 1.585-1.051a1.401 1.401 0 01.248.026v1.194a1.6 1.6 0 00-.53-.102c-.537 0-.968.267-1.303.8v3.164zm-3.028-.536q-.664.65-1.437.65a1.473 1.473 0 01-1.06-.398 1.376 1.376 0 01-.406-1.03 1.45 1.45 0 01.659-1.271q.657-.447 1.884-.448h.355v-.453q0-.772-.88-.772a3.305 3.305 0 00-1.587.443v-.922a5.016 5.016 0 011.808-.345q1.953 0 1.951 1.55v2.206c0 .39.123.58.376.58a.8.8 0 00.174-.02l.032.751a2.745 2.745 0 01-.751.13c-.552 0-.902-.216-1.06-.65h-.054zm0-.72v-1.01h-.32c-.866 0-1.297.274-1.297.815a.64.64 0 00.64.648c.329.004.647-.15.977-.453z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "arXiv" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Arxiv extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1P, create_fragment$1P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Asana.svelte generated by Svelte v3.23.2 */

        function create_fragment$1Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.78 12.653c-2.882 0-5.22 2.336-5.22 5.22s2.338 5.22 5.22 5.22 5.22-2.34 5.22-5.22-2.336-5.22-5.22-5.22zm-13.56 0c-2.88 0-5.22 2.337-5.22 5.22s2.338 5.22 5.22 5.22 5.22-2.338 5.22-5.22-2.336-5.22-5.22-5.22zm12-6.525c0 2.883-2.337 5.22-5.22 5.22-2.882 0-5.22-2.337-5.22-5.22 0-2.88 2.338-5.22 5.22-5.22 2.883 0 5.22 2.34 5.22 5.22z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Asana" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Asana extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1Q, create_fragment$1Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Asciidoctor.svelte generated by Svelte v3.23.2 */

        function create_fragment$1R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.07,0H5.93A5.94,5.94,0,0,0,0,5.93V18.07A5.94,5.94,0,0,0,5.93,24H18.07A5.94,5.94,0,0,0,24,18.07V5.93A5.94,5.94,0,0,0,18.07,0ZM10.71,15.4H8.81v0L7.2,19.28h0a.5.5,0,0,1-.66.27.51.51,0,0,1-.27-.67L7.72,15.4H4.85a.5.5,0,0,1-.5-.51.52.52,0,0,1,.52-.5h5.86a.5.5,0,0,1,.49.52A.49.49,0,0,1,10.71,15.4Zm7.92,4.17a.51.51,0,0,1-.66-.29l-5.35-13L10.23,12H11.8a.5.5,0,0,1,.49.52.49.49,0,0,1-.51.49H5.92a.5.5,0,0,1-.5-.51.52.52,0,0,1,.52-.5h3.2l3-7.27a.49.49,0,0,1,.45-.31.52.52,0,0,1,.48.31L18.91,18.9h0A.51.51,0,0,1,18.63,19.57Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Asciidoctor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Asciidoctor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1R, create_fragment$1R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Asciinema.svelte generated by Svelte v3.23.2 */

        function create_fragment$1S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.61 0V24L22.39 12L1.61 0M5.76 7.2L10.06 9.68L5.76 12.16V7.2M12.55 11.12L14.08 12L5.76 16.8V15.04L12.55 11.12Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "asciinema" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Asciinema extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1S, create_fragment$1S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Aseprite.svelte generated by Svelte v3.23.2 */

        function create_fragment$1T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.006 0v1.6h15.988V0zm15.988 1.6v1.6h1.6V1.6zm1.6 1.6v14.4h-1.6v1.6H4.006v-1.6h-1.6V3.2H.809v17.6h1.599v1.6h1.599V24h15.988v-1.6h1.6v-1.6h1.598V3.2zm-19.187 0h1.599V1.6h-1.6zm4.796 3.2v6.4h1.6V6.4zm7.995 0v6.4h1.599V6.4z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Aseprite" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Aseprite extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1T, create_fragment$1T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Askfm.svelte generated by Svelte v3.23.2 */

        function create_fragment$1U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 24c-2.172 0-4.195-.547-6.07-1.64a12.003 12.003 0 01-4.29-4.29A11.842 11.842 0 010 12c0-2.172.547-4.195 1.64-6.07a12.003 12.003 0 014.29-4.29A11.842 11.842 0 0112 0c2.172 0 4.195.547 6.07 1.64a12.003 12.003 0 014.29 4.29A11.842 11.842 0 0124 12c0 2.172-.547 4.195-1.64 6.07a12.003 12.003 0 01-4.29 4.29A11.842 11.842 0 0112 24zm2.133-14.227c-.39.282-.664.688-.82 1.22-.157.53-.188 1.109-.094 1.734s.312 1.222.656 1.793c.344.57.754 1.027 1.23 1.37.477.344.961.54 1.454.587.492.046.933-.07 1.324-.352.39-.281.664-.688.82-1.219.156-.531.188-1.11.094-1.734a4.839 4.839 0 00-.656-1.793 4.564 4.564 0 00-1.23-1.371c-.477-.344-.962-.54-1.454-.586a1.887 1.887 0 00-1.324.351zm2.484 5.18c-.469.188-.937.152-1.406-.105-.469-.258-.813-.66-1.031-1.207a3.082 3.082 0 01-.164-.797h.023c.063 0 .14-.016.234-.047h-.023c.188-.063.316-.211.387-.445a.92.92 0 00-.012-.633.842.842 0 00-.164-.305v.024c.187-.235.406-.399.656-.493.469-.203.938-.175 1.406.082.47.258.809.668 1.02 1.23.21.563.227 1.106.047 1.63-.18.523-.504.879-.973 1.066zm-3.586.235a.825.825 0 00-.515-.106.768.768 0 00-.47.27l-.187.234a.348.348 0 00-.093.258c0 .062.015.125.046.187.391.735.711 1.242.961 1.524a.124.124 0 00.13.058.18.18 0 00.128-.082c.094-.234.219-.734.375-1.5l.047-.258v-.07a.38.38 0 00-.164-.328zm-4.804-4.641c-.47.062-.891.289-1.266.68-.375.39-.664.882-.867 1.476a5.391 5.391 0 00-.282 1.887c.016.664.149 1.262.399 1.793.25.531.574.93.973 1.195.398.266.832.367 1.3.305.47-.063.891-.285 1.266-.668.375-.383.664-.871.867-1.465a5.391 5.391 0 00.281-1.887c-.015-.664-.148-1.261-.398-1.793-.25-.53-.574-.933-.973-1.207a1.806 1.806 0 00-1.3-.316zm1.828 3.633c.03.593-.102 1.113-.399 1.558-.297.446-.68.692-1.148.739-.469.046-.883-.118-1.242-.493-.36-.375-.563-.851-.61-1.43v-.187c0-.219.024-.43.07-.633v.024a.822.822 0 00.235.023.703.703 0 00.469-.316.81.81 0 00.14-.598.725.725 0 00-.07-.328c.203-.156.445-.258.727-.305.468-.047.882.121 1.242.504s.554.864.586 1.442zM5.602 7.547a1.17 1.17 0 00-.329-.305c-.156-.094-.304-.125-.445-.094a.489.489 0 00-.328.258.961.961 0 00-.117.375l-.281 2.766.304-.516c.25-.39.516-.726.797-1.008.406-.406.797-.671 1.172-.796a1.54 1.54 0 01-.445-.329c-.12-.104-.227-.243-.328-.351zM17.25 5.016a.55.55 0 00-.48-.141c-.18.031-.34.164-.48.398-.08.157-.142.32-.188.493-.027.058-.032.125-.047.187l-.024.07c-.11.25-.21.43-.304.54.453.015.89.101 1.312.257a4.83 4.83 0 011.594.961l.21.211-1.265-2.578a.925.925 0 00-.328-.398Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ASKfm" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Askfm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1U, create_fragment$1U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Asus.svelte generated by Svelte v3.23.2 */

        function create_fragment$1V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.904 10.788V9.522h-4.656c-.972 0-1.41.6-1.482 1.182v.018-1.2h-1.368v1.266h1.362zm-6.144.456l-1.368-.078v1.458c0 .456-.228.594-1.02.594H14.28c-.654 0-.93-.186-.93-.594v-1.596l-1.386-.102v1.812h-.03c-.078-.528-.276-1.14-1.596-1.23L6 11.22c0 .666.474 1.062 1.218 1.14l3.024.306c.24.018.414.09.414.288 0 .216-.18.24-.456.24H5.946V11.22l-1.386-.09v3.348h5.646c1.26 0 1.662-.654 1.722-1.2h.03c.156.864.912 1.2 2.19 1.2h1.41c1.494 0 2.202-.456 2.202-1.524zm4.398.258l-4.338-.258c0 .666.438 1.11 1.182 1.17l3.09.24c.24.018.384.078.384.276 0 .186-.168.258-.516.258h-4.212v1.29h4.302c1.356 0 1.95-.474 1.95-1.554 0-.972-.534-1.338-1.842-1.422zm-10.194-1.98h1.386v1.266h-1.386zM3.798 11.07l-1.506-.15L0 14.478h1.686zm7.914-1.548h-4.23c-.984 0-1.416.612-1.518 1.2v-1.2H3.618c-.33 0-.486.102-.642.33l-.648.936h9.384Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ASUS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Asus extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1V, create_fragment$1V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/AtAndT.svelte generated by Svelte v3.23.2 */

        function create_fragment$1W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.633 21.429a11.967 11.967 0 0 0 7.344 2.516c3.026 0 5.785-1.123 7.89-2.968.026-.022.014-.037-.011-.022-.945.63-3.638 2.008-7.879 2.008-3.685 0-6.014-.822-7.329-1.556-.025-.013-.034.006-.015.022m8.157.612c2.948 0 6.187-.804 8.124-2.394.53-.434 1.035-1.01 1.487-1.785.26-.446.515-.976.722-1.497.01-.025-.006-.038-.025-.01-1.802 2.652-7.018 4.305-12.404 4.305-3.807 0-7.904-1.217-9.508-3.542-.016-.021-.031-.012-.022.012 1.494 3.176 6.027 4.91 11.626 4.91m-3.22-5.267c-6.13 0-9.02-2.855-9.545-4.804-.006-.028-.025-.022-.025.004 0 .655.066 1.502.179 2.064.053.273.276.702.602 1.045 1.485 1.547 5.186 3.715 11.595 3.715 8.732 0 10.729-2.909 11.136-3.866.292-.684.443-1.92.443-2.958 0-.252-.006-.452-.016-.65 0-.032-.018-.034-.025-.003-.436 2.34-7.897 5.453-14.344 5.453M1.155 6.836C.803 7.533.415 8.71.298 9.318c-.05.26-.029.386.063.58.734 1.56 4.45 4.054 13.12 4.054 5.289 0 9.397-1.3 10.063-3.67.122-.437.129-.898-.029-1.519-.176-.694-.505-1.503-.784-2.071-.01-.019-.025-.016-.022.006.103 3.11-8.569 5.114-12.945 5.114-4.74 0-8.694-1.888-8.694-4.273 0-.229.048-.458.107-.696.006-.022-.013-.026-.022-.007m18.732-3.818c.05.079.076.163.076.276 0 1.33-4.072 3.684-10.553 3.684-4.762 0-5.653-1.767-5.653-2.89 0-.402.154-.813.493-1.23.018-.025.003-.034-.019-.016a12.001 12.001 0 0 0-1.685 1.751c-.239.301-.387.568-.387.728 0 2.328 5.838 4.016 11.297 4.016 5.816 0 8.412-1.899 8.412-3.567 0-.596-.232-.945-.826-1.62-.386-.439-.75-.796-1.136-1.148-.019-.015-.032-.003-.019.016m-1.783-1.33A11.845 11.845 0 0 0 11.977 0c-2.262 0-4.41.633-6.211 1.738-.54.332-.845.599-.845.942 0 1.01 2.36 2.095 6.548 2.095 4.143 0 7.357-1.19 7.357-2.334 0-.273-.239-.464-.722-.753");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "AT&T" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class AtAndT extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1W, create_fragment$1W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Atari.svelte generated by Svelte v3.23.2 */

        function create_fragment$1X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 21.653s3.154-.355 5.612-2.384c2.339-1.93 3.185-3.592 3.77-5.476.584-1.885.671-6.419.671-7.764V2.346H8.598v1.365c-.024 2.041-.2 5.918-1.135 8.444C5.203 18.242 0 18.775 0 18.775zm24 0s-3.154-.355-5.61-2.384c-2.342-1.93-3.187-3.592-3.772-5.476-.583-1.885-.671-6.419-.671-7.764V2.346H15.4l.001 1.365c.024 2.041.202 5.918 1.138 8.444 2.258 6.087 7.46 6.62 7.46 6.62zM10.659 2.348h2.685v19.306H10.66Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Atari" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Atari extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1X, create_fragment$1X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Atlassian.svelte generated by Svelte v3.23.2 */

        function create_fragment$1Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.31 23.957H15.71a1.26 1.26 0 0 1-1.312-.792c-1.332-2.665-2.78-5.288-3.987-8.046a15.25 15.25 0 0 1 .885-14.47c.166-.281.52-.625.791-.625s.593.375.74.666q5.444 10.89 10.898 21.788c.542 1.041.292 1.468-.905 1.479zm-14.573 0H1.04c-1.041 0-1.27-.417-.812-1.333q2.8-5.538 5.549-11.055c.5-1.041.895-1.041 1.592-.177a12.221 12.221 0 0 1 2.51 11.17c-.344 1.322-.532 1.405-1.864 1.405z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Atlassian" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Atlassian extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1Y, create_fragment$1Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Atom.svelte generated by Svelte v3.23.2 */

        function create_fragment$1Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.496 9.026c-2.183-.93-5.116-1.53-8.25-1.695-.5-.03-.987-.04-1.45-.04 2.318-2.83 4.802-4.73 6.437-4.79.322-.013.595.055.813.196.706.458.905 1.768.545 3.59-.04.25.12.493.36.54.25.05.49-.11.54-.36.45-2.28.12-3.846-.94-4.538-.38-.248-.84-.365-1.35-.346-2.05.077-4.94 2.3-7.59 5.72-1.154.035-2.24.13-3.232.287-.646-2.897-.39-4.977.594-5.477.138-.073.285-.11.457-.124.697-.054 1.66.395 2.71 1.27.194.16.486.14.646-.06.163-.195.134-.48-.06-.645C9.466 1.51 8.304 1 7.354 1.07c-.286.025-.556.098-.803.22-1.19.607-1.67 2.327-1.37 4.838.07.52.16 1.062.29 1.62C2.19 8.404.1 9.718.01 11.372c-.06 1.17.865 2.284 2.68 3.222.224.115.502.03.62-.2.114-.224.03-.5-.2-.616C1.66 13.032.88 12.19.927 11.42c.05-1.08 1.772-2.19 4.76-2.78.27.994.62 2.032 1.05 3.09-1.018 1.888-1.756 3.747-2.137 5.4-.56 2.465-.26 4.22.86 4.948.36.234.78.35 1.247.35.935 0 2.067-.46 3.347-1.372.21-.15.256-.435.11-.64-.147-.206-.433-.256-.64-.106-1.544 1.103-2.844 1.472-3.562 1.003-.76-.495-.926-1.943-.46-3.976.32-1.386.907-2.93 1.708-4.52.2.438.41.876.63 1.313 1.425 2.796 3.17 5.227 4.91 6.845 1.386 1.29 2.674 1.963 3.735 1.963.35 0 .68-.075.976-.223 1.145-.585 1.64-2.21 1.398-4.575-.224-2.213-1.06-4.91-2.354-7.6-.11-.227-.384-.323-.61-.216-.23.11-.33.385-.22.612 2.69 5.602 2.88 10.19 1.37 10.96-1.59.813-5.424-2.355-8.39-8.18-.34-.655-.637-1.3-.9-1.93.34-.608.7-1.22 1.095-1.83.395-.604.806-1.188 1.224-1.745h.394c.54 0 1.126.01 1.734.048 6.53.343 10.975 2.56 10.884 4.334-.04.765-.924 1.538-2.425 2.12-.234.096-.352.36-.26.596.07.18.24.292.426.292.058 0 .114-.01.167-.03 1.905-.74 2.95-1.756 3.01-2.93.07-1.33-1.17-2.61-3.5-3.6v-.01zM8.08 9.45c-.27.415-.52.827-.764 1.244-.292-.768-.532-1.51-.723-2.215.713-.11 1.485-.19 2.31-.24-.28.39-.554.794-.82 1.21v-.01zM12.005 10.625A1.375 1.375 0 1 0 12.005 13.375 1.375 1.375 0 1 0 12.005 10.625z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Atom" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Atom extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1Z, create_fragment$1Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Audacity.svelte generated by Svelte v3.23.2 */

        function create_fragment$1_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 2.145c-2.487 0-4.755.776-6.428 2.08-1.673 1.303-2.76 3.169-2.76 5.244v.75C1.153 11.06 0 13.268 0 15.856c0 3.312 1.884 6 4.312 6V9.468c0-1.554.805-2.984 2.186-4.06C7.879 4.331 9.829 3.643 12 3.643c2.17 0 4.12.688 5.502 1.764 1.38 1.077 2.186 2.507 2.186 4.06v12.387c2.428 0 4.312-2.687 4.312-6 0-2.587-1.152-4.795-2.813-5.636v-.75c0-2.075-1.086-3.94-2.76-5.244-1.672-1.304-3.94-2.08-6.427-2.08zm0 6.153l-1.125 8.683L9.75 9.105l-.562 6.75-.376-.75-.375-4.5-.187 4.5-.563 1.313-.374-4.5-.376 3.562-.562-.937v2.625l-.563-2.11v-4.64a1.432 1.432 0 0 0-.937-.375v11.812c.375 0 .75-.187.937-.562v-3.375l.188.187.563 1.875.187-2.25.563 2.813v-3.562l.374.937.563 2.625v-3.562l.375.374.563 3.188.562-4.313 1.24 4.86.072-2.985.375-1.124.376 4.687 1.124-4.687.375 3.937.938-4.125.938 4.5.187-3.375.562-1.125.188 4.313.938-4.125.562 1.875.188-1.688.374.75v3.375c.188.375.563.562.938.562V10.043c-.375 0-.75.188-.938.375v4.813l-.374 1-.188-3.188-.375 2.437-.375-.75-.188-2.625-.937 3.563-.188-.75L15 9.293l-.562 4.875-.376 1.5-.75-5.062-.75 4.312-.375 1.125Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Audacity" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Audacity extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1_, create_fragment$1_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Audi.svelte generated by Svelte v3.23.2 */

        function create_fragment$1$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.848,7.848c-0.992,0-1.902,0.348-2.616,0.928c-0.714-0.58-1.624-0.928-2.616-0.928 c-0.992,0-1.902,0.348-2.616,0.928c-0.714-0.58-1.624-0.928-2.616-0.928c-0.992,0-1.902,0.348-2.616,0.928 c-0.714-0.58-1.624-0.928-2.616-0.928C1.859,7.848,0,9.707,0,12s1.859,4.152,4.152,4.152c0.992,0,1.902-0.348,2.616-0.928 c0.714,0.58,1.624,0.928,2.616,0.928c0.992,0,1.902-0.348,2.616-0.928c0.714,0.58,1.624,0.928,2.616,0.928 c0.992,0,1.902-0.348,2.616-0.928c0.714,0.58,1.624,0.928,2.616,0.928C22.141,16.152,24,14.293,24,12S22.141,7.848,19.848,7.848z M17.232,13.866c-0.376-0.526-0.598-1.17-0.598-1.866c0-0.696,0.222-1.34,0.598-1.866c0.376,0.526,0.598,1.17,0.598,1.866 C17.83,12.696,17.608,13.34,17.232,13.866z M12,13.866c-0.376-0.526-0.598-1.17-0.598-1.866c0-0.696,0.222-1.34,0.598-1.866 c0.376,0.526,0.598,1.17,0.598,1.866C12.598,12.696,12.376,13.34,12,13.866z M6.768,13.866C6.392,13.34,6.17,12.696,6.17,12 c0-0.696,0.222-1.34,0.598-1.866C7.144,10.66,7.366,11.304,7.366,12C7.366,12.696,7.144,13.34,6.768,13.866z M0.938,12 c0-1.775,1.439-3.214,3.214-3.214c0.736,0,1.414,0.248,1.956,0.665C5.56,10.154,5.232,11.039,5.232,12 c0,0.961,0.328,1.846,0.876,2.549c-0.542,0.416-1.22,0.665-1.956,0.665C2.377,15.214,0.938,13.775,0.938,12z M7.428,14.549 C7.976,13.846,8.304,12.961,8.304,12c0-0.961-0.328-1.846-0.876-2.549c0.542-0.416,1.22-0.665,1.956-0.665 c0.736,0,1.414,0.248,1.956,0.665c-0.549,0.704-0.876,1.588-0.876,2.549c0,0.961,0.328,1.846,0.876,2.549 c-0.542,0.416-1.22,0.665-1.956,0.665C8.648,15.214,7.97,14.966,7.428,14.549z M12.66,14.549c0.549-0.704,0.876-1.588,0.876-2.549 c0-0.961-0.328-1.846-0.876-2.55c0.542-0.416,1.22-0.665,1.956-0.665s1.414,0.248,1.956,0.665 c-0.549,0.704-0.876,1.588-0.876,2.549c0,0.961,0.328,1.846,0.876,2.549c-0.542,0.416-1.22,0.665-1.956,0.665 C13.88,15.214,13.202,14.966,12.66,14.549z M19.848,15.214c-0.736,0-1.414-0.248-1.956-0.665c0.548-0.704,0.876-1.588,0.876-2.549 c0-0.961-0.328-1.846-0.876-2.549c0.542-0.416,1.22-0.665,1.956-0.665c1.775,0,3.214,1.439,3.214,3.214 S21.623,15.214,19.848,15.214z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$1$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Audi" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Audi extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$1$, create_fragment$1$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Audible.svelte generated by Svelte v3.23.2 */

        function create_fragment$20(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.008 17.362L24 9.885v2.028l-11.992 7.509L0 11.912V9.886l12.008 7.477zm0-9.378c-2.709 0-5.085 1.363-6.448 3.47.111-.111.175-.175.286-.254 3.374-2.804 8.237-2.17 10.883 1.362l1.758-1.124c-1.394-2.044-3.786-3.454-6.48-3.454m0 3.47a4.392 4.392 0 0 0-3.548 1.821 3.597 3.597 0 0 1 2.139-.697c1.299 0 2.455.666 3.232 1.79l1.679-1.045c-.729-1.157-2.028-1.87-3.501-1.87M3.897 8.412c4.943-3.897 11.929-2.836 15.652 2.344l.031.032 1.822-1.125a11.214 11.214 0 0 0-9.394-5.085c-3.897 0-7.366 1.996-9.394 5.085.364-.412.824-.903 1.283-1.251");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$20($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Audible" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Audible extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$20, create_fragment$20, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/AudioTechnica.svelte generated by Svelte v3.23.2 */

        function create_fragment$21(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M 12,0 A 12.007568,12.007568 0 0 0 0,12 12.034059,12.034059 0 0 0 12,24.030275 12.034059,12.034059 0 0 0 24,12 12.007568,12.007568 0 0 0 12.003784,0 Z m 0,0.90444656 A 11.09177,11.09177 0 0 1 23.099338,11.996216 c 0,6.130558 -4.964995,11.125828 -11.099338,11.125828 A 11.118259,11.118259 0 0 1 0.90823086,12 11.09177,11.09177 0 0 1 11.996216,0.90823086 Z M 12.08704,2.0662252 11.65563,3.3188269 5.9754032,19.402081 5.7710512,20.007569 H 18.440871 L 18.210029,19.402081 12.526017,3.3150427 Z m 0,2.8003785 2.009461,5.6499533 -3.027437,8.563859 H 7.050142 Z m 2.505204,7.0463573 2.535478,7.163671 h -5.097446 z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$21($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Audio-Technica" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class AudioTechnica extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$21, create_fragment$21, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Audioboom.svelte generated by Svelte v3.23.2 */

        function create_fragment$22(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 24C5.373 24 0 18.627 0 12S5.373 0 12 0s12 5.373 12 12-5.373 12-12 12zM7.425 3.214c-.621 0-1.125.503-1.125 1.124v6a1.124 1.124 0 0 0 2.25 0v-6c0-.62-.504-1.124-1.125-1.124zm0 9.314c-.621 0-1.125.503-1.125 1.125v6a1.124 1.124 0 0 0 2.25 0v-6c0-.622-.504-1.125-1.125-1.125zm4.152-6.856c-.621 0-1.125.504-1.125 1.125v10.388a1.124 1.124 0 0 0 2.25 0V6.797c0-.621-.504-1.125-1.125-1.125zm4.151 6.856c-.62 0-1.124.503-1.124 1.125v1.056a1.124 1.124 0 1 0 2.249 0v-1.056c0-.622-.504-1.125-1.125-1.125zm0-4.37c-.62 0-1.124.503-1.124 1.124v1.056a1.124 1.124 0 0 0 2.249 0V9.282c0-.62-.504-1.124-1.125-1.124zm4.152 2.422c-.62 0-1.124.503-1.124 1.124v.574a1.124 1.124 0 1 0 2.249 0v-.574c0-.62-.504-1.124-1.125-1.124Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$22($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Audioboom" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Audioboom extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$22, create_fragment$22, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Audiomack.svelte generated by Svelte v3.23.2 */

        function create_fragment$23(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.33 11.39s.54-.09.77.14c.22.23.07.71-.22.72-.3.01-.57.06-.77-.14a.443.443 0 01.22-.72zm5.88 3.26c-.05.01-.11-.02-.16-.06-.39-.53-.53-2.37-.71-2.48-.18-.11-.85 1.02-2.19.9-.55-.05-1.12-.41-1.45-.66.03-.41.03-1.39.86-1.07.51.19 1.37.72 2.13-.23.84-1.05 1.3-.74 1.57-.51.28.22.1 1.41.51 1.08.41-.33 2.08-2.39 2.08-2.39s1.29-1.29 1.49.06c.2 1.36 1.04 2.87 1.27 2.82.22-.04 2.82-5.27 3.19-5.61.37-.34 1.63-.29 1.57.57-.06.87-.19 6.25-.19 6.25s-.15 1.52.09.71c.1-.34.21-.64.34-1 .64-2.03 1.73-5.51 2.28-7.3.12-.42.23-.79.32-1.07v-.01c.03-.13.06-.23.09-.32.05-.15.08-.26.09-.28.02-.07.09-.12.19-.16.09-.06.2-.06.31-.06.31-.03.69.01 1.04.11.11 0 .22.03.32.11 0 0 .01 0 .02.01.03.02.06.05.1.1h.01c.01.02.03.05.05.07.19.29.31.81.19 1.74-.3 2.31-.53 7.07-.53 7.07s-.05.23.44-.77c.01-.04.03-.07.05-.1.03-.02.06-.04.1-.08.29-.36 1.09-.56 1.65-.56.23.03.43.09.54.16.22.33.09 1.55.09 1.55-.46.04-1.34.29-1.65.33-.31.05-.78 2.05-1.44 1.85-.66-.21-2.13-1.12-2.13-1.24 0-.11.12-1.44.15-1.79v-.07-.01c.03-.27.01-.39-.12-.12-.11.23-.58 1.72-1.11 3.34-.05.14-1.05 3.13-1.18 3.49-.15.42-.29.75-.38.91-.13.19-.32.3-.58.23-.65-.2-1.46-1.08-1.47-1.3-.02-1.24.06-7.9-.24-7.35-.32.57-2.73 4.52-2.73 4.52-.04.01-.07.01-.11.01-.17-.02-.44-.07-.51-.23 0-.01-.01-.02-.01-.03-.01-.01-.01-.02-.02-.04-.03-.11-.04-.23-.07-.33-.11-.36-.28-.88-.47-1.4-.27-.9-.56-1.82-.61-1.92-.09-.2-.22-.12-.35 0-.54.45-1.68 2.45-2.72 2.56z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$23($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Audiomack" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Audiomack extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$23, create_fragment$23, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Aurelia.svelte generated by Svelte v3.23.2 */

        function create_fragment$24(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.716 4.636L13.49 6.122l-2.295-3.439 2.228-1.486zM17.527 14.967l3.806 5.703-4.533 3.025-3.806-5.703-.664-.995 4.533-3.025zM11.817 18.777l.838 1.256-3.45 2.303-1.503-2.25.754-.504 2.697-1.8zM19.413 12.27l.968-.645 1.501 2.25-2.227 1.487-.838-1.256 1.26-.84zm-.596 1.836l-.664-.995 1.26-.84.664.994zM3.792 12.593l-.753.503L.744 9.657l3.45-2.302 1.61 2.41-2.698 1.8 2.697-1.8.686 1.029zM11.513 5.954l.687 1.029-4.534 3.025L6.98 8.98 3.21 3.33 7.742.305zM14.749 5.282l-1.26.84-.686-1.028-1.609-2.41 2.228-1.487 2.295 3.439zM9.12 20.577l-.664-.995 2.697-1.8.664.995zM18.817 14.106l-.664-.995 1.26-.84.664.994zM3.792 12.593l-.686-1.028 2.697-1.8.686 1.029zM13.489 6.122l-.686-1.028 1.26-.84.686 1.028zM17.527 14.967l-4.533 3.025-.664-.995 4.533-3.025zM11.513 5.954l.687 1.029-4.534 3.025L6.98 8.98zM2.507 5.132l.855 1.283-1.282.855-.856-1.282zM7.127 20.505l.856 1.283-1.282.855-.856-1.282zM3.754 21.797L0 16.125 20.063 2.706 24 8.287z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$24($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Aurelia" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Aurelia extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$24, create_fragment$24, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Auth0.svelte generated by Svelte v3.23.2 */

        function create_fragment$25(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.98 7.448L19.62 0H4.347L2.02 7.448c-1.352 4.312.03 9.206 3.815 12.015L12.007 24l6.157-4.552c3.755-2.81 5.182-7.688 3.815-12.015l-6.16 4.58 2.343 7.45-6.157-4.597-6.158 4.58 2.358-7.433-6.188-4.55 7.63-.045L12.008 0l2.356 7.404 7.615.044z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$25($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Auth0" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Auth0 extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$25, create_fragment$25, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Authy.svelte generated by Svelte v3.23.2 */

        function create_fragment$26(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0zm3.42 5.338c.274 0 .551.105.769.315l2.862 2.862c2.054 2.039 2.084 5.35.105 7.449a.21.21 0 0 1-.045.06l-.03.03-.03.03c-.015.015-.045.03-.06.045-2.098 1.978-5.41 1.948-7.463-.105l-2.863-2.863a1.05 1.05 0 0 1 0-1.499 1.05 1.05 0 0 1 1.5 0l2.861 2.863a3.23 3.23 0 0 0 4.542.03 3.244 3.244 0 0 0-.03-4.541l-2.863-2.862a1.05 1.05 0 0 1 0-1.5c.203-.209.472-.314.746-.314zM8.758 6.397a5.33 5.33 0 0 1 3.715 1.564l2.863 2.862c.42.42.42 1.08 0 1.5-.42.419-1.08.419-1.5 0L10.975 9.46a3.249 3.249 0 0 0-4.558-.015 3.243 3.243 0 0 0 .03 4.54l2.863 2.863c.42.42.42 1.08 0 1.499a1.05 1.05 0 0 1-1.499 0L4.95 15.484c-2.054-2.053-2.084-5.365-.105-7.463.015-.03.03-.045.045-.06l.03-.03.03-.03c.015-.015.045-.03.06-.045a5.355 5.355 0 0 1 3.748-1.46z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$26($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Authy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Authy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$26, create_fragment$26, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Autodesk.svelte generated by Svelte v3.23.2 */

        function create_fragment$27(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "m14.574 1.0203c-0.097-0.096997-0.29099-0.58198-0.97097-0.58198h-6.7038s0.97097 0.096997 1.36 1.068c0 0 1.069 2.5269 2.0399 4.9558 2.8179 6.6068 7.1898 17.099 7.1898 17.099h6.5108c0.097-0.097-9.3267-22.443-9.4247-22.54zm-8.8407 0.87497-5.3438 12.631c-0.29199 0.87497-0.097997 1.9439 1.457 1.9439h4.1779l3.6919-8.8417c-1.166-2.9149-2.1359-5.2478-2.1359-5.2478-0.096997-0.29199-0.38899-1.069-0.97197-1.069-0.58298 0-0.77698 0.48598-0.87397 0.58298zm-0.097997 15.643h-4.4689c-0.77698 0-1.166-0.48598-1.166-0.48598 0.77698 1.36 3.0119 5.6358 3.0119 5.6358 0.38899 0.48598 0.77698 0.77698 1.36 0.77698 1.263 0 3.2069-1.263 3.2069-1.263l7.4808-4.6639z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$27($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Autodesk" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Autodesk extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$27, create_fragment$27, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Automatic.svelte generated by Svelte v3.23.2 */

        function create_fragment$28(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 6.768v.002-1.237c-.485.033-.754.293-.99.71L5.87 16.72h2.464l-.753-.96.654-1.363.005.007L12 6.774v-.006zM10.526 13.123h2.946L12 10.076M8.233 14.416h.017l-.01-.013M13.473 13.123v.002M21.496 5.066L13.26.308c-.693-.4-1.827-.4-2.52 0L2.504 5.066c-.693.398-1.26 1.38-1.26 2.182v9.507c0 .802.567 1.782 1.26 2.18l8.236 4.757c.693.4 1.826.4 2.52 0l8.235-4.768c.692-.39 1.26-1.38 1.26-2.174V7.246c0-.8-.567-1.78-1.26-2.18zm-6.066 12.05l-.687-1.384h-5.5l-.673 1.384H5.287l5.396-11.033c.305-.607.777-.9 1.317-.9s1.034.328 1.316.89l5.396 11.043H15.43zM12 6.77V9.244l2.518 5.173H8.25l.758.94h5.972l.674 1.35h2.474l-1.708-.99v.04L12 6.77");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$28($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Automatic" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Automatic extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$28, create_fragment$28, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Autotask.svelte generated by Svelte v3.23.2 */

        function create_fragment$29(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.93 11.626l2.782 6.988h-4.298l-1.825-4.736-9.885 6.667L1 12.6h.815l4.39 3.418 7.61-4.148-1.085-2.82-1.168 2.481-4.938 2.716 3.553-9.342h5.077l2.022 5.08L24 6.32V0H0v24h24V7.532z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$29($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Autotask" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Autotask extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$29, create_fragment$29, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Aventrix.svelte generated by Svelte v3.23.2 */

        function create_fragment$2a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 24C5.372 24 0 18.628 0 12S5.372 0 12 0s12 5.372 12 12-5.372 12-12 12zm5.371-8.138c-.23.161-.644.322-1.081.322-.46 0-.805-.184-.805-.851v-5.011c0-3.149-1.403-4.321-4.139-4.321-1.517 0-2.875.367-3.656.827-.322.529-.391 1.425-.23 2a6.782 6.782 0 0 1 3.518-1.012c1.793 0 2.53.805 2.53 2.713v.598c-.667-.275-1.541-.367-2.299-.367-2.599 0-4.599 1.103-4.599 3.793 0 2.506 1.724 3.448 3.702 3.448 1.518 0 2.575-.483 3.242-1.357h.092c.184.851.782 1.357 1.816 1.357h.009c.557 0 1.077-.154 1.522-.421l-.013.007c.299-.414.437-1.126.391-1.724zm-6.554.321c-1.241 0-2.207-.529-2.207-1.724 0-1.219.989-2.069 2.897-2.069a5.76 5.76 0 0 1 2 .345v2.253c-.598.874-1.702 1.195-2.69 1.195z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Aventrix" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Aventrix extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2a, create_fragment$2a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Awesomelists.svelte generated by Svelte v3.23.2 */

        function create_fragment$2b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 11.438l-6.154-5.645-.865.944 5.128 4.7H1.895l5.128-4.705-.865-.943-6.154 5.649H0v3.72c0 1.683 1.62 3.053 3.61 3.053h3.795c1.99 0 3.61-1.37 3.61-3.051v-2.446h1.97v2.446c0 1.68 1.62 3.051 3.61 3.051h3.794c1.99 0 3.61-1.37 3.61-3.051v-3.721z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Awesome Lists" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Awesomelists extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2b, create_fragment$2b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Awesomewm.svelte generated by Svelte v3.23.2 */

        function create_fragment$2c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 24V8.25h16.5V7.5H0V0h24v24h-7.5v-8.25h-9v.75h8.25V24z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "awesomeWM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Awesomewm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2c, create_fragment$2c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Azureartifacts.svelte generated by Svelte v3.23.2 */

        function create_fragment$2d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.2 0c-.552 0-1 .43-1 .958V11.5h15.6V.958c0-.529-.448-.958-1-.958H5.2zm3.2 2.3h2.4c.331 0 .6.257.6.575a.588.588 0 0 1-.6.575H8.4a.588.588 0 0 1-.6-.575c0-.318.269-.575.6-.575zM1.064 12C.476 12 0 12.448 0 13v10c0 .552.476 1 1.064 1H8.8a1 1 0 0 1-1-1v-8h-3a.6.6 0 1 1 0-1.201h3V12H1.064z M23 12H8.299v11c0 .552.477 1 1.064 1H23a1 1 0 0 0 1-1V13a1 1 0 0 0-1-1zm-9.8 10.2H9.6V21h3.6v1.2zm2.4-1.8h-6v-1.2h6v1.2zM15 15h-2.4a.6.6 0 0 1 0-1.201H15A.602.602 0 0 1 15 15z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Azure Artifacts" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Azureartifacts extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2d, create_fragment$2d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Azuredataexplorer.svelte generated by Svelte v3.23.2 */

        function create_fragment$2e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.1765.0176a.8032.8032 0 00-.0235.002h-8.0679L7.5426 7.562l8.8666 8.8667 7.5895-7.5894V.8222a.8032.8032 0 00-.8222-.8046zm-21.245.002a.8032.8032 0 00-.5644 1.365l5.4685 5.4705L13.671.0195zm14.8937 2.326c.137 0 .2721.0533.377.1582l.9374.9355a.535.535 0 010 .7577l-.9374.9355a.5326.5326 0 01-.7558 0l-.9375-.9355a.535.535 0 010-.7577l.9375-.9355a.5353.5353 0 01.3788-.1582zM13.4426 5.734c.1369 0 .274.0513.3789.1562l.9355.9374a.5326.5326 0 010 .7559l-.9355.9374a.535.535 0 01-.7578 0l-.9355-.9374a.5326.5326 0 010-.7559l.9355-.9374a.5332.5332 0 01.379-.1562zm6.773.002a.5355.5355 0 01.3731.1581l.9296.9296a.5355.5355 0 010 .7617l-.9296.9297a.5355.5355 0 01-.7617 0l-.9296-.9297a.5355.5355 0 010-.7617l.9296-.9296a.5355.5355 0 01.3887-.1582zm-3.3845 3.3786c.1369 0 .272.0533.377.1582l.9374.9355a.535.535 0 010 .7578l-.9375.9374a.5326.5326 0 01-.7558 0l-.9374-.9374a.535.535 0 010-.7578l.9374-.9355a.5353.5353 0 01.3789-.1582zm-11.015.7226a.3799.3799 0 00-.2695.1114L.1172 15.378a.3808.3808 0 000 .539l1.1562 1.1562c.149.149.388.149.537 0l5.4314-5.4314a.3785.3785 0 000-.537L6.0856 9.9487a.3799.3799 0 00-.2695-.1114zm18.1826.416l-6.8825 6.8825 5.4724 5.4704a.8032.8032 0 001.41-.5625zM9.1792 13.265a.382.382 0 00-.2695.1133L.1113 22.1746a.3808.3808 0 000 .539l1.1562 1.1562c.149.149.39.149.539 0l8.7964-8.7984a.3808.3808 0 000-.539l-1.1542-1.1542a.382.382 0 00-.2695-.1133zm3.365 3.3475a.3799.3799 0 00-.2695.1113L6.8434 22.155a.3785.3785 0 000 .5371l1.1562 1.1562c.149.149.39.149.539 0l5.4294-5.4313a.3785.3785 0 000-.5371l-1.1562-1.1562a.3755.3755 0 00-.2676-.1113Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Azure Data Explorer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Azuredataexplorer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2e, create_fragment$2e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Azuredevops.svelte generated by Svelte v3.23.2 */

        function create_fragment$2f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 8.899l2.247-2.966 8.405-3.416V.045l7.37 5.393L2.966 8.36v8.224L0 15.73zm24-4.45v14.652L18.247 24l-9.303-3.056V24l-5.978-7.416 15.057 1.798V5.438z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Azure DevOps" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Azuredevops extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2f, create_fragment$2f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Azurefunctions.svelte generated by Svelte v3.23.2 */

        function create_fragment$2g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.515 5.106c-.205-.204-.612-.204-.817 0-.102.103-.204.256-.204.409 0 .153.05.306.204.408l5.412 5.362a.69.69 0 0 1 0 .868l-5.566 5.515a.693.693 0 0 0 0 .868c.255.204.614.204.817 0l6.485-6.383a.69.69 0 0 0 0-.868l-6.331-6.179zM1.992 12.153a.69.69 0 0 1 0-.868l5.31-5.362c.102-.102.204-.255.204-.408a.463.463 0 0 0-.204-.409c-.205-.204-.612-.204-.817 0L.154 11.285a.69.69 0 0 0 0 .868l6.433 6.383c.255.204.614.204.817 0a.69.69 0 0 0 0-.868l-5.412-5.515zm5.923 10.264L17.617 8.63h-4.699l4.597-7.047H10.67L6.997 12.051l4.493.051-3.574 10.315z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Azure Functions" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Azurefunctions extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2g, create_fragment$2g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Azurepipelines.svelte generated by Svelte v3.23.2 */

        function create_fragment$2h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.8 18H0v6h6v-1.8H1.8zM23 0h-8.93a2 2 0 0 0-1.67.89L9 5.99H1a1 1 0 0 0-1 1v5.5l3.5 3.61 1.2-1.29 1.5 1.5L5 17.53l1.48 1.48 1.22-1.22 1.5 1.51L8 20.5l3.5 3.5H17a1 1 0 0 0 1-1v-8l5.11-3.4A2 2 0 0 0 24 9.92V1a1 1 0 0 0-1-1zm-5 9a3 3 0 1 1 0-6 3 3 0 0 1 0 6z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Azure Pipelines" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Azurepipelines extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2h, create_fragment$2h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Babel.svelte generated by Svelte v3.23.2 */

        function create_fragment$2i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.76 0c-1.603.147-3.719.713-6.317 1.719a22.366 22.366 0 01-2.44 1.539l.01.158c.064 0 .136-.043.24-.096.106-.01.169.032.169.137l.168-.094.084-.011.01.074c.01.073-.566.523-1.707 1.33l.093.146-.084.012-.177-.064c0 .052-.073.085-.24.095l.01.084.189.21a.673.673 0 01-.252-.053c-.367.031-.734.303-1.09.806l.094.147c.314-.283.492-.43.544-.43l.022.23c-.052 0-.136.042-.24.094l.199.295A5.86 5.86 0 016.29 5.291c.23.063.346.125.346.209l.168-.01c1.225-.911 2.44-1.562 3.644-1.97l.012.158c-.22.335-.377.501-.461.511.01.116.052.21.115.305.021.21-.524 1.583-1.635 4.139-2.535 5.93-4.651 10.307-6.359 13.156 0 .052.041.136.094.23.419-.104.691-.197.806-.302l.096-.012.01.158.158-.011.166-.094c0 .052.063.073.168.062l.012.159c.01.157-.075.397-.274.722-.178.2-.355.607-.554 1.225l.01.074.158-.01c.68-.764 1.204-1.52 1.56-2.254 2.001-.586 3.52-1.162 4.578-1.728 1.058-.094 1.876-.365 2.42-.826l-.011-.084-.399.115-.094.01-.01-.084c.776-.116 1.32-.293 1.614-.524 1.519-1.173 2.66-2 3.435-2.492 2.4-1.76 3.531-3.457 3.395-5.07-.01-.168-.545-.828-1.582-1.98-.021-.22.345-.535 1.078-.954l2.086-1.834c.46-.597.744-1.56.838-2.89l-.031-.315c-.084-.932-.756-1.687-2.034-2.264C19.06.303 17.708.031 15.76 0zm2.525 1.037c1.55.063 2.347.335 2.389.817l-.063.158-2.326-.975zm-1.482 1.317c1.063-.016 1.617.267 1.672.863l.156-.012-.031-.398.168-.01c.408.22.627.492.648.816.021.22-.094.494-.355.819-.105.01-.168-.064-.178-.221l-.168.012-.041.47c-.702 1.048-1.205 1.582-1.52 1.614-.283.387-.462.587-.535.597-.22.262-.816.712-1.8 1.34-.325.032-1.531.493-3.616 1.404a.595.595 0 00-.334-.052l-.012-.147c-.02-.304.107-.681.41-1.142.158-.86.335-1.352.534-1.467l1.738-3.906c-.02-.241.347-.43 1.111-.555l.252-.022.02.221a50.387 50.387 0 011.394-.2c.173-.014.335-.022.487-.024zm3.619.39h.027c.139.012.288.263.446.744l.01.147c-.085.01-.24-.242-.471-.744l-.012-.147zm-9.836 2.483h.072l.022.23c-.074.01-.177.116-.303.336l-.012-.156c.147-.178.22-.316.22-.41zM5.6 5.354l.01.072c-.053 0-.136.043-.24.095l-.085.01-.01-.146.325-.031zM9.885 6.86l.031.315-.084.01-.031-.313.084-.012zm-.2.567c-.02.262-.084.397-.22.408l-.084.01c.094-.178.147-.303.137-.397l.168-.021zm-.345.816l.01.074-.147.25-.158.012-.01-.074c.157-.01.231-.093.22-.25l.085-.012zm-.358.735l-.04.386-.085.01-.03-.387.155-.01zm8.497.28l.345.212c.01.104-.042.167-.146.177-.147-.094-.262-.136-.346-.136l-.021-.23.168-.022zm-6.653.891l.012.147-.326.033-.01-.148.324-.032zm5.363.545c.23.105.347.21.358.293l.01.075c-.22.02-.42-.095-.608-.346l.24-.022zm2.6.252c.178.074.261.148.272.221l.052.617c-.073.168-.146.252-.23.252l-.094-1.09zm-4.195.065c.84-.014 1.482.184 1.922.605l.03.315c-.376 1.09-.795 1.719-1.245 1.918l-2.096 1.666c-1.56 1.026-2.4 1.538-2.525 1.548-2.483 1.373-4.032 2.075-4.63 2.127l-.095.01c.084-.293 1.185-2.555 3.322-6.808.943-.084 2.43-.525 4.452-1.32l.492-.042c.128-.01.253-.017.373-.02zm-3.055.49l.01.074-.334.031-.012-.074.336-.031zm-5.226 5.07c-.105.535-.221.808-.336.819l-.01-.075c-.021-.272.094-.513.346-.744zm7.101.336l.01.147c.01.063-.23.261-.701.607-1.394.681-2.21 1.152-2.452 1.393-1.508.523-2.252.849-2.242.974-1.34.535-2.22.923-2.638 1.164-.095.01-.241-.031-.43-.115-.021-.272.093-.494.365-.672.23-.02.463.011.672.106.251-.126.68-.274 1.299-.42l-.012-.156-.492.04c.063-.083.535-.303 1.436-.67l.251-.02.01.073c-.419.032-.66.167-.713.387.01.094.064.147.168.137.304-.21.461-.324.461-.356.608-.115 2.274-.995 5.008-2.619zm-7.584.723l.01.072c.01.105-.042.17-.147.18l-.01-.074c-.01-.095.042-.157.147-.178zm3.77.937c.089-.002.139.049.148.131-.199.021-.566.178-1.121.492l-.084.01-.01-.156a1.586 1.586 0 001.026-.47c.014-.003.028-.006.04-.007zm-3.664 1.243l.01.082c-.064 0-.138.043-.243.095l-.156.01c-.01-.073.032-.136.137-.168l.252-.02zm-1.918.953l.177.072c-.063.471-.198.713-.44.734a1.076 1.076 0 00-.513-.105l-.021-.23c-.01-.095.043-.147.158-.178.105-.01.167.061.178.218.282-.345.44-.511.46-.511Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Babel" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Babel extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2i, create_fragment$2i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Badgr.svelte generated by Svelte v3.23.2 */

        function create_fragment$2j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.84 11.134c-1.75-1.71-3.617-2.982-5.552-3.784a.287.287 0 0 0-.041-.024c-.662-.369-1.282-.893-1.51-1.15-.396-.443-1.229-1.056-1.67-1.154a.69.69 0 0 0-.154-.017c-.406 0-.86.324-1.433.734l-.346.245c-.198.136-.33.22-.421.272a1.487 1.487 0 0 1-.112.059 13.948 13.948 0 0 0-1.443.122c-1.59.217-3.463 1.34-4.83 2.16-.607.364-1.18.708-1.412.769l-.704.184V6.324L13.025.648l9.815 5.676v4.81zM12.195 6.436l.035-.024.035-.025a16.252 16.252 0 0 0 .274-.194l.176-.123a15.142 15.142 0 0 1 .523-.364c.27-.176.502-.295.675-.295a.32.32 0 0 1 .067.006c.182.04.494.228.795.451l.128.097a.708.708 0 0 0-.013.064 2.124 2.124 0 0 0-.01.097l-.002.05a.409.409 0 0 1-.027.138c-.012.032-.03.047-.045.047a.074.074 0 0 1-.031-.01c-.065-.035-.094-.154-.1-.193l-.016-.112-.1.05a2.424 2.424 0 0 0-.132.075l-.08.046a.61.61 0 0 1-.076.037.357.357 0 0 0-.027-.148.484.484 0 0 0-.032-.065.724.724 0 0 0-.163-.188l-.071-.057-.014-.01-.042.099c-.137.332-1.093.553-1.667.553l-.06-.002zM8.15 10.594a.35.35 0 0 0-.075-.11.202.202 0 0 0-.048-.006c-.008 0-.015 0-.023.002l.039-.025a.348.348 0 0 0-.212-.073c-.012 0-.024.003-.037.004a.625.625 0 0 1 .164-.086.463.463 0 0 1 .324.009.946.946 0 0 1 .075.028l.066.029c.165.066.46.23.46.23a.417.417 0 0 0-.083.021.742.742 0 0 0-.157.083c-.105.067-.212.153-.345.216a.616.616 0 0 1-.237.068.34.34 0 0 0 .089-.39zm7.581-.536a.736.736 0 0 1-.3-.09 1.325 1.325 0 0 1-.158-.089.44.44 0 0 0 .074-.06.622.622 0 0 0 .06-.069l.026-.037a.778.778 0 0 0 .097-.25l.005-.03a.324.324 0 0 1-.338.124l-.005-.002a.333.333 0 0 0 .013-.195.337.337 0 0 0-.034-.088.382.382 0 0 1-.118.122.387.387 0 0 1-.212.058.495.495 0 0 1-.097-.01c-.024-.004-.038-.009-.038-.009a.956.956 0 0 0 .02-.403 1.557 1.557 0 0 0-.038-.175l-.002-.01a.207.207 0 0 1-.014.026c-.073.114-.383.34-.723.52a2.696 2.696 0 0 1-.6.245.96.96 0 0 1-.212.032c-.053 0-.082-.01-.097-.027a.043.043 0 0 1-.01-.028.091.091 0 0 1 .01-.048.234.234 0 0 1 .016-.03l.017-.025.013-.016s.02-.034.06-.089a1.406 1.406 0 0 1 .123-.15 1.788 1.788 0 0 1 .83-.511 3.81 3.81 0 0 1 .712-.132 2.552 2.552 0 0 1 .183-.006c.224 0 .436.032.612.115.044.02.086.044.126.07a.741.741 0 0 1 .27.338 7.546 7.546 0 0 1 .229.66 4.921 4.921 0 0 1 .102.408c.028.139.045.269.046.378a.572.572 0 0 1-.018.172c-.025.097-.079.155-.17.155a.315.315 0 0 1-.068-.009c-.324-.08-.688-.507-.688-.507a.654.654 0 0 0 .219-.144.98.98 0 0 0 .101-.113c.041-.05.064-.088.064-.088a.21.21 0 0 1-.088.017zm.871.277c-.058-.463-.26-1.01-.376-1.297-.125-.308-.44-.676-1.232-.676-.367 0-.726.081-.962.148a2.138 2.138 0 0 0-.182.063 6.337 6.337 0 0 0-.764-.154c-.687-.1-1.78-.263-4.109.447-2.327.71-4.897 2.027-5.302 2.453-.405.425.04 1.033.405 1.297.364.264.749.71.89.345.142-.365.08-.446.608-.406.526.041 3.46.366 4.837.041 1.376-.324 2.753-.71 3.016-.993 0 0-.02.344-.122.527 0 0 .587-.081.79-.223 0 0-.02.243-.162.344 0 0 .344.122.607-.04 0 0-.223.202-.162.385.06.182.627.243 1.822.385 1.082.129 3.662 1.907 5.687 5.243l-.314.18.29-.167-.583.338c-.893-.539-2.133-1.284-3.197-1.924-1.924-1.156-5.061-2.393-7.814-2.494a103.93 103.93 0 0 1-4.309-.246c-.12-.02-.241-.04-.366-.058a34.442 34.442 0 0 1-1.635-.275c.584.05 1.262.091 1.781.072.21-.008.41-.017.604-.027.832-.04 1.488-.072 1.94.101a.126.126 0 0 0 .043.008.121.121 0 0 0 .043-.236c-.5-.19-1.178-.157-2.037-.116-.193.01-.393.02-.602.027-.792.029-1.891-.058-2.524-.123a8.86 8.86 0 0 1-.474-.058l-.062-.011-.101-.018-.01-.005a2.898 2.898 0 0 1-.398-.195c.07-.203.273-.793.398-1.263.07-.268.117-.496.099-.594a.628.628 0 0 0-.099-.214c-.152-.235-.433-.514-.561-.637l.561-.149.647-.17.808-.212c.84-.22 3.904-2.607 6.194-2.92.298-.04.625-.075.975-.099a.786.786 0 0 0 .193-.006c.202.002.517.013.913.044.623.058 1.257.153 1.57.202.267.043.712.14 1.2.254 1.061.28 2.176.714 3.123 1.39 2.458 1.752 3.866 3.04 3.947 3.223.078.176-4.053-.214-5.532-1.512zM13.026 23.35l-9.814-5.676v-3.852c.586.151 1.336.284 2.327.43l.02.004.02.003c2.744.413 3.976 1.07 4.064 1.117a14.603 14.603 0 0 1 4.944 5.167c.271.479.513.971.719 1.465l.008.019-2.287 1.323zM23.164 5.762L13.35.087a.648.648 0 0 0-.648 0L2.888 5.763a.648.648 0 0 0-.324.561v3.397l-.953.252c-.553.145-.89.387-1.031.74-.207.523.097 1.129.424 1.653.378.606.778.976 1.56 1.262v4.048a.65.65 0 0 0 .324.562l9.814 5.675a.646.646 0 0 0 .648 0l9.814-5.675a.648.648 0 0 0 .324-.562V6.324a.648.648 0 0 0-.324-.562Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Badgr" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Badgr extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2j, create_fragment$2j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Badoo.svelte generated by Svelte v3.23.2 */

        function create_fragment$2k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.68 2.809c3.392 0 6.32 2.788 6.32 6.228 0 6.71-6.6 12.158-12 12.158S0 15.748 0 9.037c0-3.44 2.928-6.228 6.32-6.228 4.128 0 5.578 3.179 5.68 3.411a6.079 6.079 0 0 1 5.67-3.411zm1.078 6.488V9.11h-2.38v.186c0 2.352-1.97 4.276-4.378 4.276-2.417 0-4.369-1.924-4.369-4.276V9.11H5.233v.186c0 1.766.697 3.42 1.98 4.666a6.795 6.795 0 0 0 4.778 1.933 6.797 6.797 0 0 0 4.777-1.933 6.488 6.488 0 0 0 1.98-4.666Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Badoo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Badoo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2k, create_fragment$2k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Baidu.svelte generated by Svelte v3.23.2 */

        function create_fragment$2l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.312 12.65c2.61-.562 2.25-3.684 2.176-4.366-.128-1.05-1.366-2.888-3.044-2.74-2.11.186-2.418 3.24-2.418 3.24-.287 1.41.682 4.426 3.286 3.865m4.845-5.24c1.44 0 2.604-1.66 2.604-3.71 0-2.04-1.16-3.7-2.6-3.7S6.55 1.65 6.55 3.7c0 2.05 1.17 3.71 2.61 3.71m6.207.245c1.93.26 3.162-1.8 3.412-3.36.25-1.55-1-3.36-2.36-3.67-1.37-.316-3.06 1.874-3.23 3.3-.18 1.75.25 3.49 2.17 3.737M23 10.284c0-.746-.613-2.993-2.91-2.993-2.295 0-2.61 2.12-2.61 3.62 0 1.43.118 3.42 2.985 3.36 2.855-.07 2.543-3.24 2.543-3.99M20.1 16.82s-2.985-2.31-4.726-4.8c-2.36-3.677-5.715-2.18-6.834-.316-1.12 1.883-2.86 3.062-3.105 3.377-.25.31-3.6 2.12-2.854 5.42.75 3.3 3.36 3.24 3.36 3.24s1.92.19 4.16-.31 4.16.12 4.16.12 5.207 1.75 6.648-1.61c1.424-3.37-.81-5.11-.81-5.11");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Baidu" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Baidu extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2l, create_fragment$2l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bamboo.svelte generated by Svelte v3.23.2 */

        function create_fragment$2m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.715 13.643h-4.989a.651.651 0 0 0-.655.555 4.114 4.114 0 0 1-4.062 3.531l1.35 6.172a10.374 10.374 0 0 0 9.007-9.545.651.651 0 0 0-.651-.713zm-8.633-.158l7.2-6.171a.645.645 0 0 0 0-.984L13.081.16a.648.648 0 0 0-1.073.483v12.343a.651.651 0 0 0 1.073.5zM1.727 14.99A10.385 10.385 0 0 0 12.012 24v-6.27a4.093 4.093 0 0 1-4.1-4.087L1.727 14.99zm-.096-1.447v.1h6.28a4.093 4.093 0 0 1 4.098-4.087l-1.348-6.17a10.37 10.37 0 0 0-9.03 10.157");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bamboo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bamboo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2m, create_fragment$2m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bancontact.svelte generated by Svelte v3.23.2 */

        function create_fragment$2n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.385 9.768h-7.074l-4.293 5.022H1.557L3.84 12.1H1.122C.505 12.1 0 12.616 0 13.25v2.428c0 .633.505 1.15 1.122 1.15h12.933c.617 0 1.46-.384 1.874-.854l1.956-2.225 3.469-3.946.031-.035zm-1.123 1.279l-.751.855.75-.855zm2.616-3.875H9.982c-.617 0-1.462.384-1.876.853l-5.49 6.208h7.047l4.368-5.02h8.424l-2.263 2.689h2.686c.617 0 1.122-.518 1.122-1.151V8.323c0-.633-.505-1.15-1.122-1.15zm-1.87 3.024l-.374.427-.1.114.474-.54z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bancontact" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bancontact extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2n, create_fragment$2n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bandcamp.svelte generated by Svelte v3.23.2 */

        function create_fragment$2o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 18.75l7.437-13.5H24l-7.438 13.5H0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bandcamp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bandcamp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2o, create_fragment$2o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bandlab.svelte generated by Svelte v3.23.2 */

        function create_fragment$2p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12,0C5.373,0,0,5.373,0,12s5.373,12,12,12c6.627,0,12-5.373,12-12S18.627,0,12,0z M12.375,2.625 c0.5,0,0.5,0.75,0,0.75S11.875,2.625,12.375,2.625z M11.25,4.125c0,1-1.5,1-1.5,0S11.25,3.125,11.25,4.125z M17.742,17.555 c-0.391,0.551-0.822,0.82-1.707,0.82h-8.07c-0.881,0-1.316-0.27-1.707-0.818c-0.531-0.756-0.082-1.574-0.082-1.574l3.559-6.918 c0,0,0.154-0.459-0.074-0.705C9.435,8.123,8.715,7.328,8.658,7.267C8.58,7.17,8.555,7.095,8.547,7.02 C8.535,6.953,8.479,6.172,8.479,6.082S8.461,5.906,8.617,5.744c0.125-0.119,0.398-0.119,0.398-0.119h5.98 c0,0,0.273-0.004,0.398,0.119c0.156,0.162,0.138,0.248,0.138,0.338c-0.017,0.315-0.039,0.629-0.068,0.941 c-0.008,0.072-0.03,0.151-0.116,0.244l-1.013,1.092c-0.026,0.026-0.045,0.059-0.063,0.09h-3.654c-0.086,0-0.135,0.008-0.197,0.074 c-0.094,0.109-0.031,0.233-0.031,0.233l2.566,5.002c0.137,0.287-0.07,0.617-0.387,0.619c-1.227,0-1.935,0.638-1.935,1.414 c0,0.779,0.876,1.414,1.957,1.414c1.076,0,1.947-0.627,1.959-1.402c0,0,0.022-0.259-0.109-0.582l-2.588-5.031 c0,0-0.049-0.133,0.033-0.248c0.084-0.117,0.219-0.123,0.219-0.123h2.52l3.199,6.164C17.824,15.983,18.273,16.801,17.742,17.555z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "BandLab" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bandlab extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2p, create_fragment$2p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bandsintown.svelte generated by Svelte v3.23.2 */

        function create_fragment$2q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.783 0H24v12h-5.217V0zm-6.261 5h5.217v7h-5.217V5zM6.26 5h5.217v7H6.261V5zM24 24H0V0h5.217v19h13.566v-1H6.26v-5H24v11Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bandsintown" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bandsintown extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2q, create_fragment$2q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Basecamp.svelte generated by Svelte v3.23.2 */

        function create_fragment$2r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.6516 22.453c-4.0328 0-7.575-1.5542-10.244-4.4946a1.11 1.11 0 0 1-.219-1.1338c.7008-1.8884 2.5935-6.2808 5.0205-6.2948h.0125c1.219 0 2.1312.9655 2.8648 1.7412.2192.2324.555.5875.7818.7611.5656-.5587 1.6775-2.4158 2.5422-4.2779.259-.5567.9203-.7985 1.4765-.5402.557.2584.7988.919.5404 1.4762-2.6217 5.6503-4.019 5.6503-4.478 5.6503-1.022 0-1.7628-.7843-2.4791-1.5422-.3208-.339-.9878-1.045-1.2482-1.045h-.0004c-.5665.095-1.8085 2.0531-2.6966 4.2034 2.1925 2.1722 4.9232 3.2726 8.1266 3.2726 4.3955 0 7.683-1.1964 9.0996-3.2953-.4888-5.585-3.5642-13.1634-9.0996-13.1634-4.6855 0-8.2152 3.264-10.4915 9.7007-.205.579-.8416.8828-1.4187.6776-.5789-.2047-.882-.8398-.6776-1.4185 2.624-7.421 6.859-11.1833 12.5878-11.1833 7.4826 0 10.9304 9.5613 11.3458 15.588a1.1154 1.1154 0 0 1-.1456.6314c-1.7407 3.0221-5.7182 4.6864-11.2002 4.6864Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Basecamp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Basecamp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2r, create_fragment$2r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bata.svelte generated by Svelte v3.23.2 */

        function create_fragment$2s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.397 13.003c.244-1.308 1.795-1.974 2.936-1.91.436.025.82.154 1.039.41.09-.09.18-.192.269-.282.051-.051.205-.038.346-.013.154.026.32.09.423.09.103 0 .36-.077.603-.115.243-.039.461-.026.423.064l-.218.538-.705 1.73c-.141.347.41.257 1.166-.55.129.09.193.102.321.423-.654.564-1.27.961-2.128 1.256-.77.27-1.346-.115-1.526-.756-1.102 1.025-2.628 1.013-3.064-.141-.718.359-1.564.73-1.923.833-.282.077-.526.141-.77.141-.384 0-.794-.346-.666-.872-.628.282-1.128.462-1.846.705-.77.27-1.218-.025-1.398-.666-1.102 1.025-2.628 1.013-3.064-.141-.436.205-1.025.513-1.577.73-.884.398-1.923.321-2.692-.487l.257-.397c.359.384.807.372 1.153.051.372-.333.603-.974.436-1.513-.077-.23-.333-.41-.833-.384l.154-.41c.5-.013.897-.09 1.115-.398.308-.449.308-1.128-.346-1.115a1.34 1.34 0 0 0-.41.077c-.116.333-.308.73-.475 1.14-.371.95-.782 2-1.256 2.68-.564.808-1.18.962-1.667.936-.512-.039-.91-.192-1.474-.692 0-.218.013-.308.064-.577.218.269.898.564 1.115.243.488-.718 1.026-2.102 1.436-3-.359.116-.705.346-1.18.68 0-.051-.153-.18-.153-.334.77-.884 2.115-1.423 3.026-1.615 1.397-.295 2.884.128 3.115 1.013.154.59-.538 1.14-1.192 1.218.372.218.769.602.872 1.077.05.23.038.487-.039.73.218-.102.487-.23.654-.307.27-1.885 3.192-2.487 3.987-1.59l.27-.282c.05-.051.204-.038.346-.013.153.026.32.09.423.09.102 0 .359-.077.602-.115.244-.039.462-.026.423.064l-.91 2.269c-.205.513 1.308-.398 1.397-.449l.654-1.384-.666.012.115-.564h.744c.128-.166.153-.359.32-.474.218-.167.718-.077.949-.23.205-.129.359-.321.538-.629.154-.256.744-.192.628.051l-.512 1.295h.653c.308.013.039.539-.307.539l-.539.012-.628 1.629c-.205.5.59.025 1.192-.32zm-6.012-1.115c-.077-.244-.282-.308-.475-.295-.436.051-.859.538-1.077.872-.346.538-.269 1.346.295 1.192.577-.154 1.36-1.41 1.257-1.77zm9.666 0c-.077-.244-.282-.308-.474-.295-.436.051-.86.538-1.077.872-.346.538-.27 1.346.295 1.192.577-.154 1.359-1.41 1.256-1.77Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bata" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bata extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2s, create_fragment$2s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bathasu.svelte generated by Svelte v3.23.2 */

        function create_fragment$2t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.984 22.265c-.33 0-.654-.088-.943-.256-.9-.52-1.21-1.67-.69-2.57 1.91-3.3.77-7.54-2.54-9.448-1.05-.604-2.23-.92-3.45-.92-.33 0-.66-.09-.942-.258-.9-.517-1.217-1.668-.69-2.566.33-.575.947-.93 1.622-.935 1.864 0 3.713.49 5.336 1.427 2.46 1.426 4.22 3.728 4.957 6.48.735 2.75.36 5.62-1.066 8.1-.33.57-.96.93-1.622.93l.04.006zm-11.478 1.31c-3.81 0-7.355-2.046-9.256-5.338-.518-.894-.207-2.044.69-2.56.873-.504 2.068-.176 2.565.686C4.737 18.498 7.033 19.82 9.5 19.82c1.202 0 2.397-.32 3.448-.926 1.037-.616 1.908-1.487 2.524-2.54.166-.285.392-.525.69-.69.857-.51 2.06-.18 2.555.676.332.57.332 1.293-.015 1.878-.932 1.622-2.284 2.96-3.906 3.907-1.623.932-3.47 1.428-5.335 1.428l.05.023zm.746-16.637C9.135 7.972 8.436 9.45 8.436 11.093c0 1.03.278 1.993.76 2.827.272.466.422.99.422 1.563 0 1.247-.736 2.33-1.79 2.825 1.46.45 3.08.315 4.51-.512.9-.525 1.593-1.247 2.073-2.072.27-.467.67-.872 1.16-1.144 1.08-.63 2.39-.524 3.35.136-.33-1.487-1.26-2.84-2.69-3.65-.88-.51-1.86-.752-2.82-.752-.54 0-1.08-.15-1.56-.42-1.08-.63-1.652-1.803-1.547-2.975l-.043.01zm-3.77 10.428c-.664 0-1.286-.36-1.623-.94-.94-1.62-1.43-3.465-1.43-5.334C3.43 5.21 8.21.424 14.1.424c1.03 0 1.872.842 1.872 1.88 0 1.035-.842 1.876-1.88 1.876-3.812 0-6.91 3.102-6.91 6.912 0 1.21.318 2.404.926 3.455.165.28.25.606.25.938 0 1.036-.84 1.878-1.88 1.878v.003z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bath ASU" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bathasu extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2t, create_fragment$2t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/BattleDotNet.svelte generated by Svelte v3.23.2 */

        function create_fragment$2u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.457 0c-.516.02-.859.314-1.053.523-.807.87-1.136 2.298-1.168 3.952-.304-.522-.72-1.061-1.199-1.198a.905.905 0 00-.172-.03c-.958-.138-1.768 1.393-1.66 3.812-1.8.064-3.33.268-4.363.525-.182.045-.312.1-.42.154-.075.035-.128.07-.18.104-.162.106-.234.199-.234.199.47-.177 2.358-.495 5.234-.387l-.004-.045h.006c.126 1.29.502 2.789 1.235 4.409v.003l-.024-.044c-.456.721-1.792 2.923-2.217 4.58-.277 1.081-.202 1.772.014 2.218.262.59.764.776 1.08.848 1.173.268 2.6-.176 4.068-.998-.316.537-.603 1.204-.476 1.709a.881.881 0 00.058.162c.363.897 2.091.832 4.131-.47.948 1.51 1.882 2.72 2.616 3.48.13.136.243.223.345.289.277.195.467.205.467.205-.387-.316-1.598-1.78-2.934-4.303l-.035.028c0-.002-.003-.005-.004-.006 1.064-.76 2.186-1.847 3.23-3.31h.003l-.028.038-.002.004c.896.034 3.41.08 5.03-.373 1.07-.299 1.63-.706 1.91-1.115.383-.523.293-1.054.197-1.365-.354-1.15-1.448-2.16-2.892-3.022.622.005 1.342-.08 1.714-.441a.884.884 0 00.116-.139c.587-.764-.335-2.227-2.479-3.34.834-1.576 1.417-2.989 1.71-4.004.05-.179.067-.319.073-.44.032-.339-.054-.509-.054-.509-.08.493-.743 2.271-2.26 4.69l.041.02-.002.003c-1.19-.54-2.693-.968-4.482-1.14l-.002-.003.05.004c-.418-.793-1.633-2.992-2.834-4.168-.792-.775-1.426-1.058-1.92-1.097a1.532 1.532 0 00-.23-.012zm1.172 2.643c.461.008.936.364 1.328.738.491.47 1.111 1.374 1.412 1.83-.083-.003-.161-.014-.246-.016-1.863-.047-3.216.366-4.195.98.06-1.543.419-2.8 1.238-3.374a.847.847 0 01.463-.158zM7.514 4.71c.03 0 .06.007.09.012.256.07.471.338.642.642.023.563.075 1.144.15 1.733a34.71 34.71 0 00-1.988-.06c.041-1.377.428-2.31 1.106-2.327zm5.478 1.21c.244-.007.494-.003.752.013 2.092.125 4.045.717 5.45 1.443-.33.486-.696.993-1.09 1.514-.601-1.09-1.467-1.74-1.868-1.91-.349-.15-.422-.14-.422-.14s.033-.01.57.413c.579.455 1.046 1.106 1.376 1.805a33.723 33.723 0 00-5.405-1.489 30.386 30.386 0 00-1.847-.283c-.002.011-.002.033-.004.045l-.025-.004c-.016.111-.036.277-.05.46-.014.2-.02.358-.023.452.157.03.316.058.475.09 2.275.45 5.224 1.381 7.363 2.596.034 1.103-.325 2.417-1.19 3.726-1.154 1.75-2.644 3.147-3.976 4a35.941 35.941 0 01-.767-1.705c1.266.037 2.282-.395 2.634-.66.3-.224.33-.294.33-.297-.001.004-.03.044-.64.287-.696.278-1.51.356-2.293.285a33.748 33.748 0 003.988-3.931c.408-.478.797-.967 1.168-1.46l-.035-.025.016-.019a7.198 7.198 0 00-.754-.518l-.315.366c-1.522 1.74-3.794 3.819-5.91 5.066-.964-.525-1.913-1.49-2.61-2.88-.936-1.874-1.4-3.863-1.474-5.442.573.042 1.183.106 1.816.185-.644 1.066-.775 2.144-.722 2.576.045.372.09.43.092.432-.002-.002-.022-.046.072-.697.105-.728.432-1.46.873-2.094a33.707 33.707 0 001.414 5.422c.21.593.437 1.173.678 1.74l.039-.015.011.023c.105-.042.258-.107.422-.187.181-.088.32-.162.403-.208-.054-.15-.108-.303-.16-.457-.748-2.194-1.414-5.212-1.432-7.671.784-.486 1.833-.808 3.07-.846zm6.793 1.788c1.172.724 1.788 1.526 1.465 2.121-.182.264-.605.323-1.025.307a20.285 20.285 0 00-1.504-.7c.383-.582.738-1.162 1.064-1.728zm-1.033 3.518c1.307.823 2.215 1.76 2.303 2.757a.85.85 0 01-.096.485.987.987 0 01-.11.154c-.273.303-.743.49-1.19.621-.653.19-1.746.277-2.292.31.045-.07.09-.132.135-.204.973-1.59 1.293-2.968 1.25-4.123zM6.93 12.936c.046.088.084.173.133.261.883 1.626 1.907 2.59 2.921 3.133-1.374.727-2.647 1.051-3.558.627a.852.852 0 01-.453-.5c-.123-.388-.052-.888.058-1.34.166-.68.662-1.71.899-2.181zm4.6 4.273c.313.625.637 1.223.964 1.789-1.212.652-2.212.785-2.566.207-.017-.027-.026-.059-.037-.088-.075-.28.08-.633.283-.955.453-.29.907-.611 1.355-.953Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Battle.net" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class BattleDotNet extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2u, create_fragment$2u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bbciplayer.svelte generated by Svelte v3.23.2 */

        function create_fragment$2v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.315 0H2.382v6.022h5.933V3.506l9.618 8.45-9.618 8.538V8.99H2.382V24h5.933l13.303-12.045Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "BBC iPlayer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bbciplayer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2v, create_fragment$2v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Beatport.svelte generated by Svelte v3.23.2 */

        function create_fragment$2w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.681 17.97a9.293 9.293 0 01-.888-7.527v-.001a.54.54 0 00-.354-.675l-1.232-.383a.54.54 0 00-.673.35l-.002-.001a11.66 11.66 0 001.115 9.453h.002a.54.54 0 00.738.182l1.105-.663a.54.54 0 00.189-.735zM24 13.22c0-1.187-.178-2.357-.53-3.48h.001l-.001-.003-.001-.004a.54.54 0 00-.674-.349l-1.23.383a.54.54 0 00-.356.674l-.001.001c.279.896.422 1.83.422 2.778a9.25 9.25 0 01-1.31 4.75.54.54 0 00.188.738l1.106.663a.54.54 0 00.74-.185A11.624 11.624 0 0024 13.22m-3.29.042c0-4.803-3.907-8.71-8.71-8.71-4.802 0-8.71 3.907-8.71 8.71 0 2.222.839 4.338 2.362 5.96a.54.54 0 00.763.022l.938-.884a.54.54 0 00.025-.76l.001-.001a6.317 6.317 0 01-1.718-4.337 6.346 6.346 0 016.34-6.34 6.347 6.347 0 016.339 6.34c0 1.616-.61 3.157-1.719 4.337l.002.002a.54.54 0 00.026.76l.94.883a.54.54 0 00.762-.023h-.001a8.676 8.676 0 002.36-5.96Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Beatport" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Beatport extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2w, create_fragment$2w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Beats.svelte generated by Svelte v3.23.2 */

        function create_fragment$2x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.55 16.77a7.14 7.14 0 0 1-7.16 7.16H2.45v-7.16h8.36a9.61 9.61 0 0 0 8.5-5.19 7.09 7.09 0 0 1 2.24 5.2zm-4.24-6.53a7.29 7.29 0 0 0 .66-3.01A7.14 7.14 0 0 0 10.8.07H2.46v14.32h8.35c2.9 0 5.37-1.7 6.5-4.15z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Beats" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Beats extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2x, create_fragment$2x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Beatsbydre.svelte generated by Svelte v3.23.2 */

        function create_fragment$2y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.0098 0a12 12 0 00-3.5996.5527v6.6465A6 6 0 116.0098 12V1.6016a12 12 0 106-1.6016zm.1504 8.4023A3.6 3.6 0 008.4102 12a3.6 3.6 0 003.5996 3.5996 3.6 3.6 0 00.1504-7.1973Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Beats by Dre" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Beatsbydre extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2y, create_fragment$2y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Behance.svelte generated by Svelte v3.23.2 */

        function create_fragment$2z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.938 4.503c.702 0 1.34.06 1.92.188.577.13 1.07.33 1.485.61.41.28.733.65.96 1.12.225.47.34 1.05.34 1.73 0 .74-.17 1.36-.507 1.86-.338.5-.837.9-1.502 1.22.906.26 1.576.72 2.022 1.37.448.66.665 1.45.665 2.36 0 .75-.13 1.39-.41 1.93-.28.55-.67 1-1.16 1.35-.48.348-1.05.6-1.67.767-.61.165-1.252.254-1.91.254H0V4.51h6.938v-.007zM16.94 16.665c.44.428 1.073.643 1.894.643.59 0 1.1-.148 1.53-.447.424-.29.68-.61.78-.94h2.588c-.403 1.28-1.048 2.2-1.9 2.75-.85.56-1.884.83-3.08.83-.837 0-1.584-.13-2.272-.4-.673-.27-1.24-.65-1.72-1.14-.464-.49-.823-1.08-1.077-1.77-.253-.69-.373-1.45-.373-2.27 0-.803.135-1.54.403-2.23.27-.7.644-1.28 1.12-1.79.495-.51 1.063-.895 1.736-1.194s1.4-.433 2.22-.433c.91 0 1.69.164 2.38.523.67.34 1.22.82 1.66 1.4.44.586.75 1.26.94 2.02.19.75.25 1.54.21 2.38h-7.69c0 .84.28 1.632.71 2.065l-.08.03zm-10.24.05c.317 0 .62-.03.906-.093.29-.06.548-.165.763-.3.21-.135.39-.328.52-.583.13-.24.19-.57.19-.96 0-.75-.22-1.29-.64-1.62-.43-.32-.99-.48-1.69-.48H3.24v4.05H6.7v-.03zm13.607-5.65c-.352-.385-.94-.592-1.657-.592-.468 0-.855.074-1.166.238-.302.15-.55.35-.74.59-.19.24-.317.48-.392.75-.075.26-.12.5-.135.71h4.762c-.07-.75-.33-1.3-.68-1.69v.01zM6.52 10.45c.574 0 1.05-.134 1.425-.412.374-.27.554-.72.554-1.338 0-.344-.07-.625-.18-.846-.13-.22-.3-.39-.5-.512-.21-.124-.45-.21-.72-.257-.27-.053-.56-.074-.84-.074H3.23v3.44h3.29zm9.098-4.958h5.968v1.454h-5.968V5.48v.01z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Behance" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Behance extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2z, create_fragment$2z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Beijingsubway.svelte generated by Svelte v3.23.2 */

        function create_fragment$2A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.8857.7537C11.2092-.5 15.09-.1816 18.1547 1.6493c2.826 1.6916 5.055 4.7166 5.5526 7.5028-1.2538 0-1.5523.0398-2.7862.0398-.796-2.5872-3.7216-5.4729-6.1097-6.07-3.1246-.6567-5.6321-.199-7.8014 1.3335C5.418 5.55 3.9253 7.4604 3.368 9.3312c-.8159 2.408-.1592 5.8112 1.234 7.9208 1.0945 1.5722 3.005 3.0648 4.836 3.642 1.7911.5572 4.7166.0397 6.4878-.5971 2.4877-.9155 4.3186-3.1842 5.1147-5.6918l-3.4628.0398c-.1593 1.1543-.3384 1.5523-1.035 2.8857l-9.4929-.0199V6.4257h9.473c1.1345 1.4328 1.3136 3.6817 1.3335 5.5723 0 0 3.8011.02 6.1296 0-.0398 3.6022-1.5523 7.1645-4.4181 9.3935-2.0897 1.6518-4.7166 2.607-7.3834 2.607-3.7216.0598-7.4232-1.7314-9.6522-4.7166C1.0992 17.451.343 15.2021.0445 12.9334c-.0796-1.3931.02-2.0897.0398-2.1693C.343 9.1521.761 7.56 1.577 6.167 2.9501 3.6792 5.219 1.7289 7.8857.7537m1.811 8.1795v6.2291l4.5972.02c1.0349-1.1942.995-1.9703-.0398-3.0649 1.0349-1.0946 1.0946-2.2488.02-3.1842H9.6966Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Beijing Subway" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Beijingsubway extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2A, create_fragment$2A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bentley.svelte generated by Svelte v3.23.2 */

        function create_fragment$2B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.535 8.114a5.407 5.407 0 0 0-1.49.34c-.131.05-.269.135-.414.079-.654-.153-1.331-.096-1.992-.025-.859.09-1.72-.003-2.579-.045a21.543 21.543 0 0 0-2.349.05c-.713.044-1.429-.01-2.138-.086-.088-.002-.178-.02-.265-.002-.135.088-.22.232-.308.363v.068c.185.158.404.262.625.358-.062.151-.101.31-.13.47.264.124.54.227.796.368-.029.095-.072.186-.083.285-.006.059.024.121.083.142.21.11.448.142.665.23.021.01.05.02.05.048.017.128.02.258.047.385a.173.173 0 0 0 .057.035c.287.095.588.131.881.196.034.11.022.249.106.336.375.196.82.1 1.213.228.098.096.075.29.223.344.296.09.614.01.918.05.069.079.077.193.144.273a.249.249 0 0 0 .169.076c.287.008.562-.087.846-.12.059.099.087.247.213.277.229.045.452-.042.665-.116.08.26.166.521.303.758.473.858 1.288 1.499 2.198 1.841.128.036.172.175.238.276.127-.048.252-.102.384-.134l.2.297c.119-.06.237-.122.356-.184.08.094.16.187.242.28l.31-.22c.09.078.173.164.254.251h.035c.096-.085.187-.177.282-.263.106.077.21.156.316.235.081-.095.163-.19.246-.284.12.06.238.123.357.184.063-.098.124-.196.185-.295.14.031.27.089.404.136.033-.068.065-.138.102-.204.053-.142.22-.164.336-.232.972-.447 1.78-1.286 2.099-2.318.162.06.345.134.517.064.09-.046.125-.144.168-.228.24.053.48.154.73.102.13-.039.194-.161.253-.271.23.03.456.095.69.075.104-.013.247 0 .318-.096.059-.096.067-.215.124-.312.315-.042.648.042.954-.072.096-.108.097-.27.184-.383.247-.018.495 0 .742-.018a.286.286 0 0 0 .215-.123c.056-.107.064-.23.1-.344.007-.024.02-.05.044-.061.241-.1.534-.022.755-.177.108-.12.021-.31.088-.443.207-.118.477-.088.669-.241.129-.11.032-.282.014-.42.225-.077.472-.119.657-.279-.052-.14-.113-.275-.17-.412A4.67 4.67 0 0 0 24 8.871v-.087a1.176 1.176 0 0 0-.272-.34c-.071-.053-.17-.01-.25-.018-.696.062-1.396.13-2.095.092-.417-.022-.833-.062-1.25-.062-.522 0-1.044-.015-1.564.027-.77.046-1.544.103-2.313.017-.657-.077-1.335-.115-1.981.053-.103.043-.211.009-.305-.037-.516-.234-1.077-.348-1.638-.402zm.521.155c.327.014.654.049.974.122.31.072.622.149.91.287-.103.065-.227.164-.354.11a5.088 5.088 0 0 0-1.716-.29c-.326.02-.652.046-.97.125-.204.04-.4.116-.606.149-.096-.026-.184-.073-.272-.119a5.653 5.653 0 0 1 2.034-.384zm11.467.278c.17-.01.308.126.395.26a2.31 2.31 0 0 1-1.093.252c-1.65.027-3.298.095-4.947.137 0 .027.002.054.004.081a2.744 2.744 0 0 1-.048-.154c.361-.05.72-.12 1.085-.142.668-.05 1.34-.068 2.01-.075a.394.394 0 0 0 .245-.072c-.533-.057-1.07-.026-1.604-.013-.371.027-.744.033-1.114.08-.495.06-.989.154-1.489.16-.312.005-.625.032-.937.01-.39-.007-.786-.042-1.17.045-.108.035-.239.073-.282.192-.093.188.01.398.095.569.103.217.279.425.247.682-.015.091-.092.151-.162.203a2.4 2.4 0 0 1-.198-.251c.04-.08.106-.155.088-.252-.033-.2-.178-.358-.314-.498-.196-.19-.414-.367-.547-.61-.039-.07-.066-.17.009-.227.22-.156.491-.209.752-.252.715-.1 1.436-.015 2.153.015.353.035.709.03 1.063 0 .838-.054 1.68-.138 2.52-.082.378.021.757.038 1.135.047.692.028 1.38-.062 2.07-.101a.308.308 0 0 1 .034-.004zM.55 8.55c.196-.002.392.027.587.04.542.048 1.086.079 1.63.056.674-.008 1.345-.088 2.019-.052.687.022 1.37.098 2.058.119.525-.018 1.049-.06 1.574-.084.533-.017 1.087-.011 1.59.187.097.04.217.093.24.207-.02.158-.14.28-.238.399-.175.216-.429.36-.57.605-.11.14-.126.35-.005.488a1.808 1.808 0 0 1-.219.243c-.083-.076-.16-.17-.15-.292.038-.346.347-.593.383-.94.031-.121-.031-.239-.108-.327a1.155 1.155 0 0 0-.468-.124c-.562-.048-1.126.027-1.689-.007-.557.004-1.107-.093-1.657-.167a26.874 26.874 0 0 0-2.115-.106c-.195-.003-.39.015-.585.032.063.052.14.087.225.078.733.01 1.466.022 2.197.085.307.029.61.084.916.131l-.023.084c-.536-.033-1.074-.028-1.611-.05-.965-.035-1.93-.065-2.895-.081-.411-.027-.841.017-1.234-.134-.11-.037-.213-.088-.317-.136.076-.093.153-.199.27-.24.065-.01.13-.014.195-.014zm11.455.114a4.324 4.324 0 0 1 1.597.296c.004.104-.029.218.024.313a1.245 1.245 0 0 0 .16.229c.18.212.41.383.588.597a.716.716 0 0 1 .157.272 3.76 3.76 0 0 0-1.267-.755 3.848 3.848 0 0 0-3.158.28c-.174.098-.332.22-.486.348l-.152.128a.502.502 0 0 1 .06-.147c.223-.315.556-.533.781-.846.11-.133.1-.31.083-.47a5.558 5.558 0 0 1 1.613-.245zm5.762.455c.016.044.03.088.044.132-.313.18-.688.135-1.032.09-.078-.007-.124-.074-.155-.139.38-.041.763-.038 1.143-.083zm-11.55.016c.386.006.771.025 1.154.064-.03.051-.054.124-.122.132-.203.035-.41.041-.614.049-.158.01-.303-.062-.44-.129l.023-.116zm1.207.055c.154.003.309.005.463.014.41.017.831-.016 1.23.105.099.034.208.08.259.178.039.172-.06.325-.144.464-.083.151-.197.293-.235.464-.048.16.05.294.124.423-.112.004-.25.051-.338-.04-.041-.082.007-.179.024-.263l-.16.143-.195-.012c-.015-.203.141-.35.221-.521-.138.123-.278.297-.483.281-.081.003-.143-.104-.093-.169.111-.141.255-.254.359-.402-.124.096-.25.195-.397.251a.464.464 0 0 1-.326-.038c.018-.204.234-.276.35-.417-.127.053-.24.154-.387.145-.058.002-.115-.016-.17-.029-.01-.173.171-.234.273-.337-.09.02-.177.062-.27.06-.062-.022-.11-.072-.164-.108.015-.066.035-.13.06-.192zm9.156 0c.018.078.087.178-.005.237-.1.125-.268.022-.39-.002.112.096.285.167.284.343-.096.017-.2.05-.295.01-.088-.036-.173-.081-.259-.122.027.027.055.053.084.078l.087.076c.057.051.113.104.16.164.016.068-.033.14-.106.139-.233.059-.415-.127-.584-.254.089.121.195.226.297.335.051.054.046.135.064.203-.084.011-.174.044-.256.008-.128-.052-.225-.155-.33-.243.091.16.23.305.216.502l-.208.008a10.001 10.001 0 0 1-.137-.132c.008.082.06.176.007.25-.062.07-.158.065-.246.063-.03 0-.059 0-.086.003.047-.119.14-.222.137-.356-.036-.35-.358-.587-.406-.932-.01-.149.154-.218.273-.261.554-.145 1.133-.073 1.7-.117zM.698 9.192c.77 0 1.54.04 2.31.047.963.021 1.926.028 2.888.053.2-.014.365.116.53.207l-.018.19a5.46 5.46 0 0 1-.089.043l.026-.073c-.899.024-1.796.085-2.695.112-.566.012-1.13.06-1.697.05A3.707 3.707 0 0 1 .89 9.705c-.115-.034-.247-.052-.338-.137-.001-.135.073-.264.145-.376zm22.62.022c.064.111.132.222.179.342-.43.14-.89.133-1.336.116-.828-.002-1.656-.055-2.484-.083-.699-.032-1.398-.06-2.097-.1.143-.102.305-.202.486-.196 1.751-.007 3.501-.078 5.252-.08zm-16.073.214c.077.005.136.074.194.12a.138.138 0 0 1 .05.116c-.078.06-.181.068-.273.092-.186.034-.37.09-.56.097-.067-.026-.14-.055-.185-.116-.016-.084.01-.2.104-.222.21-.042.425-.054.636-.085a.139.139 0 0 1 .034-.002zm9.465.008c.235 0 .47.03.7.073.109.021.106.15.134.234-.09.05-.177.13-.29.107-.163-.025-.323-.066-.485-.096-.087-.022-.187-.029-.258-.09.005-.108.116-.177.2-.228zm-4.785.138c.908-.02 1.842.29 2.495.935.358.365.62.856.612 1.377.01.47-.199.926-.507 1.274-.566.642-1.415.983-2.256 1.046a3.577 3.577 0 0 1-2.17-.514c-.345-.22-.66-.5-.867-.858a1.853 1.853 0 0 1-.227-1.365c.099-.415.356-.774.668-1.057.565-.51 1.318-.775 2.07-.83.06-.004.121-.006.182-.008zm5.64.023c.218-.005.435.025.653.035 1.44.088 2.882.14 4.322.224.093.014.198-.004.283.043.057.083.072.185.087.283-.302.185-.678.14-1.015.149-.425-.028-.85-.08-1.274-.121a15.638 15.638 0 0 0-.425-.036c-.872-.087-1.747-.139-2.615-.258a1.474 1.474 0 0 0-.016-.32zm-5.553.01c-.116 0-.23.005-.345.016-.805.077-1.627.39-2.161 1.02-.308.348-.518.809-.484 1.282.018.674.448 1.273.985 1.65.884.618 2.057.75 3.079.44.46-.149.903-.38 1.245-.727.428-.414.714-1.017.635-1.622-.065-.495-.35-.941-.723-1.265-.61-.536-1.425-.795-2.231-.794zm-5.915.175c.059 0 .118 0 .178.002.148.042.249.167.359.266-.027.077-.05.155-.072.234.072.057.149.108.23.15-.517.084-1.03.193-1.544.292l-.464.102-.465.098c-.31.063-.621.123-.934.174-.405.072-.828.05-1.222-.069-.113-.032-.141-.162-.095-.262.017-.1.141-.09.215-.105 1.276-.13 2.548-.295 3.82-.447.178-.019.38-.023.51-.163-.701.064-1.402.142-2.102.22l-1.051.113c-.35.036-.701.07-1.052.1-.394.04-.802.002-1.17-.153a1.65 1.65 0 0 1 .144-.328c1.393-.063 2.789-.092 4.18-.195.178-.008.356-.025.535-.029zm1.256.064a.56.56 0 0 1 .122.008c.084.025.162.067.24.105-.009.132-.138.166-.238.212-.125.051-.247.11-.375.153-.162.052-.325-.028-.474-.087.02-.068.028-.144.07-.203a.916.916 0 0 1 .297-.12c.117-.03.237-.064.358-.068zm9.248 0c.177-.004.35.054.517.106.064.026.144.036.192.092.032.06.04.13.064.192-.146.053-.302.145-.462.093a6.866 6.866 0 0 1-.632-.271c.018-.123.137-.18.245-.206a.718.718 0 0 1 .076-.006zm.887.172c.239-.004.474.041.711.066.758.085 1.517.168 2.276.246.543.068 1.09.108 1.632.19.013.107.126.312-.033.35a4.135 4.135 0 0 1-1.12.025c-1.182-.184-2.36-.394-3.544-.566a4.356 4.356 0 0 0-.024-.307c.034-.002.068-.004.102-.004zm-5.377.111c.253.001.504.032.748.103.282.084.568.226.73.482.111.16.124.368.087.554-.056.226-.263.365-.442.492l.004.042c.265.181.554.434.545.785.025.254-.11.492-.293.657-.129.098-.27.183-.422.241-.43.149-.892.168-1.342.138-.552-.069-1.13-.224-1.537-.627.07-.094.16-.17.224-.268a23.17 23.17 0 0 0 .006-1.615c-.066-.099-.157-.177-.231-.27.274-.375.732-.545 1.17-.64.247-.047.5-.075.753-.074zm4.163.063c.029 0 .058.001.086.008.169.065.332.144.494.225.036.024.09.036.106.082.004.08-.034.168-.113.197-.115.048-.253.078-.37.024-.191-.084-.365-.202-.544-.307.017-.042.025-.095.054-.13a.1.1 0 0 1 .038-.027.606.606 0 0 1 .249-.072zm-8.563 0a.555.555 0 0 1 .276.078c.065.031.079.14.017.18-.162.11-.332.21-.514.281-.143.047-.287-.007-.42-.053l-.04-.194c.168-.088.34-.173.514-.25a.36.36 0 0 1 .167-.042zm4.37.172a2.535 2.535 0 0 0-.282.015.623.623 0 0 0-.361.168c-.163.169-.176.422-.145.641a.563.563 0 0 0 .367.487c.233.079.49.075.725.01.254-.085.382-.362.376-.614.013-.213-.04-.462-.231-.586a.807.807 0 0 0-.449-.12zm5.287.085c.27.006.54.052.806.099.833.15 1.666.301 2.498.458.21.043.423.079.63.138-.028.125-.043.32-.202.344-.513.065-1.028-.05-1.52-.187-.814-.22-1.637-.414-2.45-.64a.435.435 0 0 0-.149-.007c.013-.052.017-.107.042-.154.064-.048.153-.045.229-.05h.116zm-10.387.055c.028.114.052.229.097.337-.634.195-1.267.39-1.904.572-.338.097-.67.223-1.02.27-.316.028-.64.013-.948-.066-.126-.034-.16-.17-.163-.284.89-.193 1.777-.399 2.67-.577.422-.085.839-.203 1.268-.252zm8.897.051a.266.266 0 0 1 .177.063c.15.099.297.2.448.296a.196.196 0 0 0-.014.043l-.01.047c-.009.032-.021.061-.05.077-.13.014-.269.043-.396-.006a2.215 2.215 0 0 1-.396-.324c-.046-.039-.041-.116-.002-.158a.093.093 0 0 1 .05-.027c.061-.003.128-.013.193-.01zm-7.713 0c.051 0 .102.004.152.01.069.017.116.122.047.169-.156.156-.318.354-.557.365-.08-.001-.16.002-.238-.015-.057-.038-.052-.12-.071-.176.173-.11.338-.231.516-.333a.63.63 0 0 1 .15-.02zm8.857.204c.162.017.316.07.473.108.766.225 1.533.447 2.298.674.143.043.289.079.426.138-.038.095-.074.203-.163.262a2.07 2.07 0 0 1-1.1-.072c-.27-.103-.527-.233-.792-.346-.48-.205-.958-.419-1.445-.61.103-.047.195-.121.303-.154zm-1.563.04c.105 0 .19.084.266.148.072.072.167.131.212.225.015.085-.055.159-.079.235-.104-.02-.234.02-.318-.066a1.57 1.57 0 0 1-.322-.397c-.016-.086.083-.138.163-.141l.032.001a.202.202 0 0 1 .046-.005zm-6.891.004a.423.423 0 0 1 .23.082 1.5 1.5 0 0 1-.34.455c-.074.09-.2.075-.3.045-.063-.047-.086-.13-.124-.196.123-.127.24-.262.389-.359a.32.32 0 0 1 .145-.027zm-1.326.12a.848.848 0 0 1 .108.002c.102.015.115.135.153.212-.178.06-.341.153-.508.236-.434.208-.857.435-1.29.645-.295.156-.643.13-.966.133-.09-.009-.191 0-.27-.052-.052-.067-.074-.152-.1-.232.245-.124.516-.18.77-.283.456-.172.924-.31 1.384-.47.238-.067.471-.179.72-.19zm7.692.011c.093.022.207.015.277.091.098.133.197.272.253.428-.018.12-.154.2-.272.195-.04-.253-.148-.485-.258-.714zm-5.888.003a2.99 2.99 0 0 0-.242.718c-.095-.022-.214-.046-.256-.147-.03-.05-.001-.105.022-.15a2.1 2.1 0 0 1 .225-.346c.071-.054.167-.054.251-.075zm7.515.028c.182.033.342.134.508.212.661.309 1.32.623 1.977.942-.013.07-.011.154-.059.214-.163.063-.344.037-.513.02-.206-.023-.42-.047-.601-.16-.507-.315-.98-.687-1.509-.966.115-.042.154-.159.197-.262zm-8.832.254c.09 0 .18.014.267.042-.194.232-.456.392-.695.571-.28.19-.538.417-.85.553a2.027 2.027 0 0 1-.761.104c-.112-.014-.161-.118-.166-.22.587-.32 1.187-.615 1.774-.933a.83.83 0 0 1 .43-.117zm8.426.018a.6.6 0 0 1 .321.134c.449.335.896.674 1.346 1.007.06.031.091.091.116.152-.126.054-.263.12-.403.078-.041-.01-.084-.018-.126-.027a.946.946 0 0 1-.364-.13c-.427-.27-.773-.65-1.206-.912.092-.082.12-.21.206-.293a.399.399 0 0 1 .11-.009zm-8.156.176c.114.178.334.117.508.165-.38.273-.666.652-1.042.93-.228.169-.583.234-.814.037.113-.175.29-.29.447-.423.3-.236.593-.483.901-.709zm7.554.125c.11.023.233.032.319.116.284.24.551.498.836.738.097.09.227.167.238.315-.095.035-.202.075-.302.033a.672.672 0 0 1-.071-.023c-.162-.063-.295-.183-.424-.297a9.813 9.813 0 0 0-.769-.679c.056-.069.114-.137.173-.203zm-7.068.176c.102.027.201.065.303.091.013.1.02.2.026.3-.174.175-.307.406-.541.51-.156.06-.327.081-.493.06-.057-.012-.097-.057-.138-.095.278-.292.54-.6.843-.866zm6.729.073c.151-.002.25.118.344.218.196.228.42.428.622.649-.043.057-.09.136-.18.106a.738.738 0 0 1-.311-.05c-.208-.1-.345-.293-.522-.433l.047-.49zm-3.103.132a1.564 1.564 0 0 0-.255.014c-.274.032-.537.235-.584.515-.03.271-.019.602.204.796.147.12.34.16.525.176.258.008.56-.033.72-.264.175-.264.176-.623.054-.908-.132-.24-.401-.322-.664-.33zm-3.303.33c.066.17.114.346.16.522-.12-.023-.302-.01-.37-.138-.033-.161.117-.274.21-.383zm6.349.15c.087.077.204.181.17.31-.067.117-.218.118-.335.13a33.1 33.1 0 0 0 .165-.44zm-6.69.321c.093.077.195.157.319.176.08.024.173.018.245.063.156.191.294.399.488.555.299.277.658.469.995.692-.058.24-.213.437-.339.644-.92-.353-1.719-1.07-2.085-1.995.126-.042.252-.087.376-.135zm6.993.063c.093.037.186.075.28.11-.185.51-.532.95-.94 1.301a3.133 3.133 0 0 1-1.012.6c-.08-.14-.166-.278-.236-.424-.02-.05-.052-.118-.01-.165.098-.098.227-.156.346-.224.248-.148.476-.327.686-.526.14-.134.228-.312.357-.456.11-.043.238-.024.347-.074.07-.036.124-.092.182-.142zm-7.67.07l.204.003c.174.43.422.837.76 1.157.207.187.408.384.649.527.23.152.482.262.73.38a1.417 1.417 0 0 1-.089.2 4.51 4.51 0 0 1-.699-.352c-.3-.177-.55-.421-.8-.66-.26-.253-.43-.58-.604-.894-.065-.114-.106-.239-.15-.361zm8.027.058l.22.02a3.174 3.174 0 0 1-.847 1.33c-.372.34-.785.665-1.272.82-.034-.07-.068-.14-.1-.212.305-.137.61-.289.87-.504.48-.388.91-.868 1.129-1.454zm-1.348.433c-.19.266-.485.42-.746.605-.12.093-.29.15-.339.31.011.094.087.164.13.245.108.186.215.374.302.57.048.124-.001.252-.048.367-.158-.043-.334-.115-.403-.275-.133-.241-.13-.544-.315-.76-.017.322.216.582.255.893-.016.109-.084.202-.136.297-.139-.078-.31-.156-.343-.329-.095-.256-.037-.563-.192-.797-.063.223.046.44.088.656.023.134.082.303-.023.417a2.76 2.76 0 0 1-.106.133c-.105-.075-.24-.145-.275-.28-.059-.26-.016-.53-.064-.79-.014-.033-.037-.059-.058-.086-.07.31.085.616.047.928-.042.112-.135.229-.26.25-.115-.08-.222-.2-.221-.35-.015-.271.087-.535.073-.807l-.073-.002c-.037.23-.018.465-.033.697a.487.487 0 0 1-.104.294c-.06.054-.127.1-.197.142-.063-.066-.135-.13-.173-.216-.034-.13.013-.26.04-.388.047-.192.115-.384.106-.584h-.066c-.083.259-.081.533-.154.794a.468.468 0 0 1-.273.295c-.054.024-.119-.014-.14-.066-.097-.123-.048-.289-.005-.423.086-.222.192-.439.24-.674l-.066-.027c-.14.26-.174.564-.32.821a.478.478 0 0 1-.311.24c-.045.015-.08-.022-.1-.057a.386.386 0 0 1-.005-.334c.112-.241.27-.46.38-.702.02-.066.056-.155.001-.213-.22-.226-.546-.3-.77-.522.233.138.459.296.716.386.923.372 1.99.383 2.915.011.39-.136.729-.387 1.026-.669Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bentley" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bentley extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2B, create_fragment$2B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bigcartel.svelte generated by Svelte v3.23.2 */

        function create_fragment$2C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 13.068v-1.006c0-.63.252-1.256.88-1.508l7.79-4.9c.503-.252.755-.88.755-1.51V0L12 6.03 2.575 0v12.69c0 3.394 1.51 6.284 4.02 7.917L11.875 24l5.28-3.393c2.513-1.51 4.02-4.398 4.02-7.916V7.036L12 13.068z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Big Cartel" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bigcartel extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2C, create_fragment$2C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bilibili.svelte generated by Svelte v3.23.2 */

        function create_fragment$2D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.813 4.653h.854c1.51.054 2.769.578 3.773 1.574 1.004.995 1.524 2.249 1.56 3.76v7.36c-.036 1.51-.556 2.769-1.56 3.773s-2.262 1.524-3.773 1.56H5.333c-1.51-.036-2.769-.556-3.773-1.56S.036 18.858 0 17.347v-7.36c.036-1.511.556-2.765 1.56-3.76 1.004-.996 2.262-1.52 3.773-1.574h.774l-1.174-1.12a1.234 1.234 0 0 1-.373-.906c0-.356.124-.658.373-.907l.027-.027c.267-.249.573-.373.92-.373.347 0 .653.124.92.373L9.653 4.44c.071.071.134.142.187.213h4.267a.836.836 0 0 1 .16-.213l2.853-2.747c.267-.249.573-.373.92-.373.347 0 .662.151.929.4.267.249.391.551.391.907 0 .355-.124.657-.373.906zM5.333 7.24c-.746.018-1.373.276-1.88.773-.506.498-.769 1.13-.786 1.894v7.52c.017.764.28 1.395.786 1.893.507.498 1.134.756 1.88.773h13.334c.746-.017 1.373-.275 1.88-.773.506-.498.769-1.129.786-1.893v-7.52c-.017-.765-.28-1.396-.786-1.894-.507-.497-1.134-.755-1.88-.773zM8 11.107c.373 0 .684.124.933.373.25.249.383.569.4.96v1.173c-.017.391-.15.711-.4.96-.249.25-.56.374-.933.374s-.684-.125-.933-.374c-.25-.249-.383-.569-.4-.96V12.44c0-.373.129-.689.386-.947.258-.257.574-.386.947-.386zm8 0c.373 0 .684.124.933.373.25.249.383.569.4.96v1.173c-.017.391-.15.711-.4.96-.249.25-.56.374-.933.374s-.684-.125-.933-.374c-.25-.249-.383-.569-.4-.96V12.44c.017-.391.15-.711.4-.96.249-.249.56-.373.933-.373Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bilibili" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bilibili extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2D, create_fragment$2D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bing.svelte generated by Svelte v3.23.2 */

        function create_fragment$2E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.605 0L8.4 1.686V18.56l6.753-3.895-3.31-1.555-2.09-5.2 10.64 3.738v5.435L8.403 24l-4.797-2.67V0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bing" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bing extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2E, create_fragment$2E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bit.svelte generated by Svelte v3.23.2 */

        function create_fragment$2F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 24C5.373 24 0 18.627 0 12S5.373 0 12 0s12 5.373 12 12-5.373 12-12 12zm-1.144-10.93c0-1.292-.763-2.019-1.858-2.019-.341 0-.637.072-.862.224V9.552c0-.323-.197-.485-.601-.485s-.601.162-.601.485v4.533c0 .305 0 .601.413.835.359.206.826.305 1.328.305 1.4 0 2.181-.844 2.181-2.154zm-2.72 1.05v-1.921a.923.923 0 0 1 .565-.18c.556 0 .924.413.924 1.131 0 .709-.359 1.104-.942 1.104-.206 0-.395-.045-.548-.135zm4.968-4.254c0-.413-.296-.691-.709-.691s-.709.278-.709.691c0 .413.296.7.709.7s.709-.287.709-.7zm-.108 1.669c0-.323-.197-.485-.601-.485s-.601.162-.601.485v3.186c0 .323.197.485.601.485s.601-.162.601-.485v-3.186zm3.64 2.594c-.072 0-.135.018-.206.036-.081.018-.18.045-.278.045-.153 0-.269-.054-.332-.18-.081-.153-.081-.386-.081-.548v-1.346h.754c.323 0 .485-.162.485-.503s-.162-.503-.485-.503h-.754v-.79c0-.323-.197-.485-.601-.485s-.601.162-.601.485v.79h-.314c-.323 0-.485.162-.485.503s.162.503.485.503h.314v1.346c0 .413.018.799.197 1.122.197.359.583.619 1.23.619.35 0 .691-.081.889-.197.171-.099.215-.224.215-.35 0-.197-.099-.548-.431-.548z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bit" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bit extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2F, create_fragment$2F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bitbucket.svelte generated by Svelte v3.23.2 */

        function create_fragment$2G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.778 1.211c-.424-.006-.772.334-.778.758 0 .045.002.09.01.134l3.263 19.811c.084.499.515.867 1.022.872H19.95c.382.004.708-.271.77-.646l3.27-20.03c.068-.418-.216-.813-.635-.881-.045-.008-.089-.011-.133-.01L.778 1.211zM14.52 15.528H9.522L8.17 8.464h7.561l-1.211 7.064z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bitbucket" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bitbucket extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2G, create_fragment$2G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bitcoin.svelte generated by Svelte v3.23.2 */

        function create_fragment$2H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.638 14.904c-1.602 6.43-8.113 10.34-14.542 8.736C2.67 22.05-1.244 15.525.362 9.105 1.962 2.67 8.475-1.243 14.9.358c6.43 1.605 10.342 8.115 8.738 14.548v-.002zm-6.35-4.613c.24-1.59-.974-2.45-2.64-3.03l.54-2.153-1.315-.33-.525 2.107c-.345-.087-.705-.167-1.064-.25l.526-2.127-1.32-.33-.54 2.165c-.285-.067-.565-.132-.84-.2l-1.815-.45-.35 1.407s.975.225.955.236c.535.136.63.486.615.766l-1.477 5.92c-.075.166-.24.406-.614.314.015.02-.96-.24-.96-.24l-.66 1.51 1.71.426.93.242-.54 2.19 1.32.327.54-2.17c.36.1.705.19 1.05.273l-.51 2.154 1.32.33.545-2.19c2.24.427 3.93.257 4.64-1.774.57-1.637-.03-2.58-1.217-3.196.854-.193 1.5-.76 1.68-1.93h.01zm-3.01 4.22c-.404 1.64-3.157.75-4.05.53l.72-2.9c.896.23 3.757.67 3.33 2.37zm.41-4.24c-.37 1.49-2.662.735-3.405.55l.654-2.64c.744.18 3.137.524 2.75 2.084v.006z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bitcoin" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bitcoin extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2H, create_fragment$2H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bitdefender.svelte generated by Svelte v3.23.2 */

        function create_fragment$2I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.685 0v.357l1.232 1.046c1.477 1.204 1.67 1.439 1.67 2.526V24h8.646c4.537 0 9.083-1.629 9.083-6.849 0-3.082-2.174-5.458-5.186-5.797v-.067c2.475-.745 4.169-2.54 4.169-5.253 0-4.372-3.73-6.032-7.349-6.032L1.686 0zm7.176 3.664h3.524c2.383 0 3.121.327 3.844 1.013.548.521.799 1.237.801 2.07 0 .775-.267 1.466-.831 2.004-.705.676-1.674 1.011-3.443 1.011H8.862V3.664zm0 9.758h4.099c3.456 0 5.085.881 5.085 3.39 0 3.153-3.055 3.526-5.256 3.526H8.86v-6.916z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bitdefender" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bitdefender extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2I, create_fragment$2I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bitly.svelte generated by Svelte v3.23.2 */

        function create_fragment$2J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.055 21.26c-1.345.022-2.325-.41-2.386-1.585-.025-.44-.018-.91.002-1.192.137-1.716 1.333-2.95 2.53-3.19 1.482-.294 2.455.38 2.455 2.31 0 1.303-.36 3.618-2.59 3.657h-.016zM11.923 0C5.32 0 0 5.297 0 12.224c0 3.594 1.92 7.062 4.623 9.147.52.4 1.138.367 1.497.02.297-.285.272-.984-.285-1.475-2.16-1.886-3.652-4.76-3.652-7.635 0-5.15 4.58-9.49 9.74-9.49 6.28 0 9.636 5.102 9.636 9.43 0 2.65-1.29 5.84-3.626 7.874.015 0 .493-.942.493-2.784 0-3.13-1.976-4.836-4.28-4.836-1.663 0-2.667.598-3.34 1.152 0-1.272.045-3.652.045-3.652 0-1.572-.54-2.83-2.47-2.86-1.11-.015-1.932.493-2.44 1.647-.18.436-.12.916.254 1.125.3.18.81.046 1.046-.284.165-.21.254-.254.404-.24.24.03.257.405.257.66.014.193.193 2.903.088 9.865C7.98 21.798 9.493 24 13.1 24c1.56 0 2.756-.435 4.493-1.422C20.243 21.08 24 17.758 24 12.128 23.953 5.045 18.265 0 11.933 0");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bitly" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bitly extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2J, create_fragment$2J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bitrise.svelte generated by Svelte v3.23.2 */

        function create_fragment$2K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 17.9c1.5 0 2.7-1.2 2.7-2.7H9.3C9.3 16.7 10.5 17.9 12 17.9zM6 12c-0.9 0-1.6 0.7-1.6 1.6h3.3C7.7 12.7 6.9 12 6 12zM12 4.1c0.6 0 1-0.5 1-1 0-0.6-0.5-1-1-1 -0.6 0-1 0.5-1 1C11 3.7 11.4 4.1 12 4.1zM23.5 13.4c-0.3-1.9-0.7-3.8-1-5 -0.4-1.5-1.6-2.6-3.2-2.7 -1.5-0.1-4-0.2-7.4-0.2 -3.3 0-5.8 0.1-7.4 0.2 -1.4 0.1-2.7 1.2-3 2.7 -0.3 1.3-0.7 3.2-1 5 -0.2 1.3-0.3 2.8-0.5 4.5 -0.1 0.9 0.2 1.9 0.9 2.6 0.6 0.7 1.5 1.1 2.4 1.2 2.1 0.1 5.3 0.2 8.7 0.2s6.6-0.1 8.7-0.2c0.9 0 1.8-0.5 2.4-1.2s0.9-1.6 0.9-2.6C23.9 16.2 23.7 14.7 23.5 13.4zM21.9 19.3c-0.3 0.4-0.8 0.6-1.3 0.6 -2.1 0.1-5.2 0.2-8.6 0.2S5.5 20 3.4 19.9c-0.5 0-1-0.2-1.3-0.6 -0.3-0.4-0.5-0.8-0.5-1.3 0.1-1.6 0.2-3.1 0.4-4.3 0.3-1.8 0.7-3.7 1-4.9C3.2 8 3.9 7.4 4.7 7.4c1.5-0.2 4-0.3 7.3-0.3s5.8 0.1 7.3 0.2c0.8 0 1.5 0.6 1.7 1.4 0.3 1.2 0.7 3.1 1 4.9 0.2 1.2 0.3 2.7 0.4 4.3C22.4 18.5 22.2 18.9 21.9 19.3zM18 12c-0.9 0-1.6 0.7-1.6 1.6h3.3C19.6 12.7 18.9 12 18 12z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bitrise" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bitrise extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2K, create_fragment$2K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bitwarden.svelte generated by Svelte v3.23.2 */

        function create_fragment$2L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.75 0A3.75 3.75 0 000 3.75v16.5A3.75 3.75 0 003.75 24h16.5A3.75 3.75 0 0024 20.25V3.75A3.75 3.75 0 0020.25 0zm1.36 2.92h13.8c.208 0 .388.076.54.228a.737.737 0 01.227.539v9.2c0 .687-.134 1.367-.401 2.042a7.618 7.618 0 01-.995 1.797 11.097 11.097 0 01-1.413 1.528c-.547.495-1.052.906-1.515 1.234-.464.327-.947.636-1.45.928-.503.291-.86.489-1.072.593-.212.104-.381.184-.51.24a.687.687 0 01-.31.071.688.688 0 01-.312-.072 13.784 13.784 0 01-.51-.24 20.61 20.61 0 01-1.071-.592 19.133 19.133 0 01-1.45-.928 16.457 16.457 0 01-1.515-1.234 11.11 11.11 0 01-1.414-1.528 7.617 7.617 0 01-.994-1.797 5.502 5.502 0 01-.401-2.042v-9.2c0-.208.076-.387.227-.54a.737.737 0 01.54-.227zm6.9 2.3v13.62c.95-.502 1.801-1.05 2.552-1.64 1.877-1.47 2.815-2.907 2.815-4.313V5.22Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bitwarden" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bitwarden extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2L, create_fragment$2L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Blackberry.svelte generated by Svelte v3.23.2 */

        function create_fragment$2M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.05 3.54L1.17 7.7H4.45C6.97 7.7 7.73 6.47 7.73 5.36C7.73 4.54 7.26 3.54 5.21 3.54H2.05M10.54 3.54L9.66 7.7H12.94C15.5 7.7 16.22 6.47 16.22 5.36C16.22 4.54 15.75 3.54 13.7 3.54H10.54M18.32 7.23L17.39 11.39H20.67C23.24 11.39 24 10.22 24 9.05C24 8.23 23.53 7.23 21.5 7.23H18.32M.88 9.8L0 13.96H3.28C5.85 13.96 6.56 12.73 6.56 11.62C6.56 10.8 6.09 9.8 4.04 9.8H.88M9.43 9.8L8.5 13.96H11.77C14.34 13.96 15.11 12.73 15.11 11.62C15.11 10.8 14.64 9.8 12.59 9.8H9.42M17.09 13.73L16.22 17.88H19.5C22 17.88 22.77 16.71 22.77 15.54C22.77 14.72 22.3 13.73 20.26 13.73H17.09M8.2 16.3L7.32 20.46H10.6C13.11 20.46 13.87 19.23 13.87 18.12C13.87 17.3 13.41 16.3 11.36 16.3H8.2Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Blackberry" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Blackberry extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2M, create_fragment$2M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Blender.svelte generated by Svelte v3.23.2 */

        function create_fragment$2N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.51 13.214c.046-.8.438-1.506 1.03-2.006a3.424 3.424 0 0 1 2.212-.79c.85 0 1.631.3 2.211.79.592.5.983 1.206 1.028 2.005.045.823-.285 1.586-.865 2.153a3.389 3.389 0 0 1-2.374.938 3.393 3.393 0 0 1-2.376-.938c-.58-.567-.91-1.33-.865-2.152M7.35 14.831c.006.314.106.922.256 1.398a7.372 7.372 0 0 0 1.593 2.757 8.227 8.227 0 0 0 2.787 2.001 8.947 8.947 0 0 0 3.66.76 8.964 8.964 0 0 0 3.657-.772 8.285 8.285 0 0 0 2.785-2.01 7.428 7.428 0 0 0 1.592-2.762 6.964 6.964 0 0 0 .25-3.074 7.123 7.123 0 0 0-1.016-2.779 7.764 7.764 0 0 0-1.852-2.043h.002L13.566 2.55l-.02-.015c-.492-.378-1.319-.376-1.86.002-.547.382-.609 1.015-.123 1.415l-.001.001 3.126 2.543-9.53.01h-.013c-.788.001-1.545.518-1.695 1.172-.154.665.38 1.217 1.2 1.22V8.9l4.83-.01-8.62 6.617-.034.025c-.813.622-1.075 1.658-.563 2.313.52.667 1.625.668 2.447.004L7.414 14s-.069.52-.063.831zm12.09 1.741c-.97.988-2.326 1.548-3.795 1.55-1.47.004-2.827-.552-3.797-1.538a4.51 4.51 0 0 1-1.036-1.622 4.282 4.282 0 0 1 .282-3.519 4.702 4.702 0 0 1 1.153-1.371c.942-.768 2.141-1.183 3.396-1.185 1.256-.002 2.455.41 3.398 1.175.48.391.87.854 1.152 1.367a4.28 4.28 0 0 1 .522 1.706 4.236 4.236 0 0 1-.239 1.811 4.54 4.54 0 0 1-1.035 1.626");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Blender" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Blender extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2N, create_fragment$2N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Blogger.svelte generated by Svelte v3.23.2 */

        function create_fragment$2O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.976 24H2.026C.9 24 0 23.1 0 21.976V2.026C0 .9.9 0 2.025 0H22.05C23.1 0 24 .9 24 2.025v19.95C24 23.1 23.1 24 21.976 24zM12 3.975H9c-2.775 0-5.025 2.25-5.025 5.025v6c0 2.774 2.25 5.024 5.025 5.024h6c2.774 0 5.024-2.25 5.024-5.024v-3.975c0-.6-.45-1.05-1.05-1.05H18c-.524 0-.976-.45-.976-.976 0-2.776-2.25-5.026-5.024-5.026zm3.074 12H9c-.525 0-.975-.45-.975-.975s.45-.976.975-.976h6.074c.526 0 .977.45.977.976s-.45.976-.975.976zm-2.55-7.95c.527 0 .976.45.976.975s-.45.975-.975.975h-3.6c-.525 0-.976-.45-.976-.975s.45-.975.975-.975h3.6z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Blogger" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Blogger extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2O, create_fragment$2O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bloglovin.svelte generated by Svelte v3.23.2 */

        function create_fragment$2P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.526 11.695c1.84-.382 3.367-2.044 3.367-4.478 0-2.604-1.9-4.97-5.615-4.97H0v19.506h10.6c3.75 0 5.683-2.341 5.683-5.292-.009-2.426-1.646-4.444-3.757-4.766zm-8.37-5.793h5.207c1.407 0 2.28.849 2.28 2.044 0 1.255-.881 2.044-2.28 2.044H4.155zM9.54 18.098H4.155v-4.444h5.386c1.61 0 2.484.992 2.484 2.222.009 1.399-.932 2.222-2.484 2.222zM21.396 2.28c-1.255 0-2.315 1.052-2.315 2.307s.882 2.103 1.993 2.103c.238 0 .467-.025.56-.085-.238 1.052-1.315 2.282-2.256 2.782l1.611 1.314C22.796 9.422 24 7.462 24 5.266c0-1.9-1.23-2.985-2.604-2.985Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bloglovin" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bloglovin extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2P, create_fragment$2P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bluetooth.svelte generated by Svelte v3.23.2 */

        function create_fragment$2Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C6.76 0 3.1484 2.4895 3.1484 12S6.76 24 12 24c5.24 0 8.8516-2.4895 8.8516-12S17.24 0 12 0zm-.7773 1.6816l6.2148 6.2149L13.334 12l4.1035 4.1035-6.2148 6.2149V14.125l-3.418 3.42-1.2422-1.2442L10.8515 12l-4.289-4.3008 1.2422-1.2441 3.418 3.4199V1.6816zm1.748 4.2442v3.9687l1.9844-1.9843-1.9844-1.9844zm0 8.1816v3.9668l1.9844-1.9844-1.9844-1.9824Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bluetooth" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bluetooth extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2Q, create_fragment$2Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bmcsoftware.svelte generated by Svelte v3.23.2 */

        function create_fragment$2R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.389 23.97c-.948 0-1.946-.747-1.946-2.194v-3.392c0-1.346.848-2.892 2.045-3.54l4.739-2.794-4.739-2.793c-1.147-.749-2.045-2.245-2.045-3.592V2.224C4.443.777 5.441.029 6.44.029c.399 0 .847.1 1.246.35L18.36 6.712c.748.449 1.147 1.147 1.147 1.845 0 .749-.45 1.447-1.147 1.846L15.816 11.9l2.544 1.497c.748.449 1.197 1.147 1.197 1.845 0 .748-.45 1.447-1.197 1.846L7.685 23.622c-.448.25-.847.349-1.296.349zm7.132-10.573l-5.836 3.441c-.448.25-.897 1.048-.897 1.546v3.043l10.125-5.985zM6.788 2.623v3.042c0 .5.449 1.297.897 1.547l5.836 3.441 3.442-2.045z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "BMC Software" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bmcsoftware extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2R, create_fragment$2R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bmw.svelte generated by Svelte v3.23.2 */

        function create_fragment$2S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm0 .78C18.196.78 23.219 5.803 23.219 12c0 6.196-5.022 11.219-11.219 11.219C5.803 23.219.781 18.196.781 12S5.804.78 12 .78zm-.678.63c-.33.014-.66.042-.992.078l-.107 2.944a9.95 9.95 0 0 1 .71-.094l.07-1.988-.013-.137.043.13.664 1.489h.606l.664-1.488.04-.131-.01.137.07 1.988c.232.022.473.054.71.094l-.109-2.944a14.746 14.746 0 0 0-.992-.078l-.653 1.625-.023.12-.023-.12-.655-1.625zm6.696 1.824l-1.543 2.428c.195.15.452.371.617.522l1.453-.754.092-.069-.069.094-.752 1.453c.163.175.398.458.53.63l2.43-1.544a16.135 16.135 0 0 0-.46-.568L18.777 6.44l-.105.092.078-.115.68-1.356-.48-.48-1.356.68-.115.078.091-.106 1.018-1.539c-.18-.152-.351-.291-.57-.46zM5.5 3.785c-.36.037-.638.283-1.393 1.125a18.97 18.97 0 0 0-.757.914l2.074 1.967c.687-.76.966-1.042 1.508-1.613.383-.405.6-.87.216-1.317-.208-.242-.558-.295-.85-.175l-.028.01.01-.026a.7.7 0 0 0-.243-.734.724.724 0 0 0-.537-.15zm.006.615c.136-.037.277.06.308.2.032.14-.056.272-.154.382-.22.25-1.031 1.098-1.031 1.098l-.402-.383c.417-.51.861-.974 1.062-1.158a.55.55 0 0 1 .217-.139zM12 4.883a7.114 7.114 0 0 0-7.08 6.388v.002a7.122 7.122 0 0 0 8.516 7.697 7.112 7.112 0 0 0 5.68-6.97A7.122 7.122 0 0 0 12 4.885v-.002zm-5.537.242c.047 0 .096.013.14.043.088.059.128.16.106.26-.026.119-.125.231-.205.318l-1.045 1.12-.42-.4s.787-.832 1.045-1.099c.102-.106.168-.17.238-.205a.331.331 0 0 1 .14-.037zM12 5.818A6.175 6.175 0 0 1 18.182 12H12v6.182A6.175 6.175 0 0 1 5.818 12H12V5.818Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "BMW" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bmw extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2S, create_fragment$2S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Boeing.svelte generated by Svelte v3.23.2 */

        function create_fragment$2T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.905 17.353a6.051 6.051 0 0 1-3.759-1.301C4.35 13.337 6.8 9.694 10.143 6.136a6.07 6.07 0 0 1 2.262 7.728c-1.06-.49-2.05-1.105-2.888-1.88l1.831 3.438a6.058 6.058 0 0 1-4.443 1.931M.83 11.278a6.075 6.075 0 0 1 6.076-6.077c.9 0 1.752.196 2.522.546-3.293 2.91-5.843 6.293-7.352 9.217A6.051 6.051 0 0 1 .83 11.278m12.34 2.912a6.862 6.862 0 0 0 .642-2.912c0-2.4-1.225-4.515-3.085-5.753a49.606 49.606 0 0 1 3.583-3.342 31.172 31.172 0 0 0-4.2 2.975 6.907 6.907 0 0 0-8.436 10.625C.35 18.646.12 20.944 1.286 21.72c1.248.832 3.962-.677 5.59-3.134 0 0-2.518 2.273-3.902 1.751-.851-.322-.854-1.624-.152-3.492a6.871 6.871 0 0 0 4.084 1.338c1.893 0 3.606-.76 4.853-1.992l.245.462C15.013 16.408 24 16.17 24 16.17c0-.431-5.95-.04-10.832-1.98");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Boeing" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Boeing extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2T, create_fragment$2T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Boost.svelte generated by Svelte v3.23.2 */

        function create_fragment$2U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.818 18.157c.058-.045.112-.099.163-.15a2.28 2.28 0 0 0 0-3.169l-7.802-8c-.054.05-.109.099-.16.152a2.278 2.278 0 0 0 0 3.17l7.799 7.997zm5.727-11.399a2.957 2.957 0 0 1 1.573.873c1.176 1.24 1.176 3.25 0 4.49l-5.557 5.847a2.145 2.145 0 0 1-1.298.637L19.567 22l-17.11-3.758a2.998 2.998 0 0 1-1.572-.878c-1.18-1.237-1.18-3.248 0-4.494l5.552-5.838a2.129 2.129 0 0 1 1.303-.643L4.434 3l17.11 3.758z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Boost" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Boost extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2U, create_fragment$2U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bootstrap.svelte generated by Svelte v3.23.2 */

        function create_fragment$2V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20 0H4C1.793.006.006 1.793 0 4v16c0 2.2 1.8 4 4 4h16c2.2 0 4-1.8 4-4V4c0-2.2-1.8-4-4-4zm-2.187 16.855c-.2.482-.517.907-.923 1.234-.42.34-.952.62-1.607.82-.654.203-1.432.305-2.333.305H6.518v-14h6.802c1.258 0 2.266.283 3.02.86.76.58 1.138 1.444 1.138 2.61 0 .705-.172 1.31-.518 1.81-.344.497-.84.886-1.48 1.156v.046c.854.18 1.515.585 1.95 1.215s.658 1.426.658 2.387c0 .538-.104 1.05-.3 1.528l.025.027zm-2.776-3.45c-.41-.375-.986-.558-1.73-.558H8.985v4.368h4.334c.74 0 1.32-.192 1.73-.58.41-.385.62-.934.62-1.64-.007-.69-.21-1.224-.62-1.59h-.017zm-.6-2.823c.396-.336.59-.817.59-1.444 0-.704-.175-1.204-.53-1.49-.352-.285-.86-.433-1.528-.433h-4v3.863h4c.583 0 1.08-.17 1.464-.496z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bootstrap" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bootstrap extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2V, create_fragment$2V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bosch.svelte generated by Svelte v3.23.2 */

        function create_fragment$2W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12C23.996 5.374 18.626.004 12 0zm0 22.88C5.991 22.88 1.12 18.009 1.12 12S5.991 1.12 12 1.12 22.88 5.991 22.88 12c-.006 6.006-4.874 10.874-10.88 10.88zm4.954-18.374h-.821v4.108h-8.24V4.506h-.847a8.978 8.978 0 0 0 0 14.988h.846v-4.108h8.24v4.108h.822a8.978 8.978 0 0 0 0-14.988zM6.747 17.876a7.86 7.86 0 0 1 0-11.752v11.752zm9.386-3.635h-8.24V9.734h8.24v4.507zm1.12 3.61V6.124a7.882 7.882 0 0 1 0 11.727z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bosch" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bosch extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2W, create_fragment$2W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bose.svelte generated by Svelte v3.23.2 */

        function create_fragment$2X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.051 10.555a.686.686 0 00-.588.34c-.11.194-.426.742-.54.936a.27.27 0 00.236.409h1.873l-.336.582a.271.271 0 01-.24.142h-.29c-.097 0-.137-.105-.103-.168.035-.063.112-.194.112-.194h-1.698l-.246.426c-.115.2.038.416.233.416h3.173a.69.69 0 00.598-.349c.121-.21.405-.706.528-.916a.27.27 0 00-.228-.42h-1.873l.346-.6a.274.274 0 01.231-.125h.292c.096 0 .136.104.106.159a14.05 14.05 0 01-.118.204h1.696l.255-.44a.273.273 0 00-.24-.402h-3.179m-2.94.65a1307.162 1307.217 0 00-.936 1.622.275.275 0 01-.236.137h-.295c-.095 0-.138-.104-.102-.168l.94-1.629a.275.275 0 01.236-.133h.295a.113.113 0 01.098.171m1.597-.65h-3.17a.695.695 0 00-.593.337l-1.238 2.145c-.11.19.04.407.236.407h3.176c.256 0 .48-.145.593-.338l1.236-2.143a.272.272 0 00-.24-.408m-5.723.65l-.243.42a.266.266 0 01-.233.134h-.9l.419-.725h.858c.089 0 .14.096.099.17M6.29 12.41l-.243.42a.266.266 0 01-.233.134h-.9l.42-.724h.857c.089 0 .14.095.099.17m1.902-1.855H4.61l-1.392 2.41H0v.48l6.599-.001c.24 0 .468-.125.595-.344l.41-.713c.086-.148-.005-.338-.163-.387a.698.698 0 00.583-.337l.402-.698a.272.272 0 00-.234-.41m9.986 0l-1.667 2.889h4.042l.277-.48h-2.346l.418-.724h2.346l.277-.48H19.18l.418-.726H24v-.479h-5.82z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bose" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bose extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2X, create_fragment$2X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bower.svelte generated by Svelte v3.23.2 */

        function create_fragment$2Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.54157 11.3053c-1.2341-1.18676-7.40717-1.92715-9.35444-2.14222.0943-.22248.1748-.45344.24155-.69076.26593-.11654.55198-.2246.84863-.31466.03603.107.2066.5149.303.70878 3.9168.10806 4.1181-2.91032 4.27702-3.73775.15574-.80837.14832-1.59025 1.4917-3.0184-2.0013-.58375-4.87983.90372-5.84393 3.11798-.36234-.1356-.72574-.23626-1.0849-.2977C14.16277 3.8923 12.82257 1 9.30624 1c-2.27782 0-4.5747.9408-6.30162 2.58083-.9302.88358-1.6612 1.93244-2.17293 3.11903C.2797 7.98073 0 9.39086 0 10.8921c0 5.22735 3.56824 9.80736 5.58437 9.80736.8804 0 1.63792-.65898 1.8159-1.25015.1494.40578.606 1.66547.75645 1.98542.2225.47464 1.2491.88465 1.6983.392.5774.32102 1.63792.51384 2.21532-.3422 1.11243.2352 2.09666-.42802 2.11785-1.2205.5456-.0286.81365-.79564.695-1.40588-.08794-.4492-1.02662-2.06276-1.3932-2.61897.72468.5901 2.56177.75645 2.78425 0 1.16858.91748 2.99084.4365 3.13492-.31042 1.42073.3687 3.0491-.4418 2.78213-1.42285 2.28206-.15785 1.99026-2.58515 1.35027-3.2006zM17.5991 7.2815c-.6007-.23626-1.363-.38565-1.89696-.38565-.7575 0-1.21943.42908-1.93244.42908-.14938 0-.50642.00106-.79353-.1017.1886.1981.42273.30512.87723.30512.27122 0 .80942-.1388 1.24486-.2691.00635.09217.0159.18222.0286.27334-.81578.19493-1.6718.71406-1.91973.8486-.5509-1.2173-.07734-2.36787.36022-2.89865 1.9621.00423 3.54757 1.35186 4.03174 1.79895zm.84915-.09112l-.29983-.28075c-.3083-.28923-.6293-.54986-.95986-.78188.4916-.9747 1.10925-2.03945 1.889-2.69842-.85815.34644-1.70678 1.38046-2.2079 2.48547-.25532-.1621-.5149-.30724-.77658-.43332.69924-1.49276 2.32338-2.73868 4.11386-2.83615-1.1993 1.08806-.74903 3.25782-1.75975 4.544l.00105.00105zM15.9845 8.20693c-.13244-.2871-.2654-.76228-.2495-1.04197.22247-.0053.6505.0784.7183.0943-.0265.13136-.04026.41953-.04026.4566.04238-.0731.15997-.32418.20765-.42377.428.08157.99058.21824 1.32007.37186-.38776.2511-1.04515.5239-1.95628.54297zm-7.07214-1.9516c-.48483-.1739-.48483-.61095 0-.78484.48484-.1739 1.09417.04464 1.09417.3924 0 .34777-.60933.5663-1.09417.39242zm1.61647.1622c0-.96003-1.04643-1.5633-1.87905-1.0833-.83262.48002-.83262 1.68657 0 2.16658.83262.48003 1.87905-.12325 1.87905-1.08328zm2.7832-1.5749c-1.56482 1.586-.94716 3.5926-.37718 4.49844-.81048 1.3487-2.4039 2.2704-4.25476 2.68995 2.07758 0 3.3002-.53502 4.01108-1.0584.45345-.33478.69924-.66427.8253-.84755 3.0809.19917 7.95862 1.19188 8.43432 1.5129.1907.12925.38776.41424.41742.68758-2.3149-.3242-6.4881-.66534-7.58038-.72255.77552.1102 6.433 1.1813 7.41405 1.43238-.29878.4863-.97895.8306-2.00344.59118.5541.75433-.52125 1.6591-2.01932 1.16116.3295.74056-1.0033 1.40695-2.51938.63567.01907.74055-1.88052.82636-2.63062.0074.01484.09748.10383.28394.14197.36658-.24155 2.1634-2.014 3.50573-3.82885 3.50573-4.44335 0-8.3146-3.60955-8.3146-8.411 0-5.07582 3.75154-8.86443 8.27858-8.86443 2.59354 0 3.7653 2.04157 4.0058 2.81497z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bower" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bower extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2Y, create_fragment$2Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Box.svelte generated by Svelte v3.23.2 */

        function create_fragment$2Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.959 5.523c-.54 0-.959.42-.959.899v7.549a4.59 4.59 0 004.613 4.494 4.717 4.717 0 004.135-2.457c.779 1.438 2.337 2.457 4.074 2.457 2.577 0 4.674-2.037 4.674-4.613.06-2.457-2.037-4.495-4.613-4.495-1.738 0-3.295.959-4.074 2.397-.78-1.438-2.338-2.397-4.135-2.397-1.079 0-2.038.36-2.817.899V6.422a.92.92 0 00-.898-.899zM17.602 9.26a.95.95 0 00-.704.158c-.36.3-.479.899-.18 1.318l2.397 3.116-2.396 3.115c-.3.42-.24.96.18 1.26.419.3 1.016.298 1.316-.122l2.039-2.636 2.096 2.697c.3.36.899.419 1.318.12.36-.3.42-.84.121-1.259l-2.338-3.115 2.338-3.057c.3-.419.298-1.018-.121-1.318-.48-.3-1.019-.24-1.318.18l-2.096 2.576-2.04-2.695c-.149-.18-.373-.3-.612-.338zM4.613 11.154c1.558 0 2.817 1.26 2.817 2.758 0 1.558-1.259 2.756-2.817 2.756-1.558 0-2.816-1.198-2.816-2.756 0-1.498 1.258-2.758 2.816-2.758zm8.27 0c1.558 0 2.816 1.26 2.816 2.758-.06 1.558-1.318 2.756-2.816 2.756-1.558 0-2.817-1.198-2.817-2.756 0-1.498 1.259-2.758 2.817-2.758Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Box" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Box extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2Z, create_fragment$2Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/BrandDotAi.svelte generated by Svelte v3.23.2 */

        function create_fragment$2_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.958 11.26C23.58 5.004 18.404.045 12.062.006h-.142C9.68.022 7.584.646 5.795 1.73c-1.652.998-3.043 2.384-4.048 4.033C.76 7.378.15 9.25.023 11.253.008 11.5 0 11.747 0 12c0 .25.01.5.025.746.123 2.003.734 3.873 1.723 5.49 1 1.648 2.384 3.03 4.024 4.033 1.798 1.074 3.897 1.705 6.13 1.72h.18c6.343-.043 11.498-4.99 11.89-11.24.014-.24.03-.496.03-.735s0-.495-.016-.734l-.027-.022zm-11.956 4.38v3.83c.096 2.34-.57 2.73-1.37 2.766-.034 0-.066.003-.1.004-4.556-.645-8.158-4.257-8.784-8.823-.066-.464-.1-.938-.1-1.42 0-.48.034-.953.1-1.418.625-4.56 4.218-8.17 8.77-8.82l.115.01c.8.043 1.465.43 1.37 2.764v3.828c-.01 1.573.895 3.072 1.857 3.64-.962.56-1.868 1.875-1.858 3.634z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Brand.ai" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class BrandDotAi extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2_, create_fragment$2_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Brandfolder.svelte generated by Svelte v3.23.2 */

        function create_fragment$2$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0,23.291h19.601v-2.978H2.98V3.689h16.626v10.911h-1.422l2.908,2.909L24,14.599 h-1.417V0.709H0V23.291z M16.148,13.356c-0.191-0.406-0.432-0.739-0.72-0.997c-0.287-0.258-0.599-0.454-0.933-0.583 c-0.337-0.132-0.641-0.217-0.916-0.254c0.251-0.034,0.496-0.134,0.735-0.296c0.241-0.161,0.455-0.364,0.647-0.609 c0.192-0.247,0.345-0.535,0.458-0.863c0.115-0.33,0.171-0.686,0.171-1.069c0-0.648-0.126-1.186-0.377-1.617 c-0.252-0.432-0.597-0.775-1.033-1.033c-0.436-0.258-0.948-0.44-1.536-0.547c-0.586-0.108-1.21-0.162-1.868-0.162 c-0.754,0-1.382,0.018-1.887,0.054C8.387,5.417,7.944,5.463,7.56,5.525v12.933c0.684,0.083,1.293,0.141,1.834,0.171 c0.539,0.03,1.082,0.044,1.634,0.044c0.718,0,1.404-0.054,2.057-0.162c0.652-0.107,1.227-0.304,1.723-0.592 c0.499-0.288,0.893-0.68,1.187-1.177c0.294-0.498,0.441-1.135,0.441-1.914C16.436,14.253,16.34,13.763,16.148,13.356z M10.165,7.321c0.91-0.111,1.873-0.054,2.301,0.304c0.38,0.317,0.607,0.599,0.607,1.42c0,0.751-0.357,1.195-0.608,1.356 c-0.251,0.161-0.59,0.368-1.403,0.368s-0.897,0-0.897,0V7.321z M13.194,16.001c-0.449,0.39-1.114,0.552-1.816,0.552 c-0.79,0-1.213-0.072-1.213-0.072v-3.737h1.132c0.711,0,1.438,0.126,1.832,0.464c0.509,0.437,0.611,0.895,0.611,1.505 C13.741,15.322,13.528,15.711,13.194,16.001z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$2$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Brandfolder" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Brandfolder extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$2$, create_fragment$2$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Brave.svelte generated by Svelte v3.23.2 */

        function create_fragment$30(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.68 0l2.096 2.38s1.84-.512 2.709.358c.868.87 1.584 1.638 1.584 1.638l-.562 1.381.715 2.047s-2.104 7.98-2.35 8.955c-.486 1.919-.818 2.66-2.198 3.633-1.38.972-3.884 2.66-4.293 2.916-.409.256-.92.692-1.38.692-.46 0-.97-.436-1.38-.692a185.796 185.796 0 01-4.293-2.916c-1.38-.973-1.712-1.714-2.197-3.633-.247-.975-2.351-8.955-2.351-8.955l.715-2.047-.562-1.381s.716-.768 1.585-1.638c.868-.87 2.708-.358 2.708-.358L8.321 0h7.36zm-3.679 14.936c-.14 0-1.038.317-1.758.69-.72.373-1.242.637-1.409.742-.167.104-.065.301.087.409.152.107 2.194 1.69 2.393 1.866.198.175.489.464.687.464.198 0 .49-.29.688-.464.198-.175 2.24-1.759 2.392-1.866.152-.108.254-.305.087-.41-.167-.104-.689-.368-1.41-.741-.72-.373-1.617-.69-1.757-.69zm0-11.278s-.409.001-1.022.206-1.278.46-1.584.46c-.307 0-2.581-.434-2.581-.434S4.119 7.152 4.119 7.849c0 .697.339.881.68 1.243l2.02 2.149c.192.203.59.511.356 1.066-.235.555-.58 1.26-.196 1.977.384.716 1.042 1.194 1.464 1.115.421-.08 1.412-.598 1.776-.834.364-.237 1.518-1.19 1.518-1.554 0-.365-1.193-1.02-1.413-1.168-.22-.15-1.226-.725-1.247-.95-.02-.227-.012-.293.284-.851.297-.559.831-1.304.742-1.8-.089-.495-.95-.753-1.565-.986-.615-.232-1.799-.671-1.947-.74-.148-.068-.11-.133.339-.175.448-.043 1.719-.212 2.292-.052.573.16 1.552.403 1.632.532.079.13.149.134.067.579-.081.445-.5 2.581-.541 2.96-.04.38-.12.63.288.724.409.094 1.097.256 1.333.256s.924-.162 1.333-.256c.408-.093.329-.344.288-.723-.04-.38-.46-2.516-.541-2.961-.082-.445-.012-.45.067-.579.08-.129 1.059-.372 1.632-.532.573-.16 1.845.009 2.292.052.449.042.487.107.339.175-.148.069-1.332.508-1.947.74-.615.233-1.476.49-1.565.986-.09.496.445 1.241.742 1.8.297.558.304.624.284.85-.02.226-1.026.802-1.247.95-.22.15-1.413.804-1.413 1.169 0 .364 1.154 1.317 1.518 1.554.364.236 1.355.755 1.776.834.422.079 1.08-.4 1.464-1.115.384-.716.039-1.422-.195-1.977-.235-.555.163-.863.355-1.066l2.02-2.149c.341-.362.68-.546.68-1.243 0-.697-2.695-3.96-2.695-3.96s-2.274.436-2.58.436c-.307 0-.972-.256-1.585-.461-.613-.205-1.022-.206-1.022-.206z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$30($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Brave" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Brave extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$30, create_fragment$30, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Breaker.svelte generated by Svelte v3.23.2 */

        function create_fragment$31(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.556,12.924c0.21,0,0.386,0.017,0.585,0.056c1.043,0.206,1.898,0.964,2.246,1.956 c0.101,0.319,0.234,0.797,0.319,1.125l0.111,0.433l0.446-0.009c3.552-0.075,6.456-2.965,6.456-6.546C23.72,4.513,19.195,0,12.281,0 C9.429,0.009,6.725,1.046,4.678,2.715c-2.683,2.2-4.397,5.543-4.397,9.286c0.002,0.96,0.118,1.926,0.334,2.818 c0.788,3.268,2.91,6.015,5.759,7.628c1.723,0.971,3.784,1.547,5.909,1.553c0.521,0,1.052-0.036,1.554-0.099 c3.126-0.405,5.873-2.012,7.765-4.339l0.124-0.152l-0.24-0.868l-0.463,0.122c-1.436,0.381-2.908,0.578-4.463,0.576 c-1.243,0-2.428-0.128-3.598-0.375c-1.054-0.212-1.911-0.979-2.248-1.98c-0.109-0.315-0.158-0.608-0.156-0.958 c-0.011-0.782,0.257-1.425,0.741-1.975C11.848,13.321,12.656,12.924,13.556,12.924z M12.281,1.125 c6.398,0,10.313,4.11,10.313,8.813c0,2.811-2.168,5.119-4.919,5.397c-0.073-0.261-0.152-0.536-0.219-0.746 C15.715,9.132,11.567,4.907,6.23,2.957C7.965,1.78,10.01,1.118,12.281,1.125z M1.405,12.001c0-3.283,1.455-6.227,3.756-8.223 c4.377,1.403,7.964,4.397,10.058,8.371c-0.272-0.12-0.559-0.212-0.859-0.272c-1.219-0.253-2.511-0.394-3.807-0.394 c-3.24,0.006-6.345,0.859-9.001,2.325C1.454,13.222,1.405,12.625,1.405,12.001z M12.729,19.967 c1.224,0.257,2.526,0.398,3.829,0.398c0.996,0,1.986-0.083,2.948-0.234c-1.519,1.352-3.418,2.282-5.519,2.614 c-0.799-0.938-1.493-1.95-2.072-3.032C12.174,19.822,12.446,19.908,12.729,19.967z M12.645,22.871 c-0.12,0.004-0.242,0.006-0.364,0.006c-1.825,0.006-3.486-0.424-4.994-1.209c0.433-1.907,1.172-3.675,2.171-5.277 c0.034,0.294,0.099,0.587,0.186,0.848C10.314,19.28,11.347,21.202,12.645,22.871z M10.453,13.207 c-1.954,2.19-3.43,4.913-4.176,7.864c-2.143-1.421-3.752-3.582-4.467-6.117c2.586-1.508,5.532-2.351,8.744-2.346 c0.18,0,0.358,0.002,0.536,0.008C10.858,12.79,10.644,12.987,10.453,13.207z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$31($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Breaker" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Breaker extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$31, create_fragment$31, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Broadcom.svelte generated by Svelte v3.23.2 */

        function create_fragment$32(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.37 0 0 5.37 0 12A12 12 0 0 0 .574 15.62C.848 15.5 1.14 15.36 1.43 15.24C2.8 14.7 4.06 14.88 5.31 15.64C5.31 15.64 5.77 15.92 5.91 16C6.5 16.38 7.05 16.73 7.58 16.73C8.09 16.73 8.59 16.59 8.8 15.61C9.13 14.08 9.94 10.31 10.29 8.45C10.5 7.35 10.61 6.76 10.73 6.36C10.93 5.65 11.31 5.27 11.84 5.21C11.84 5.21 11.93 5.2 12 5.2C12.07 5.2 12.15 5.21 12.15 5.21C12.69 5.27 13.07 5.65 13.28 6.36C13.39 6.76 13.5 7.35 13.71 8.45C14.06 10.31 14.87 14.08 15.2 15.61C15.41 16.59 15.91 16.73 16.42 16.73C16.95 16.73 17.5 16.38 18.09 16C18.23 15.92 18.69 15.64 18.69 15.64C19.95 14.88 21.2 14.7 22.57 15.24C22.87 15.36 23.16 15.5 23.44 15.63A12 12 0 0 0 24 12C24 5.37 18.63 0 12 0M12 9.79C11.6 11.8 11 14.71 10.7 16C10.34 17.7 9.2 18.66 7.58 18.66C6.5 18.66 5.64 18.12 4.88 17.65C4.5 17.4 4.08 17.13 3.63 17A2.32 2.32 0 0 0 2.21 16.97A6.11 6.11 0 0 0 1.27 17.36A12 12 0 0 0 12 24A12 12 0 0 0 22.73 17.35A6.08 6.08 0 0 0 21.79 16.96A2.32 2.32 0 0 0 20.38 16.97C19.92 17.13 19.5 17.4 19.12 17.65C18.36 18.12 17.5 18.66 16.42 18.66C14.8 18.66 13.67 17.7 13.3 16C13 14.71 12 9.79 12 9.79Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$32($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Broadcom" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Broadcom extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$32, create_fragment$32, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bt.svelte generated by Svelte v3.23.2 */

        function create_fragment$33(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.589 7.91h5.977v1.753H16.56v6.41h-1.97v-6.41h-2zM12 22.523C6.193 22.523 1.477 17.807 1.477 12 1.477 6.193 6.193 1.477 12 1.477c5.807 0 10.523 4.716 10.523 10.523 0 5.807-4.716 10.523-10.523 10.523M12 24c6.626 0 12-5.374 12-12S18.626 0 12 0C5.379 0 0 5.374 0 12s5.379 12 12 12M9.97 13.574c0-.516-.321-.865-.873-.865h-1.32v1.702h1.32c.552 0 .874-.345.874-.837m-.24-3.276c0-.433-.275-.732-.745-.732h-1.21v1.486h1.21c.47 0 .746-.299.746-.754m2.231 3.372c0 1.546-1.09 2.402-2.65 2.402H5.834V7.91h3.249c1.573 0 2.64.805 2.64 2.277 0 .672-.298 1.27-.781 1.634.552.326 1.021.947 1.021 1.85Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$33($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "BT" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bt extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$33, create_fragment$33, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Buddy.svelte generated by Svelte v3.23.2 */

        function create_fragment$34(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.7 5.307L12.947.253a1.892 1.892 0 0 0-1.891 0L2.3 5.306a1.892 1.892 0 0 0-.945 1.638v10.109c0 .675.36 1.3.945 1.637l8.756 5.056a1.892 1.892 0 0 0 1.89 0l8.756-5.055c.585-.338.945-.962.945-1.638V6.945c0-.675-.36-1.3-.945-1.638zm-7.45 7.752l-3.804 3.804-1.351-1.351 3.804-3.805-3.804-3.805 1.351-1.35 3.804 3.804 1.351 1.351-1.35 1.352z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$34($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Buddy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Buddy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$34, create_fragment$34, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Buefy.svelte generated by Svelte v3.23.2 */

        function create_fragment$35(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.358.004c-.008 0-.175.02-.375.031-.64.05-1.275.142-1.902.278-.402.09-1.496.402-1.54.433-.738.259-1.472.606-2.17.957-.606.332-1.544.938-1.689 1.094a6.04 6.04 0 01-.304.242c-.387.309-1.172 1.102-1.528 1.543-1.203 1.512-1.87 3.145-2.074 5.063-.066.66 0 2.507.086 2.507.02 0 .32-.132.684-.304.191-.086.418-.192.511-.235.094-.043.602-.273 1.122-.515.527-.243 1.046-.48 1.16-.532l.488-.226c.156-.07.297-.13.316-.13.02 0-.007-.081-.058-.183a4.262 4.262 0 01-.48-1.996c0-1.152.402-2.246 1.23-3.344.388-.49.831-.932 1.32-1.32.07-.054.172-.129.227-.176.34-.261 1.437-.851 1.59-.851.035 0 .046.023.035.066-.012.04-.09.422-.18.844-.082.434-.16.816-.172.86-.008.038-.043.21-.074.378-.035.168-.066.34-.074.38-.012.042-.094.464-.192.948-.093.48-.19.95-.21 1.047-.02.094-.044.203-.047.246l-.157.801c-.01.043-.113.555-.23 1.14-.117.587-.219 1.098-.23 1.141l-.153.766a8.49 8.49 0 01-.074.375c-.043.198-.081.398-.114.598a1.384 1.384 0 00-.035.148c-.01.05-.062.3-.113.563-.055.261-.105.539-.117.609-.012.07-.047.234-.074.363-.027.113-.05.226-.07.34-.178.9-.36 1.8-.544 2.7l-.07.378c-.012.043-.094.469-.195.95l-.207 1.046a3.51 3.51 0 00-.047.25l-.156.797c-.012.043-.118.559-.235 1.14-.113.587-.215 1.099-.222 1.134-.05.23-.286 1.437-.3 1.53l-.02.122 3.546-.012c3.137 0 4.184-.02 4.723-.07l.457-.043c.168-.012.328-.031.363-.035.035-.008.152-.024.266-.035.113-.012.351-.051.527-.086.18-.032.367-.063.414-.07.047-.012.203-.044.344-.079.137-.03.273-.062.308-.07.094-.02.73-.207.817-.242.043-.02.238-.098.433-.18 1.258-.5 2.297-1.312 3.032-2.371.136-.195.511-.824.511-.855 0-.012.07-.16.15-.332a7.814 7.814 0 00.64-2.258c.05-.383.02-1.817-.05-1.926a1.215 1.215 0 01-.036-.191 6.046 6.046 0 00-3.172-4.23 6.71 6.71 0 00-1.23-.497l-.188-.043.308-.203c.133-.088.263-.18.39-.274.252-.2.497-.408.734-.625.525-.535.845-.949 1.17-1.503.265-.45.546-1.157.624-1.56a.641.641 0 01.032-.14c.093-.265.093-1.61 0-1.761-.008-.012-.02-.075-.032-.137a4.155 4.155 0 00-.1-.344c-.415-1.27-1.368-2.328-2.68-2.976C17.55.632 16.78.344 16.525.3a2.157 2.157 0 01-.265-.059 8.852 8.852 0 00-.93-.168 10.58 10.58 0 00-1.3-.073c-.368.004-.669-.001-.673.003zm1.645 1.812c.972.254 1.742.891 2.082 1.723.207.504.254.79.254 1.543 0 .613-.02.89-.114 1.277a4.284 4.284 0 01-2.28 2.918c-.22.114-.41.2-.512.235-.012 0-.047.02-.079.031-.273.113-1.418.371-1.46.328-.012-.012.042-.297.11-.644.07-.344.14-.688.147-.762a1.93 1.93 0 01.04-.192 1.05 1.05 0 00.034-.191c.012-.078.032-.16.04-.191.011-.032.027-.114.035-.188.011-.07.074-.39.136-.703.067-.316.13-.613.137-.664.008-.055.09-.48.192-.95.093-.472.18-.91.19-.972.013-.062.044-.234.075-.379.031-.148.06-.308.07-.36.172-.91.375-1.894.383-1.933.024-.054.055-.047.52.074zM13.84 11.824c.191.028.508.086.82.16.172.036.664.235.926.371 1.465.758 2.273 2.356 2.098 4.133a7.38 7.38 0 01-.11.664c-.012.024-.023.09-.039.153a8.4 8.4 0 01-.352.949c-1.082 2.172-3.394 3.5-6.199 3.55l-.476.012.023-.105.043-.203c.012-.055.031-.184.055-.285l.058-.305c.012-.066.024-.148.036-.191.007-.043.085-.446.168-.895.09-.445.183-.926.214-1.062l.08-.399c.01-.086.022-.18.034-.21.011-.032.023-.099.035-.15.012-.054.04-.198.058-.323.024-.125.106-.528.176-.895.05-.26.102-.518.153-.777.007-.067.043-.235.07-.38.055-.261.078-.386.113-.609l.094-.472.285-1.465c.117-.61.223-1.14.23-1.188.012-.054.055-.086.126-.093.187-.024 1.05-.008 1.28.015z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$35($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Buefy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Buefy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$35, create_fragment$35, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Buffer.svelte generated by Svelte v3.23.2 */

        function create_fragment$36(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.784 18.24c.287.142.287.267 0 .374l-11.357 5.223c-.287.145-.57.145-.854 0L.213 18.614c-.284-.107-.284-.232 0-.375l2.722-1.23c.284-.14.57-.14.852 0l7.787 3.573c.285.14.57.14.854 0l7.787-3.574c.283-.14.568-.14.852 0l2.717 1.23zm0-6.454c.287.143.287.285 0 .426L12.427 17.44c-.287.104-.57.104-.854 0L.213 12.21c-.284-.143-.284-.284 0-.426l2.722-1.227c.284-.144.57-.144.852 0l7.787 3.57c.285.144.57.144.854 0l7.787-3.57c.283-.144.568-.144.852 0l2.717 1.226zM.214 5.76c-.285-.143-.285-.267 0-.375L11.574.16c.283-.14.57-.14.852 0l11.358 5.23c.287.107.287.232 0 .375l-11.357 5.223c-.287.143-.57.143-.854 0L.213 5.76z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$36($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Buffer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Buffer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$36, create_fragment$36, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bugatti.svelte generated by Svelte v3.23.2 */

        function create_fragment$37(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 5.168v2.194h2.92l.004-.73.006-.73 3.498-.005 3.496-.004v4.103H7.157V8.851l-1.464.004-1.466.006v5.744l1.466.006 1.464.004V13.47h2.767v4.618H2.92v-1.45H0v4.39h9.31c6.06 0 9.405-.008 9.584-.02a5.482 5.482 0 0 0 3.73-1.842 5.567 5.567 0 0 0 1.341-2.904c.048-.325.046-1.184-.002-1.504a5.537 5.537 0 0 0-1.36-2.922 1.478 1.478 0 0 1-.14-.17c0-.008.054-.08.12-.16a5.255 5.255 0 0 0 1.13-2.693 6.9 6.9 0 0 0 .01-1.122 5.297 5.297 0 0 0-1.172-2.81 5.328 5.328 0 0 0-1.884-1.443 5.297 5.297 0 0 0-1.2-.38c-.515-.09-.038-.085-10.052-.085H0zm18.656.744c.557.044.958.214 1.305.555.536.529.73 1.414.475 2.193a1.933 1.933 0 0 1-.494.794 1.884 1.884 0 0 1-1.055.513c-.147.025-.561.03-2.63.03h-2.458v-2.04c0-1.121.005-2.045.013-2.05.02-.022 4.569-.016 4.844.005zm.267 7.586c1.078.174 1.807.977 1.876 2.065.057.888-.246 1.613-.87 2.088-.159.12-.5.288-.691.342-.35.095-.342.095-2.977.095h-2.462V13.47h2.477c2.082 0 2.502.003 2.647.028Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$37($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bugatti" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bugatti extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$37, create_fragment$37, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bugsnag.svelte generated by Svelte v3.23.2 */

        function create_fragment$38(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 24c-4.596 0-8.336-3.74-8.336-8.336v-4.135a.62.62 0 01.62-.62h2.957L7.23 1.337 4.903 2.77v5.45a.62.62 0 01-1.24 0V2.7c0-.384.204-.749.53-.95L6.773.166a1.114 1.114 0 011.699.949l.01 9.796h3.52a4.759 4.759 0 014.753 4.754 4.759 4.759 0 01-4.753 4.753 4.759 4.759 0 01-4.754-4.753l-.003-3.515H4.903v3.515c0 3.912 3.183 7.097 7.097 7.097a7.104 7.104 0 007.097-7.097c0-3.915-3.184-7.098-7.097-7.098h-1.076a.62.62 0 010-1.24H12c4.596 0 8.336 3.74 8.336 8.336S16.596 24 12 24zM8.482 12.15l.004 3.514A3.518 3.518 0 0012 19.178a3.518 3.518 0 003.514-3.514A3.518 3.518 0 0012 12.149zm4.513 3.514a.995.995 0 01-.995.994.995.995 0 01-.995-.994.995.995 0 01.995-.995.995.995 0 01.995.995Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$38($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bugsnag" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bugsnag extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$38, create_fragment$38, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Buildkite.svelte generated by Svelte v3.23.2 */

        function create_fragment$39(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.613 8.143l-7.668-3.856v7.712l7.668-3.855zM8.166 15.857V8.143L.387 4.287V12l7.78 3.857zM.183 3.958a.382.382 0 01.377-.017l7.606 3.771 7.607-3.771a.386.386 0 01.346 0l7.668 3.857a.386.386 0 01.213.345v7.71a.388.388 0 01-.213.346l-7.668 3.86a.389.389 0 01-.562-.345v-7.09l-7.219 3.58a.392.392 0 01-.344 0L.215 12.346A.387.387 0 010 12V4.287a.385.385 0 01.183-.329z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$39($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Buildkite" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Buildkite extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$39, create_fragment$39, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bulma.svelte generated by Svelte v3.23.2 */

        function create_fragment$3a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.25 0l-6 6 -1.5 10.5 7.5 7.5 9 -6 -6 -6 4.5 -4.5 -7.5 -7.5Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Bulma" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bulma extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3a, create_fragment$3a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Bunq.svelte generated by Svelte v3.23.2 */

        function create_fragment$3b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.414 14.62h1.103v-2.896a2.484 2.484 0 0 0-2.483-2.483 2.484 2.484 0 0 0-2.482 2.483v2.897h1.103v-2.897c0-.837.618-1.517 1.38-1.517.76 0 1.379.68 1.379 1.517zm-6.07-5.24h1.104v2.896a2.484 2.484 0 0 1-2.482 2.483 2.484 2.484 0 0 1-2.483-2.483V9.379h1.103v2.897c0 .837.618 1.517 1.38 1.517.76 0 1.379-.68 1.379-1.517zM0 7.034V12c0 .046.001.093.004.139H0v2.482h.965l.055-.48A2.76 2.76 0 0 0 5.518 12a2.76 2.76 0 0 0-4.414-2.208V7.035zm2.69 3.172c.951 0 1.724.803 1.724 1.793 0 .99-.773 1.793-1.725 1.793-.951 0-1.724-.803-1.724-1.793 0-.99.773-1.793 1.724-1.793zm18.552-.965A2.76 2.76 0 0 0 18.482 12a2.76 2.76 0 0 0 4.414 2.207v2.758H24V12a2.15 2.15 0 0 0-.004-.139H24V9.38h-.965l-.055.48a2.741 2.741 0 0 0-1.738-.617zm.069.965c.951 0 1.724.803 1.724 1.793 0 .99-.773 1.793-1.724 1.793-.952 0-1.725-.803-1.725-1.793 0-.99.773-1.793 1.725-1.793Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "bunq" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Bunq extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3b, create_fragment$3b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Buymeacoffee.svelte generated by Svelte v3.23.2 */

        function create_fragment$3c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.898 0L5.682 2.799H3.877v2.523h.695L5.277 9.8H4.172l1.46 8.23.938-.01L7.512 24h8.918l.062-.4.88-5.58.888.01 1.46-8.231h-1.056l.705-4.477h.756V2.8h-1.918L16.99 0H6.898zm.528.805h9.043l.771 1.78H6.652l.774-1.78zm-2.75 2.797H19.32v.92H4.676v-.92zm.453 6.998h13.635l-1.176 6.62-5.649-.06-5.636.06-1.174-6.62z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Buy Me A Coffee" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Buymeacoffee extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3c, create_fragment$3c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Buzzfeed.svelte generated by Svelte v3.23.2 */

        function create_fragment$3d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 12c0 6.627-5.373 12-12 12S0 18.627 0 12 5.373 0 12 0s12 5.373 12 12zm-4.148-.273l-.977-6.94-6.5 2.624 2.575 1.487-2.435 4.215L8.3 10.68l-4.153 7.19 2.327 1.346 2.812-4.868L13.5 16.78l3.777-6.54 2.575 1.487z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "BuzzFeed" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Buzzfeed extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3d, create_fragment$3d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Byte.svelte generated by Svelte v3.23.2 */

        function create_fragment$3e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v16.114h16.14V9.838c-.025-.633-.579-1.082-1.317-1.082-.739 0-1.294.449-1.32 1.108v3.614c-1.712-.002-3.435.003-5.142-.002a6.536 6.536 0 0 1 6.435-5.248c3.64.027 6.567 2.955 6.567 6.568a6.552 6.552 0 0 1-12.369 3.032l-.053-.104c-.396-.818-.739-1.188-1.583-1.24-.844-.027-1.503.447-1.292 1.133A9.175 9.175 0 0 0 14.796 24 9.195 9.195 0 0 0 24 14.796c0-4.537-3.428-8.466-7.886-9.1V0zm2.638 2.638h10.84v3.059a9.175 9.175 0 0 0-7.781 7.78c-1.013.002-2.04 0-3.06 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "byte" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Byte extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3e, create_fragment$3e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/C.svelte generated by Svelte v3.23.2 */

        function create_fragment$3f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.023 9.216s-.386-3.293-3.955-3.385c-3.57-.091-5.402 2.47-5.402 6.13 0 3.66 2.026 6.588 5.498 6.588 3.473 0 3.86-3.66 3.86-3.66l6.656.366s.391 3.306-2.394 5.828C18.5 23.605 15.082 24.017 12.694 24c-2.388-.018-5.698.034-8.9-2.969C.595 18.03.05 15.113.05 12.248c0-2.866.607-6.661 4.414-9.54C7.05.754 9.673.033 12.296.033 23.246.032 23.98 9.28 23.98 9.28z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "C" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class C extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3f, create_fragment$3f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Csharp.svelte generated by Svelte v3.23.2 */

        function create_fragment$3g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0A12 12 0 000 12a12 12 0 0012 12 12 12 0 0012-12A12 12 0 0012 0zM9.426 7.12a5.55 5.55 0 011.985.38v1.181a4.5 4.5 0 00-2.25-.566 3.439 3.439 0 00-2.625 1.087 4.099 4.099 0 00-1.012 2.906 3.9 3.9 0 00.945 2.754 3.217 3.217 0 002.482 1.023 4.657 4.657 0 002.464-.634l-.004 1.08a5.543 5.543 0 01-2.625.555 4.211 4.211 0 01-3.228-1.297 4.793 4.793 0 01-1.212-3.409 5.021 5.021 0 011.365-3.663 4.631 4.631 0 013.473-1.392 5.55 5.55 0 01.12-.004 5.55 5.55 0 01.122 0zm5.863.155h.836l-.555 2.652h1.661l.567-2.652h.81l-.555 2.652 1.732-.004-.15.697H17.91l-.412 1.98h1.852l-.176.698h-1.816l-.58 2.625h-.83l.567-2.625h-1.65l-.555 2.625h-.81l.555-2.625h-1.74l.131-.698h1.748l.401-1.976h-1.826l.138-.697h1.826zm.142 3.345L15 12.6h1.673l.423-1.98z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "C Sharp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Csharp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3g, create_fragment$3g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cplusplus.svelte generated by Svelte v3.23.2 */

        function create_fragment$3h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.393 6c-.167-.29-.398-.543-.652-.69L12.925.22c-.508-.293-1.339-.293-1.847 0L2.26 5.31c-.508.293-.923 1.013-.923 1.6v10.18c0 .294.104.62.271.91.167.29.398.543.652.689l8.816 5.091c.508.293 1.339.293 1.847 0l8.816-5.091c.254-.146.485-.399.652-.689s.271-.616.271-.91V6.91c.002-.294-.102-.62-.269-.91zM12 19.109c-3.92 0-7.109-3.189-7.109-7.109S8.08 4.891 12 4.891a7.133 7.133 0 0 1 6.156 3.552l-3.076 1.781A3.567 3.567 0 0 0 12 8.445c-1.96 0-3.554 1.595-3.554 3.555S10.04 15.555 12 15.555a3.57 3.57 0 0 0 3.08-1.778l3.077 1.78A7.135 7.135 0 0 1 12 19.109zm7.109-6.714h-.79v.79h-.79v-.79h-.79v-.79h.79v-.79h.79v.79h.79v.79zm2.962 0h-.79v.79h-.79v-.79h-.789v-.79h.789v-.79h.79v.79h.79v.79z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "C++" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cplusplus extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3h, create_fragment$3h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cairometro.svelte generated by Svelte v3.23.2 */

        function create_fragment$3i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.397 4.14h.882v.881h-.882zm-1.628 0h.883v.881h-.883zm4.915 1.055v3.402h-1.386V5.195h-.84v1.763h-2.983V5.196h-.84v3.402H8.543v.84h1.911V7.82h2.983v1.617h5.44V5.195zm2.352 3.395h-1.512V6.028h1.512zM5.173 5.195v2.604h2.353v.805H5.173v.833h3.193V5.195zm2.339 1.757H5.999v-.924h1.513zm-2.64 12.177V9.726h4.175L12 12.68l2.954-2.953h4.176v9.403h-4.176v-3.442L12 18.754l-2.952-3.048v3.424zM12 0L8.485 3.515h-4.97v4.97L0 12l3.515 3.515v4.97h4.97L12 24l3.515-3.515h4.97v-4.97L24 12l-3.515-3.515v-4.97h-4.97zm0 1.708l3.014 3.015h4.263v4.263L22.292 12l-3.015 3.014v4.263h-4.263L12 22.292l-3.014-3.015H4.723v-4.263L1.708 12l3.015-3.014V4.723h4.263Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cairo Metro" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cairometro extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3i, create_fragment$3i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cakephp.svelte generated by Svelte v3.23.2 */

        function create_fragment$3j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 13.875v3.745c0 2.067 5.37 3.743 12 3.743V17.62c-6.63 0-12-1.68-12-3.743v-.002zm21.384 2.333L12 13.875v3.745l9.384 2.333C23.02 19.313 24 18.503 24 17.62v-3.745c0 .882-.98 1.692-2.616 2.333zM12 10.133v3.742c-6.627 0-12-1.677-12-3.744V6.38c0-2.064 5.37-3.743 12-3.743 6.625 0 12 1.68 12 3.744v3.75c0 .883-.98 1.69-2.616 2.334L12 10.13v.003z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CakePHP" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cakephp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3j, create_fragment$3j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Campaignmonitor.svelte generated by Svelte v3.23.2 */

        function create_fragment$3k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.836 4.27c-.29-.413-.86-.515-1.273-.226L.163 19.73c.167.235.437.39.747.39h22.18c.503 0 .91-.41.91-.914V4.78c-.004-.176-.058-.352-.164-.51zm-22.4-.226c-.413-.29-.982-.19-1.272.226-.107.154-.162.332-.164.51v14.45l10.664-8.736-9.227-6.45v-.002z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Campaign Monitor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Campaignmonitor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3k, create_fragment$3k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Canonical.svelte generated by Svelte v3.23.2 */

        function create_fragment$3l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 12c0 6.627-5.373 12-12 12-6.628 0-12-5.373-12-12C0 5.372 5.372 0 12 0c6.627 0 12 5.372 12 12zM12 2.92A9.08 9.08 0 002.92 12 9.08 9.08 0 0012 21.08 9.08 9.08 0 0021.081 12 9.08 9.08 0 0012 2.92zm0 16.722A7.64 7.64 0 014.36 12 7.64 7.64 0 0112 4.36 7.64 7.64 0 0119.641 12a7.64 7.64 0 01-7.64 7.641z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Canonical" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Canonical extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3l, create_fragment$3l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Canva.svelte generated by Svelte v3.23.2 */

        function create_fragment$3m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zM6.962 7.68c.754 0 1.337.549 1.405 1.2.069.583-.171 1.097-.822 1.406-.343.171-.48.172-.549.069-.034-.069 0-.137.069-.206.617-.514.617-.926.548-1.508-.034-.378-.308-.618-.583-.618-1.2 0-2.914 2.674-2.674 4.629.103.754.549 1.646 1.509 1.646.308 0 .65-.103.96-.24.5-.264.799-.47 1.097-.8-.073-.885.704-2.046 1.851-2.046.515 0 .926.205.96.583.068.514-.377.582-.514.582s-.378-.034-.378-.17c-.034-.138.309-.07.275-.378-.035-.206-.24-.274-.446-.274-.72 0-1.131.994-1.029 1.611.035.275.172.549.447.549.205 0 .514-.31.617-.755.068-.308.343-.514.583-.514.102 0 .17.034.205.171v.138c-.034.137-.137.548-.102.651 0 .069.034.171.17.171.092 0 .436-.18.777-.459.117-.59.253-1.298.253-1.357.034-.24.137-.48.617-.48.103 0 .171.034.205.171v.138l-.136.617c.445-.583 1.097-.994 1.508-.994.172 0 .309.102.309.274 0 .103 0 .274-.069.446-.137.377-.309.96-.412 1.474 0 .137.035.274.207.274.171 0 .685-.206 1.096-.754l.007-.004c-.002-.068-.007-.134-.007-.202 0-.411.035-.754.104-.994.068-.274.411-.514.617-.514.103 0 .205.069.205.171 0 .035 0 .103-.034.137-.137.446-.24.857-.24 1.269 0 .24.034.582.102.788 0 .034.035.069.07.069.068 0 .548-.445.89-1.028-.308-.206-.48-.549-.48-.96 0-.72.446-1.097.858-1.097.343 0 .617.24.617.72 0 .308-.103.65-.274.96h.102a.77.77 0 0 0 .584-.24.293.293 0 0 1 .134-.117c.335-.425.83-.74 1.41-.74.48 0 .924.205.959.582.068.515-.378.618-.515.618l-.002-.002c-.138 0-.377-.035-.377-.172 0-.137.309-.068.274-.376-.034-.206-.24-.275-.446-.275-.686 0-1.13.891-1.028 1.611.034.275.171.583.445.583.206 0 .515-.308.652-.754.068-.274.343-.514.583-.514.103 0 .17.034.205.171 0 .069 0 .206-.137.652-.17.308-.171.48-.137.617.034.274.171.48.309.583.034.034.068.102.068.102 0 .069-.034.138-.137.138-.034 0-.068 0-.103-.035-.514-.205-.72-.548-.789-.891-.205.24-.445.377-.72.377-.445 0-.89-.411-.96-.926a1.609 1.609 0 0 1 .075-.649c-.203.13-.422.203-.623.203h-.17c-.447.652-.927 1.098-1.27 1.303a.896.896 0 0 1-.377.104c-.068 0-.171-.035-.205-.104-.095-.152-.156-.392-.193-.667-.481.527-1.145.805-1.453.805-.343 0-.548-.206-.582-.55v-.376c.102-.754.377-1.2.377-1.337a.074.074 0 0 0-.069-.07c-.24 0-1.028.824-1.166 1.373l-.103.445c-.068.309-.377.515-.582.515-.103 0-.172-.035-.206-.172v-.137l.046-.233c-.435.31-.87.508-1.075.508-.308 0-.48-.172-.514-.412-.206.274-.445.412-.754.412-.352 0-.696-.24-.862-.593-.244.275-.523.553-.852.764-.48.309-1.028.549-1.68.549-.582 0-1.097-.309-1.371-.583-.412-.377-.651-.96-.686-1.509-.205-1.68.823-3.84 2.4-4.8.378-.205.755-.343 1.132-.343zm9.77 3.291c-.104 0-.172.172-.172.343 0 .274.137.583.309.755a1.74 1.74 0 0 0 .102-.583c0-.343-.137-.515-.24-.515z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Canva" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Canva extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3m, create_fragment$3m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Carthrottle.svelte generated by Svelte v3.23.2 */

        function create_fragment$3n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 19.99h5.31l1-5.76h2.673L7.97 19.99h5.272l1.037-5.76h2.824l-1 5.76h7.584L21.9 17.029 24 4.01h-5.16l-.987 5.647h-2.86l.936-5.647H8.483l1.724 2.749-.487 2.898H6.996l.9-5.647H.35l1.76 2.774Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Car Throttle" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Carthrottle extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3n, create_fragment$3n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Carto.svelte generated by Svelte v3.23.2 */

        function create_fragment$3o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.138 7.138C21.823 7.138 24 9.3147 24 12s-2.1769 4.862-4.862 4.862c-1.9046 0-3.5532-1.0949-4.351-2.6896h.4683c.7615 1.358 2.215 2.2759 3.8826 2.2759 2.4567 0 4.4483-1.9916 4.4483-4.4483 0-2.4567-1.9916-4.4483-4.4483-4.4483-1.6677 0-3.1211.9178-3.8826 2.2759h-.4683c.7978-1.5947 2.4464-2.6897 4.351-2.6897zm0 3.3103c.8569 0 1.5517.6947 1.5517 1.5517 0 .857-.6948 1.5517-1.5518 1.5517-.857 0-1.5517-.6947-1.5517-1.5517 0-.857.6948-1.5517 1.5517-1.5517zm-17.5772.0109c.6066 0 .9968.2545 1.2597.615l-.6192.4793c-.1697-.2079-.3648-.3478-.649-.3478-.4156 0-.7083.3562-.7083.7889v.008c0 .4453.2927.793.7083.793.3096 0 .492-.144.6702-.3604l.6192.4411c-.2799.386-.6574.6701-1.3105.6701C.6829 13.547 0 12.898 0 12.0116v-.008c0-.8652.6617-1.5439 1.5608-1.5439zm4.7346.0382l1.264 2.9902h-.8822l-.212-.5344H5.3156l-.212.5344h-.861l1.2596-2.9902zm4.27.0212c.454 0 .7678.1187.9671.318.174.174.263.3988.263.6914v.008c0 .458-.2418.7592-.6108.9162l.7083 1.0349h-.9458l-.598-.8992h-.3648v.8992h-.8228v-2.969zm5.3983 0v.721h-.8907v2.248h-.8228v-2.248h-.8864v-.721zm-10.0712.9543l-.335.8398h.6658zm4.6348-.246h-.5429v.7168h.5472c.2756 0 .441-.1357.441-.352v-.008c0-.2375-.1738-.3563-.4453-.3563z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Carto" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Carto extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3o, create_fragment$3o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cashapp.svelte generated by Svelte v3.23.2 */

        function create_fragment$3p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.59 3.47A5.1 5.1 0 0 0 20.54.42C19.23 0 18.04 0 15.62 0H8.36c-2.4 0-3.61 0-4.9.4A5.1 5.1 0 0 0 .41 3.46C0 4.76 0 5.96 0 8.36v7.27c0 2.41 0 3.6.4 4.9a5.1 5.1 0 0 0 3.05 3.05c1.3.41 2.5.41 4.9.41h7.28c2.41 0 3.61 0 4.9-.4a5.1 5.1 0 0 0 3.06-3.06c.41-1.3.41-2.5.41-4.9V8.38c0-2.41 0-3.61-.41-4.91zM17.42 8.1l-.93.93a.5.5 0 0 1-.67.01 5 5 0 0 0-3.22-1.18c-.97 0-1.94.32-1.94 1.21 0 .9 1.04 1.2 2.24 1.65 2.1.7 3.84 1.58 3.84 3.64 0 2.24-1.74 3.78-4.58 3.95l-.26 1.2a.49.49 0 0 1-.48.39H9.63l-.09-.01a.5.5 0 0 1-.38-.59l.28-1.27a6.54 6.54 0 0 1-2.88-1.57v-.01a.48.48 0 0 1 0-.68l1-.97a.49.49 0 0 1 .67 0c.91.86 2.13 1.34 3.39 1.32 1.3 0 2.17-.55 2.17-1.42 0-.87-.88-1.1-2.54-1.72-1.76-.63-3.43-1.52-3.43-3.6 0-2.42 2.01-3.6 4.39-3.71l.25-1.23a.48.48 0 0 1 .48-.38h1.78l.1.01c.26.06.43.31.37.57l-.27 1.37c.9.3 1.75.77 2.48 1.39l.02.02c.19.2.19.5 0 .68z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cash App" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cashapp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3p, create_fragment$3p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Castbox.svelte generated by Svelte v3.23.2 */

        function create_fragment$3q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0c-.29 0-.58.068-.812.206L2.417 5.392c-.46.272-.804.875-.804 1.408v10.4c0 .533.344 1.135.804 1.407l8.77 5.187c.465.275 1.162.275 1.626 0l8.77-5.187c.46-.272.804-.874.804-1.407V6.8c0-.533-.344-1.136-.804-1.408L12.813.206A1.618 1.618 0 0012 0zm-.85 8.304c.394 0 .714.303.714.676v2.224c0 .207.191.375.427.375s.428-.168.428-.375V9.57c0-.373.32-.675.713-.675.394 0 .712.302.712.675v4.713c0 .374-.318.676-.712.676-.394 0-.713-.302-.713-.676v-1.31c0-.206-.192-.374-.428-.374s-.427.168-.427.374v1.226c0 .374-.32.676-.713.676-.394 0-.713-.302-.713-.676v-1.667c0-.207-.192-.375-.428-.375-.235 0-.427.168-.427.375v3.31c0 .373-.319.676-.712.676-.394 0-.713-.303-.713-.676v-2.427c0-.206-.191-.374-.428-.374-.235 0-.427.168-.427.374v.178a.71.71 0 01-.712.708.71.71 0 01-.713-.708v-2.123a.71.71 0 01.713-.708.71.71 0 01.712.708v.178c0 .206.192.373.427.373.237 0 .428-.167.428-.373v-1.53c0-.374.32-.676.713-.676.393 0 .712.303.712.676v.646c0 .206.192.374.427.374.236 0 .428-.168.428-.374V8.98c0-.373.319-.676.713-.676zm4.562 2.416c.393 0 .713.302.713.676v2.691c0 .374-.32.676-.713.676-.394 0-.712-.303-.712-.676v-2.691c0-.374.319-.676.712-.676zm2.28 1.368c.395 0 .713.303.713.676v.67c0 .374-.318.676-.712.676-.394 0-.713-.302-.713-.675v-.67c0-.374.32-.677.713-.677Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Castbox" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Castbox extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3q, create_fragment$3q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Castorama.svelte generated by Svelte v3.23.2 */

        function create_fragment$3r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.91 16.106c-2.129 0-3.659-1.794-3.659-4.266 0-2.148 1.468-4.095 3.488-4.095 2.275 0 3.545 1.857 3.545 1.857l2.939-3.298c-.91-1.062-2.598-2.882-6.503-2.882-4.388 0-8.209 3.489-8.209 8.456 0 4.766 3.475 8.532 8.266 8.532 3.855 0 5.572-2.017 6.54-3.129l-2.831-2.969c0 .001-1.415 1.794-3.576 1.794zM18.283 0v9.988h-2.064a1.92 1.92 0 1 0 0 3.84h2.064V24h5.205V0h-5.205z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Castorama" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Castorama extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3r, create_fragment$3r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Castro.svelte generated by Svelte v3.23.2 */

        function create_fragment$3s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.372 0 0 5.373 0 12s5.372 12 12 12c6.627 0 12-5.373 12-12S18.627 0 12 0zm-.002 13.991a2.052 2.052 0 1 1 0-4.105 2.052 2.052 0 0 1 0 4.105zm4.995 4.853l-2.012-2.791a5.084 5.084 0 1 0-5.982.012l-2.014 2.793A8.526 8.526 0 0 1 11.979 3.42a8.526 8.526 0 0 1 8.526 8.526 8.511 8.511 0 0 1-3.512 6.898z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Castro" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Castro extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3s, create_fragment$3s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Caterpillar.svelte generated by Svelte v3.23.2 */

        function create_fragment$3t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.901 11.554l.802-4.1.798 4.1zm2.869-6.52h-4.15L8.2 15.884l4.503-3.635 4.695 3.934zm-2.067 8.156l-7.509 6.072H19.95zM24 5.02v2.77h-2.066v11.45h-.882l-2.436-2.04V7.79h-2.057V5.02zM6.872 16.864c.548-.458.642-1.024.642-1.532V13.2h-2.98v2.894a.75.75 0 0 1-.748.751c-.414 0-.722-.336-.722-.75V7.893c0-.414.308-.75.722-.75a.75.75 0 0 1 .749.75v2.913H7.51V7.785c0-1.67-1.092-3.044-3.75-3.047-2.728 0-3.76 1.38-3.76 3.05v8.563c0 1.655 1.314 2.907 2.995 2.907h.922Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Caterpillar" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Caterpillar extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3t, create_fragment$3t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cdprojekt.svelte generated by Svelte v3.23.2 */

        function create_fragment$3u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.942,20.154c-0.687,0.323-1.719,0.302-2.986-0.072l0.213,0.547l-0.389-0.226l-1.537-0.907h0.001 l-0.033-0.158C14.783,19.509,17.746,20.507,18.942,20.154z M7.929,22.045c-0.127,0.229,0.179,0.645,0.179,0.645 c-0.687-0.534-1.276,0.346-1.276,0.346c-0.039-0.385,0.397-0.669,0.397-0.669c-0.715,0.113-1.549,0.78-1.549,0.78 c-0.097-0.333,0.319-0.556,0.319-0.556c0-0.263,0.361-0.236,0.763-0.347c0.272-0.074,0.679-0.186,0.919-0.252 c0.005-0.004,0.007-0.01,0.011-0.013c0-0.002,0.303-0.348,0.671-0.745c0.291-0.31,0.614-0.648,0.868-0.88 c0.118,0.018,0.226,0.031,0.294,0.037c-0.243,0.199-0.651,0.62-0.999,0.994C8.266,21.665,8.039,21.921,7.929,22.045z M10.168,14.083 l8.822,6.05c-0.013,0.007-0.029,0.011-0.042,0.018c-0.008-0.004-0.163-0.064-0.328-0.129c-0.081-0.033-0.178-0.072-0.29-0.118 h-0.001c-0.005-0.002-0.012-0.005-0.019-0.009c-0.772-0.317-2.27-0.951-4.634-2.041c-2.4-1.112-3.815-1.798-5.028-2.388l0.001,0.002 c0,0-0.001-0.002-0.002-0.002l4.363,3.974l0.006,0.004l0.011,0.011h0.002l0.256,0.211l-1.153,0.348 c-0.001-0.006-0.005-0.013-0.006-0.018c-0.006-0.016-0.011-0.033-0.017-0.051c-0.003-0.008-0.006-0.017-0.009-0.025 c-0.006-0.017-0.012-0.033-0.018-0.05c-0.003-0.007-0.006-0.015-0.009-0.023c-0.011-0.023-0.021-0.047-0.032-0.073l-0.202,0.094 c0.09,0.197,0.121,0.356,0.121,0.482c-0.001,0.16-0.064,0.282-0.109,0.353c-0.025,0.037-0.07,0.086-0.071,0.086l0.064,0.088 c-0.004,0.011-0.008,0.023-0.014,0.035c-0.341,0.545-0.652,1.308-0.786,1.653c-0.044,0.114-0.069,0.183-0.069,0.183 c0,0,0,0.002-0.001,0.005c0.227,0.009,0.767,0.073,0.627,0.504l-0.122,0.444c-0.268-0.478-0.154-0.606-0.154-0.606 C10.544,22.894,8.968,24,8.968,24c0.052-0.411,0.506-0.697,0.768-0.847c-0.221-0.026-0.494,0.165-0.64,0.283 c0.137-0.27,0.335-0.433,0.539-0.522c-0.002-0.002-0.002-0.002-0.003-0.004c0.359-0.135,0.712-0.069,0.753-0.029l-0.002,0.001 c0.122-0.038,0.131-0.043,0.241-0.068c0.036-0.026,0.071-0.112,0.088-0.158c0.001-0.005,0.363-1.014,0.81-1.774 c-0.217-0.021-0.388-0.274-0.388-0.581c0-0.018,0.001-0.037,0.002-0.055c-0.475,0.069-0.973,0.088-1.484,0.043 c-0.016,0-0.032-0.003-0.049-0.005c0,0.001,0,0.001,0,0.001c-0.024-0.002-0.131-0.012-0.262-0.029 c-0.945-0.128-1.803-0.45-2.507-0.911l0.002,0.01c0,0-1.279-0.682-1.551-2.233l-0.309,0.195c0-1.39,0.238-2.365,0.563-3.111 l-0.38,0.037l0.38-0.534c-0.05,0.103-0.096,0.212-0.143,0.332l0.233-0.039c0,0,0,0,0-0.002c0.047-0.096,0.092-0.184,0.138-0.27 c0.092-0.169,0.188-0.328,0.295-0.484c0.024-0.035,0.069-0.098,0.111-0.152c0.062-0.08,0.147-0.179,0.204-0.245 c0.051-0.06,0.166-0.172,0.22-0.221c0.041-0.037,0.114-0.096,0.147-0.12l-0.229,1.072c0.669-0.832,1.912-2.075,2.535-2.665 c-0.118-0.222-0.248-0.418-0.386-0.581L8.08,10.763l-0.025,0.019c0,0-0.416,0.314-0.565,0.412c-0.409,0.267-0.706-0.07-0.722-0.09 c0.088,0.074,0.201,0.12,0.328,0.12c0.14,0,0.267-0.055,0.357-0.144c0.092-0.088,0.147-0.209,0.147-0.343 c0-0.068-0.014-0.132-0.038-0.191c-0.044-0.097-0.12-0.178-0.214-0.23H7.35c0,0-0.104-0.06-0.082-0.158 c0.022-0.099,0.206-0.291,0.206-0.291l0.225-0.229l0.36-0.367l0.777-0.79c0.047-0.052,0.077-0.087,0.077-0.087L8.231,8.686 L8.229,8.68c0-0.009,0.006-0.037,0.053-0.123c0.065-0.119,0.22-0.335,0.224-0.343l0.001-0.001L7.242,9.117c0-0.001,0-0.001,0-0.002 c0.074-0.35,0.824-1.365,0.858-1.412L7.27,8.464c0-0.002-0.001-0.004-0.003-0.006C7.224,8.2,7.638,7.317,7.695,7.197 C7.697,7.193,7.698,7.19,7.7,7.187C7.398,7.488,7.18,7.815,7.173,7.823c0-0.291,0.223-0.709,0.223-0.709 C7.332,7.176,7.272,7.242,7.214,7.307C6.346,8.285,6.095,9.429,6.027,9.873c0,0,0,0.001-0.001,0.001 C5.881,9.963,5.97,9.854,5.9,10.022c-0.256,0.073-0.47,0.202-0.642,0.346c-0.287,0.237-0.459,0.511-0.513,0.605 c0.034-0.043,0.07-0.083,0.105-0.119C5.38,10.3,5.992,10.36,5.992,10.36s0.682,1.26,0.542,1.405 c-0.015,0.015-0.039,0.017-0.072,0.006c-0.09-0.031-0.149-0.017-0.182,0.024c-0.105,0.117-0.009,0.454-0.008,0.462l-1.809-0.778 c0.858-0.318,1.47-0.1,1.47-0.1c0,0.212,0.48,0.184,0.48,0.184s0,0,0-0.001h0.001c0-0.196-0.365-0.43-0.365-0.43 s-0.327,0.136-0.716,0c-0.077-0.027-0.161-0.038-0.242-0.034C5.02,11.1,4.946,11.115,4.874,11.136 c-0.206,0.059-0.357,0.174-0.357,0.174v-0.001L4.515,11.31l1.131-4.139l0.119,1.591L8.06,3.367l0.039,4.037L14.354,0l-3.847,8.316 l0.023,0.041l2.713-1.954l-0.573,1.149l3.793-1.481l-3.539,2.585l6.612-0.81l-8.021,3.471l4.105-1.001L10.168,14.083z M11.512,11.319l0.001,0l-0.001-0.004C11.512,11.316,11.512,11.317,11.512,11.319z M9.515,12.181 c-0.095-0.395-0.223-0.757-0.371-1.076L8.2,13.182L9.515,12.181z M7.215,11.087c0.208-0.071,0.314-0.308,0.239-0.529l-0.208,0.071 c0.013,0.031,0.022,0.064,0.022,0.099c0,0.031-0.005,0.06-0.017,0.086l0.095,0.057c-0.032,0.051-0.081,0.095-0.141,0.12 c-0.036,0.016-0.074,0.022-0.112,0.022c-0.122,0-0.236-0.074-0.286-0.195c-0.004-0.01-0.01-0.022-0.012-0.034l-0.092,0.03 C6.778,11.038,7.008,11.158,7.215,11.087z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CD Projekt" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cdprojekt extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3u, create_fragment$3u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Celery.svelte generated by Svelte v3.23.2 */

        function create_fragment$3v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.303 0A2.298 2.298 0 0 0 0 2.303v19.394A2.298 2.298 0 0 0 2.303 24h19.394A2.298 2.298 0 0 0 24 21.697V2.303A2.298 2.298 0 0 0 21.697 0zm8.177 3.072c4.098 0 7.028 1.438 7.68 1.764l-1.194 2.55c-2.442-1.057-4.993-1.41-5.672-1.41-1.574 0-2.17.922-2.17 1.763v8.494c0 .869.596 1.791 2.17 1.791.679 0 3.23-.38 5.672-1.41l1.194 2.496c-.435.271-3.637 1.818-7.68 1.818-1.112 0-4.64-.244-4.64-4.64V7.713c0-4.397 3.528-4.64 4.64-4.64z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Celery" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Celery extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3v, create_fragment$3v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Centos.svelte generated by Svelte v3.23.2 */

        function create_fragment$3w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.076.066L8.883 3.28H3.348v5.434L0 12.01l3.349 3.298v5.39h5.374l3.285 3.236 3.285-3.236h5.43v-5.374L24 12.026l-3.232-3.252V3.321H15.31zm0 .749l2.49 2.506h-1.69v6.441l-.8.805-.81-.815V3.28H9.627zm-8.2 2.991h4.483L6.485 5.692l4.253 4.279v.654H9.94L5.674 6.423l-1.798 1.77zm5.227 0h1.635v5.415l-3.509-3.53zm4.302.043h1.687l1.83 1.842-3.517 3.539zm2.431 0h4.404v4.394l-1.83-1.842-4.241 4.267h-.764v-.69l4.261-4.287zm2.574 3.3l1.83 1.843v1.676h-5.327zm-12.735.013l3.515 3.462H3.876v-1.69zM3.348 9.454v1.697h6.377l.871.858-.782.77H3.35v1.786L.753 12.01zm17.42.068l2.488 2.503-2.533 2.55v-1.796h-6.41l-.75-.754.825-.83h6.38zm-9.502.978l.81.815.186-.188.614-.618v.686h.768l-.825.83.75.754h-.719v.808l-.842-.83-.741.73v-.707h-.7l.781-.77-.188-.186-.682-.672h.788zm-7.39 2.807h5.402l-3.603 3.55-1.798-1.772zm6.154 0h.708v.7l-4.404 4.338 1.852 1.824h-4.31v-4.342l1.798 1.77zm3.348 0h.715l4.317 4.343.186-.187 1.599-1.61v4.316h-4.366l1.853-1.825-.188-.185-4.116-4.054zm1.46 0h5.357v1.798l-1.785 1.796zm-2.83.191l.842.829v6.37h1.691l-2.532 2.495-2.533-2.495h1.79V14.23zm-1.27 1.251v5.42H8.939l-1.852-1.823zm2.64.097l3.552 3.499-1.853 1.825h-1.7z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CentOS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Centos extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3w, create_fragment$3w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cesium.svelte generated by Svelte v3.23.2 */

        function create_fragment$3x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.0283 10.216c-.3959 0-.7785.22-1.0792.6168l-3.7755 4.994c-.625.8275-1.5128 1.3012-2.4355 1.3012h-.0143c-.9236 0-1.8115-.4737-2.4355-1.3012l-3.7754-4.994c-.2998-.3969-.6823-.6168-1.0802-.6168-.3949 0-.7795.22-1.0781.6168l-3.7765 4.994c-.621.8204-1.4996 1.294-2.414 1.3012C3.088 21.186 7.2113 24 12.0004 24 18.6268 24 24 18.6276 24 12.001c0-.4705-.0338-.9308-.086-1.382-.2638-.2598-.5697-.403-.8857-.403m-7.019-2.5972c-.6936 0-1.2542-.5616-1.2542-1.2541s.5606-1.2541 1.2541-1.2541c.6925 0 1.254.5616 1.254 1.254s-.5615 1.2542-1.254 1.2542M12.0005 0C5.3732 0 0 5.3714 0 12.001c0 1.0536.1504 2.0704.406 3.0463.2272.175.4788.2762.7366.2762.3979 0 .7804-.2189 1.0812-.6138l3.7754-4.996c.623-.8285 1.5129-1.3021 2.4335-1.3021.9226 0 1.8095.4736 2.4355 1.3021l3.6323 4.8037.1565.1923c.2997.3939.6812.6107 1.074.6138.3918-.003.7743-.22 1.072-.6138l.1595-.1923 3.6323-4.8037c.624-.8285 1.5118-1.3021 2.4335-1.3021.1462 0 .2935.0163.4367.0388C21.9522 3.5557 17.3922 0 12.0005 0");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cesium" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cesium extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3x, create_fragment$3x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cevo.svelte generated by Svelte v3.23.2 */

        function create_fragment$3y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.5 6h12l6 10.3L24 12 18 1.6H6L3.5 6zm-.9 1.5L0 12l6 10.4h12l2.6-4.5-2.5-4.3-2.6 4.5h-7L5 12l2.6-4.5h-5z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CEVO" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cevo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3y, create_fragment$3y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Chartmogul.svelte generated by Svelte v3.23.2 */

        function create_fragment$3z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.621 19.89V8.75L2.867 19.89H0V4.11h2.758v11.112l7.754-11.113h2.867v11.14L21.16 4.11H24v15.782h-2.73V8.75l-7.755 11.14Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ChartMogul" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Chartmogul extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3z, create_fragment$3z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Chase.svelte generated by Svelte v3.23.2 */

        function create_fragment$3A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 15.415c0 .468.38.85.848.85h5.937V.575L0 7.72v7.695m15.416 8.582c.467 0 .846-.38.846-.849v-5.937H.573l7.146 6.785h7.697M24 8.587a.844.844 0 0 0-.847-.846h-5.938V23.43l6.782-7.148L24 8.586M8.585.003a.847.847 0 0 0-.847.847v5.94h15.688L16.282.003H8.585Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Chase" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Chase extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3A, create_fragment$3A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Checkmarx.svelte generated by Svelte v3.23.2 */

        function create_fragment$3B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.544.12A6.553 6.553 0 0 0 0 6.664v10.674a6.551 6.551 0 0 0 6.544 6.542h10.912A6.551 6.551 0 0 0 24 17.338v-.831a2.193 2.193 0 0 0-4.388 0v.83c0 1.19-.967 2.157-2.156 2.157H6.544a2.16 2.16 0 0 1-2.158-2.156V6.748c0-1.19.969-2.16 2.158-2.16 3.843.004 7.814-.009 11.612.001.556.138.892.445 1.058.848.193.47.343 1.118-.404 1.748l-6.26 4.596-1.892-2.441a2.191 2.191 0 0 0-3.075-.391 2.191 2.191 0 0 0-.391 3.076l3.198 4.133a2.197 2.197 0 0 0 3.035.424l7.252-5.301a56.68 56.68 0 0 0 1.22-.977c2.106-1.926 2.517-4.393 1.627-6.553C22.603 1.51 20.268.12 17.435.12Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Checkmarx" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Checkmarx extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3B, create_fragment$3B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Chef.svelte generated by Svelte v3.23.2 */

        function create_fragment$3C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.03 0C6.94 0 2.57 3.17.82 7.65l1.91.77a10 10 0 0 1 9.3-6.4c2.24 0 4.32.77 5.96 1.97l1.2-1.64A11.96 11.96 0 0 0 12.03 0zm0 2.3a9.76 9.76 0 0 0-9.08 6.23l1.91.7a7.62 7.62 0 0 1 7.17-4.91zm3.55.7l-.76 1.92a7.47 7.47 0 0 1 4.75 5.63h2.08a9.7 9.7 0 0 0-6.07-7.54zm-3.55 1.6a7.44 7.44 0 1 0 7.32 8.9h-2.08a5.5 5.5 0 0 1-5.24 3.94 5.39 5.39 0 0 1-5.42-5.41 5.39 5.39 0 0 1 5.42-5.41 5.4 5.4 0 0 1 5.2 3.93h2.07a7.35 7.35 0 0 0-7.27-5.96zm10.22 1.09L20.5 6.78a9.5 9.5 0 0 1 1.42 3.77H24a11.56 11.56 0 0 0-1.75-4.86zM11.97 6.83a5.22 5.22 0 0 0-4.7 7.27l1.97-.87a2.97 2.97 0 0 1-.27-1.2c0-1.64 1.36-3.01 3-3.01zm1.92.39l-.77 2.02c.66.27 1.15.7 1.53 1.31h2.3a5.04 5.04 0 0 0-3.06-3.33zM0 12.02c0 1.65.33 3.29 1.04 4.87l1.8-.82a10.49 10.49 0 0 1-.82-4.04zm2.3 0c0 4.1 2.51 7.6 6.12 9.03l.76-1.92a7.63 7.63 0 0 1-4.86-7.1zm12.3 1.48c-.33.6-.82 1.1-1.48 1.31l.77 2.03a5.04 5.04 0 0 0 3.06-3.34zm4.97 0a7.73 7.73 0 0 1-7.54 6.24v2.02a9.71 9.71 0 0 0 9.62-8.26zm2.35 0a10.1 10.1 0 0 1-9.9 8.53c-2.73 0-5.24-1.15-7.04-2.95L3.55 20.5c2.19 2.19 5.2 3.5 8.53 3.5A12 12 0 0 0 24 13.5zm-12.02.66l-1.53 1.53a5.21 5.21 0 0 0 3.66 1.53v-2.19a3.02 3.02 0 0 1-2.13-.87z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Chef" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Chef extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3C, create_fragment$3C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Chocolatey.svelte generated by Svelte v3.23.2 */

        function create_fragment$3D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 1.249l1.439 3.18L0 6.926l1.439 2.5L0 11.923l1.439 2.424L0 16.845l1.439 2.5L0 22.75l2.8-.91c6.3.01 12.696.006 18.096 0l3.104.91-2.044-3.635 1.136-1.892-2.196-2.272-.004-.017V2.005c-6.551-.001-12.243 0-18.091 0zm19.688 1.968v7.03l-.23-.898-1.438-4.39-3.56.605-1.89-2.343zm-11.695.004h4.563L9.539 4.428zm2.86 3.68a3.903 3.903 0 0 1 1.64.254c1.968.757 1.286 2.8.15 4.012-.378.378-1.21.227-.605-.908.228-.454.454-1.363-.227-1.59-1.515-.53-3.255.682-3.634 2.271-.378 1.363.606 2.801 2.347 2.423 1.439-.303 2.802-1.288 3.332-1.742.53-.455.907.38.301 1.288-.68.908-1.74 1.968-2.65 2.574-3.558 2.423-6.662-.758-5.375-4.392.677-1.845 2.454-4.041 4.72-4.19zm6.527 2.031a.66.66 0 0 1 .454.182c.324.326.204.972-.268 1.445-.473.474-1.121.593-1.446.268-.325-.326-.205-.972.267-1.445.292-.292.666-.461.993-.45zm-.42 3.233a.66.66 0 0 1 .454.182c.325.325.206.973-.268 1.446-.473.473-1.12.592-1.445.268-.324-.326-.205-.972.268-1.445.291-.292.664-.462.99-.451Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Chocolatey" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Chocolatey extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3D, create_fragment$3D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Chupachups.svelte generated by Svelte v3.23.2 */

        function create_fragment$3E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.2056.0007c-1.1953-.0181-2.3567.4498-3.206 1.2882C10.7647.0694 8.8692-.366 7.1692.338c-1.7001.7042-2.7325 2.3525-2.7435 4.088-1.7358.0114-3.3842 1.0438-4.0883 2.7435-.7042 1.6998-.2684 3.5954.9512 4.831C.069 13.2354-.3665 15.131.3373 16.831c.7041 1.6998 2.3525 2.7319 4.0886 2.743.0107 1.736 1.043 3.3846 2.7432 4.0886 1.7.7042 3.5958.2684 4.8309-.9513 1.2349 1.2197 3.1304 1.6551 4.8306.951 1.6997-.704 2.7318-2.3523 2.7428-4.0882 1.736-.011 3.3848-1.0433 4.0888-2.7431.7041-1.7002.2683-3.5955-.9513-4.8314 1.2196-1.2352 1.6554-3.1306.9513-4.8304-.704-1.6997-2.3528-2.7322-4.0888-2.7432-.0107-1.7356-1.0431-3.384-2.7428-4.0884a4.416 4.416 0 0 0-1.625-.3369zM8.8546.623C10.09.6207 11.2772 1.222 12 2.2524 13.0059.8188 14.9096.2157 16.5923.913c1.683.6967 2.6026 2.4695 2.3 4.1948 1.725-.3027 3.498.6174 4.1947 2.2998.6968 1.6826.0938 3.5866-1.3395 4.5924 1.4333 1.0063 2.0363 2.91 1.3395 4.5928-.697 1.6822-2.4694 2.6023-4.1943 2.2998.3022 1.725-.6177 3.4982-2.3001 4.1949-1.683.6967-3.587.0937-4.593-1.3396-1.0057 1.4333-2.9097 2.0363-4.5922 1.3396-1.6826-.6967-2.6023-2.4695-2.3-4.1944-1.7254.3024-3.498-.6178-4.1949-2.3-.697-1.683-.0944-3.587 1.3396-4.5931C.8184 10.9942.2155 9.0905.9125 7.4078c.6968-1.6826 2.4698-2.6027 4.1948-2.3-.3028-1.7253.6175-3.498 2.3-4.1948a3.7897 3.7897 0 0 1 1.4475-.29zm.2617.4925a3.793 3.793 0 0 0-1.5049.29c-1.5743.6522-2.4823 2.246-2.3451 3.8613-1.6153-.1372-3.209.771-3.8614 2.3448C.753 9.1861 1.2377 10.9553 2.4772 12 1.238 13.0453.753 14.8143 1.405 16.3889c.6525 1.5738 2.2464 2.4821 3.8614 2.345-.1372 1.6154.7708 3.209 2.3451 3.8612 1.5743.652 3.3433.1672 4.3883-1.0722 1.045 1.2391 2.814 1.7242 4.3885 1.0722 1.574-.6524 2.4824-2.2462 2.345-3.8612 1.6154.1369 3.209-.7715 3.861-2.3455.6522-1.5742.1677-3.3431-1.0718-4.3884 1.2392-1.0453 1.724-2.8142 1.0719-4.3885-.6521-1.5742-2.246-2.4824-3.8613-2.3452.1374-1.6151-.7708-3.2087-2.345-3.8608-1.5743-.652-3.3433-.1671-4.3883 1.072-.7186-.852-1.7792-1.3476-2.8834-1.362zm.1288.575a3.8514 3.8514 0 0 1 2.7546 1.1035C13.062 1.7483 14.69 1.3756 16.15 1.9804c1.4597.6047 2.3476 2.0192 2.3592 3.5096 1.491.0116 2.9055.8994 3.5102 2.3593.6049 1.46.232 3.0882-.8135 4.1507 1.0456 1.0624 1.4184 2.6906.8135 4.1505-.605 1.46-2.0192 2.3475-3.51 2.3593-.0115 1.4908-.8993 2.9055-2.3594 3.5104-1.46.6045-3.0879.2318-4.15-.8138-1.0624 1.0458-2.6905 1.4183-4.1503.8138-1.46-.6049-2.348-2.0196-2.3596-3.51-1.4906-.0119-2.9053-.8998-3.5103-2.3597-.6045-1.4596-.2319-3.0878.8137-4.1502-1.0458-1.0624-1.4182-2.6906-.8134-4.151.6046-1.4599 2.0191-2.3474 3.5098-2.359.0113-1.4906.8989-2.905 2.3595-3.5099a3.7971 3.7971 0 0 1 1.3957-.29zM6.821 5.9463c-.4963.0028-1.0034.2088-1.3915.4873-.9826.7051-1.552 1.765-1.5075 2.9352.0236.6227.3794 1.2746.9944 1.5076.7724.2935 1.396-.0028 2.0429-.4427l-.1765.43 1.0606.0006 1.0627-2.3575c.1-.2227.5938-.1762.481.0881l-.6535 1.532c-.1047.245-.0169.5406.2162.6934.4885.32 1.0588.004 1.48-.2484.052.1283.1102.2726.2443.3409.3872.1963.9427.0092 1.2606-.2028.023-.0153.1375.128.2673.2028.4295.2472.9943.0295 1.351-.219-.2173.4977-.4285 1.2961-.9464 1.5181-.0888.0381-.2882-.0427-.2645.096.1926.225.5255.2585.826.2048.9148-.1628 1.0627-1.179 1.4556-1.8244.1085.116.2114.2512.381.2806.9732.1672 1.5356-.83 2.2055-1.3632-.1075.3432-.2886.8839.1043 1.2508.3803.3553 1.0707.1246 1.4394-.1523l.1442.2286c.115.182.3993.1592.6054.1123.2356-.0535.6068-.2073.6056-.4052-.287.0463-.4815-.1071-.3609-.3968.3755-.9027 1.1694-2.7194 1.1694-2.7194h-1.044l-.1254.3013c-.068-.1485-.2174-.2837-.369-.3127-1.2422-.2401-1.6844 1.1902-2.3773 1.6315.1205-.437.3887-1.1607-.0443-1.5154-.3217-.263-.7507-.0466-1.0827.0845l.0673-.1892h-.9904l-1.0941 2.479c-.0798.1809-.2666.2795-.4449.3046-.0793.011-.1597-.0274-.2085-.0965-.0595-.0833-.058-.1944-.0198-.2805l1.0612-2.4066h-1.0673l-.9406 2.15c-.006.0144-.1833.5038-.3687.5694-.0925.0327-.213.0081-.2644-.0883-.0405-.076-.0235-.1815.0078-.2526l1.0517-2.3785H11.62l-1.086 2.4626c-.0859.1942-.526.4166-.6536.1204-.0454-.1052-.022-.2245.0202-.3206l.4811-1.099c.1483-.338.5155-.8832.068-1.1466-.463-.2726-.921.068-1.2174.2594l.7523-1.7509H8.9478L7.3899 9.48c-.204.449-.7536.6712-1.2146.751-.3688.064-.7448-.0152-.9382-.3209-.4688-.7416-.0705-1.658.2965-2.3135.2716-.4855.7437-1.1352 1.3715-1.0868.1079.0083.234.0567.2766.1805.143.4128-.3268.6998-.6254.8702.0564.3558.6835.3803.9384.2443.3277-.1743.539-.5163.5653-.87.0217-.2922-.1296-.5774-.385-.7458-.262-.173-.556-.2444-.8538-.2427zm12.4299 2.294c.1901.0033.2381.185.1688.3427l-.702 1.5919c-.0606.1378-.248.2035-.409.1324-.0478-.021-.104-.076-.1043-.1324-.0033-.4853.2456-.923.4573-1.3431.1142-.2276.2587-.5599.5493-.5897a.3343.3343 0 0 1 .0399-.0017zm-3.335.0072c.0899.003.1665.0445.1795.127.0711.4493-.5303 1.6964-.9302 1.9126-.1004.0543-.2483.0044-.2728-.1041-.022-.0974.0306-.2071.0722-.3008l.6457-1.4596c.0525-.1189.19-.1789.3056-.175zm-6.303 3.1817l-1.124.0045-1.7048 3.8193c-.5372.5693-1.2974 1.1229-2.0564.8124-.3688-.1509-.5473-.5486-.5574-.9263-.0177-.6733.1488-1.289.5014-1.8086.342-.504.7937-1.1283 1.4474-1.1951.1721-.0175.3326.075.3969.2289.0803.192-.0153.3892-.1402.5211-.144.153-.337.246-.5133.2806.0906.4412.734.4207 1.0544.2772.2442-.11.4806-.35.5495-.6057.0836-.3098.0383-.6695-.1642-.9186-.3791-.465-1.0279-.5176-1.588-.3887-1.2165.28-2.3287 1.3853-2.6427 2.5743-.2395.9087-.1822 2.0852.682 2.6142.9996.6125 1.9043-.0058 2.6045-.5139l-.2575.5786 1.1494.003 1.239-2.802c.1231-.2785.6937-.234.5376.1201l-.6818 1.5438c-.087.1972-.1522.3845-.1522.5976 0 .229.0833.471.3123.5694.5578.2385 1.11-.1131 1.527-.47.0537.273.205.4565.494.5179.4516.0959.8182-.1604 1.1711-.3686.068.128.109.2812.2566.3567.4342.2218.9632-.0281 1.3402-.2363l-.3943.863c-.9815-.2082-2.0948-.2582-3.0592.0747-.532.184-1.0934.691-1.1347 1.3075-.031.4587.1895.8673.5693 1.099.7596.462 1.8348.4653 2.6425.0958.4793-.2194.8899-.577 1.2388-1.0065 1.5761.333 3.4885.589 4.6032-.8216.0211-.0271.173-.2487.2006-.4454-.2086.1366-.44.2202-.6818.2646-.5984.111-1.2287.0944-1.847.0425-.4098-.034-1.1304-.1828-1.4892-.3505l.5978-1.3038c.0921.2085.2696.3657.4853.409.6628.133 1.1861-.2979 1.6075-.758l1.9608-2.1407c.0653-.0715.1707-.203.2925-.1808.0367.0068.0548.05.0407.0883-.1106.295-.2242.5895-.3133.8984-.1354.4696-.0843 1.0261-.3685 1.431-.0669.0952-.1804.1427-.2927.1486-.1164.006-.2264-.0519-.277-.1606-.0903-.1956.0397-.4238.1805-.557-.0705-.0591-.17-.0683-.2351-.0637-.1672.0122-.3155.1068-.4185.244-.0992.1324-.1362.3117-.1121.4928.0362.272.2962.4922.5496.5577.5403.1392 1.0957-.0172 1.5154-.377.7315-.6272.5-1.6633.425-2.494-.037-.4122.1765-.802.5495-.9744-.1026-.1256-.2454-.168-.3344-.1795-1.1026-.139-1.8218 1.2796-2.489 1.6753.0314-.1304.3402-1.281-.2078-1.6083-.387-.2303-.8384-.004-1.1552.2165.011-.0568.036-.2084.036-.2084h-1.0338l-1.332 3.0032c-.072.163-.2684.2052-.4286.2088-.0804.002-.1598-.0265-.1966-.1042-.0352-.0748-.0461-.1518-.0122-.2287l1.2861-2.8884h-1.137l-1.2755 2.8884c-.0517.1164-.1728.1762-.2928.1885-.0763.0076-.1602-.0484-.2086-.12-.0435-.0647-.0383-.1777-.008-.2488l1.1626-2.708h-1.1167l-1.2489 2.8523c-.0704.161-.241.2864-.4092.3288-.1044.0263-.2131.0007-.2725-.0845-.0609-.0873-.0417-.1994 0-.3044.29-.7285.682-1.4192.9264-2.1652.0646-.1982.035-.4453-.1405-.5693-.4426-.314-.966-.0667-1.3553.1882zm6.3363 2.3177c.0784.0056.1475.0595.1823.1211.0481.086.037.2212.0079.3127-.1865.5829-.4699 1.1878-.7859 1.6762-.1007.155-.529.2388-.529 0v-.1322l.8056-1.8085c.0496-.1115.1692-.155.285-.1685a.1868.1868 0 0 1 .034-.0008zm-5.3643 4.849c.1608.002.3222.0152.4782.0275.346.0275.6818.1045 1.0064.2007-.4502.7776-1.4392 1.2001-2.2655.7178-.3268-.1911-.3654-.6248.0082-.8061.238-.1154.5046-.1432.7727-.1399zm3.1186.7396a.8233.8233 0 0 0-.3883.0973c-.1232.0648-.2269.1618-.3094.2916-.0822.1294-.1239.2739-.1239.4323 0 .2272.0803.421.2409.5813.1603.1597.3539.24.5807.24.2253 0 .4186-.0806.5797-.2413.1606-.1608.241-.354.241-.58 0-.159-.0416-.3043-.1247-.4347-.0836-.1301-.1868-.2272-.311-.2906-.1238-.064-.2525-.096-.385-.096zm.0008.1611c.177 0 .3314.063.4632.1893.1314.1258.1972.2833.1972.4708 0 .1815-.0648.3374-.1945.4665-.129.1303-.2846.195-.4659.195-.1816 0-.337-.0644-.4658-.1936-.1292-.1287-.1935-.2852-.1935-.468 0-.1874.0658-.3449.1972-.4707.1315-.1263.2853-.1893.4621-.1893zm-.372.2284v.871h.177v-.3577h.0461c.0555 0 .0993.0152.1313.0445.0317.0296.0697.0867.1132.1721l.0727.1412h.219l-.1033-.1759c-.05-.0848-.0859-.1378-.1067-.1585a.2044.2044 0 0 0-.0777-.0467c.0702-.0104.1267-.0372.1703-.0805.043-.0429.0645-.097.0645-.1622 0-.0671-.0199-.1224-.0596-.1655-.04-.0431-.0837-.0674-.1315-.0736-.0473-.0057-.1607-.0082-.3383-.0082zm.177.1383h.0718c.0785 0 .1328.0015.1623.0052a.1292.1292 0 0 1 .076.0357.1032.1032 0 0 1 .0316.077.1088.1088 0 0 1-.0294.0771.1197.1197 0 0 1-.072.0367c-.0281.004-.0848.0062-.1685.0062h-.0718Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Chupa Chups" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Chupachups extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3E, create_fragment$3E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/CinemaFourD.svelte generated by Svelte v3.23.2 */

        function create_fragment$3F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.022,5.127C8.786,5.713,6.677,6.917,5.3,8.047c-0.172,0.665-0.273,1.356-0.273,2.072 c0,4.794,4.093,8.68,9.141,8.68c0.753,0,1.467-0.098,2.146-0.264c1.458-1.848,2.651-5.065,2.955-7.728 c0.319-2.786,0.953-3.63,1.742-4.18c0.28-0.195,0.574-0.344,0.885-0.415c-0.887-1.897-2.439-3.388-4.444-4.168 c0.005,0.022,0.014,0.04,0.019,0.062C17.852,3.735,16.115,4.386,12.022,5.127z M23.179,7.898 c-0.032-0.063-0.064-0.134-0.097-0.214c-0.594-1.455-2.022-0.512-2.399,0.344c-0.742,1.686-0.633,2.422-0.934,4.131 s-1.337,4.999-2.828,6.688c-2.13,2.412-4.46,3.484-7.727,3.172s-5.785-3.082-6.717-5.09c-0.782-1.685-0.9-3.596,0.025-6.073 s3.7-4.491,6.237-5.459c2.537-0.968,4.545-1.063,5.96-1.475c1.415-0.413,2.249-1.093,2.197-1.672 c-0.065-0.718-0.757-1.1-1.148-1.26c-1.18-0.379-2.441-0.584-3.751-0.584c-6.611,0-11.97,5.218-11.97,11.655 c0,6.437,5.359,11.655,11.97,11.655s11.97-5.218,11.97-11.655C23.966,10.594,23.687,9.191,23.179,7.898z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cinema 4D" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class CinemaFourD extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3F, create_fragment$3F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Circle.svelte generated by Svelte v3.23.2 */

        function create_fragment$3G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.788 3.832c-.101-.105-.197-.213-.301-.317-.103-.103-.211-.202-.32-.302A11.903 11.903 0 0 0 12 0a11.926 11.926 0 0 0-8.486 3.514C-1.062 8.09-1.16 15.47 3.213 20.168c.099.108.197.214.3.32.104.103.21.2.317.3A11.92 11.92 0 0 0 12 24c3.206 0 6.22-1.247 8.487-3.512 4.576-4.576 4.673-11.956.301-16.656zm-16.655.301A11.057 11.057 0 0 1 12 .874c2.825 0 5.49 1.048 7.55 2.958l-1.001 1.002A9.646 9.646 0 0 0 12 2.292a9.644 9.644 0 0 0-6.865 2.844A9.644 9.644 0 0 0 2.292 12c0 2.448.9 4.753 2.542 6.549L3.831 19.55C-.201 15.191-.101 8.367 4.133 4.133zm13.798 1.318v.002l-1.015 1.014A7.346 7.346 0 0 0 12 4.589 7.357 7.357 0 0 0 6.761 6.76 7.362 7.362 0 0 0 4.589 12a7.34 7.34 0 0 0 1.877 4.913l-1.014 1.016A8.77 8.77 0 0 1 3.167 12a8.77 8.77 0 0 1 2.588-6.245A8.771 8.771 0 0 1 12 3.167c2.213 0 4.301.809 5.931 2.284zM18.537 12c0 1.745-.681 3.387-1.916 4.622S13.746 18.538 12 18.538a6.491 6.491 0 0 1-4.296-1.621l-.001-.004c-.11-.094-.22-.188-.324-.291a6.027 6.027 0 0 1-.293-.326A6.47 6.47 0 0 1 5.466 12c0-1.746.679-3.387 1.914-4.621A6.488 6.488 0 0 1 12 5.465c1.599 0 3.105.576 4.295 1.62.111.096.224.19.326.295.104.104.2.214.295.324A6.482 6.482 0 0 1 18.537 12zM7.084 17.534h.001A7.349 7.349 0 0 0 12 19.413a7.35 7.35 0 0 0 5.239-2.174A7.354 7.354 0 0 0 19.412 12a7.364 7.364 0 0 0-1.876-4.916l1.013-1.012A8.777 8.777 0 0 1 20.834 12a8.765 8.765 0 0 1-2.589 6.246A8.764 8.764 0 0 1 12 20.834a8.782 8.782 0 0 1-5.93-2.285l1.014-1.015zm12.783 2.333A11.046 11.046 0 0 1 12 23.125a11.042 11.042 0 0 1-7.551-2.957l1.004-1.001a9.64 9.64 0 0 0 6.549 2.542 9.639 9.639 0 0 0 6.865-2.846A9.642 9.642 0 0 0 21.71 12a9.64 9.64 0 0 0-2.543-6.548l1.001-1.002c4.031 4.359 3.935 11.182-.301 15.417z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Circle" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Circle extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3G, create_fragment$3G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Circleci.svelte generated by Svelte v3.23.2 */

        function create_fragment$3H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.963 12c0-1.584 1.284-2.855 2.855-2.855 1.572 0 2.856 1.284 2.856 2.855 0 1.572-1.284 2.856-2.856 2.856-1.57 0-2.855-1.284-2.855-2.856zm2.855-12C6.215 0 1.522 3.84.19 9.025c-.01.036-.01.07-.01.12 0 .313.252.576.575.576H5.59c.23 0 .433-.13.517-.333.997-2.16 3.18-3.672 5.712-3.672 3.466 0 6.286 2.82 6.286 6.287 0 3.47-2.82 6.29-6.29 6.29-2.53 0-4.714-1.5-5.71-3.673-.097-.19-.29-.336-.517-.336H.755c-.312 0-.575.253-.575.576 0 .037.014.072.014.12C1.514 20.16 6.214 24 11.818 24c6.624 0 12-5.375 12-12 0-6.623-5.376-12-12-12z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CircleCI" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Circleci extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3H, create_fragment$3H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cirrusci.svelte generated by Svelte v3.23.2 */

        function create_fragment$3I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.406 15.477A4.587 4.587 0 0 1 24 18.955c0 2.531-2.053 4.59-4.577 4.59H1.113a1.113 1.113 0 0 1 0-2.226h18.31a2.36 2.36 0 0 0 2.35-2.364 2.36 2.36 0 0 0-2.35-2.364H1.113a1.113 1.113 0 0 1 0-2.227h18.31A2.36 2.36 0 0 0 21.773 12a2.36 2.36 0 0 0-2.35-2.364H1.113a1.113 1.113 0 1 1 0-2.227h18.31c1.296 0 2.35-1.06 2.35-2.364s-1.054-2.364-2.35-2.364a1.113 1.113 0 0 1 0-2.227C21.947.454 24 2.514 24 5.045c0 1.389-.62 2.635-1.594 3.477A4.587 4.587 0 0 1 24 12c0 1.389-.62 2.635-1.594 3.477z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cirrus CI" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cirrusci extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3I, create_fragment$3I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cisco.svelte generated by Svelte v3.23.2 */

        function create_fragment$3J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.331 18.171V17.06l-.022.01c-.25.121-.522.19-.801.203a1.186 1.186 0 01-.806-.237 1.038 1.038 0 01-.352-.498 1.21 1.21 0 01-.023-.667c.052-.225.178-.426.357-.569.16-.134.355-.218.562-.242a1.85 1.85 0 011.061.198l.024.013v-1.117l-.051-.014a2.862 2.862 0 00-1.011-.132 2.34 2.34 0 00-.903.206c-.287.132-.54.327-.739.571a2.221 2.221 0 00-.04 2.705c.295.378.709.645 1.175.756.491.12 1.006.102 1.487-.052l.082-.023M5.336 18.171V17.06l-.022.01c-.25.121-.522.19-.801.203a1.183 1.183 0 01-.806-.237 1.03 1.03 0 01-.351-.498 1.202 1.202 0 01-.024-.667c.052-.225.177-.426.357-.569.16-.134.355-.218.562-.242a1.85 1.85 0 011.061.198l.024.013v-1.117l-.051-.014a2.862 2.862 0 00-1.011-.132 2.344 2.344 0 00-.903.206 2.08 2.08 0 00-.74.571 2.224 2.224 0 00-.041 2.705 2.11 2.11 0 001.176.756c.491.12 1.005.102 1.487-.052l.083-.023M9.26 17.249l-.004.957.07.012c.22.041.441.069.664.085.195.019.391.022.587.012.187-.014.372-.049.551-.104.21-.06.405-.163.571-.305a1.16 1.16 0 00.333-.478 1.31 1.31 0 00-.007-.96 1.068 1.068 0 00-.298-.414 1.261 1.261 0 00-.438-.255l-.722-.268a.388.388 0 01-.197-.188.245.245 0 01.008-.219.382.382 0 01.154-.142.798.798 0 01.257-.074c.153-.022.308-.021.46.005.18.02.358.051.533.096l.038.008v-.883l-.069-.015a4.749 4.749 0 00-.543-.097 2.844 2.844 0 00-.714-.003c-.3.027-.585.143-.821.33-.16.126-.281.293-.351.484-.104.29-.105.608 0 .899.054.145.14.274.252.381.097.093.207.173.327.236.157.084.324.149.497.195.057.017.114.035.17.054l.085.031.024.01c.084.03.162.078.226.14.045.042.08.094.101.151a.325.325 0 01.001.161.339.339 0 01-.166.198.856.856 0 01-.275.086 2.032 2.032 0 01-.427.021 5.208 5.208 0 01-.557-.074 9.195 9.195 0 01-.287-.067l-.033-.006zm-2.475.995h1.05v-4.167h-1.05v4.167zm12.162-2.936a1.095 1.095 0 011.541.158 1.094 1.094 0 01-.157 1.541l-.017.014a1.096 1.096 0 01-1.367-1.713m-1.525.854a2.193 2.193 0 002.666 2.107 2.139 2.139 0 00.701-3.937 2.207 2.207 0 00-3.367 1.83M22.961 10.728a.52.52 0 001.039 0V9.573a.52.52 0 00-1.039 0v1.155M20.117 10.728a.522.522 0 001.041 0V8.139a.521.521 0 00-1.04 0v2.589M17.231 11.771a.521.521 0 001.039 0V6.17a.52.52 0 00-1.039 0v5.601M14.393 10.728a.521.521 0 001.04 0V8.139a.52.52 0 00-1.039 0v2.589M11.494 10.728a.522.522 0 001.039 0V9.573a.52.52 0 00-1.039 0v1.155M8.624 10.728a.52.52 0 001.039 0V8.139a.52.52 0 00-1.039 0v2.589M5.737 11.771a.52.52 0 001.039 0V6.17a.52.52 0 00-1.039 0v5.601M2.876 10.728a.522.522 0 001.04 0V8.139a.52.52 0 00-1.039 0v2.589M0 10.728a.521.521 0 001.039 0V9.573a.52.52 0 00-1.039 0v1.155");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cisco" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cisco extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3J, create_fragment$3J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Citrix.svelte generated by Svelte v3.23.2 */

        function create_fragment$3K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.295 12.954l1.0616 1.6337H24l-1.8279-2.73 1.6518-2.4358h-1.6473l-.88 1.3548-.8832-1.3548H18.766l1.6518 2.4357-1.8278 2.7301h1.6434l1.0616-1.6338m-6.7216-1.7087c0 .204-.0604.3492-.1845.4437-.1269.0967-.3315.1457-.608.1457h-.1835v-1.2312h.2065c.2838 0 .4858.05.6005.1486.1122.0965.169.2625.169.4932zm.386 1.3058c.3396-.087.6051-.2508.7903-.4875.199-.2545.3-.586.3-.9852 0-.57-.1748-.9938-.5193-1.2601-.34-.263-.9332-.3963-1.7626-.3963h-1.5975v5.1658h1.4271v-1.8165l1.0717 1.8165h1.6856l-1.3953-2.0367M7.4346 9.4219v1.27h1.3542v3.8958h1.4271v-3.8959h1.3478v-1.27H7.4346m-3.4557 3.2634l-.045.0577c-.154.1975-.3362.3463-.5271.4307-.2066.0912-.4188.1375-.6306.1375-.3804 0-.6956-.1202-.9367-.3572-.241-.2368-.3632-.5452-.3632-.9164 0-.4.1208-.7268.359-.9713.238-.244.5545-.3679.9409-.3679.218 0 .4313.0458.6338.1361.225.1002.386.2327.522.4297l.0469.0679.779-1.1874-.0352-.0319c-.4074-.3691-.8488-.611-1.3119-.719-.2281-.053-.489-.08-.7754-.08-.752 0-1.386.2591-1.8847.7698C.2526 10.5939 0 11.2426 0 12.0114c0 .7688.252 1.4152.7493 1.9214.4975.5062 1.132.763 1.886.763.3069 0 .5593-.0269.7719-.082.2349-.0611.8357-.2619 1.3414-.8084l.0312-.0338-.8009-1.0864m14.33-3.2633h-1.4226v5.1658h1.4226V9.422m-.706 5.5365c-.4866 0-.8825.396-.8825.8825 0 .4866.3959.8826.8825.8826s.8826-.396.8826-.8826c0-.4866-.396-.8825-.8826-.8825m-12.1867-.3707h1.4226V9.422H5.4162v5.1658m.706-5.546c.4867 0 .8826-.396.8826-.8825 0-.4868-.396-.8827-.8826-.8827-.4866 0-.8825.396-.8825.8827 0 .4866.3959.8825.8825.8825Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Citrix" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Citrix extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3K, create_fragment$3K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Citroen.svelte generated by Svelte v3.23.2 */

        function create_fragment$3L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.585 10.538C17.36 9.489 13.725 6.504 12 6.504c-1.726 0-5.36 2.983-6.583 4.033-.008-.248-.015-.399-.015-.62 0 0-.03-.364.293-.729 2.654-2.405 5.437-3.582 5.523-3.618.83-.35.783-.284.782-1.692 0 0 .037-.002.06 0 1.17.106 4.311 3.155 6.17 5.217.004.003.368.424.368.868 0 .208-.007.413-.013.575m-.05-1.72c-.198-.22-4.85-5.356-6.535-5.356-1.684 0-6.337 5.136-6.534 5.355-.02.022-.474.54-.474 1.146 0 .471.031.946.032.95 0 .022.011.222.123.277a.13.13 0 00.057.013.24.24 0 00.138-.055c.05-.044 4.79-4.231 6.658-4.231 1.868 0 6.608 4.187 6.656 4.23a.244.244 0 00.14.056c.02 0 .04-.004.058-.013.11-.055.122-.255.123-.278 0-.003.031-.478.031-.949 0-.605-.454-1.124-.473-1.146m.056 6.61c-1.225-1.05-4.864-4.038-6.591-4.038-1.728 0-5.365 2.987-6.59 4.038-.007-.248-.014-.4-.014-.62 0 0-.03-.365.293-.73 2.657-2.408 5.442-3.586 5.528-3.622.83-.35.784-.285.783-1.694 0 0 .037-.002.06 0 1.17.106 4.315 3.159 6.177 5.222.003.004.367.425.367.87 0 .207-.006.413-.013.575m-.05-1.723c-.197-.219-4.855-5.36-6.541-5.36s-6.344 5.141-6.541 5.36c-.02.022-.474.542-.474 1.147 0 .472.031.947.032.951 0 .022.011.223.123.277a.128.128 0 00.058.014.242.242 0 00.137-.055c.05-.045 4.795-4.236 6.665-4.236s6.615 4.191 6.663 4.233a.246.246 0 00.14.058c.02 0 .04-.005.058-.014.11-.054.122-.255.123-.278 0-.003.031-.478.031-.95 0-.605-.454-1.125-.474-1.147m-3.35 6.492h-.001a6.466 6.466 0 01-.376 0c-.415 0-.863-.315-.863-.824 0-.504.439-.806.86-.806.006 0 .211-.01.38 0 .425 0 .864.302.864.806 0 .509-.448.824-.863.824m.404-1.948c-.59-.013-1.19 0-1.194 0-.72 0-1.307.503-1.307 1.12 0 .628.586 1.138 1.307 1.138.005 0 .604.012 1.195 0 .722 0 1.309-.51 1.309-1.137 0-.612-.575-1.104-1.31-1.12m7.67 2.228H24v-1.076c0-.628-.56-1.121-1.274-1.121h-1.858c-.03 0-.102.007-.102.082v2.032c0 .054.04.083.079.083h.777v-1.7a.11.11 0 01.11-.114h.857c.236 0 .587.217.587.683v1.046s.002.085.09.085M7.757 18.717h1.147v-.35c0-.049-.035-.086-.082-.086H5.627a.083.083 0 00-.083.085v.35l.764.001c.286 0 .479.247.479.478v1.2c0 .04.035.083.084.083h.775V18.83c0-.062.05-.112.112-.112m-3.532 1.678c0 .049.044.083.084.083h.044l-.006.006c.022-.006.097-.006.357-.006h.38v-2.114a.084.084 0 00-.083-.084H4.31a.085.085 0 00-.084.084zm5.994-1.085v-.44c0-.12.085-.203.206-.203h1.14c.173 0 .32.146.32.32a.323.323 0 01-.323.323zm1.668 1.169h.852c-.013-.528-.56-.747-.623-.77l-.01-.005v-.03l.011-.002c.366-.082.62-.363.62-.684 0-.34-.33-.708-.866-.708H9.811a.443.443 0 00-.446.45v1.664a.08.08 0 00.082.083l.774.001-.001-.78h.73c.65 0 .918.473.938.78zm-8.965-1.46h.835c-.181-.46-.682-.776-1.257-.787l-.256-.005a10.959 10.959 0 00-.938.005c-.41.021-.67.115-.923.338a1.07 1.07 0 00-.384.807c0 .628.556 1.122 1.292 1.147.505.018.56.019 1.222 0 .613-.02 1.053-.3 1.243-.786h-.834a.078.078 0 00-.072.041.868.868 0 01-.754.425c-.171.007-.378 0-.378 0-.424 0-.863-.308-.863-.823v-.005c.003-.512.44-.818.865-.819.048-.002.219-.007.376 0 .309 0 .606.165.756.42.005.01.026.041.07.041m17.384 1.065h-2.02c-.068 0-.116-.045-.116-.11v-.419h1.75v-.385h-1.75l-.001-.383c0-.002-.001-.043.03-.075.023-.024.057-.036.1-.036h2.006v-.308a.081.081 0 00-.022-.061c-.028-.027-.073-.025-.076-.025h-2.81c-.009 0-.085.002-.085.086v1.664c0 .22.168.447.45.447h2.46c.02 0 .041-.009.058-.024a.08.08 0 00.026-.058v-.313m-.628-2.597a.55.55 0 00-.298-.077.558.558 0 00-.297.077c-.079.049-.141.115-.234.115-.093 0-.149-.066-.232-.115a.57.57 0 00-.297-.077.553.553 0 00-.298.077c-.082.05-.123.111-.123.182 0 .072.041.133.123.183.083.051.182.076.298.076a.563.563 0 00.29-.07c.075-.045.155-.12.239-.12.084 0 .16.067.234.114a.57.57 0 00.297.076c.12 0 .22-.025.3-.076.08-.05.12-.111.12-.183 0-.07-.04-.132-.122-.182Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Citroën" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Citroen extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3L, create_fragment$3L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Civicrm.svelte generated by Svelte v3.23.2 */

        function create_fragment$3M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.565 9.054c.248-.477.45-1.125.235-1.786-.25-.766-.939-1.275-2.051-1.511l-7.052-1.5L6.496.405C6.418.363 5.717 0 4.951 0 4.38 0 3.888.198 3.527.571c-.337.349-.539.834-.603 1.444a3.184 3.184 0 0 0-.199-.006c-1.089 0-1.648.456-1.926.839C.369 3.44.315 4.241.638 5.23l2.649 8.118.251 7.033c.044 1.222.719 2.536 2.098 2.537.264 0 .537-.051.82-.15.328.556.92 1.232 1.864 1.232.666 0 1.324-.357 1.956-1.063l5.11-5.697 6.783-4.283c.147-.094 1.444-.95 1.398-2.229-.022-.642-.362-1.202-1.002-1.674zM7.396 20.166l-2.328-7.134-.316-8.847 8.326 1.771 6.771 3.622-5.63 6.279-6.823 4.309zM20.377 7.51c.545.116.709.279.72.313.021.063-.017.196-.087.344l-1.623-.868.99.211zM4.951 1.792c.269 0 .607.145.7.193l1.738.929-2.693-.573c.013-.323.08-.484.12-.526.012-.011.062-.023.135-.023zm-2.61 2.882c-.195-.595-.093-.773-.092-.774.019-.026.167-.099.476-.099.083 0 .159.005.221.011l.109 3.05-.714-2.188zm2.988 15.642l-.029-.798.514 1.574a.68.68 0 0 1-.178.034c-.146 0-.293-.5-.307-.81zm3.614 1.424c-.414.463-.62.468-.622.468-.058 0-.185-.132-.301-.317l1.818-1.148-.895.997zm12.27-10.299l-1.445.913 1.695-1.89c.249.174.313.298.314.329.006.133-.287.468-.564.648z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CiviCRM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Civicrm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3M, create_fragment$3M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Claris.svelte generated by Svelte v3.23.2 */

        function create_fragment$3N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.56 0a3.34 3.34 0 00-.57.043L22.947 12 10.99 23.957c.132.022.307.043.57.043 6.626 0 12-5.375 12-12s-5.374-12-12-12zm-1.535 2.414C4.738 2.414.44 6.713.44 12s4.3 9.588 9.586 9.588c.264 0 .44-.023.57-.045L1.054 12l9.543-9.543a3.337 3.337 0 00-.57-.043zm.746 2.457c-.263 0-.438.021-.57.043L17.287 12l-7.086 7.086c.132.022.307.045.57.045 3.927 0 7.13-3.204 7.13-7.131s-3.203-7.129-7.13-7.129zm-.416 2.434A4.701 4.701 0 005.66 12a4.701 4.701 0 004.695 4.695c.264 0 .44-.023.57-.045L6.274 12l4.653-4.65a3.296 3.296 0 00-.57-.045Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Claris" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Claris extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3N, create_fragment$3N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Clickup.svelte generated by Svelte v3.23.2 */

        function create_fragment$3O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2 18.439l3.69-2.828c1.961 2.56 4.044 3.739 6.363 3.739 2.307 0 4.33-1.166 6.203-3.704L22 18.405C19.298 22.065 15.941 24 12.053 24 8.178 24 4.788 22.078 2 18.439zM12.04 6.15l-6.568 5.66-3.036-3.52L12.055 0l9.543 8.296-3.05 3.509z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ClickUp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Clickup extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3O, create_fragment$3O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cliqz.svelte generated by Svelte v3.23.2 */

        function create_fragment$3P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.387 18.146l4.19-1.402L12 12.027l4.716 11.578 1.403-4.19 3.917 3.917 1.268-1.268zm-7.387 1c.035 0 .07-.004.105-.004l1.908 4.686c-.654.11-1.326.172-2.013.172-6.617 0-12-5.383-12-12S5.383 0 12 0s12 5.383 12 12c0 .695-.063 1.376-.177 2.04l-4.683-1.908c0-.044.006-.087.006-.133A7.153 7.153 0 0 0 12 4.854a7.155 7.154 0 0 0-7.147 7.145A7.155 7.154 0 0 0 12 19.146z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cliqz" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cliqz extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3P, create_fragment$3P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Clockify.svelte generated by Svelte v3.23.2 */

        function create_fragment$3Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.979 8.248l5.438-5.514 1.557 1.577-5.438 5.514-1.558-1.577zm-2.203 5.635a1.911 1.911 0 0 1-1.364-.577 1.987 1.987 0 0 1-.562-1.385c0-1.082.862-1.96 1.925-1.96 1.064 0 1.928.878 1.928 1.96 0 .516-.201 1.012-.563 1.385a1.913 1.913 0 0 1-1.364.577zm9.222 5.695l-1.556 1.579-5.438-5.515 1.558-1.577 5.436 5.513zM12.834 20.403a8.12 8.12 0 0 0 3.097-.615l2.656 2.695A11.643 11.643 0 0 1 12.834 24C6.298 24 1 18.627 1 12S6.299 0 12.834 0c2.068 0 4.012.54 5.703 1.486l-2.611 2.65a8.127 8.127 0 0 0-3.092-.613c-4.577 0-8.287 3.78-8.287 8.44 0 4.661 3.71 8.44 8.287 8.44z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Clockify" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Clockify extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3Q, create_fragment$3Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Clojure.svelte generated by Svelte v3.23.2 */

        function create_fragment$3R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.503 12.216c-.119.259-.251.549-.387.858-.482 1.092-1.016 2.42-1.21 3.271a4.91 4.91 0 0 0-.112 1.096c0 .164.009.337.022.514.682.25 1.417.388 2.186.39a6.39 6.39 0 0 0 2.001-.326 3.808 3.808 0 0 1-.418-.441c-.854-1.089-1.329-2.682-2.082-5.362M8.355 6.813A6.347 6.347 0 0 0 5.657 12a6.347 6.347 0 0 0 2.625 5.134c.39-1.622 1.366-3.107 2.83-6.084-.087-.239-.186-.5-.297-.775-.406-1.018-.991-2.198-1.513-2.733a4.272 4.272 0 0 0-.947-.729M17.527 19.277c-.84-.105-1.533-.232-2.141-.446A7.625 7.625 0 0 1 4.376 12a7.6 7.6 0 0 1 2.6-5.73 5.582 5.582 0 0 0-1.324-.162c-2.236.02-4.597 1.258-5.58 4.602-.092.486-.07.854-.07 1.29 0 6.627 5.373 12 12 12 4.059 0 7.643-2.017 9.815-5.101-1.174.293-2.305.433-3.271.436-.362 0-.702-.02-1.019-.058M15.273 16.952c.074.036.242.097.475.163a6.354 6.354 0 0 0 2.6-5.115h-.002a6.354 6.354 0 0 0-6.345-6.345 6.338 6.338 0 0 0-1.992.324c1.289 1.468 1.908 3.566 2.507 5.862l.001.003c.001.002.192.637.518 1.48.326.842.789 1.885 1.293 2.645.332.51.697.876.945.983M12.001 0a11.98 11.98 0 0 0-9.752 5.013c1.134-.71 2.291-.967 3.301-.957 1.394.004 2.491.436 3.017.732.127.073.248.152.366.233A7.625 7.625 0 0 1 19.625 12a7.605 7.605 0 0 1-2.268 5.425c.344.038.709.063 1.084.061 1.328 0 2.766-.293 3.842-1.198.703-.592 1.291-1.458 1.617-2.757.065-.502.1-1.012.1-1.531 0-6.627-5.371-12-11.999-12");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Clojure" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Clojure extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3R, create_fragment$3R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/CloudSixSix.svelte generated by Svelte v3.23.2 */

        function create_fragment$3S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.985.317C7.0865 2.716 2.9666.4233 2.9666.4233 1.1064 3.486.216 6.1747 0 8.5272h23.9992c-.2165-2.3514-1.1074-5.0365-2.9665-8.0966 0 0-4.119 2.2905-9.0185-.1073zM5.2196 3.5273c.424 0 .7456.0853.8906.1594l-.1666.6417a1.7877 1.7877 0 0 0-.6865-.1334c-.6485 0-1.152.3871-1.152 1.1823 0 .7157.4282 1.1666 1.1572 1.1666.2464 0 .5202-.0537.6813-.1166l.124.6312c-.1505.0747-.4882.1594-.9282.1594-1.248 0-1.8916-.7751-1.8916-1.7927 0-1.2197.879-1.8979 1.9718-1.8979zm6.3144 0c1.1093 0 1.7145.8217 1.7145 1.8083 0 1.1717-.7179 1.8823-1.7739 1.8823-1.072 0-1.6989-.8006-1.6989-1.8187 0-1.071.6917-1.8719 1.7583-1.8719zm7.8091.0323c.6859 0 1.131.1226 1.4792.3823.3754.2757.6114.7149.6114 1.3458 0 .6837-.2517 1.1562-.6 1.4479-.3808.3125-.9594.4604-1.6666.4604-.424 0-.7244-.026-.928-.0521V3.6336c.2996-.048.6913-.074 1.104-.074zM7.003 3.5867h.8198v2.8947H9.258v.6781H7.003zm7.1779 0h.8208V5.643c0 .615.235.9281.6531.9281.4293 0 .6646-.2972.6646-.928V3.5866h.8156v2.003c0 1.103-.5638 1.6282-1.5073 1.6282-.9109 0-1.4468-.4988-1.4468-1.6385zm-2.6718.5823c-.5504 0-.8708.5212-.8708 1.2166 0 .7013.332 1.1958.877 1.1958.55 0 .8646-.5212.8646-1.2166 0-.6432-.3097-1.1958-.8708-1.1958zm7.9206.0104c-.1824 0-.301.0163-.3708.0323v2.3437c.0698.016.1825.0156.2843.0156.7398.0053 1.2219-.3987 1.2219-1.2541.0053-.744-.4336-1.1375-1.1354-1.1375zM.0052 9.7886c-.281 10.276 11.9798 13.8881 11.9798 13.8881l.0292.0063S24.281 20.0688 23.9951 9.7886h-.001zm10.7684 1.2802a5.5849 5.5849 0 0 1 .326.0083v1.4125c-.2117 0-.4367 0-.7364.024-1.6853.1333-2.434.967-2.6457 1.8842h.0375c.3989-.3983.9613-.628 1.7228-.628 1.36 0 2.5083.93 2.5083 2.5603 0 1.5583-1.2358 2.8384-2.9958 2.8384-2.1588 0-3.2196-1.557-3.2196-3.429 0-1.4736.5618-2.706 1.4353-3.4916.8112-.7125 1.8592-1.099 3.1322-1.1593a5.5849 5.5849 0 0 1 .4354-.0198zm6.9269 0a5.5849 5.5849 0 0 1 .327.0083v1.4125c-.2117 0-.4367 0-.7364.024-1.6853.1333-2.434.967-2.6457 1.8842h.0375c.3989-.3983.9613-.628 1.7228-.628 1.36 0 2.5072.93 2.5072 2.5603 0 1.5583-1.2352 2.8384-2.9947 2.8384-2.1593 0-3.2196-1.557-3.2196-3.429 0-1.4736.5618-2.706 1.4353-3.4916.8112-.7125 1.8592-1.099 3.1322-1.1593a5.5849 5.5849 0 0 1 .4344-.0198zm-8.8477 4.0061c-.512 0-.9356.301-1.1228.7-.0496.096-.075.2423-.075.4593.0373.8336.449 1.5823 1.3103 1.5823h.0125c.6614 0 1.0854-.5928 1.0854-1.3896 0-.7253-.3992-1.352-1.2104-1.352zm6.928 0c-.512 0-.9357.301-1.123.7-.0495.096-.075.2423-.075.4593.0374.8336.4491 1.5823 1.3105 1.5823h.0125c.6613 0 1.0853-.5928 1.0853-1.3896 0-.7253-.3992-1.352-1.2103-1.352Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cloud 66" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class CloudSixSix extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3S, create_fragment$3S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cloudbees.svelte generated by Svelte v3.23.2 */

        function create_fragment$3T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.55 6.41c0-1.2.73-2.28 1.88-2.8A3.51 3.51 0 0 1 8.94 4l2.52-2.35A7.25 7.25 0 0 0 3.22.98a6.22 6.22 0 0 0-2.95 7.2 6.82 6.82 0 0 0 6.6 4.64h2.58v-3.3H6.87C5.04 9.5 3.55 8.11 3.55 6.4zm13.51 4.73h-2.58v3.3h2.58c1.83 0 3.32 1.4 3.32 3.1 0 1.72-1.49 3.1-3.32 3.1s-3.32-1.37-3.32-3.08V6.4c0-1.58-.63-3.11-1.76-4.29L9.46 4.48c.47.53.73 1.22.73 1.93v11.14c0 3.54 3.08 6.41 6.87 6.41 3.8 0 6.87-2.87 6.87-6.41s-3.07-6.41-6.87-6.41z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CloudBees" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cloudbees extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3T, create_fragment$3T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cloudcannon.svelte generated by Svelte v3.23.2 */

        function create_fragment$3U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.686 7.602c.321-1.964-1.203-3.778-3.21-3.778-.91 0-1.733.376-2.325.977a1.132 1.132 0 0 0-1.061-.744c-.63 0-1.141.51-1.141 1.14s.429.909 1.34 1.335a5.884 5.884 0 0 1 .813.46c.275.184.534.388.776.612A6.02 6.02 0 0 1 17.796 12a6.02 6.02 0 0 1-2.694 5.008 6.16 6.16 0 0 1-.813.46c-.911.427-1.34.704-1.34 1.335 0 .63.51 1.141 1.14 1.141.492 0 .9-.312 1.062-.744.592.6 1.414.976 2.325.976 2.025 0 3.527-1.81 3.21-3.778C22.61 15.842 24 14.026 24 12.001c0-2.038-1.382-3.837-3.314-4.399zM9.711 17.468a6.193 6.193 0 0 1-1.589-1.073A6.02 6.02 0 0 1 6.204 12a6.02 6.02 0 0 1 1.918-4.395 6.22 6.22 0 0 1 1.589-1.072c.91-.427 1.34-.704 1.34-1.335s-.51-1.141-1.14-1.141c-.492 0-.9.312-1.062.744a3.257 3.257 0 0 0-2.325-.976c-2.003 0-3.536 1.807-3.21 3.778C1.381 8.164 0 9.962 0 12c0 2.028 1.38 3.836 3.314 4.397-.323 1.954 1.198 3.778 3.21 3.778.91 0 1.733-.375 2.325-.976.162.432.57.744 1.061.744.63 0 1.141-.51 1.141-1.14 0-.631-.429-.909-1.34-1.335zM12 8.443a3.557 3.557 0 1 1 0 7.114 3.557 3.557 0 0 1 0-7.114z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CloudCannon" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cloudcannon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3U, create_fragment$3U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cloudflare.svelte generated by Svelte v3.23.2 */

        function create_fragment$3V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.5088 16.8447c.1475-.5068.0908-.9707-.1553-1.3154-.2246-.3164-.6045-.499-1.0615-.5205l-8.6592-.1123a.1559.1559 0 0 1-.1333-.0713c-.0283-.042-.0351-.0986-.021-.1553.0278-.084.1123-.1484.2036-.1562l8.7359-.1123c1.0351-.0489 2.1601-.8868 2.5537-1.9136l.499-1.3013c.0215-.0561.0293-.1128.0147-.168-.5625-2.5463-2.835-4.4453-5.5499-4.4453-2.5039 0-4.6284 1.6177-5.3876 3.8614-.4927-.3658-1.1187-.5625-1.794-.499-1.2026.119-2.1665 1.083-2.2861 2.2856-.0283.31-.0069.6128.0635.894C1.5683 13.171 0 14.7754 0 16.752c0 .1748.0142.3515.0352.5273.0141.083.0844.1475.1689.1475h15.9814c.0909 0 .1758-.0645.2032-.1553l.12-.4268zm2.7568-5.5634c-.0771 0-.1611 0-.2383.0112-.0566 0-.1054.0415-.127.0976l-.3378 1.1744c-.1475.5068-.0918.9707.1543 1.3164.2256.3164.6055.498 1.0625.5195l1.8437.1133c.0557 0 .1055.0263.1329.0703.0283.043.0351.1074.0214.1562-.0283.084-.1132.1485-.204.1553l-1.921.1123c-1.041.0488-2.1582.8867-2.5527 1.914l-.1406.3585c-.0283.0713.0215.1416.0986.1416h6.5977c.0771 0 .1474-.0489.169-.126.1122-.4082.1757-.837.1757-1.2803 0-2.6025-2.125-4.727-4.7344-4.727");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cloudflare" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cloudflare extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3V, create_fragment$3V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cloudsmith.svelte generated by Svelte v3.23.2 */

        function create_fragment$3W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.15 0a4.146 4.146 0 0 0-2.94 1.225c-.981.98-1.34 2.288-1.177 3.53-.458 2.548-2.843 2.908-3.889 2.94-1.176-.098-2.352.327-3.235 1.21a4.142 4.142 0 0 0 0 5.88 4.142 4.142 0 0 0 5.882 0A4.136 4.136 0 0 0 12 12.108v-.23c.097-3.104 2.777-3.529 3.92-3.561h.523c.98-.066 1.928-.458 2.647-1.21a4.142 4.142 0 0 0 0-5.88A4.146 4.146 0 0 0 16.15 0zm-.327 15.7a4.15 4.15 0 0 0-4.15 4.15 4.15 4.15 0 0 0 4.15 4.15 4.15 4.15 0 0 0 4.15-4.15 4.15 4.15 0 0 0-4.15-4.15z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cloudsmith" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cloudsmith extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3W, create_fragment$3W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Clubhouse.svelte generated by Svelte v3.23.2 */

        function create_fragment$3X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.74219 17.9588C0.78125 17.9588 0 18.7528 0 19.7294C0 20.6981 0.78125 21.5 1.74219 21.5C2.70312 21.5 3.48438 20.6981 3.48438 19.7294C3.48438 18.7528 2.71094 17.9588 1.74219 17.9588ZM23.1797 2.5L12.2188 6.05704V2.54764L0.390624 6.38257V16.5694L10.5938 13.2585V16.752L24 12.4089L20.3672 8.80422L23.1797 2.5ZM10.5938 11.5117L2.02344 14.2906V7.58943L10.5938 4.81049V11.5117ZM20.9688 11.6546L12.2188 14.4971V7.8038L20.2734 5.18366L18.4219 9.15357L20.9688 11.6546Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Clubhouse" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Clubhouse extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3X, create_fragment$3X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Clyp.svelte generated by Svelte v3.23.2 */

        function create_fragment$3Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 17.958a1.137 1.137 0 01-1.138-1.136V7.233a1.137 1.137 0 012.276 0v9.59c0 .627-.51 1.135-1.138 1.135m7.439 2.44A1.137 1.137 0 0118.3 19.26V4.794a1.137 1.137 0 012.276 0v14.467c0 .627-.51 1.136-1.138 1.136M15.719 24a1.137 1.137 0 01-1.138-1.136V1.136a1.137 1.137 0 012.276 0v21.728c0 .627-.509 1.136-1.138 1.136m-7.438-3.16a1.137 1.137 0 01-1.138-1.136V4.296a1.137 1.137 0 012.276 0v15.408c0 .628-.51 1.137-1.138 1.137m-3.72-4.989a1.137 1.137 0 01-1.138-1.136V9.284a1.137 1.137 0 012.276 0v5.432c0 .627-.51 1.136-1.138 1.136Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Clyp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Clyp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3Y, create_fragment$3Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cmake.svelte generated by Svelte v3.23.2 */

        function create_fragment$3Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.769.066L.067 23.206l12.76-10.843zM23.207 23.934L7.471 17.587 0 23.934zM24 23.736L12.298.463l1.719 19.24zM12.893 12.959l-5.025 4.298 5.62 2.248z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CMake" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cmake extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3Z, create_fragment$3Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cnn.svelte generated by Svelte v3.23.2 */

        function create_fragment$3_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.9962 15.514c0 2.0638-2.6676 3.0547-4.0789.6576-.1012-.173-2.3252-4.0032-2.3252-4.0032v3.3457c0 2.0637-2.6663 3.0546-4.0776.6575-.1025-.173-2.3253-4.0032-2.3253-4.0032v3.1547c0 1.4318-.8498 2.2073-2.1791 2.2073H5.5299a5.5299 5.5299 0 010-11.0598h1.7946v1.328H5.5299a4.2019 4.2019 0 100 8.4038h3.4494a.8973.8973 0 00.8794-.878V8.524a.2692.2692 0 01.1935-.273c.141-.0384.2897.0487.3987.2333l2.1522 3.7084c1.251 2.1573 2.0728 3.5738 2.083 3.5892.2807.4742.6986.5576.9973.4755a.7973.7973 0 00.582-.787v-6.945a.2705.2705 0 01.191-.2744c.1397-.0384.287.0487.3947.2333l1.9946 3.4366 2.242 3.8648c.2191.3717.5242.5038.7896.5038a.7691.7691 0 00.2063-.0282.7986.7986 0 00.591-.791V6.4707H24zM8.0026 13.9695V8.4857c0-2.0638 2.6675-3.0546 4.0788-.6563.1025.173 2.3253 4.002 2.3253 4.002V8.4856c0-2.0638 2.6662-3.0546 4.0775-.6563.1026.173 2.3253 4.002 2.3253 4.002V6.4705H22.14v8.9999a.2705.2705 0 01-.1935.2743c-.141.0384-.2897-.0487-.3987-.2333a1360.4277 1360.4277 0 01-2.2406-3.8622l-1.9946-3.434c-.2794-.4744-.696-.5577-.9921-.477a.7986.7986 0 00-.5833.7858v6.9464a.2718.2718 0 01-.1935.2743c-.1423.0384-.291-.0487-.3987-.2333-.0192-.032-1.069-1.8407-2.083-3.5892a6211.7971 6211.7971 0 00-2.1535-3.711c-.2794-.4755-.6973-.5575-.996-.4768a.7999.7999 0 00-.5845.7858v6.8002a.3717.3717 0 01-.3487.3474h-3.452a3.6712 3.6712 0 010-7.3424H7.322v1.328H5.5427a2.3432 2.3432 0 100 4.6864H7.636a.364.364 0 00.3666-.3705Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CNN" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cnn extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3_, create_fragment$3_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/CoOp.svelte generated by Svelte v3.23.2 */

        function create_fragment$3$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.275 5.265c0-.852-.132-1.703-.36-2.555-.328-1.016-1.081-1.834-2.031-2.194a9.248 9.248 0 0 0-6.092 0 3.168 3.168 0 0 0-2.03 2.194 9.532 9.532 0 0 0 0 5.077c.326 1.015 1.08 1.834 2.03 2.194a8.04 8.04 0 0 0 3.046.491c1.049 0 2.063-.196 3.046-.491a3.172 3.172 0 0 0 2.031-2.194c.229-.819.36-1.67.36-2.522zm-3.308 0c0 .393-.065.852-.196 1.212-.164.524-.623.95-1.18 1.081a4.233 4.233 0 0 1-1.571 0 1.473 1.473 0 0 1-1.18-1.081 4.025 4.025 0 0 1 0-2.489c.163-.524.622-.95 1.18-1.081a4.233 4.233 0 0 1 1.571 0 1.476 1.476 0 0 1 1.18 1.081c.13.458.196.884.196 1.277m-8.745 13.79a9.552 9.552 0 0 0 0-5.077c-.327-1.016-1.081-1.834-2.03-2.195a9.248 9.248 0 0 0-6.092 0 3.173 3.173 0 0 0-2.031 2.195 9.552 9.552 0 0 0 0 5.077c.328 1.015 1.081 1.834 2.031 2.193a9.248 9.248 0 0 0 6.092 0 3.392 3.392 0 0 0 2.03-2.193m-2.948-2.523c0 .393-.066.852-.197 1.212a1.644 1.644 0 0 1-1.179 1.081 4.238 4.238 0 0 1-1.572 0 1.477 1.477 0 0 1-1.179-1.081 4.04 4.04 0 0 1 0-2.489 1.64 1.64 0 0 1 1.179-1.081 4.196 4.196 0 0 1 1.572 0 1.476 1.476 0 0 1 1.179 1.081c.131.426.197.851.197 1.277m0-11.3h3.308c0-.851-.131-1.703-.36-2.521-.327-1.016-1.081-1.834-2.03-2.194a9.248 9.248 0 0 0-6.092 0C2.084.909 1.331 1.728 1.068 2.743a9.552 9.552 0 0 0 0 5.077c.328 1.015 1.081 1.834 2.031 2.194.982.36 1.998.492 3.046.492 1.048 0 2.063-.197 3.046-.492a3.17 3.17 0 0 0 2.03-2.194c.033-.131.065-.295.131-.426L8.241 5.953c-.033.196-.065.36-.131.557-.163.524-.622.95-1.179 1.081a4.238 4.238 0 0 1-1.572 0A1.478 1.478 0 0 1 4.18 6.51a4.04 4.04 0 0 1 0-2.489c.164-.524.622-.95 1.179-1.082a4.238 4.238 0 0 1 1.572 0A1.476 1.476 0 0 1 8.11 4.021c.098.425.164.818.164 1.211m4.421 8.779a9.442 9.442 0 0 0-.36 2.555V24h3.308v-7.468c0-.393.065-.852.196-1.212.163-.524.622-.95 1.18-1.081a4.191 4.191 0 0 1 1.571 0 1.478 1.478 0 0 1 1.18 1.081 4.04 4.04 0 0 1 0 2.489c-.164.523-.623.95-1.146 1.08a4.196 4.196 0 0 1-1.572 0c-.099-.031-.229-.064-.327-.098l1.113 3.079c1.049 0 2.063-.197 3.046-.491a3.175 3.175 0 0 0 2.031-2.194 9.552 9.552 0 0 0 0-5.077c-.328-1.016-1.081-1.834-2.031-2.195a9.248 9.248 0 0 0-6.092 0c-1.016.263-1.769 1.082-2.097 2.098");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$3$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Co-op" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class CoOp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$3$, create_fragment$3$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cocoapods.svelte generated by Svelte v3.23.2 */

        function create_fragment$40(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.812 17.176c-2.968 0-4.956-2.308-4.956-5.176 0-2.705 1.776-5.176 4.91-5.176 2.407 0 3.856 1.445 4.207 3.357h3.95C16.479 6.427 13.51 3.42 8.718 3.42 3.131 3.42 0 7.523 0 12c0 4.57 3.295 8.58 8.766 8.58 4.58 0 7.549-2.822 8.18-6.272h-4.02c-.467 1.609-1.916 2.868-4.114 2.868zM24 12.068l-3.466 8.055-2.38-1.022 2.992-7.055-3.01-7.096 2.433-1.042Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$40($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CocoaPods" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cocoapods extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$40, create_fragment$40, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Coda.svelte generated by Svelte v3.23.2 */

        function create_fragment$41(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.194 0H2.806A2.01 2.01 0 0 0 .8 2v20c0 1.1.903 2 2.006 2h18.388a2.01 2.01 0 0 0 2.006-2v-.933c-.033-1.2-.067-3.7-.067-4.834 0-.633-.468-1.166-1.07-1.166-.668 0-1.103.4-1.437.733-1.003.9-2.508 1.067-3.812.833-.601-.133-1.17-.3-1.638-.6-1.438-.833-2.374-2.4-2.374-4.066 0-1.667.936-3.2 2.374-4.067.502-.3 1.07-.467 1.638-.6 1.27-.233 2.809-.067 3.812.833.367.334.802.734 1.437.734.602 0 1.07-.534 1.07-1.167 0-1.1.034-3.633.067-4.833V2c0-1.1-.903-2-2.006-2Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$41($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Coda" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Coda extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$41, create_fragment$41, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codacy.svelte generated by Svelte v3.23.2 */

        function create_fragment$42(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.883 9.825a8.46 8.46 0 0 1 3.875-5.07l.04-.021-1.803-3.113C3.276 3.212 1.268 5.769.427 8.81l-.02.084zM9.824 3.894a8.246 8.246 0 0 1 2.164-.283h.005V.016h-.019a12.05 12.05 0 0 0-3.165.421l.084-.02zM14.178 3.897a8.449 8.449 0 0 1 5.063 3.875l.021.04 3.117-1.799c-1.591-2.718-4.146-4.726-7.186-5.568l-.084-.02zM0 12v.006c0 1.1.148 2.165.425 3.177l-.02-.084 3.476-.929a8.14 8.14 0 0 1-.284-2.161v-.008zM1.605 17.995c.55.941 1.18 1.754 1.901 2.475l2.553-2.54a8.56 8.56 0 0 1-1.313-1.695l-.022-.04zM5.995 22.38a11.77 11.77 0 0 0 5.967 1.604h.021-.001v-3.595h-.004a8.308 8.308 0 0 1-4.223-1.145l.039.021zM19.259 16.205a8.44 8.44 0 0 1-5.034 3.884l-.059.014.931 3.476c3.124-.86 5.681-2.863 7.246-5.52l.031-.056zM23.577 15.221c.268-.947.423-2.035.423-3.159 0-1.087-.144-2.14-.415-3.142l.019.084-3.486.931c.175.64.275 1.374.275 2.132 0 .79-.109 1.555-.313 2.28l.014-.059z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$42($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Codacy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codacy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$42, create_fragment$42, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codeclimate.svelte generated by Svelte v3.23.2 */

        function create_fragment$43(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M 16.046875 5.039062 L 24 12.992188 L 21.292969 15.703125 L 16.046875 10.457031 L 14.203125 12.308594 L 11.488281 9.597656 Z M 10.652344 10.4375 L 13.359375 13.152344 L 15.90625 15.691406 L 13.191406 18.398438 L 7.953125 13.160156 L 3.777344 17.335938 L 2.707031 18.398438 L 0 15.691406 L 7.953125 7.738281 Z M 10.652344 10.4375");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$43($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Code Climate" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codeclimate extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$43, create_fragment$43, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codecademy.svelte generated by Svelte v3.23.2 */

        function create_fragment$44(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.827 19.73h-5.595c-.094 0-.17.058-.17.172v1.515c0 .094.058.17.172.17h5.594c.096 0 .172-.044.172-.164v-1.515c0-.105-.057-.166-.173-.166v-.014.002zM16.463 2.465c.016.035.03.068.047.12v18.79c0 .061-.02.096-.037.114a.168.168 0 0 1-.135.06H.153c-.038 0-.075 0-.097-.02A.181.181 0 0 1 0 21.395V2.566c0-.076.04-.134.096-.15h16.242c.04 0 .096.017.115.034v.016l.01-.001zM1.818 19.575c0 .073.038.136.096.153h12.643c.058-.019.096-.076.096-.154V4.404c0-.073-.039-.134-.098-.15H1.915c-.056.02-.096.073-.096.15l-.003 15.17.002.001zm5.174-8.374c.65 0 1.014.177 1.396.619.058.075.153.094.23.035l1.034-.92c.075-.044.058-.164.02-.224-.635-.764-1.554-1.244-2.74-1.244-1.59 0-2.79.795-3.255 2.206-.165.495-.24 1.126-.24 1.979 0 .855.075 1.484.255 1.98.465 1.426 1.665 2.205 3.255 2.205 1.2 0 2.115-.48 2.745-1.216.045-.074.06-.165-.015-.226L8.64 15.48c-.073-.047-.163-.047-.224.027-.39.45-.795.69-1.454.69-.706 0-1.245-.345-1.47-1.035-.136-.39-.166-.87-.166-1.483 0-.615.045-1.068.18-1.471.24-.659.766-1.007 1.486-1.007z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$44($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Codecademy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codecademy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$44, create_fragment$44, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codechef.svelte generated by Svelte v3.23.2 */

        function create_fragment$45(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.007 0c-.787.031-1.515.37-2.222.685a12.27 12.27 0 01-1.864.703c-.635.176-1.3.354-1.814.788-.222.18-.356.439-.529.662-.309.486-.448 1.067-.457 1.638.036.61.216 1.2.376 1.786.368 1.262.807 2.503 1.197 3.759.366 1.161.703 2.344 1.294 3.416.197.394.35.808.535 1.206.027.067.052.158.142.149.136-.012.243-.115.368-.164.828-.414 1.74-.642 2.655-.749.708-.074 1.43-.078 2.131.054.72.163 1.417.426 2.092.724.36.172.719.348 1.088.498.048.04.135.058.16-.016.219-.327.469-.635.667-.976.495-1.061.522-2.279 1.038-3.331.358-.721.892-1.337 1.266-2.048.175-.266.431-.467.588-.747.437-.669.78-1.398 1.05-2.15.102-.293.172-.612.09-.919-.06-.299-.202-.57-.318-.848a2.481 2.481 0 00-.278-.66c-.407-.676-1.07-1.149-1.743-1.536-1.045-.59-2.196-.969-3.351-1.28A20.733 20.733 0 0011.426.01a5.005 5.005 0 00-.42-.01zm-.889.606c-.261.223-.363.569-.468.883-.168.568-.263 1.163-.207 1.756.064 1.062.197 2.12.33 3.175.18 1.352.387 2.7.677 4.034.026.165.064.347.05.51-.115-.175-.182-.383-.258-.58-.25-.765-.432-1.549-.604-2.334a26.008 26.008 0 01-.562-4.317c-.025-.843-.004-1.726.37-2.501.118-.226.259-.46.48-.597a.411.411 0 01.218-.049l-.026.02zM6.516 1.77c.128 0 .139.159.168.252.266.798.422 1.628.679 2.428.174.649.238 1.323.308 1.991.097 1.039.108 2.085.246 3.12.026.199.082.393.119.59.01.067-.059.049-.083.014-.148-.161-.183-.391-.246-.592-.16-.645-.242-1.305-.334-1.962-.174-1.316-.287-2.64-.529-3.945-.158-.612-.356-1.215-.46-1.838.006-.051.093-.048.132-.058zM4.589 3.607c.229.056.365.268.512.434.4.535.54 1.204.695 1.843.283 1.265.446 2.553.725 3.82.131.666.293 1.326.507 1.971.014.051.035.133.038.17-.233-.43-.393-.896-.565-1.353-.598-1.698-.823-3.496-1.3-5.228-.133-.478-.308-.95-.596-1.358-.047-.088-.08-.204-.037-.297.006-.004.014-.003.02-.002zm12.646 13.196c-.136.007-.31.11-.276.267.094.218.334.308.526.416.441.216.938.29 1.358.546.092.06.149.197.064.287-.18.266-.47.44-.723.634-.372.266-.777.51-1.057.879-.066.107-.041.267.082.32.109.079.243.018.338-.051.518-.294.995-.654 1.478-1.002.32-.239.644-.477.926-.76.085-.135-.03-.274-.118-.371-.273-.285-.62-.487-.965-.67a4.959 4.959 0 00-1.458-.495 1.251 1.251 0 00-.175 0zM5.96 16.83c-.527.134-.997.42-1.474.673-.425.243-.854.496-1.205.841a.699.699 0 00-.172.488c.065.108.2.14.301.206.852.442 1.735.822 2.63 1.168.132.042.265.113.406.107.158-.02.309-.204.213-.356-.146-.243-.42-.361-.65-.506-.547-.303-1.154-.512-1.636-.918-.046-.091.094-.128.142-.18.549-.395 1.229-.593 1.713-1.077.089-.09.164-.259.048-.358-.086-.073-.206-.087-.316-.088zm8.115.793c-.43.027-.835.431-.774.876.032.259.089.525.228.749.12.18.33.286.546.287.273.031.59-.059.726-.318.137-.237.212-.514.205-.787-.038-.46-.466-.845-.93-.807zm-4.49.01c-.464.028-.807.505-.77.953.011.444.315.902.765.994.352.06.71-.19.803-.53.125-.35.132-.761-.044-1.095-.157-.25-.478-.327-.754-.322zm.112.653c.241.064.294.47.045.558-.141.034-.239-.12-.234-.244-.008-.127.05-.287.189-.314zm4.437.143c.097 0 .226.071.19.187-.013.171-.215.333-.377.226-.132-.07-.172-.296-.02-.368a.418.418 0 01.207-.045zm-3.518 2.977c-.553.051-1.044.335-1.542.559-.304.156-.662.312-1.005.187-.377-.12-.707-.35-1.059-.52-.075-.013-.061.077-.047.122.081.53.129 1.102.454 1.55.338.437.902.618 1.433.667.797.072 1.642-.118 2.271-.629.309-.262.571-.631.585-1.049-.006-.324-.244-.596-.524-.734a1.085 1.085 0 00-.566-.153zm2.58.008c-.396.052-.815.262-.972.65-.129.358.034.748.272 1.02.426.509 1.07.793 1.718.884.577.078 1.186.014 1.714-.24.438-.225.767-.655.85-1.142.064-.291.081-.59.124-.884-.066-.078-.148.038-.218.052-.337.142-.647.367-1.01.435-.363.024-.687-.172-1.015-.293-.43-.178-.851-.403-1.315-.478a1.21 1.21 0 00-.147-.004zm-2.881-5.091c-.07 0-.143.014-.216.03a2.93 2.93 0 00-.454.152c-.15.061-.292.127-.407.18a4.07 4.07 0 01-.218.092.277.277 0 01-.182-.034c-.062-.037-.12-.101-.141-.255l-.27.038c.031.218.14.37.27.45.13.079.268.09.378.067.085-.018.16-.058.276-.111.116-.053.255-.118.397-.176.143-.058.288-.11.41-.138a.52.52 0 01.252-.009c.14.06.19.13.215.179.025.05.03.067.03.067l.263-.06s.002-.024-.05-.128a.678.678 0 00-.35-.307.482.482 0 00-.204-.037zm2.744 3.937a.136.136 0 00-.102.05s-.122.148-.286.295c-.165.148-.38.28-.493.283-.112.003-.314-.118-.47-.26-.155-.14-.267-.284-.267-.284a.136.136 0 10-.214.167s.124.16.299.319c.175.16.397.337.66.33.259-.008.484-.19.666-.352.182-.163.315-.325.315-.325a.136.136 0 00-.108-.223zM11.007.001c-.787.03-1.515.368-2.222.684a12.27 12.27 0 01-1.864.703c-.635.176-1.3.354-1.814.788-.222.18-.356.44-.529.663-.309.485-.448 1.066-.457 1.637.036.61.216 1.2.376 1.786.368 1.263.807 2.503 1.197 3.759.366 1.161.703 2.344 1.294 3.417.197.393.35.807.535 1.205.027.067.052.158.142.15.136-.013.243-.116.368-.165.828-.414 1.74-.641 2.655-.749.708-.074 1.43-.078 2.131.055.72.163 1.417.425 2.092.723.36.172.719.348 1.088.498.048.04.135.058.16-.016.219-.327.469-.635.667-.975.495-1.062.522-2.28 1.038-3.332.358-.721.892-1.336 1.266-2.047.175-.266.431-.468.588-.747.437-.67.78-1.4 1.05-2.151.102-.293.172-.612.09-.919-.06-.298-.202-.57-.318-.848a2.481 2.481 0 00-.278-.659c-.407-.676-1.07-1.15-1.743-1.536-1.045-.591-2.196-.97-3.351-1.281A20.733 20.733 0 0011.426.01a5.005 5.005 0 00-.42-.01zm-.889.606c-.261.222-.363.568-.468.883-.168.567-.263 1.163-.207 1.755.064 1.062.197 2.12.33 3.175.18 1.352.387 2.701.677 4.034.026.165.064.347.05.51-.115-.175-.182-.383-.258-.58-.25-.765-.432-1.549-.604-2.334a26.008 26.008 0 01-.562-4.316c-.025-.844-.004-1.727.37-2.502.118-.225.259-.46.48-.597a.411.411 0 01.218-.049l-.026.02zM6.516 1.77c.128 0 .139.16.168.252.266.798.422 1.628.679 2.429.174.648.238 1.322.308 1.99.097 1.04.108 2.086.246 3.12.026.199.082.394.119.59.01.068-.059.05-.083.014-.148-.16-.183-.39-.246-.592-.16-.645-.242-1.304-.334-1.962-.174-1.315-.287-2.64-.529-3.945-.158-.612-.356-1.215-.46-1.838.006-.051.093-.048.132-.058zM4.589 3.608c.229.055.365.267.512.433.4.535.54 1.204.695 1.843.283 1.265.446 2.554.725 3.82.131.666.293 1.327.507 1.971.014.051.035.133.038.17-.233-.43-.393-.896-.565-1.352-.598-1.7-.823-3.497-1.3-5.23-.133-.477-.308-.95-.596-1.357-.047-.087-.08-.204-.037-.296.006-.004.014-.003.02-.002zm12.646 13.195c-.136.007-.31.11-.276.268.094.217.334.307.526.416.441.215.938.289 1.358.545.092.06.149.197.064.287-.18.267-.47.44-.723.634-.372.266-.777.51-1.057.879-.066.107-.041.267.082.32.109.079.243.019.338-.05.518-.295.995-.655 1.478-1.002.32-.24.644-.478.926-.761.085-.135-.03-.274-.118-.37-.273-.286-.62-.488-.965-.672a4.959 4.959 0 00-1.458-.493 1.251 1.251 0 00-.175-.001zm-11.276.029c-.527.133-.997.42-1.474.672-.425.243-.854.497-1.205.842a.699.699 0 00-.172.487c.065.109.2.14.301.206.852.442 1.735.823 2.63 1.168.132.042.265.113.406.108.158-.02.309-.205.213-.357-.146-.243-.42-.361-.65-.506-.547-.303-1.154-.512-1.636-.918-.046-.09.094-.128.142-.18.549-.394 1.229-.592 1.713-1.077.089-.09.164-.258.048-.357-.086-.074-.206-.088-.316-.088zm8.115.792c-.43.028-.835.432-.774.876.032.26.089.526.228.75.12.179.33.285.546.287.273.03.59-.06.726-.319.137-.236.212-.514.205-.787-.038-.46-.466-.844-.93-.807zm-4.49.01c-.464.028-.807.505-.77.953.011.444.315.902.765.995.352.059.71-.19.803-.53.125-.35.132-.762-.044-1.096-.157-.249-.478-.327-.754-.322zm.112.654c.241.063.294.47.045.557-.141.034-.239-.12-.234-.244-.008-.127.05-.287.189-.313zm4.437.142c.097 0 .226.072.19.187-.013.172-.215.333-.377.227-.132-.071-.172-.297-.02-.369a.418.418 0 01.207-.045zm-3.518 2.977c-.553.052-1.044.336-1.542.56-.304.155-.662.311-1.005.186-.377-.119-.707-.35-1.059-.52-.075-.012-.061.078-.047.122.081.53.129 1.102.454 1.55.338.438.902.619 1.433.667.797.072 1.642-.118 2.271-.629.309-.262.571-.63.585-1.049-.006-.324-.244-.596-.524-.734a1.085 1.085 0 00-.566-.153zm2.58.008c-.396.052-.815.262-.972.65-.129.359.034.748.272 1.021.426.508 1.07.792 1.718.883.577.078 1.186.015 1.714-.24.438-.225.767-.655.85-1.142.064-.29.081-.59.124-.884-.066-.077-.148.039-.218.052-.337.143-.647.367-1.01.436-.363.024-.687-.172-1.015-.294-.43-.178-.851-.402-1.315-.477a1.21 1.21 0 00-.147-.004z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$45($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CodeChef" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codechef extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$45, create_fragment$45, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codecov.svelte generated by Svelte v3.23.2 */

        function create_fragment$46(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.006.481C5.391.486.005 5.831 0 12.399v.03l2.042 1.19.028-.018a5.82 5.82 0 013.308-1.02c.37 0 .733.034 1.085.1l-.036-.006a5.69 5.69 0 012.874 1.43l-.004-.002.35.326.198-.434c.192-.42.414-.814.66-1.173.1-.144.208-.29.332-.446l.205-.257-.252-.211a8.33 8.33 0 00-3.836-1.807l-.052-.008a8.565 8.565 0 00-4.08.251l.06-.016c.972-4.256 4.714-7.223 9.133-7.226a9.31 9.31 0 016.6 2.713 9.196 9.196 0 012.508 4.498 8.385 8.385 0 00-2.498-.379h-.154c-.356.006-.7.033-1.036.078l.045-.005-.042.006a8.103 8.103 0 00-.39.06c-.057.01-.114.022-.17.033a8.102 8.102 0 00-.392.09l-.138.034a9.21 9.21 0 00-.483.144l-.03.01c-.354.12-.708.268-1.05.44l-.027.013c-.152.076-.305.16-.47.256l-.035.022a8.216 8.216 0 00-2.108 1.8l-.011.014-.075.092a8.345 8.345 0 00-.378.503c-.088.13-.177.269-.288.452l-.06.104a8.985 8.985 0 00-.234.432l-.016.029c-.17.34-.317.698-.44 1.063l-.017.053a8.052 8.052 0 00-.41 2.716v-.007.112a12 12 0 00.023.431l-.002-.037a11.676 11.676 0 00.042.412l.005.042.013.103c.018.127.038.252.062.378.241 1.266.845 2.532 1.745 3.66l.041.051.042-.05c.359-.424 1.249-1.77 1.325-2.577v-.015l-.006-.013a5.56 5.56 0 01-.64-2.595c0-3.016 2.37-5.521 5.396-5.702l.2-.007a5.93 5.93 0 013.47 1.025l.027.019L24 12.416v-.03a11.77 11.77 0 00-3.51-8.423A11.962 11.962 0 0012.007.48z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$46($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Codecov" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codecov extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$46, create_fragment$46, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codefactor.svelte generated by Svelte v3.23.2 */

        function create_fragment$47(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.37 2.65A2.64 2.64 0 0 1 2.75 5.3 2.64 2.64 0 0 1 .12 2.65 2.64 2.64 0 0 1 2.75 0a2.64 2.64 0 0 1 2.62 2.65zm0 9.35a2.64 2.64 0 0 1-2.62 2.65A2.64 2.64 0 0 1 .12 12a2.64 2.64 0 0 1 2.63-2.65A2.64 2.64 0 0 1 5.37 12zm0 9.35A2.64 2.64 0 0 1 2.75 24a2.64 2.64 0 0 1-2.63-2.65 2.64 2.64 0 0 1 2.63-2.65 2.64 2.64 0 0 1 2.62 2.65zM11.31 0A2.64 2.64 0 0 0 8.7 2.65 2.64 2.64 0 0 0 11.3 5.3h9.94a2.64 2.64 0 0 0 2.63-2.65A2.64 2.64 0 0 0 21.25 0h-9.94zM8.7 12a2.64 2.64 0 0 1 2.62-2.65H17A2.64 2.64 0 0 1 19.6 12 2.64 2.64 0 0 1 17 14.65H11.3A2.64 2.64 0 0 1 8.7 12z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$47($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CodeFactor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codefactor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$47, create_fragment$47, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codeforces.svelte generated by Svelte v3.23.2 */

        function create_fragment$48(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.5 7.5C5.328 7.5 6 8.172 6 9v10.5c0 .828-.672 1.5-1.5 1.5h-3C.673 21 0 20.328 0 19.5V9c0-.828.673-1.5 1.5-1.5h3zm9-4.5c.828 0 1.5.672 1.5 1.5v15c0 .828-.672 1.5-1.5 1.5h-3c-.827 0-1.5-.672-1.5-1.5v-15c0-.828.673-1.5 1.5-1.5h3zm9 7.5c.828 0 1.5.672 1.5 1.5v7.5c0 .828-.672 1.5-1.5 1.5h-3c-.828 0-1.5-.672-1.5-1.5V12c0-.828.672-1.5 1.5-1.5h3z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$48($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Codeforces" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codeforces extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$48, create_fragment$48, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codeigniter.svelte generated by Svelte v3.23.2 */

        function create_fragment$49(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.49 24c-1.54-.68-2.586-2.146-2.723-3.824.09-1.727 1.002-3.305 2.45-4.246-.238.58-.18 1.24.15 1.77.376.525 1.022.777 1.655.646.902-.254 1.43-1.19 1.176-2.092-.09-.316-.27-.602-.516-.818-1.02-.83-1.532-2.133-1.35-3.436.175-.69.557-1.314 1.096-1.785-.405 1.08.737 2.146 1.504 2.67 1.36.816 2.67 1.713 3.924 2.686 1.37 1.08 2.117 2.77 2 4.5-.308 1.84-1.61 3.36-3.385 3.93 3.55-.79 7.21-3.61 7.28-7.61-.07-3.2-1.98-6.072-4.9-7.38h-.13c.065.157.096.326.09.496.01-.11.01-.22 0-.33.016.13.016.26 0 .39-.222.91-1.14 1.47-2.052 1.248-.364-.09-.69-.295-.924-.59-1.17-1.5 0-3.207.196-4.857.12-2.11-.844-4.127-2.554-5.36.856 1.427-.284 3.3-1.113 4.366-.83 1.066-2.03 1.86-3.008 2.79-1.054.98-2.02 2.058-2.887 3.21-1.874 2.29-2.61 5.31-2 8.205.836 2.79 3.155 4.886 6.015 5.43H8.5z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$49($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CodeIgniter" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codeigniter extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$49, create_fragment$49, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codepen.svelte generated by Svelte v3.23.2 */

        function create_fragment$4a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.144 13.067v-2.134L16.55 12zm1.276 1.194a.628.628 0 01-.006.083l-.005.028-.011.053-.01.031c-.005.016-.01.031-.017.047l-.014.03a.78.78 0 01-.021.043l-.019.03a.57.57 0 01-.08.1l-.026.025a.602.602 0 01-.036.03l-.029.022-.01.008-6.782 4.522a.637.637 0 01-.708 0L4.864 14.79l-.01-.008a.599.599 0 01-.065-.052l-.026-.025-.032-.034-.021-.028a.588.588 0 01-.067-.11l-.014-.031a.644.644 0 01-.017-.047l-.01-.03c-.004-.018-.008-.036-.01-.054l-.006-.028a.628.628 0 01-.006-.083V9.739c0-.028.002-.055.006-.083l.005-.027.011-.054.01-.03a.574.574 0 01.12-.217l.031-.034.026-.025a.62.62 0 01.065-.052l.01-.008 6.782-4.521a.638.638 0 01.708 0l6.782 4.521.01.008.03.022.035.03c.01.008.017.016.026.025a.545.545 0 01.08.1l.019.03a.633.633 0 01.021.043l.014.03c.007.016.012.032.017.047l.01.031c.004.018.008.036.01.054l.006.027a.619.619 0 01.006.083zM12 0C5.373 0 0 5.372 0 12 0 18.627 5.373 24 12 24c6.628 0 12-5.372 12-12 0-6.627-5.372-12-12-12m0 10.492L9.745 12 12 13.51 14.255 12zm.638 4.124v2.975l4.996-3.33-2.232-1.493zm-6.272-.356l4.996 3.33v-2.974l-2.764-1.849zm11.268-4.52l-4.996-3.33v2.974l2.764 1.85zm-6.272-.356V6.41L6.366 9.74l2.232 1.493zm-5.506 1.549v2.134L7.45 12Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CodePen" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codepen extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4a, create_fragment$4a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codersrank.svelte generated by Svelte v3.23.2 */

        function create_fragment$4b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.134 8.64l-5.973-3.62a.286.286 0 0 0-.412.125l-1.4 3.286 2.842 1.696a.53.53 0 0 1 0 .921l-5.335 3.14-2.267 5.274a.127.127 0 0 0 .052.203.122.122 0 0 0 .134-.035l3.914-2.365 1.545 2.219a.373.373 0 0 0 .309.167h3.708a.367.367 0 0 0 .327-.2.382.382 0 0 0-.018-.386l-2.513-3.852 5.088-3.077c.577-.349.865-.74.865-1.172V9.813c0-.433-.288-.823-.866-1.172zM13.082 4.35L.845 12.052c-.577.348-.858.739-.845 1.171v1.173c.014.432.303.816.866 1.15l6.056 3.496a.286.286 0 0 0 .412-.146l1.36-3.286-2.884-1.633a.518.518 0 0 1-.275-.384.529.529 0 0 1 .254-.537l5.295-3.245 2.183-5.316a.128.128 0 0 0-.04-.142.122.122 0 0 0-.146-.005z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CodersRank" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codersrank extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4b, create_fragment$4b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Coderwall.svelte generated by Svelte v3.23.2 */

        function create_fragment$4c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.354 18.708c1.46 0 2.646 1.185 2.646 2.646C24 22.814 22.814 24 21.354 24s-2.646-1.186-2.646-2.646c0-1.458 1.185-2.646 2.646-2.646zM12 9.354c1.46 0 2.646 1.186 2.646 2.646S13.46 14.646 12 14.646 9.354 13.46 9.354 12 10.54 9.354 12 9.354zm9.354 0C22.814 9.354 24 10.54 24 12s-1.186 2.646-2.646 2.646S18.708 13.46 18.708 12s1.185-2.646 2.646-2.646zM12 0c1.46 0 2.646 1.185 2.646 2.646 0 1.46-1.186 2.646-2.646 2.646S9.354 4.106 9.354 2.646 10.54 0 12 0zM2.646 0c1.46 0 2.646 1.185 2.646 2.646 0 1.46-1.186 2.646-2.646 2.646S0 4.106 0 2.646 1.186 0 2.646 0zm18.708 0C22.814 0 24 1.185 24 2.646c0 1.46-1.186 2.646-2.646 2.646s-2.646-1.186-2.646-2.646S19.893 0 21.354 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Coderwall" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Coderwall extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4c, create_fragment$4c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codesandbox.svelte generated by Svelte v3.23.2 */

        function create_fragment$4d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2 6l10.455-6L22.91 6 23 17.95 12.455 24 2 18V6zm2.088 2.481v4.757l3.345 1.86v3.516l3.972 2.296v-8.272L4.088 8.481zm16.739 0l-7.317 4.157v8.272l3.972-2.296V15.1l3.345-1.861V8.48zM5.134 6.601l7.303 4.144 7.32-4.18-3.871-2.197-3.41 1.945-3.43-1.968L5.133 6.6z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CodeSandbox" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codesandbox extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4d, create_fragment$4d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codeship.svelte generated by Svelte v3.23.2 */

        function create_fragment$4e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.053 0c-.972 0-2.398.405-2.398.762v2.117a13.032 13.032 0 0 1 2.42-.272 14.387 14.387 0 0 1 2.423.26V.773c0-.367-1.475-.774-2.445-.774zm.022 3.787c-2.042 0-5.068.837-5.068 1.193v2.595a18.793 18.793 0 0 1 5.02-2.473c.012-.013 2.803.749 5.212 2.495l.003.003V4.98c0-.37-3.126-1.193-5.167-1.193zM12.1 6.37c-.763.197-1.514.555-2.214.887a17.585 17.585 0 0 0-4.19 2.767c1.352 1.378 2.161 3.11 2.654 4.72l.037.113.04.037-.052-.037c-.013-.013-1.623-1.661-3.972-1.661-1.242 0-2.68.456-4.193 1.833.147.516.32 1.006.528 1.498v.016l.025.047c2.004 4.575 6.7 7.553 11.693 7.406 4.895-.147 9.348-3.311 11.13-7.859.098-.246.184-.506.272-.752-1.686-1.254-4.332-2.814-5.351-2.617v-.003c-.776.149-1.686 1.266-2.854 2.385.468-1.66 1.307-3.515 2.832-5.114a15.58 15.58 0 0 0-1.243-1.021v-.012C15.717 7.87 13.944 6.899 12.1 6.369zm-.01.897l.612 3.05-.147 2.67-.443 3.959v.018l-.05-.006c-.006-.001-.015-.008-.022-.01v-.027l-.493-3.947-.122-2.654zm.9 9.825l.021.004a7.135 7.135 0 0 1-.143.056c.04-.023.08-.036.121-.06z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Codeship" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codeship extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4e, create_fragment$4e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codewars.svelte generated by Svelte v3.23.2 */

        function create_fragment$4f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.76 12.2l-.08-.04c-.18-.1-.32-.25-.42-.44-.14-.26-.2-.5-.2-.75l.02-.13c0-.2.05-.38.14-.55l.08-.15c.04-.08.1-.15.15-.22.06-.07.07-.16.05-.24l-.05-.16c-.06-.2-.1-.4-.1-.6L.32 8.8c0-.22.06-.44.2-.6l.1-.13c.07-.1.18-.16.3-.2.1-.03.17-.13.18-.25l.02-.34c0-.27.13-.52.33-.7l.24-.18c.05-.05.1-.1.14-.18.05-.06.06-.14.05-.2-.02-.1 0-.13.05-.14.16.06.26.04.33-.04l.13-.17.36-.4c.1-.1.14-.28.08-.42l-.12-.26c-.02-.06 0-.13.05-.15.13 0 .22.05.26.13l.04.07c.06.12.2.18.3.13.22-.08.4-.1.57-.1h.32c.22 0 .4-.15.44-.38.04-.28.14-.5.28-.65.15-.17.32-.3.52-.4.26-.14.42-.34.47-.6.07-.32.24-.55.47-.7l.76-.43.22-.13c.13-.08.25-.18.35-.3l.2-.24c.1-.1.2-.17.32-.2.1-.03.24-.05.36-.04l.4.03c.2 0 .36.05.52.12l.1.05c.1.04.2.02.25-.05L10 .7l.43-.45c.1-.1.22-.14.35-.12.13.02.26.07.38.13.18.1.33.14.5.14h.1c.22 0 .44.03.66.08l.15.04c.15.04.3-.02.4-.14.03-.05.1-.06.14-.02.03.02.04.04.05.07.02.2.14.35.3.4l.16.05c.17.05.32.16.42.3.1.15.22.3.36.4l.1.1c.1.1.24.14.38.13h.59c.24 0 .47.04.7.14.22.1.45.12.66.04.22-.07.45-.1.68-.07l.43.07c.2.02.4.12.52.27l.05.05c.1.1.2.23.3.37.06.13.2.2.34.2h.62c.15 0 .3.03.42.1.13.1.24.2.34.3l.1.13c.12.14.18.33.17.53 0 .16.12.3.28.3l.2.02c.14 0 .26.1.33.23l.1.2.26.58c.04.1.05.2.04.28 0 .1.03.18.1.22l.1.07c.13.1.2.25.18.42l-.07.47-.02.2c-.02.1.03.23.12.3.15.1.22.23.23.38v.2c0 .1-.02.22-.1.3-.06.08-.1.18-.1.3l.03.23c0 .16.1.3.2.4.14.1.22.26.24.42.04.25.05.45.05.65v.23c0 .08 0 .16.03.24.02.07.07.14.13.18l.2.15c.2.13.34.3.42.53.1.22.13.45.13.68v.08c0 .18-.02.37-.08.54-.05.18-.04.35.03.5.08.14.13.3.15.47.04.2.02.4-.05.56l-.02.07c-.05.12-.13.23-.23.32-.1.1-.2.16-.26.23-.06.06-.1.16-.07.25l.03.14c.05.2.05.4 0 .58v.08c-.04.15-.1.28-.16.4-.07.13-.17.23-.3.3l-.15.1c-.07.04-.12.13-.12.22 0 .1-.04.2-.1.26l-.15.2c-.1.13-.23.24-.37.3-.14.1-.26.2-.35.3-.1.12-.18.26-.22.4-.04.18-.18.28-.33.28h-.54c-.14 0-.27.1-.33.22-.07.16-.14.27-.23.37-.1.1-.16.22-.2.36-.02.12-.12.2-.22.16-.13-.06-.26 0-.32.1-.12.2-.24.35-.37.48l-.07.06c-.13.1-.3.18-.45.18-.18 0-.27.08-.3.2-.03.1-.05.23-.06.34-.02.12-.06.23-.1.33l-.05.06c-.1.15-.18.3-.28.43l-.04.06c-.13.17-.3.3-.5.35-.24.08-.45.1-.66.1h-.14c-.1 0-.2.06-.27.16l-.06.1-.06.12-.13.22c-.1.18-.25.3-.45.36-.2.05-.43.07-.64.06l-.16-.02c-.14 0-.27-.04-.4-.1-.1-.04-.24 0-.3.1-.1.14-.22.22-.35.26l-.3.1c-.2.05-.42.05-.63 0l-.16-.05c-.1 0-.2-.05-.28-.1-.1-.05-.2-.07-.3-.06l-.13.02c-.2.02-.38 0-.56-.05l-.27-.06c-.12-.04-.23-.12-.3-.23-.05-.1-.16-.18-.3-.2H9.9c-.2-.03-.38-.1-.5-.25L9 22.5l-.14-.12-.22-.16-.13-.1c-.15-.1-.33-.18-.52-.2l-.6-.1c-.06 0-.1-.02-.16-.03L7 21.74c-.1-.02-.2-.1-.27-.2-.06-.1-.17-.14-.27-.1-.2.08-.36.1-.52.13H5.8c-.26.02-.5-.02-.74-.13-.24-.1-.4-.25-.55-.44-.12-.17-.3-.3-.52-.34l-.28-.06c-.2-.04-.4-.12-.58-.24-.2-.14-.3-.27-.38-.43-.08-.15-.13-.32-.14-.5v-.08c-.02-.2-.16-.38-.35-.43-.23-.07-.4-.17-.55-.3-.14-.13-.22-.32-.22-.52l.02-.44c0-.17-.05-.32-.17-.43-.12-.12-.2-.27-.2-.43l-.03-.36c-.02-.26-.07-.52-.13-.78-.06-.23.03-.46.22-.57l.07-.05c.1-.07.14-.2.08-.32l-.08-.1c-.1-.1-.2-.17-.3-.2-.08-.02-.1-.1-.1-.15l.1-.12c.06-.07.05-.18 0-.24-.08-.08-.12-.18-.13-.28l-.02-.7c0-.14.02-.28.06-.42.04-.12 0-.26-.12-.32zm9.9-1.32c.07-.07.06-.2 0-.25-.1-.08-.17-.17-.23-.27l-.1-.16c-.07-.13-.16-.24-.26-.34l-.02-.02c-.1-.08-.17-.18-.23-.3-.05-.1-.05-.2 0-.3l.06-.1c.06-.1.1-.24.1-.36v-.04c0-.1-.04-.2-.1-.3-.04-.08-.08-.18-.1-.28V8.1c-.03-.12 0-.25.08-.35.08-.13.14-.25.17-.4v-.02c.04-.1.02-.23-.04-.33s-.08-.2-.04-.32l.07-.2c.06-.18.15-.34.27-.48l.14-.15.1-.12.06-.06c.06-.06.07-.16.02-.24-.05-.1-.08-.2-.06-.3l.02-.14c.03-.2.1-.4.23-.56l.04-.04c.15-.2.34-.33.56-.4l.27-.1c.12-.04.2-.17.2-.3 0-.16.05-.3.14-.43l.05-.05c.1-.17.22-.34.3-.52l.07-.13c.02-.03.03-.07.03-.1 0-.17-.1-.32-.26-.33L11.76 2c-.25-.02-.5 0-.74 0l-.85.1c-.13 0-.23.1-.24.24 0 .14-.1.26-.22.3l-.36.1-.1.03-.3.1c-.22.07-.4.23-.5.45l-.08.13c-.1.22-.27.4-.48.53-.2.13-.3.34-.32.58v.1c-.02.2-.08.4-.2.54l-.05.08c-.08.1-.1.23-.05.34.05.12.08.25.07.38v.53c0 .14-.1.26-.2.3-.14.05-.23.16-.27.3l-.05.2c-.04.2.03.4.2.52.16.12.26.3.3.52v.18c.03.2.14.4.32.5.18.12.32.3.4.5l.05.16c.08.22.26.35.46.37h.06c.18 0 .34.1.44.26.1.16.26.27.44.3l.28.08c.17.05.33.14.46.27l.02.02c.1.08.26.07.35-.04l.07-.08zm1.14-.92c.1.06.2.03.24-.06l.03-.05c.07-.14.16-.28.26-.4l.2-.3c.03 0 .04-.02.05-.04l.24-.32c.1-.1.22-.17.36-.17.13 0 .24-.07.3-.2.04-.14.1-.27.22-.38l.05-.06c.1-.1.2-.15.3-.2.13-.02.25-.04.37-.04h.3c.12 0 .22-.05.28-.15.06-.1.15-.17.25-.22l.1-.04c.16-.07.34-.12.52-.14l.2-.02c.12 0 .25 0 .37.07.1.07.23.06.33-.02l.07-.04c.15-.1.32-.18.5-.2h.02c.2-.04.38-.04.58-.03h.1c.2.03.37.1.5.25l.03.04c.1.1.26.18.4.18h.17c.05 0 .1-.02.13-.07.03-.03.08-.06.13-.06h.1c.14 0 .27.04.4.08l.17.07c.16.05.33.1.5.12h.12c.08 0 .13-.05.13-.12 0-.1-.02-.2-.07-.28L20.68 7c-.08-.13-.14-.27-.2-.4l-.02-.05c-.05-.1-.05-.2 0-.3V6.2c.02-.08-.02-.17-.1-.2L20.28 6c-.16-.05-.3-.14-.4-.27l-.1-.1c-.1-.1-.16-.25-.2-.4-.05-.13-.16-.23-.3-.23h-.42c-.15-.02-.28-.1-.37-.22l-.04-.05c-.07-.1-.13-.22-.17-.34-.05-.1-.16-.16-.26-.13l-.12.04c-.2.07-.4.1-.6.08l-.16-.02c-.17 0-.33-.07-.46-.17l-.1-.07c-.08-.06-.16-.1-.25-.14-.1-.04-.18-.02-.24.05l-.05.06c-.1.1-.24.18-.38.2l-.54.03c-.1 0-.2.05-.27.12-.08.07-.17.12-.27.14h-.02c-.1 0-.2.07-.3.14v.02c-.1.1-.23.15-.36.15l-.04.02c-.12 0-.24 0-.36.03h-.12c-.17.03-.3.17-.34.35l-.04.23c-.03.16-.1.3-.2.43-.1.12-.22.2-.37.2h-.15-.02c-.1.02-.2.13-.18.25.02.17 0 .32-.03.47l-.04.17c-.04.15-.14.27-.27.32l-.06.03h-.02c-.06.04-.1.13-.05.2.06.1.08.2.07.3l-.03.32c0 .12-.05.23-.1.33-.06.1-.06.2-.02.3l.1.22c.05.1.06.2.03.32-.03.1-.05.2-.04.3 0 .1.06.2.14.24l.02.02zm7.9 7.23c.1.1.25.14.37.06l.2-.13c.1-.07.18-.17.22-.3v-.02l.1-.3.06-.1.04-.1.04-.07c.04-.08.1-.14.2-.17l.04-.02c.08-.02.13-.1.13-.18 0-.1.05-.18.1-.25l.08-.07.2-.26v-.02c.06-.08.1-.17.12-.27.02-.1 0-.2-.04-.3l-.02-.04c-.04-.1-.06-.17-.07-.26l-.03-.28-.03-.3c0-.1.04-.2.1-.3.07-.08.12-.18.16-.28v-.04l.02-.02c.02-.1-.03-.2-.12-.2-.1-.05-.2-.13-.23-.25l-.03-.06c-.05-.18-.08-.36-.08-.54l.02-.5v-.03c0-.17-.14-.3-.3-.3h-.02c-.2 0-.36-.06-.5-.2l-.08-.1-.2-.23-.26-.3c-.1-.14-.2-.26-.33-.38-.1-.1-.25-.2-.4-.22l-.2-.03c-.1-.02-.23-.07-.34-.14-.08-.06-.2-.04-.28.04l-.13.14-.06.04c-.07.02-.14-.02-.17-.1-.04-.12-.04-.26.02-.38v-.06c0-.07-.06-.12-.12-.1h-.16c-.18 0-.36-.02-.53-.1l-.1-.04c-.1-.05-.22-.08-.33-.08-.1 0-.2.02-.3.08l-.04.03c-.12.08-.26.12-.4.13h-.33c-.15 0-.3.05-.4.13-.13.08-.27.13-.42.16l-.27.04c-.12.03-.25.08-.36.17-.1.1-.24.16-.37.2l-.05.02c-.16.05-.3.15-.4.3l-.12.12c-.07.1-.07.22 0 .32.06.1.18.13.3.1l.15-.06c.08-.03.17 0 .24.04.06.05.15.08.24.07l.25-.03c.14 0 .28 0 .42.04.15.05.28.1.4.2s.25.14.4.16c.15.02.3.05.44.1l.1.02c.1.03.18.1.24.2.05.08.1.2.1.3v.03c0 .12.1.2.2.2h.06c.16 0 .33.02.5.07l.07.03c.1.04.2.1.27.2.08.1.13.2.16.3l.03.14c.03.15.04.3.04.46v.05c0 .1.07.2.18.24.1.02.22.06.33.12l.05.02c.13.08.26.18.36.3l.05.07c.13.15.2.34.2.53v.07c0 .15-.03.3-.08.44-.04.12 0 .26.13.3l.07.05c.15.06.28.17.38.3.1.15.14.32.14.5v.3c-.02.1-.05.18-.1.25s-.05.17 0 .24l.06.1zm-6.4-5.12h-.02c-.04 0-.06.05-.05.1l.04.2c.04.16.06.32.08.48.02.16.1.3.22.4h.04c.15.12.24.3.25.48v.5c-.02.1 0 .2.06.28l.05.05c.1.12.14.26.15.4l.03.55c0 .13-.08.24-.2.26l-.1.02c-.07 0-.1.08-.1.15 0 .08.03.17.06.25v.02c.03.1.04.2.03.3l-.04.27c-.04.2-.1.38-.2.56l-.07.12c-.05.1-.12.16-.2.2-.1.04-.17.12-.2.22l-.08.36c-.05.2-.14.4-.26.6h-.02c-.12.16-.27.3-.45.4l-.12.08-.3.15c-.1.04-.16.13-.18.24l-.05.33c-.03.2-.1.37-.24.5l-.13.15-.15.15L11 21c-.12.14-.3.2-.5.17l-.36-.07-.33-.04h-.09c-.04.04-.05.1-.02.16.07.12.18.2.3.2l.22.04c.1 0 .22.05.32.1.1.07.2.12.32.15h.02c.13.05.27.06.4.05l.15-.02c.17-.02.33 0 .47.06l.12.04c.05.02.13 0 .18-.05.06-.06.12-.1.2-.13l.08-.02c.13-.04.26-.06.4-.06h.08c.12 0 .23.02.33.08l.04.02c.07.03.15 0 .2-.06.03-.07.1-.14.17-.2l.25-.17.16-.1.08-.05c.1-.07.24-.1.36-.1l.36-.03c.14-.02.26-.12.3-.26.04-.15.1-.3.2-.43s.2-.24.3-.34c.13-.1.26-.15.4-.16h.08c.16-.03.28-.18.27-.34v-.02V18.77c.02-.1.06-.23.12-.33l.2-.3.08-.1c.06-.05.1-.12.17-.2l.1-.13c.06-.1.06-.23-.02-.32-.1-.1-.15-.24-.17-.38v-.04c-.02-.16-.02-.33.03-.5v-.05c.05-.13.12-.26.2-.38.08-.1.07-.24-.03-.32l-.17-.15c-.14-.12-.22-.3-.24-.48l-.02-.2c0-.06 0-.13-.02-.2l-.02-.15c-.02-.17-.12-.3-.26-.4l-.07-.02c-.1-.06-.2-.15-.28-.27-.08-.1-.12-.24-.15-.38l-.03-.17c0-.06-.04-.1-.1-.13l-.16-.05-.32-.1c-.1-.02-.2-.1-.27-.17h-.02c-.06-.08-.16-.08-.22-.02l-.1.1c-.02.03-.04.04-.07.03-.06 0-.1-.05-.08-.1.02-.16-.04-.32-.17-.42l-.13-.1-.3-.2c-.08-.03-.2 0-.24.1l-.04.06c0 .02-.03.03-.04.04-.04 0-.1 0-.1-.05l-.03-.05c-.03-.06-.1-.1-.16-.12zm-1.2 1l-.05-.05c-.05-.04-.1-.03-.15.02-.07.12-.13.25-.16.38v.02c-.03.13-.15.22-.27.2h-.1-.02c-.14 0-.25.12-.25.26 0 .18-.06.36-.17.5l-.06.06c-.1.13-.25.22-.4.27l-.08.02c-.1.03-.18.1-.2.22 0 .1-.06.2-.14.28l-.1.08c-.12.13-.3.2-.48.22l-.5.05c-.16 0-.3.1-.4.25-.1.15-.25.25-.4.27l-.22.02c-.16.02-.33.02-.5-.02l-.1-.02-.27-.07c-.1-.03-.18 0-.24.07l-.1.13c-.13.15-.32.22-.5.2l-.65-.08c-.1 0-.18-.05-.27-.1-.1-.06-.17-.13-.24-.2l-.25-.3c-.03-.02-.08-.03-.13-.02l-.14.06-.56.14c-.1.03-.23 0-.33-.06-.1-.08-.22-.1-.34-.1H3.2c-.12.03-.2.16-.16.28l.04.2c.03.1.02.22-.03.32s-.04.2.03.3l.06.08c.08.12.2.22.3.32.1.1.2.2.28.33l.15.27c.08.14.2.22.36.22.15 0 .3.05.42.15l.3.28c.08.07.2.08.28.02l.05-.02c.06 0 .1.04.1.1v.05c0 .13.1.25.23.3l.45.1c.16.05.32.1.47.2h.08c.08 0 .15-.07.14-.16v-.35c0-.1.04-.2.12-.24l.05-.02c.05.02.1.06.08.1v.17c0 .13.04.25.13.34.1.1.23.12.34.08.12-.05.24-.06.37-.05l.37.02c.18.02.35 0 .5-.07.18-.06.33-.14.47-.25l.06-.04.3-.27c.1-.1.23-.15.35-.15h.4c.2-.02.38-.2.4-.4l.04-.2c0-.13.06-.25.15-.35.1-.1.2-.16.3-.2l.12-.05c.17-.07.3-.22.36-.4l.06-.24c.05-.2.15-.4.3-.53l.02-.02c.12-.1.14-.3.06-.44l-.03-.07c-.07-.1-.08-.25-.03-.38.05-.14.1-.26.18-.38l.1-.14c.04-.08.04-.2-.02-.27-.06-.08-.1-.18-.1-.28l-.02-.14v-.34c.02-.1 0-.23-.03-.33l-.04-.12zm-1.43-.76v-.03c0-.1-.06-.16-.14-.16h-.26c-.1.02-.2.02-.28 0h-.45c-.23 0-.45-.04-.67-.1l-.24-.06-.2-.06-.45-.15c-.24-.07-.42-.23-.53-.45l-.05-.1c-.07-.15-.22-.23-.37-.2-.17 0-.34 0-.5-.08l-.12-.05c-.23-.1-.4-.3-.4-.57l-.04-.27c-.03-.14-.12-.27-.24-.32-.14-.06-.27-.14-.4-.23l-.05-.03c-.15-.12-.28-.28-.35-.47l-.02-.06c-.05-.16-.06-.33-.02-.5l.02-.06c.04-.13.05-.26.05-.4 0-.12-.05-.24-.14-.33l-.14-.13c-.16-.13-.26-.32-.27-.53-.02-.22-.02-.43.02-.64V6.3v-.03c0-.12-.1-.2-.2-.2H4.2c-.13 0-.24.08-.3.2-.05.14-.13.25-.22.36l-.04.05-.2.2-.1.1c-.1.1-.16.25-.18.4-.02.15-.06.3-.12.44l-.02.05c-.05.12-.13.23-.23.3-.1.08-.17.2-.17.32l-.02.46c0 .2-.03.4-.1.6l-.02.08c-.05.13 0 .27.12.33l.42.18.04.02c.03 0 .04.02.05.05.03.04 0 .1-.03.1l-.1.05c-.06.02-.1.08-.12.15l-.02.1v.02l-.1.56c-.02.08-.02.17-.02.26 0 .08.05.15.12.18l.22.1c.1.06.22.13.3.2l.1.08c.03.04.08.08.12.1l.04.04c.07.06.12.14.14.23l.1.45c0 .12.1.22.2.25l.16.05s.03 0 .05.02l.2.06c.16.05.3.14.42.26.12.1.24.23.34.37l.04.04c.08.1.2.15.32.12s.25-.04.38-.04h.15c.1 0 .23.03.34.1.1.06.23.1.35.15h.03c.12.05.25.03.35-.04.1-.08.23-.12.36-.12l.47.03c.1 0 .2-.02.25-.1h.02l.17-.16.05-.05c.08-.1.2-.14.32-.15h.45c.12 0 .23-.1.28-.2.05-.1.15-.18.27-.2l.2-.04c.08 0 .15-.07.18-.16.03-.1.08-.18.15-.24l.16-.16c.1-.1.15-.2.17-.32z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Codewars" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codewars extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4f, create_fragment$4f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Codio.svelte generated by Svelte v3.23.2 */

        function create_fragment$4g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.997 24L1.605 17.997v-12L12 0l10.396 5.997L16.5 9.402 12 6.8 7.496 9.4v5.2l4.502 2.6 4.5-2.6 5.895 3.397L12.003 24h-.006z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Codio" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Codio extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4g, create_fragment$4g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Coffeescript.svelte generated by Svelte v3.23.2 */

        function create_fragment$4h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.645 7.472c2.1.53 4.779.8 8.008.8 3.299 0 5.918-.27 8.008-.8 2.23-.52 3.299-1.22 3.299-1.88 0-.47-.48-.93-1.35-1.28.2.13.35.35.35.59 0 .67-1.01 1.22-3.039 1.68-1.88.41-4.279.7-7.198.7-2.82 0-5.329-.29-7.138-.68-1.95-.48-2.97-1-2.97-1.68 0-.28.13-.52.52-.8-1.22.47-1.88.87-1.88 1.47.07.68 1.16 1.36 3.39 1.88zm4.689-2.16c2.27-.2 2.929-1.659 5.588-1.899 1.31-.1 2.14.16 2.23.62.08.43-.57.72-1.36.78-1.09.11-1.54-.28-1.63-.65-.81.09-.94.43-.9.67.09.46 1.07.92 2.75.76 1.9-.15 2.54-.9 2.38-1.65-.2-.98-1.66-1.8-4.28-1.55-3.359.3-3.339 1.86-5.628 2.05-.94.09-1.46-.13-1.55-.5-.06-.37.4-.55.94-.59.5-.05 1.11.04 1.4.2.21-.11.28-.22.26-.35-.1-.35-.79-.5-1.66-.44-1.7.15-1.7.91-1.64 1.25.17.87 1.48 1.45 3.1 1.3zm11.417 3.84c-2.1.49-4.779.809-8.008.809-3.3 0-5.989-.34-8.078-.8-1.88-.48-2.88-1.01-3.23-1.56.18 1.23.49 2.42.89 3.55-.48.3-.91.67-1.3 1.17a4.519 4.519 0 00-1.019 3.098 3.6 3.599 0 001.42 2.62c.87.68 1.81.88 2.879.68.41-.07.87-.28 1.29-.42-.88 0-1.62-.28-2.36-.87a3.55 3.549 0 01-1.49-2.42c-.2-.94 0-1.81.53-2.579.12-.15.25-.28.39-.4.3.73.62 1.45.98 2.12.81 1.23 1.62 2.299 2.43 3.459.35.68.58 1.35.74 2.019a3.899 3.899 0 002.229 1.5c1.15.4 2.35.58 3.579.51h.13a10.197 10.197 0 003.689-.52 4.179 4.179 0 002.16-1.49h.07c.13-.67.35-1.34.67-2.02.799-1.17 1.619-2.229 2.419-3.458A20.995 20.993 0 0024 7.612c-.43.6-1.44 1.13-3.25 1.54z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CoffeeScript" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Coffeescript extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4h, create_fragment$4h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Coinbase.svelte generated by Svelte v3.23.2 */

        function create_fragment$4i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.391 13.861c.089.195.204.37.341.524a1.975 1.975 0 0 1-.963.235C.744 14.62 0 13.944 0 12.866c0-1.086.782-1.762 1.769-1.762.351 0 .628.076.908.225-.131.16-.238.342-.32.541a1.388 1.388 0 0 0-.52-.098c-.607 0-1.078.388-1.078 1.094 0 .668.456 1.094 1.109 1.094.187 0 .36-.034.523-.099zm2.062-2.757c1.01 0 1.739.714 1.739 1.762 0 1.04-.729 1.754-1.739 1.754-1.002 0-1.731-.714-1.731-1.754 0-1.048.729-1.762 1.731-1.762zm0 .645c-.562 0-.972.433-.972 1.117 0 .676.41 1.109.972 1.109.577 0 .98-.433.98-1.109 0-.684-.403-1.117-.98-1.117zm2.217 2.795V11.18h.751v3.364H6.67zm-.099-4.397a.472.472 0 0 1 .942 0 .48.48 0 0 1-.471.478.48.48 0 0 1-.471-.478zm1.506 1.246a4.49 4.49 0 0 1 1.541-.289c.858 0 1.405.326 1.405 1.276v2.164h-.744v-2.096c0-.486-.304-.661-.721-.661a2.59 2.59 0 0 0-.729.099v2.658h-.752v-3.151zm3.575-2.013h.752v1.891c.159-.084.471-.167.766-.167.972 0 1.701.623 1.701 1.701 0 1.086-.721 1.815-1.966 1.815-.486 0-.911-.098-1.253-.22V9.38zm.752 4.527c.144.045.334.068.524.068.69 0 1.184-.38 1.184-1.155 0-.653-.463-1.04-1.032-1.04a1.41 1.41 0 0 0-.676.159v1.968zm4.638-1.618c0-.365-.273-.532-.645-.532a1.9 1.9 0 0 0-.972.273v-.653a2.241 2.241 0 0 1 1.093-.273c.737 0 1.26.304 1.26 1.147v2.225a5.026 5.026 0 0 1-1.153.137c-.873 0-1.511-.266-1.511-1.026 0-.683.584-1.017 1.556-1.017h.372v-.281zm0 .782h-.319c-.524 0-.865.152-.865.494 0 .349.319.486.774.486.114 0 .274-.016.41-.038v-.942zm1.283.562c.311.235.683.38 1.025.38.334 0 .554-.114.554-.38 0-.274-.197-.372-.63-.486-.698-.16-.995-.441-.995-1.025 0-.684.517-1.018 1.2-1.018.38 0 .683.083.964.258v.691c-.296-.212-.584-.342-.941-.342-.327 0-.501.16-.501.38s.144.334.531.441c.767.167 1.101.455 1.101 1.063 0 .706-.539 1.025-1.268 1.025-.395 0-.789-.106-1.04-.273v-.714zm3.337-.6v.015c.045.6.562.927 1.085.927.463 0 .798-.107 1.131-.327v.661c-.303.213-.751.311-1.184.311-1.047 0-1.761-.668-1.761-1.731 0-1.071.698-1.785 1.625-1.785.979 0 1.442.63 1.442 1.549v.38h-2.338zm1.632-.486c-.015-.524-.273-.813-.759-.813-.433 0-.752.304-.85.813h1.609z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Coinbase" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Coinbase extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4i, create_fragment$4i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Commonworkflowlanguage.svelte generated by Svelte v3.23.2 */

        function create_fragment$4j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.063 9.205l-3.565 3.568 3.518 3.512 1.545-1.545-1.975-1.967 2.023-2.023-1.546-1.545zM13.606 22.423L11.6 20.375l3.786-3.815-1.559-1.573-5.33 5.403.115.114-.015.008 3.456 3.484zm1.896-13.565l-3.685-3.541 3.685-3.722L13.936 0 8.598 5.352l.108.101v.007l5.252 4.943z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Common Workflow Language" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Commonworkflowlanguage extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4j, create_fragment$4j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Composer.svelte generated by Svelte v3.23.2 */

        function create_fragment$4k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.661 0c-.07 0-.115.034-.165.095a.416.416 0 0 0-.07.43c.19.41.363.83.528 1.25.01.02.022.04.039.068-.039-.002-.05-.022-.063-.043-.297-.31-.648-.557-.998-.804-.473-.337-.99-.603-1.503-.872a.578.578 0 0 0-.214-.065l-.384-.04c-.202-.025-.355.09-.355.292 0 .108-.046.132-.135.14-.079.004-.187.115-.196.192a.694.694 0 0 0 .228.619c.444.415.873.845 1.303 1.275l.015.007a.1.1 0 0 1 .028.038c-.007.003-.014.003-.019.003a.057.057 0 0 1-.036-.022c-.002-.002-.005-.005-.005-.007-.062-.036-.127-.07-.187-.11-.3-.2-.595-.404-.895-.598a.943.943 0 0 0-.461-.17.453.453 0 0 0-.392.143.28.28 0 0 0-.088.253c.016.146.115.237.223.312.502.338.95.734 1.366 1.174.036.038.074.079.115.112.118.096.19.224.262.356.033.06.021.074-.043.074-.428 0-.836.118-1.246.204-.168.036-.334.094-.394.28-.065.21-.096.328.16.392a9.57 9.57 0 0 1 1.49.516.55.55 0 0 1 .117.077c.12.104.23.219.362.303.38.247.77.478 1.22.583.053.012.1.039.151.05.05.015.084.044.094.094.029.178.139.279.305.33.021.006.038.02.06.028.052.017.076.055.093.108.067.24.137.478.212.715.026.08.002.101-.07.123-.372.108-.742.22-1.112.334-.132.04-.134.043-.067.163l.908 1.635c.127.23.132.23.365.11.024-.012.057-.053.079-.014.021.036.06.089.024.13-.113.129-.19.28-.286.42-.031.045-.031.074-.005.117.101.166.202.334.3.502.012.019.034.043.03.058l-.123.367a2.538 2.538 0 0 0-.317-.716c-.18-.288-.41-.542-.62-.811-.033-.04-.072-.077-.11-.115-.2-.207-.456-.332-.699-.478a1.026 1.026 0 0 0-.34-.127c-.375-.08-.747-.11-1.12.004-.076.024-.117.005-.162-.06-.092-.127-.166-.273-.289-.372-.3-.24-.617-.458-.986-.583a2.95 2.95 0 0 0-.865-.168 4.267 4.267 0 0 0-.463.017c-.396.03-.79.074-1.14.293-.07.043-.15.067-.221.108-.36.194-.716.386-1.016.679a13.1 13.1 0 0 0-.897.944c-.322.384-.565.818-.783 1.267-.015.031-.022.07-.07.096l-.12-.744c-.007-.046.022-.043.053-.038.089.01.175.014.264.026.067.01.103-.005.12-.08.022-.102.046-.206.067-.311.082-.397.2-.78.303-1.17.02-.074.007-.1-.07-.12-.381-.09-.763-.192-1.145-.283-.072-.017-.106-.043-.084-.12.087-.298.125-.61.242-.9a.178.178 0 0 1 .056-.087c.098-.076.17-.165.16-.302-.007-.103.041-.168.14-.214.182-.086.358-.187.53-.288a.84.84 0 0 0 .327-.333c.322-.605.59-1.242.98-1.81.033-.051.06-.106.1-.15.252-.264.488-.544.771-.78.089-.074.113-.175.115-.285 0-.128-.074-.217-.151-.305-.075-.087-.151-.161-.279-.147-.028.003-.057-.01-.088-.014.019-.039.05-.048.076-.065.339-.218.677-.437 1.016-.658.41-.264.819-.53 1.232-.794.052-.034.076-.06.019-.11-.015-.013-.024-.03-.036-.044-.084-.099-.084-.099-.2-.029L8.084 3.692c-.101.062-.101.062-.152-.05-.112-.263-.177-.539-.261-.81-.02-.062-.003-.098.045-.137.289-.23.553-.49.82-.742a.604.604 0 0 0 .186-.37c.022-.17-.09-.259-.244-.196a1.707 1.707 0 0 0-.221.105c-.68.375-1.405.632-2.149.848-.043.012-.082.026-.118-.02-.074-.09-.185-.14-.278-.208a.073.073 0 0 0-.063-.015c-.1.027-.204.056-.266.147-.159.233-.358.44-.507.682-.17.28-.333.562-.525.828-.036.05-.05.058-.084-.002L3.63 2.635a2.837 2.837 0 0 0-.223-.338c-.094-.118-.209-.176-.358-.159-.026.003-.06-.005-.07.036-.02.11-.071.226-.057.332.034.27.082.542.15.806.114.459.244.912.38 1.364.133.444.282.88.426 1.323.012.038.033.072-.02.103-.067.038-.175.058-.187.125-.012.07.05.15.08.225l.007.017c.024.058.036.144.079.166.058.029.11-.05.163-.082.048-.029.065-.021.087.029.124.293.252.583.379.876a.18.18 0 0 1 .007.137 4.138 4.138 0 0 0-.192.72c-.012.07-.038.07-.091.055a107.64 107.64 0 0 0-.833-.21c-.123-.032-.123-.032-.137.093v.01c-.06.665-.12 1.33-.183 1.994-.004.06.003.085.068.092.194.024.386.055.578.084.036.005.067.007.058.06-.043.225-.077.453-.125.677a.178.178 0 0 0 .034.163c.067.087.132.175.199.264.046.063.08.144.038.209a.201.201 0 0 0-.033.118c.007.415.007.83.026 1.246.01.201.007.403.012.605.01.535.04 1.068.06 1.603.01.262-.036.521-.024.783.002.065.017.1.084.122.159.05.312.116.473.166a.28.28 0 0 1 .185.156.436.436 0 0 1 .038.219c-.002.072.024.115.082.156.247.177.492.36.74.542.65.48 1.3.963 1.954 1.44.06.046.074.082.038.147-.034.062-.055.135-.089.197-.029.058-.024.094.031.134.082.058.161.123.236.188.065.055.067.141.048.208-.015.049-.087.005-.132 0-.032-.002-.063-.01-.094-.014-.31-.05-.617-.13-.932-.156-.501-.04-1.003-.084-1.51-.07-.026 0-.067-.024-.074.03-.007.042-.017.088.031.117.024.014.05.026.077.036.283.098.547.24.807.389.168.096.333.204.518.269.034.012.068.038.108.002-.278-.22-.554-.442-.833-.665.039-.029.07-.017.099-.014.333.026.665.072.989.149.713.17 1.421.362 2.122.573.23.07.475.104.682.243.05.033.08.067.074.13.012.014.027.033.01.045-.02.012-.036-.012-.05-.024-.164-.014-.327-.026-.488-.043-.463-.046-.924-.11-1.392-.096-.35.01-.701-.015-1.05.01-.494.033-.989.098-1.48.15-.025.003-.063-.002-.063.027 0 .036.014.077.06.087a.58.58 0 0 0 .113.012c.25.01.497.007.746.011.62.015 1.242-.012 1.86.041.224.02.45.01.668.05 1.03.193 2.055.394 3.078.618.12.026.243.045.36.103-.055.05-.127.065-.158.137-.219.506-.363 1.04-.53 1.563-.03.089.03.192.12.216a.278.278 0 0 0 .352-.221c.02-.108.039-.216.053-.327.005-.036.017-.055.053-.067.132-.053.261-.108.393-.16a1.63 1.63 0 0 0 .529-.325c.134-.127.247-.274.25-.47 0-.06.014-.099.062-.135.22-.17.418-.365.61-.564a6.03 6.03 0 0 1 .6-.533c.024-.02.043-.048.081-.034l.56.221c-.375.228-.73.447-1.083.66-.017.01-.036.015-.053.02a.813.813 0 0 0-.338.201c-.375.372-.567.814-.545 1.35.014.36.22.53.571.449.615-.144 1.14-.733 1.232-1.379.024-.18.052-.357-.077-.513a2.251 2.251 0 0 0-.178-.195c.02-.012.029-.019.039-.026.777-.463 1.625-.778 2.475-1.07 1.04-.359 2.1-.644 3.164-.918l-.075-.017c-.07.007-.136.015-.206.02a5.097 5.097 0 0 0-.872.134l-.016.007a.226.226 0 0 1-.094.015c-.014 0-.029 0-.048.002.065-.062.252-.264.303-.25l.002-.005h.005c0-.007.019-.021.019-.021.017-.029.04-.048.074-.05a.694.694 0 0 1 .197-.188c.05-.031.103-.062.161-.086h-.002c.16 0 .319-.194.486-.262-.001-.006-.01-.01-.013-.017-.24.034-.476.072-.706.159-.492.182-1.001.324-1.481.535-.742.324-1.482.648-2.195 1.035a.818.818 0 0 1-.077.036l-.055-.504c-.005-.034.012-.048.041-.063.631-.334 1.265-.665 1.925-.938.543-.226 1.08-.471 1.626-.692.002-.005.005-.01.01-.01h.004c.003 0 .003.003.005.003.007.012.002.02-.005.026-.002.003-.005.003-.01.005h-.002a3.358 3.358 0 0 0-.372.66c.038.01.053-.002.067-.017.113-.12.226-.237.336-.357.214-.235.44-.459.704-.641.017-.012.045-.022.033-.048-.014-.03-.045-.015-.067-.01-.247.05-.494.096-.74.154-.081.019-.076-.01-.079-.067-.002-.197.027-.39.034-.586a.63.63 0 0 1 .058-.247c.098-.226.197-.45.297-.675.05-.113.08-.233.099-.353.031-.192.055-.386.074-.58.031-.299.137-.58.187-.875.065-.374.118-.751.257-1.109.125-.317.245-.634.372-.948.176-.428.399-.833.505-1.29.036-.158.076-.302.004-.458-.04-.084-.052-.18-.081-.271a.392.392 0 0 1-.012-.204c.048-.245.07-.488-.063-.716-.036-.062.008-.1.044-.139.088-.091.093-.132.016-.23-.088-.11-.175-.224-.27-.327-.08-.084-.154-.175-.234-.262-.055-.033-.05-.055.012-.076.14-.048.276-.108.418-.152.08-.024.1-.07.106-.141.045-.605.09-1.213.139-1.818.007-.084-.007-.1-.094-.074-.454.144-.907.28-1.363.422-.14.044-.142.044-.204-.093-.231-.519-.411-1.057-.6-1.59a.392.392 0 0 1 .007-.316c.067-.188.024-.377.019-.567a.104.104 0 0 1-.005-.029 9.16 9.16 0 0 0-.254-1.548 6.02 6.02 0 0 0-.5-1.27c-.228-.432-.473-.86-.737-1.275-.113-.178-.233-.339-.434-.427A.702.702 0 0 0 16.66 0zm-2.643.26a.364.364 0 0 1 .2.051 19.042 19.042 0 0 1 1.469.805c.247.158.482.338.715.52.11.087.192.217.284.33.038.047.012.09-.024.124-.024.024-.058.039-.087.055-.031.022-.072.041-.06.087.01.04.055.05.091.058a.27.27 0 0 0 .159-.015c.168-.07.31.048.418.166.028.03.04.093.093.074.055-.021.063-.081.058-.137-.012-.15-.05-.297-.084-.444-.09-.377-.27-.718-.418-1.073-.053-.127-.11-.254-.163-.382-.029-.07.01-.132.048-.182.031-.04.081-.005.122.014.152.068.238.19.312.332.08.15.178.29.262.436.144.255.322.495.437.762.168.388.382.758.483 1.176.086.37.208.732.252 1.114.016.144-.01.283.007.422.033.279-.008.543-.123.798-.03.07-.021.136.012.208.252.533.461 1.083.67 1.635.027.072.015.101-.06.123-.482.141-.965.288-1.447.434-.07.022-.092.003-.113-.06-.123-.326-.24-.646-.353-.967-.024-.068-.053-.104-.128-.087-.088.022-.136-.017-.175-.096-.062-.127-.113-.28-.216-.36-.103-.08-.266-.082-.403-.115-.103-.027-.207-.058-.312-.075a1.428 1.428 0 0 1-.612-.273c-.303-.224-.615-.43-.934-.627-.104-.007-.202-.036-.303-.06-.278-.057-.554-.117-.833-.17-.067-.012-.08-.063-.084-.108-.007-.056.007-.11.065-.144.089-.053.19-.063.29-.08a9.69 9.69 0 0 1 1.345-.13c.11-.002.209.04.312.066a.18.18 0 0 0 .166-.03c.216-.143.434-.28.65-.422.034-.021.096-.036.07-.093a.083.083 0 0 0-.015-.022c-.012-.01-.026-.012-.043-.012l-.05.002h-.007a1.159 1.159 0 0 0-.668.2c-.079.05-.259.019-.31-.056-.34-.516-.823-.888-1.282-1.289-.204-.177-.403-.362-.619-.526-.055-.04-.08-.144-.043-.196.048-.072.11-.041.168-.015.185.082.362.175.528.293.564.403 1.17.744 1.772 1.085a.51.51 0 0 0 .05.027c.092.03.14-.01.125-.106a.267.267 0 0 0-.062-.134c-.488-.574-1.001-1.124-1.506-1.683-.105-.116-.23-.216-.348-.32a.854.854 0 0 1-.22-.278.16.16 0 0 1 .023-.19c.041-.045.077-.055.137-.024.17.082.332.178.483.293.266.202.535.403.804.605l.807.603c.021.017.043.033.062.05.05.046.094.094.142.142l.029.029c.019.019.036.045.06.06.055.033.112.062.17.004.02-.019.029-.036.031-.055 0-.007.003-.014 0-.021 0-.003 0-.008-.002-.01a.171.171 0 0 0-.043-.072l-.18-.187a4.537 4.537 0 0 0-.312-.298c-.349-.29-.706-.571-1.066-.845-.183-.14-.397-.233-.596-.348-.072-.041-.12-.101-.173-.159a.144.144 0 0 1-.024-.15c.022-.054.075-.051.12-.056zM8.252 1.649a.045.045 0 0 1 .029.005c.048.027.03.077.03.135.013.06-.026.11-.08.16-.346.322-.707.627-1.076.922-.147.118-.327.173-.49.262-.034.017-.053 0-.072-.024-.12-.154-.238-.31-.358-.463-.045-.055.017-.053.046-.065.254-.091.504-.195.756-.295.365-.144.696-.35 1.04-.533.036-.02.07-.043.105-.063.024-.01.044-.037.07-.041zm-2.619.83a.223.223 0 0 1 .134.064c.072.067.13.144.18.228.173.28.413.506.646.737.163.163.329.321.502.47.057.05.067.127.098.192.012.024.002.043-.02.055-.011.008-.023.013-.03.02-.142.12-.276.103-.442.019a3.182 3.182 0 0 1-.864-.646c-.01-.01-.02-.017-.03-.024-.114-.086-.12-.082-.17.05-.052.135-.086.274-.146.404-.022.045.012.094.046.127.038.039.064.099.134.089.031-.005.048-.022.055-.055.017-.08.039-.159.06-.257.262.22.553.391.84.583l-.278.159c-.713.4-1.428.801-2.139 1.205-.058.031-.082.038-.106-.034-.273-.847-.561-1.69-.79-2.552-.052-.2-.074-.408-.112-.612-.012-.06.028-.091.067-.113.053-.026.055.036.074.06.377.521.634 1.11.941 1.669.092.168.195.331.293.497.02.03.034.057.082.04.053-.019.043-.052.034-.09-.039-.174-.128-.33-.193-.493a.18.18 0 0 1 .003-.16c.137-.284.329-.531.48-.803.14-.247.317-.468.451-.717a.205.205 0 0 1 .2-.111zm1.774.492c.014.003.024.016.036.042.12.27.201.555.302.83.01.027.012.049-.017.066l-.256.158c-.008.005-.017.007-.046.02-.007-.013-.017-.034-.031-.051l-.54-.62c-.024-.028-.048-.055 0-.081.177-.101.312-.264.499-.35.024-.011.04-.017.053-.014zm1.929.486a.204.204 0 0 1 .14.046.21.21 0 0 1 .08.218.556.556 0 0 1-.161.29 5.528 5.528 0 0 0-.882 1.093c-.228.36-.453.718-.624 1.11a.768.768 0 0 1-.146.206c-.24.273-.526.485-.855.638a.17.17 0 0 0-.108.159c-.005.06-.024.118-.029.178a.48.48 0 0 1-.19.381c-.04.031-.045.082-.06.125l-.273.915c0 .007 0 .014-.002.019 0 .014.002.031-.017.038-.041.01-.077-.002-.113-.021a41.398 41.398 0 0 1-1.33-.334c-.055-.012-.108-.029-.166-.036-.088-.012-.096-.053-.055-.12.058-.281.125-.56.298-.797.038-.053.036-.096.002-.154-.19-.317-.334-.658-.492-.989-.026-.055-.017-.08.034-.11A574.27 574.27 0 0 0 6.97 4.705c.045-.03.089-.012.132-.022.151-.034.298-.08.43-.163.01-.007.026-.012.03-.022.097-.213.31-.286.49-.37.411-.187.826-.36 1.189-.633a.18.18 0 0 1 .095-.04zm11.443 3.772v.005l.002-.001c-.021.256-.043.498-.062.74l-.043.535c-.005.065-.024.106-.094.13a561.29 561.29 0 0 0-3.37 1.17l-.039.009c-.036.005-.055-.012-.08-.055-.218-.394-.439-.785-.662-1.177-.029-.05-.038-.077.034-.096l4.254-1.246c.014-.005.031-.007.06-.014zm-.41.386c-.154.003-.293.147-.286.293.007.137.124.257.254.252.137-.002.27-.153.267-.302-.005-.166-.082-.245-.236-.243zm-16.83.87c.01 0 .024.002.039.007L5.513 9c.645.171 1.291.34 1.937.51.062.017.082.036.06.1l-.278.913c-.01.036-.017.074-.058.074a.06.06 0 0 1-.02-.002l-1.036-.142c-.226-.03-.45-.062-.675-.093a255.003 255.003 0 0 0-2.055-.286c-.043-.012-.058-.038-.05-.098.052-.476.103-.951.153-1.429.003-.012.002-.021.005-.031a.035.035 0 0 0 .005-.015c.007-.014.021-.019.038-.019zm8.136.103l.113.002c.197.01.389.086.569.166.08.036.159.07.238.108l.057.029c.058.028.118.057.173.09l.113.065c.036.025.075.046.108.073.072.05.142.105.207.165.218.202.372.44.463.72.065.202.113.409.13.617.016.202-.044.399-.096.593-.008.03-.02.036-.03.034-.014-.005-.021-.022-.033-.036l-.216-.25a2.105 2.105 0 0 0-1.042-.684 4.159 4.159 0 0 0-.994-.154 3.799 3.799 0 0 0-.804.092c-.211.04-.423.074-.631.113-.137.024-.262.086-.387.141-.06.027-.12.053-.18.076l-.02.004c-.376.132-.695.36-1.024.57-.09.06-.165.14-.243.218l-.01.008-.064.065c-.152.147-.3.296-.464.43-.074.103-.175.175-.268.266.024-.17.07-.328.146-.472a4.6 4.6 0 0 1 .262-.435c.048-.07.096-.14.146-.206a7.17 7.17 0 0 1 .315-.396c.081-.097.163-.193.247-.289.084-.096.168-.19.25-.285a.917.917 0 0 1 .115-.099l.026-.03c.078-.067.147-.137.238-.21l.012-.01.067-.062c.24-.228.519-.406.797-.583.028-.019.057-.035.086-.051l.111-.048c.01-.004.02-.01.029-.012a2.78 2.78 0 0 1 .173-.065l.117-.036c.14-.04.279-.074.416-.117a2.45 2.45 0 0 1 .782-.115zm-7.57.449c-.071.004-.153-.003-.215.057a.462.462 0 0 0 .012.665.286.286 0 0 0 .379 0c.146-.127.183-.314.096-.535-.053-.137-.125-.187-.271-.187zm15.846.062c.087-.001.163.053.23.146.014.01.029.02.043.032.022.019.03.04.053.064.099.113.207.224.31.334a.064.064 0 0 1 .014.024.023.023 0 0 1-.002.022.04.04 0 0 1-.015.014l-.01.015-.002.002c-.002.002-.002.005-.004.01 0 .002-.003.004-.003.004h.003v.008c-.145.146-.106.283.01.415.006.012.014.024.014.036.096.127.016.254 0 .382-.003.012-.005.016-.015.021l-.007.003a.116.116 0 0 1-.029-.005l-.01-.003a9.772 9.772 0 0 1-.252-.077c-.007 0-.012-.004-.019-.007-.007 0-.012-.007-.019-.007a.284.284 0 0 1-.118-.019.252.252 0 0 0-.292.05.054.054 0 0 1-.005.02c.04.06.108.074.168.093.245.08.453.23.68.348.052.03.062.092.057.152-.003.033-.012.067-.02.103l-.072.31a.127.127 0 0 1-.019.076c.003.168-.115.293-.17.437-.007.012-.012.017-.02.041a3.223 3.223 0 0 1-.129.298c0 .007-.01.017-.012.024v-.005c0 .002-.002.002-.002.005l-.005.01c-.003.002-.003.004-.005.007-.012.045-.02.093-.058.132a1.913 1.913 0 0 1-.187.432c-.007.012-.012.012-.017.036-.062.144-.127.317-.19.475-.014.058-.026.115-.04.17l-.008.015c0 .002-.002.002-.002.005 0 .005-.005.01-.007.014a.45.45 0 0 1-.036.192c-.012.039-.022.082-.034.12a.074.074 0 0 1-.005.02l-.201.912c-.055.25-.077.504-.118.754-.038.235-.048.477-.106.708-.04.168-.136.324-.213.48-.072.146-.118.302-.207.444l-.007.015a.169.169 0 0 0-.012.03c-.002.006-.002.013-.005.018l-.007.033a.182.182 0 0 0-.002.036c0 .012 0 .024-.003.036v.036a.71.71 0 0 1-.002.072c-.02.257-.053.514-.041.773.002.048-.012.075-.058.091l-.057.022a1.598 1.598 0 0 0-.113.048l-.06.024c-.031.012-.05.022-.099.034v-.005s-.007.005-.011.005l-.133.055-.093.038a.635.635 0 0 1-.211.092l-.036.021a25.182 25.182 0 0 0-.474.211c-.081.024-.165.072-.247.11-.089.04-.175.075-.264.114-.139.062-.278.12-.418.182-.004.002-.012 0-.016 0-.128.048-.26.118-.38.173-.048.026-.117.053-.177.077-.11.043-.135.038-.159-.075-.072-.052-.079-.141-.105-.216-.027-.072-.048-.15-.072-.223-.005-.024-.017-.02-.017-.034-.024-.033-.024-.064-.036-.098l-.003-.017c-.007-.005-.007-.012-.01-.019l-.006-.017h.004c-.033-.1-.07-.199-.093-.3-.024-.067-.067-.132-.08-.202a.17.17 0 0 1 0-.07l.008-.033.004-.017c.02-.047.051-.093.075-.139.017-.038.031-.077.048-.115.017-.038.031-.067.048-.115.038-.072.062-.156.11-.24 0-.02.015-.039.02-.058.043-.146.09-.295.149-.437 0-.005-.005-.012-.003-.017.017-.086.098-.117.146-.168v.003c.024-.008.037-.022.049-.022.014-.024.028-.034.043-.048a1.518 1.518 0 0 0 .108-.149c.045-.067.086-.137.137-.204.016-.021.03-.055.057-.055.005 0 .007 0 .012.002.039.01.027.055.022.084a.88.88 0 0 0 0 .327c.012.084.026.168.033.252l-.002.038a.578.578 0 0 1 .036.19c.02.082.036.16.06.242.072.15.125.3.173.454l.005-.002c.081.12.163.26.245.391.024.031.05.065.074.089h.005v.02c.024 0 .036.052.072.004-.007-.024-.012-.024-.02-.024a.448.448 0 0 1-.03-.08c-.005-.016-.013-.035-.015-.05a.387.387 0 0 1-.012-.05c-.002-.007-.002-.017-.005-.024a.282.282 0 0 0-.01-.048l-.011-.075-.013-.074c-.007-.007-.007-.017-.007-.026-.002-.01-.004-.02-.01-.03-.002-.028-.007-.057-.011-.086l-.022-.172c-.002-.03-.012-.058-.014-.087a3.634 3.634 0 0 1 .036-.941h.014c.029-.144.058-.31.086-.466.008 0 .015.003.024.003-.01.261.017.52.075.775.002.005.002.012.002.017.036.098.075.197.106.298.007.021.014.043.022.062a.338.338 0 0 0 .055.094c.007.012.021.024.021.036.024.019.036.04.056.06.014.016.026.036.04.053.05.048.104.093.166.156a3.667 3.667 0 0 1-.017-.14c-.004-.043-.012-.086-.016-.134 0 0-.013-.007-.013-.012a.82.82 0 0 0-.01-.108l-.04-.33c0-.009 0-.016.002-.025 0-.01.003-.027.003-.027a2.705 2.705 0 0 1-.02-.415l-.002-.017a1.122 1.122 0 0 1-.002-.37c.005-.033.002-.07.005-.103 0-.007-.003-.012-.003-.02 0-.158.007-.319.055-.472l.003-.017c.012-.072.024-.158.036-.238.012-.079.024-.16.033-.24.005-.033.015-.05.034-.05.01 0 .024.005.04.017l.051.03.075.049c.024.017.048.033.07.055.002.002.004.005.009.007a.116.116 0 0 0 .017.012h.005v-.002c.168.084.261.226.374.358a.31.31 0 0 1 .11.151c.075.098.13.204.169.322.002.01.007.021.01.03.002.01.007.006.009.03.02.024.031.055.043.084l.034.084.019.04c.005.01.01.017.017.024a.07.07 0 0 0 .04.024c.027-.088-.035-.172-.011-.256h.007c0-.024-.007-.025-.007-.037-.024-.156-.044-.31-.109-.453-.002-.012-.002-.039-.002-.039-.058-.144-.086-.29-.17-.417a.103.103 0 0 1-.037-.063c-.026-.024-.04-.053-.055-.081a4.135 4.135 0 0 1-.038-.063v.017c0-.002-.005-.005-.005-.007v-.003a2.828 2.828 0 0 0-.22-.278l-.01-.01c-.01-.01-.02-.01-.03-.033-.057-.024-.112-.096-.17-.147-.007-.007-.014-.01-.019-.017-.005-.004 0-.01-.024-.016-.12-.082-.209-.183-.314-.255-.02-.024-.044-.01-.053-.048.31-.019.61.017.922.036v-.012h.002c.154.024.298.053.437.113.005 0 .01.007.017.007v.005c.096.022.187.065.278.108.02.01.044.04.065.012.017-.024-.01-.046-.024-.065-.036-.05-.07-.1-.108-.151-.007-.012-.019-.024-.019-.036-.072-.07-.127-.149-.19-.219a.953.953 0 0 1-.06-.064 1.162 1.162 0 0 1-.209-.17c-.012-.008-.024-.022-.036-.022-.03 0-.064-.034-.096-.056-.03-.021-.064-.04-.096-.062-.012-.007-.024-.012-.036-.02-.146-.055-.293-.105-.44-.16-.004 0-.013-.003-.013-.005 0 0-.013 0-.017-.002a.11.11 0 0 1-.072-.03.079.079 0 0 1-.027-.035l-.005-.012c-.007-.02-.01-.041-.007-.063a.968.968 0 0 0-.012-.22c-.002-.022-.007-.041-.012-.063a2.158 2.158 0 0 0-.014-.06l-.015-.062a2.29 2.29 0 0 0-.024-.09s-.01-.002-.01-.009c-.023-.146-.08-.293-.124-.437-.007-.019-.01-.033-.017-.057a.369.369 0 0 1-.057-.168c0-.02 0-.036.002-.056l.002-.026c.005-.027.01-.055.02-.082l.033-.108c0-.005 0-.017.003-.017h-.003c.031-.17.099-.314.147-.468 0-.002.005-.002.005-.005l.01-.01c.002-.002.004-.002.004-.004a.265.265 0 0 0 .053-.185.326.326 0 0 0-.027-.103c-.016-.043-.038-.084-.06-.127-.002-.005-.01-.01-.014-.012-.002-.003-.005-.005-.005-.008a1.196 1.196 0 0 1-.209-.355l-.016-.038c-.005-.005-.005-.01-.008-.017l-.002-.007a.12.12 0 0 1-.007-.017l.002.002-.002-.005a.276.276 0 0 1 .012-.043c.004-.01.01-.017.014-.026.005-.007.012-.014.02-.022l.009-.007c.065-.094.125-.192.197-.283a.26.26 0 0 0 .05-.252c-.04-.137-.036-.14.101-.19.024-.01.315-.12.432-.156l.075-.029.019-.007a41.645 41.645 0 0 1 .509-.19c.005-.002.012-.002.017-.002.141-.072.293-.118.441-.168.02-.007.036-.015.06-.02.024-.019.096-.035.12-.055.12-.038.216-.093.324-.117a.287.287 0 0 1 .167-.067zm-5.432.603a.82.82 0 0 1 .23.036l.014.004c.259.08.523.142.77.26.041.019.084.038.113.077.16.115.307.247.43.405.19.245.38.492.557.773-.011-.003-.022-.008-.034-.013v-.001a1.018 1.018 0 0 1-.185-.103 6.452 6.452 0 0 0-.674-.356 1.467 1.467 0 0 0-.331-.1 3.307 3.307 0 0 0-.91-.041c-.084.007-.17 0-.255 0-.062 0-.091-.03-.091-.092 0-.235.012-.472-.06-.7-.015-.048.014-.068.055-.082a1.12 1.12 0 0 1 .372-.067zm-2.75.773c.423-.015.812.105 1.167.324.132.08.253.176.363.284l.014.013c.122.123.23.26.321.41.08.13.058.272.031.414-.072.406-.316.706-.592.987-.265.269-.596.444-.903.648-.435.29-.932.403-1.438.478-.632.093-1.273.103-1.906.187-.23.029-.464.048-.694.089a1.07 1.07 0 0 0-.68.41c-.062.084-.1.187-.16.303a.527.527 0 0 1 .026-.394 1.12 1.12 0 0 1 .533-.54c.415-.219.879-.262 1.323-.375.36-.091.73-.144 1.087-.242a7.234 7.234 0 0 0 1.426-.55c.24-.125.49-.252.656-.485a.73.73 0 0 0 .12-.557c-.005-.034-.015-.05-.027-.053-.012-.002-.029.007-.05.027-.18.16-.367.314-.571.449-.32.206-.673.33-1.038.42-.58.144-1.166.266-1.764.31a4.84 4.84 0 0 0-1.239.242c-.34.118-.687.235-.96.49-.034.03-.075.057-.13.098l.007-.038-.026.019v-.005c.009-.006.016-.013.024-.017a.599.599 0 0 1 .084-.2l.646-1.022a.285.285 0 0 1 .041-.053c.334-.329.653-.677 1.023-.965.614-.48 1.284-.855 2.055-1.02.187-.041.377-.07.571-.07.22-.002.442-.01.66-.017zm-7.632.022c.013 0 .029.002.048.009.029.01.062.007.094.01.127.028.259.03.386.062.012 0 .017.002.034.01a2.174 2.174 0 0 1 .4.057c.145.02.289.036.433.06.033 0 .062-.002.093.017.005 0 .012-.002.012 0 .168.02.3.031.445.055h-.015v.005c.096.012.159.024.233.036.077.012.156.031.23.031h.003c.007 0 .012.003.017.003l.021.005c.048.002.067.028.075.07.038.227.07.455.117.683 0 .017.01.032.008.046l.019.11c.021.11.04.221.062.332 0 .01 0 .031.003.036v.01c.024.143.05.273.074.41v.046a1.717 1.717 0 0 0-.3.46c-.031.075-.07.152-.1.226l-.006.003c-.024.076-.062.15-.098.223-.003 0-.005.005-.007.01-.005.009-.008.024-.012.03v.003a2.478 2.478 0 0 1-.192.415c-.008.02-.024.039-.024.056-.024.09-.046.182-.092.266a.757.757 0 0 1-.074.226 2.102 2.102 0 0 1-.13.394c-.007.019-.019.036-.019.055l-.002.007c-.003.007-.005.02-.01.029a.106.106 0 0 1-.01.03l-.002.01-.038.742.021.008.094-.185c.031-.06.055-.123.089-.185.019-.043.05-.086.05-.13.072-.12.137-.24.211-.35.008-.012.022-.02.03-.043.062-.097.134-.224.208-.334.026-.043.054-.08.078-.123h-.001c.017-.048.043-.055.065-.076.021-.022.033-.044.081-.065 0 .019.005.036.003.053l-.003.01c0 .009-.004.018-.007.028l-.002.01c-.003.007-.003.012-.005.019a.054.054 0 0 0-.002.02c0 .006-.005.011-.003.018l-.003.015h.003c-.022.144-.021.307-.024.458 0 .007-.005.02-.005.024l.005-.002c.02.144.043.288.062.432h-.002c.003 0 .005.031.005.043.024.144.055.29.072.437l.002.017c.003.01.005.017.005.026.024.116.11.195.163.296.039.055.08.12.116.168h.002v.002c.12.106.22.214.355.31.02 0 .039.024.058.024h-.002v.012c.048.005.088.043.139.029a.087.087 0 0 0 .026-.012c.007-.005.017-.01.02-.017.011-.022-.01-.034-.027-.041-.197-.125-.166-.33-.19-.521h.008v-.003c.048.046.081.091.122.14a.1.1 0 0 0 .024.026l.05.055c.034.036.07.07.108.101.039.031.08.065.125.089.02.007.039.024.056.024h-.005c.144.07.269.137.4.206a.15.15 0 0 1 .08.036c.048.144.105.288.091.456.005 0 .01.017.012.03a.066.066 0 0 1-.002.03c.017.14.017.281-.003.42a.044.044 0 0 1-.002.039c-.003.005 0 .007-.002.012h.002c0 .14-.002.278-.038.415-.003.137-.046.27-.06.406 0 .005-.003.01-.005.017-.008.026-.02.057.038.05v-.002c.13-.135.26-.267.38-.418v.01c.002-.048.03-.073.057-.096.05-.049.1-.13.151-.2.05-.07.101-.137.152-.206l.002-.012c.007-.024.017-.039.029-.046.005-.002.01-.005.014-.005H9.3a.133.133 0 0 1 .05.02.835.835 0 0 1 .077.048c.144.079.307.132.415.269.012.012.026.014.038.038.05.024.096.08.133.132l.038.036c.002.002.005.002.007.005.19.16.204.247.067.46-.004.008-.012.015-.016.015a.236.236 0 0 1-.024.055.216.216 0 0 1-.02.036l-.01.017c-.035.058-.074.118-.088.185a.443.443 0 0 0-.012.168c.026.094.05.19.07.286.012.057.024.115.028.175.02.142-.048.228-.168.288v-.002c-.024.002-.026.017-.038.024a.078.078 0 0 1-.02.014.362.362 0 0 1-.038.026.192.192 0 0 0-.077.087c0 .007 0 .005-.002.01-.002.004 0 .014-.002.014h.007v.014c-.024.07-.036.12-.048.156-.003.01-.007.017-.01.024-.002.008-.007.012-.01.017-.002.005-.007.01-.009.012a.045.045 0 0 1-.024.012h-.007a.165.165 0 0 1-.05-.012c-.034-.012-.078-.029-.138-.048-.004-.002-.009-.002-.011-.005a.025.025 0 0 0-.012-.004l-.027-.012h-.01v-.01h-.002c-.072-.024-.14-.038-.204-.065-.038-.014-.08-.026-.12-.043-.05-.012-.1-.036-.151-.036-.14-.048-.281-.072-.416-.12-.011 0-.019.002-.043 0v.002c-.096-.019-.173-.043-.264-.06-.089-.014-.122-.06-.113-.148.005-.037.003-.08.003-.116 0-.012-.003-.017-.003-.04-.014-.025-.036-.053-.055-.085a.11.11 0 0 1-.014-.026c-.012-.012-.036-.024-.036-.038-.024-.005-.015-.01-.022-.015-.074-.07-.053-.163-.043-.252l.002-.029.008-.055c.002-.01.002-.02.004-.026.039-.15.048-.29-.113-.38-.019-.012-.03-.024-.055-.04v.004a2.869 2.869 0 0 0-.225-.165c-.012-.024-.015-.029-.039-.039a1.418 1.418 0 0 1-.31-.228l-.074-.04h.01c-.015-.025-.032-.022-.044-.034-.019-.014-.036-.024-.06-.039-.12-.103-.283-.199-.413-.316-.045-.015-.074-.05-.11-.08v-.004c-.127-.09-.252-.176-.377-.272h.003c-.015 0-.015-.012-.039-.024-.072-.036-.144-.096-.206-.144-.02-.024-.039-.024-.058-.024-.058-.048-.108-.07-.156-.113-.02-.012-.036-.026-.06-.04a2.178 2.178 0 0 1-.396-.289l-.012-.012-.022-.024a.188.188 0 0 1-.038-.081v.019c-.087-.094-.144-.202-.216-.3l-.007-.015a.027.027 0 0 1-.005-.014.107.107 0 0 1-.003-.026.118.118 0 0 1 .024-.053c0-.005.003-.012.003-.02.024-.153.108-.292.168-.436v-.037s0-.022-.003-.032l-.004-.014-.005-.005a.038.038 0 0 0-.017-.01h-.007a.122.122 0 0 0-.058.022.312.312 0 0 0-.055.043l-.02.015a.13.13 0 0 0-.014.019l-.007.01c0 .002-.002 0-.002 0 0 .002-.003 0-.003 0v.002c-.048.055-.12.103-.182.154-.012.012-.034.026-.034.038v-.002h-.007c-.02.024-.045.024-.072.012l-.31-.137c-.024-.012-.036-.038-.04-.062a.64.64 0 0 1-.008-.032l-.007-.026v.005c-.036-.168.022-.293.053-.437.002-.012.005-.024.005-.036.024-.14.033-.288.074-.423v-.062c-.021-.154-.022-.305-.033-.459l.002-.079c-.014-.286-.033-.571-.043-.857-.022-.598-.07-1.193-.053-1.79a.636.636 0 0 0-.074-.315 1.968 1.968 0 0 0-.099-.164.264.264 0 0 1-.048-.237c.036-.14.063-.284.089-.425.009-.05.022-.084.06-.086zm-.166.38l.005.015c.005.032-.007.065-.021.113a.117.117 0 0 1 0-.086.295.295 0 0 1 .016-.041zm10.715.003c.13-.002.257.005.381.024.219.017.42.058.55.164.094.04.188.09.279.144.22.132.441.269.662.403a.389.389 0 0 1 .118.108l.223.315c.012.016.031.036.015.057a.038.038 0 0 1-.02.014c-.018.004-.034-.002-.05-.011-.098-.056-.2-.108-.298-.164a4.76 4.76 0 0 0-1.184-.459c-.107-.031-.208-.061-.323-.076l-.152-.034c-.004.003.005.012.017.024.005.005.01.01.012.015a.138.138 0 0 0 .041.033l.02.01c.227.115.612.187.892.317l.058.029c.156.081.298.182.44.29l.268.207c.404.293.65.689.77 1.169.003.014.008.029.01.043l.01.014c.02.03.024.065.017.096.002.008.002.015.005.022-.005.07-.06.04-.092.04a2.504 2.504 0 0 1-.61-.11h-.006c-.051-.016-.118-.04-.165-.054-.211-.075-.41-.163-.615-.238-.252-.089-.449-.261-.662-.413a7.777 7.777 0 0 1-1.001-.816.34.34 0 0 1-.08-.106 4.11 4.11 0 0 1-.062-.153l-.036-.094a1.088 1.088 0 0 0-.024-.06l-.002-.005c-.003-.002-.003-.007-.003-.01v-.002l-.002-.01a.168.168 0 0 1 .007-.122c.002-.005.002-.01.005-.014l.005-.017.004-.014c.003-.005.003-.013.005-.017l.003-.015.002-.017.003-.014.002-.017.002-.014.003-.017.002-.014.003-.017c0-.005 0-.01.002-.015 0-.004 0-.012.003-.016v-.266c-.003-.082.026-.114.108-.111.08.002.162-.001.243-.005l.075.004c.04-.002.081-.005.122-.005zm.284.532a.12.12 0 0 0 .028.008H15c-.012.008-.028.005-.033.02-.004-.02-.002-.027.003-.028zm.88.342a.206.206 0 0 0 .012.006l.003.001-.015-.007zm-1.908.177l.002.003c.007.003.014.01.022.024.076.154.182.281.3.399.124.12.259.23.389.348.268.242.542.48.818.713.178.151.392.228.62.288.518.132 1.049.182 1.575.254.139.02.264.065.374.156h-.007c.01.008.017.012.024.02-.296-.043-.59-.039-.886-.046-.324-.007-.641.031-.96.067a.986.986 0 0 1-.336-.026c-.308-.07-.598-.195-.889-.317-.329-.14-.602-.353-.862-.588-.019-.02-.038-.036-.057-.055a1.002 1.002 0 0 1-.205-.285l-.002-.006c-.09-.212-.085-.448-.016-.708.019-.07.04-.14.062-.209.007-.023.02-.035.034-.032zm-.248 1.18c.065.233.233.396.375.573l.029.039.028.038a.57.57 0 0 0 .106.094c.017.012.031.021.046.033l.021.017a10.088 10.088 0 0 0 .538.396l.329.229c.149.103.305.19.468.266.04.02.082.036.123.055.124.053.25.099.379.14l.021.007c.08.021.166.028.25.038.031.002.063.007.091.01a.195.195 0 0 1 .06.024.411.411 0 0 1 .068.05c.074.067.144.163.148.221 0 .01 0 .017-.002.024-.002.005-.002.007-.005.01-.01.016-.024.03-.033.048-.03.05-.06.1-.085.153l-.011.027a.311.311 0 0 0 .002.261c.115-.115.218-.237.293-.377a1.139 1.139 0 0 0 .086-.201c.01-.027.003-.058.01-.084.01-.029-.024-.07-.01-.09 0-.001.003-.001.005-.004a.04.04 0 0 1 .014-.007c.01-.002.02-.005.027-.005.019-.002.036-.005.055-.005.048 0 .094.008.14.022.028.01.019.045.016.072v.005c-.005.086-.04.165-.072.242a.554.554 0 0 1-.024.055 1.68 1.68 0 0 1-.192.375c-.118.156-.254.302-.475.31h-.063c-.038 0-.077.01-.115.012a.085.085 0 0 0-.086.057c-.017.039-.039.072-.058.11l-.007.017a1.534 1.534 0 0 1-.408.57c-.08.071-.164.139-.25.203a1.95 1.95 0 0 1-.468.224l-.036.014-.034.015-.019.007c-.01.002-.022.007-.031.01-.036.014-.065.035-.046.09.02.06.063.077.118.08.012 0 .026 0 .04-.003a.613.613 0 0 0 .15-.033c.048-.017.096-.039.146-.06.034-.015.067-.029.103-.041-.029.122-.045.235-.084.341l-.021.053a6.794 6.794 0 0 1-.09.192c-.018.043-.04.084-.062.125-.115.23-.245.45-.405.655a1.682 1.682 0 0 1-.356.34 3.954 3.954 0 0 1-.103.073 2.788 2.788 0 0 1-.38.206l-.064.03-.053.02-.043.018c-.04.016-.082.03-.123.045a2.674 2.674 0 0 1-.168.053 4.848 4.848 0 0 1-.57.134c-.008 0-.013.003-.02.003-.055.01-.108.017-.163.026-.058.008-.116.017-.176.024a2.156 2.156 0 0 1-.605-.021l-.028-.007a.68.68 0 0 1-.145-.06c-.062-.034-.12-.07-.182-.101a1.728 1.728 0 0 1-.13-.072 1.868 1.868 0 0 1-.16-.106.632.632 0 0 1-.233-.279 1.794 1.794 0 0 0-.092-.194c-.01-.02-.021-.036-.03-.053a2.718 2.718 0 0 0-.277-.367 2.76 2.76 0 0 0-.125-.142c-.021-.024-.04-.048-.062-.07a7.07 7.07 0 0 0-.26-.276l-.067-.067a2.787 2.787 0 0 0-.364-.302 2.784 2.784 0 0 0-.303-.192l-.06-.039a1.58 1.58 0 0 1-.63-.762c-.043-.093-.107-.122-.22-.124a.63.63 0 0 1-.252-.048l-.002-.002a.457.457 0 0 1-.132-.084l-.026-.016c-.022-.026-.038-.058-.058-.09a5.295 5.295 0 0 1-.386-.658c0 .003.002.005.003.008l-.006-.013.003.005a3.772 3.772 0 0 0-.073-.196l-.036-.086a.382.382 0 0 1-.014-.154l.007-.031c.002-.005.002-.01.005-.015a.145.145 0 0 1 .012-.029.46.46 0 0 1 .127-.141.898.898 0 0 1 .067-.05c.046-.034.094-.063.14-.094.071-.044.143-.084.218-.123.271-.14.56-.238.857-.314.017-.005.033-.008.053-.012.033-.008.07-.01.105-.015.036-.002.072-.005.106-.005l.106-.002c.016 0 .036 0 .052-.002a17.864 17.864 0 0 0 .9-.063c.18-.017.36-.036.54-.055a3.504 3.504 0 0 0 1.127-.324c.036-.02.074-.036.11-.055l.063-.034c.144-.077.288-.151.427-.233.014-.02.031-.026.055-.033l.01-.003v.012a.06.06 0 0 1-.02.034l-.021.014c-.14.178-.331.3-.497.45a.415.415 0 0 0-.05.045c-.053.043-.106.089-.166.137.209 0 .41-.024.598-.08a1.654 1.654 0 0 0 .869-.6c.103-.137.197-.297.278-.482zm-3.265.016a1.244 1.244 0 0 1-.343.109c-.56.139-1.13.22-1.697.326a2.603 2.603 0 0 0-1.105.487c-.019.015-.04.032-.062.043-.026.017-.039.013-.043-.01-.003-.004-.003-.011-.003-.018-.01-.144.034-.214.166-.274.18-.082.36-.168.54-.252.235-.108.487-.142.742-.168.396-.043.792-.094 1.19-.14l.524-.086zm2.386 1.245l-.026.001c-.038.01-.036.05-.036.08.003.1.007.201.02.302.011.11.047.219.112.307a.842.842 0 0 0 .51.334c.155.036.155.038.17.2.007.069.016.131.081.17.113.067.226.137.363.146.084.007.17.012.242.068a.583.583 0 0 0 .32.098c.084.007.17.01.254.024.067.012.113-.01.16-.05.239-.197.474-.397.697-.617-.026-.03-.065-.039-.118-.012a6.25 6.25 0 0 0-.415.223.315.315 0 0 1-.113.048 4.032 4.032 0 0 1-.722.074.68.68 0 0 1-.368-.13c-.067-.043-.134-.105-.146-.201.036-.012.07.002.103.007.127.017.252.063.382.055.312-.019.605-.113.898-.213l.283-.103c.043-.015.055-.03.017-.07-.046-.05-.096-.04-.147-.034a5.625 5.625 0 0 1-1.87-.045c-.18-.034-.372-.046-.442-.27-.019-.06-.038-.12-.05-.182a.37.37 0 0 0-.094-.17.094.094 0 0 0-.065-.04zm-.573.065c-.048 0-.08.05-.103.093-.06.103-.137.196-.207.292-.108.147-.26.178-.418.154a17.985 17.985 0 0 0-1.718-.18c-.03-.002-.058-.01-.082.01-.183.134-.367.264-.483.468.007.002.015.007.02.007.019-.002.035-.007.055-.01.297-.074.607-.098.922-.072.398.034.792.113 1.188.168.053.008.106.01.156.036.12.063.18.173.226.29.07.18.09.373.103.565.01.151-.022.278-.144.38a.556.556 0 0 0-.2.278c.154 0 .286.026.387.156.063.081.144.149.223.218a.379.379 0 0 0 .586-.081c.058-.094.113-.19.175-.281.087-.127.17-.264.325-.32.093-.03.052-.076.021-.115-.062-.079-.178-.081-.28-.019-.16.096-.267.238-.382.375-.034.04-.068.081-.113.115-.058.04-.108.043-.159-.01-.057-.057-.115-.117-.177-.168-.053-.043-.063-.082-.032-.144a.728.728 0 0 0 .082-.413c-.029-.312-.08-.62-.3-.867-.024-.026-.024-.04.01-.064a.94.94 0 0 0 .408-.701c.007-.075-.007-.135-.067-.156a.075.075 0 0 0-.022-.004zm4.461.035c.205 0 .387.08.566.182-.005 0-.007 0-.012.003l.031.017c-.271.04-.54.06-.811.03-.084-.009-.168-.026-.255-.023-.17.005-.307-.084-.451-.161h.017c-.012-.007-.024-.012-.036-.02.024.003.05.003.074.005.029.003.055.01.084.015.238.05.468-.02.704-.043a.8.8 0 0 1 .089-.005zm-8.69.714a.045.045 0 0 0-.016.004c-.05.019-.098.048-.112.115-.048.223.055.437.278.552.1.053.178.127.226.23.016.037.019.106.072.094.052-.012.01-.077.021-.103.008-.135-.019-.25-.127-.32-.08-.05-.11-.12-.14-.201-.038-.106-.047-.223-.134-.307-.02-.021-.036-.064-.069-.064zm1.843.354c-.11.027-.236.053-.353.106-.082.038-.087.084-.015.139.043.034.087.05.14.031a.466.466 0 0 1 .494.096.509.509 0 0 0 .523.087c.106-.036.197-.096.293-.15a.319.319 0 0 1 .113-.04c.144-.014.288-.033.43-.053.038-.005.098.01.108-.036.01-.048-.046-.077-.08-.108-.016-.017-.045-.019-.069-.026a.82.82 0 0 0-.437-.015 2.092 2.092 0 0 1-.888 0c-.08-.019-.163-.019-.26-.03zm6.903.889c.006 0 .011.003.015.007a.05.05 0 0 1 .012.014l.008.005c.043.034-.007.11-.02.168-.03.168-.057.334-.086.502-.007.048-.012.098-.048.165l-.007-.043-.012.024a5.307 5.307 0 0 1-.075-.706c-.002-.053.034-.065.068-.077.048-.016.107-.066.145-.06zm-3.219.902a.08.08 0 0 0-.023.01c-.19.105-.404.11-.613.137-.088.012-.199-.015-.264.05-.158.156-.293.091-.432-.02-.007-.004-.014-.011-.024-.014-.206-.11-.413-.15-.624-.005a.338.338 0 0 1-.267.068c-.074-.02-.131-.015-.19.038-.028.027-.066.048-.1.07-.094.062-.094.072-.007.141.02.017.043.024.067.032.2.06.387.016.562-.08.182-.098.353-.093.518.032.152.112.312.115.48.045a2.97 2.97 0 0 1 .653-.213c.034-.005.068-.017.099.01.096.088.187.026.279-.01.036-.015.04-.044.038-.08-.007-.076-.065-.12-.098-.18-.015-.025-.032-.035-.054-.03zm-4.718.07c.009 0 .02.006.032.017.039.036.075.074.113.11l.015.014c.019.017.021.039.012.06l-.224.45-.024-.008c0-.005.003-.007.003-.012.048-.197.029-.4.055-.6.002-.02.009-.03.018-.03zm3.9.588c-.238.007-.48.046-.703.122-.185.063-.392.106-.488.32-.055.124-.048.257-.086.381.017.099.017.197.074.281.017.024.024.063.065.06.043-.002.058-.038.07-.067.043-.091.053-.194.081-.29.046-.157.118-.281.281-.351.17-.072.343-.14.516-.206a.184.184 0 0 1 .101-.012c.214.03.437.021.627.146a.079.079 0 0 0 .062.012c.072-.017.08-.04.036-.098a.723.723 0 0 0-.636-.298zm-2.218.742l.014.017c.094.117.187.218.25.336.151.29.374.501.662.655.135.072.256.172.414.19l.003.001.018-.001c.017 0 .04-.003.036.024-.003.014-.017.014-.031.012h-.007c-.005 0-.01 0-.015-.003-.167.005-.33.033-.493.067-.085.018-.17.038-.255.058a7.838 7.838 0 0 1-.243.055h-.003c-.033.008-.048.024-.043.058.005.04.02.062.067.072a1.305 1.305 0 0 0 .274.017c.118-.003.235-.015.353-.034a2.602 2.602 0 0 1 .778-.002c-.43.07-.785.312-1.174.475-.202.084-.358.245-.55.348-.014.017-.022.044-.036.06-.031.039-.036.118-.087.11h-.004c-.005 0-.01.003-.015 0a.623.623 0 0 1-.266-.086c-.03-.019-.022-.055-.022-.089v-.453c0-.032.012-.067-.019-.09-.106-.066-.08-.182-.106-.278-.01-.038.017-.057.039-.081l.278-.31c.063-.067.089-.142.043-.223-.086-.163-.072-.32-.002-.485.055-.13.091-.267.142-.42zm4.585.177c.005.003.01.005.012.008l.007-.008c.039.022.041.05.05.075.102.247.2.497.3.744.025.055.03.103-.006.149a.502.502 0 0 0-.077.49c.067.206.019.348-.183.449a.229.229 0 0 1-.12.036.124.124 0 0 1-.088-.03c-.375-.259-.821-.345-1.242-.494-.06-.021-.117-.043-.18-.057-.072-.017-.067-.065-.057-.116.007-.036.026-.04.045-.038.02-.005.046.01.063.014.48.12.965.216 1.428.396.017.008.031.01.043.013.034-.005.044-.037.039-.082-.01-.108-.02-.214-.144-.271a2.8 2.8 0 0 0-.975-.233c-.05-.005-.098-.007-.149-.01.238-.144.5-.22.713-.406a.999.999 0 0 0 .075-.067l.398-.482.048-.08zm-1.882 1.133h.02c.03-.002.054.005.057.053 0 .044.01.082-.06.092a1.752 1.752 0 0 1-.274.021c-.094 0-.185-.01-.278-.031-.05-.012-.07-.046-.065-.086.002-.027.021-.027.04-.027a.103.103 0 0 1 .039.003h.18a1.143 1.143 0 0 0 .34-.024zm.036.396c.006 0 .012.002.02.005.278.116.556.231.844.349-.132.11-.254.208-.374.304-.221.178-.44.358-.646.553-.05.048-.089.05-.147.014a9.33 9.33 0 0 0-1.097-.545c-.165-.07-.34-.098-.511-.158.02-.036.055-.036.084-.046.367-.137.742-.26 1.102-.42.094-.043.187-.007.278.005.137.019.27.021.394-.046a.092.092 0 0 1 .053-.015zm-2.161.698a.27.27 0 0 1 .082.018c.197.077.38.185.569.274a.04.04 0 0 1 .029.01c.004.002.005.004.005.011v.005c0 .003-.003.003-.003.005-.002.003-.005.003-.007.003l-.01-.003a.03.03 0 0 1-.012-.012l-.862-.214c.074-.059.133-.1.209-.097zm8.17.535c-.142-.004-.26.062-.372.15-.029.022-.046.048-.094.017-.105-.072-.206-.053-.295.039a.402.402 0 0 0-.103.187c-.125.504-.252 1.006-.372 1.512-.041.169.048.255.223.229.158-.025.238-.116.264-.32.026-.197.053-.391.11-.595.15.187.29.362.433.538.139.17.29.321.494.412.144.065.269.027.382-.074a.186.186 0 0 0 .055-.206.157.157 0 0 0-.158-.125.246.246 0 0 1-.152-.07 2.27 2.27 0 0 1-.362-.396c-.09-.12-.094-.12.026-.202.252-.173.341-.417.322-.71-.014-.219-.132-.346-.339-.38a.454.454 0 0 0-.062-.006zm-10.733.03c-.04 0-.077.02-.097.075-.019.05-.053.043-.091.038a.751.751 0 0 0-.665.219c-.38.37-.574.814-.552 1.354.014.358.22.53.569.451.689-.16 1.224-.835 1.253-1.582.007-.192-.168-.47-.34-.538a.214.214 0 0 0-.077-.016zm-1.93.058a.943.943 0 0 0-.613.238c-.346.302-.547.693-.646 1.138a.642.642 0 0 0 .075.482c.07.118.158.161.292.135a3.12 3.12 0 0 0 .87-.305.867.867 0 0 0 .225-.168.291.291 0 0 0 .084-.204c0-.075-.033-.101-.103-.104-.07-.002-.13.024-.192.046-.207.075-.408.166-.622.22-.105.027-.141.003-.163-.105a.301.301 0 0 1 .005-.122c.04-.168.098-.331.187-.483a.82.82 0 0 1 .245-.283c.14-.089.283-.137.442-.04.052.03.103.016.15-.013a.352.352 0 0 0 .15-.201c.016-.05.002-.09-.044-.116a.773.773 0 0 0-.343-.115zm9.2.07a.692.692 0 0 0-.517.206c-.156.161-.183.324-.084.526.074.151.177.28.278.415.072.094.149.187.216.286.048.07.024.125-.058.151a.199.199 0 0 1-.139-.005 1.076 1.076 0 0 1-.374-.23.243.243 0 0 1-.082-.125c-.012-.074-.053-.108-.125-.115-.081-.007-.156-.007-.204.08-.08.138-.057.263.087.393.276.245.605.353.933.38.3.004.485-.267.387-.522-.043-.115-.118-.216-.19-.314-.12-.159-.245-.313-.357-.476-.09-.125-.048-.216.098-.264.135-.043.25-.005.36.08.13.1.24.047.269-.116.017-.086-.029-.144-.089-.194a.68.68 0 0 0-.41-.157zm1.905.06c-.137-.003-.274 0-.41.016-.164.02-.32.065-.38.248-.002.01-.014.024-.024.026-.187.048-.252.202-.302.358-.106.346-.2.696-.298 1.042-.024.084.01.14.08.182.054.034.11.032.172.015.324-.08.648-.166.987-.142a.26.26 0 0 0 .127-.029.242.242 0 0 0 .117-.24c-.014-.091-.086-.117-.163-.13a1.484 1.484 0 0 0-.177-.016 3.855 3.855 0 0 0-.62.052c.031-.228.048-.242.264-.242.161 0 .322-.01.473-.072.101-.043.166-.113.176-.226.007-.076-.025-.122-.104-.124a1.65 1.65 0 0 0-.19.002l-.453.04c.024-.052.036-.1.062-.136.044-.062-.007-.178.084-.209.075-.024.164-.007.245-.01.214-.004.427-.007.634-.074a.347.347 0 0 0 .192-.13c.07-.108.043-.18-.082-.185-.136-.006-.273-.014-.41-.017zm-6.664.008c-.071-.003-.13.042-.185.093a3.951 3.951 0 0 0-.392.434l-.367.456c-.02.024-.04.07-.08.05-.03-.014-.018-.055-.014-.086.01-.11.024-.218.036-.329.015-.144.034-.288.01-.432-.031-.173-.156-.22-.295-.113a.836.836 0 0 0-.094.091 3.168 3.168 0 0 0-.298.414c-.225.348-.432.71-.703 1.027-.05.06-.103.118-.149.182-.048.072-.067.154-.022.23.041.068.11.092.188.087.081-.004.125-.064.168-.122l.626-.852c.012-.015.017-.044.053-.034a1.37 1.37 0 0 0-.012.11c-.01.137-.038.274-.01.413.034.159.16.224.306.152a.902.902 0 0 0 .204-.152c.117-.112.228-.233.33-.362.114-.144.229-.29.349-.447.036.12.022.228.017.336-.012.188-.048.375-.012.565.024.117.091.187.187.194a.44.44 0 0 0 .278-.07c.125-.079.137-.237.02-.343a.19.19 0 0 1-.063-.113c-.026-.13-.004-.257.017-.384.039-.245.115-.485.103-.737-.004-.098-.019-.19-.12-.237a.19.19 0 0 0-.076-.021zm8.04.189c.117-.01.175.064.141.177a.387.387 0 0 1-.07.132c-.129.161-.292.27-.496.353a1.56 1.56 0 0 1 .11-.425c.062-.134.163-.223.315-.237zm-6.651.02a.292.292 0 0 1 .15.035c.076.043.098.146.045.233a.676.676 0 0 1-.185.184 1.47 1.47 0 0 1-.483.243c.07-.216.128-.415.245-.586a.286.286 0 0 1 .228-.108zm1.6.092a.509.509 0 0 1 .213.034c.113.046.151.1.149.269a1.257 1.257 0 0 1-.425.819.562.562 0 0 1-.324.136c-.147.012-.262-.081-.247-.228.028-.321.115-.624.33-.876a.436.436 0 0 1 .304-.154zm-5.882.003a.501.501 0 0 1 .218.036c.11.043.149.098.144.262a1.243 1.243 0 0 1-.422.818.581.581 0 0 1-.325.14c-.15.011-.266-.082-.252-.233.03-.315.116-.613.325-.86a.442.442 0 0 1 .312-.163z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Composer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Composer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4k, create_fragment$4k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Compropago.svelte generated by Svelte v3.23.2 */

        function create_fragment$4l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.32 7.778h-.003c-.604-.604-1.508-.604-2.11 0l-.15.15-.905.904-6.926 6.934-1.512 1.507c-.45.452-1.2.755-1.962.755-.75 0-1.5-.303-2.102-.904-.6-.603-.903-1.355-.903-2.11 0-.754.3-1.507.9-2.11l8.89-8.893c-1.206-1.205-3.015-1.205-4.222 0l-6.63 6.783c-2.263 2.262-2.263 6.03 0 8.44 2.26 2.264 6.028 2.264 8.44 0L19.47 9.89c.453-.605.453-1.507-.15-2.112zM22.18 4.772v-.01c-2.26-2.26-6.028-2.26-8.438 0l-9.19 9.347c-.6.603-.6 1.507 0 2.11.61.603 1.512.603 2.112 0l.15-.15.91-.905 6.934-6.935 1.344-1.355.15-.15c.45-.453 1.205-.754 1.96-.754s1.507.302 2.108.905c.605.61.904 1.362.904 2.113 0 .75-.3 1.512-.904 2.11l-8.893 8.89c1.207 1.212 3.014 1.212 4.22 0l6.786-6.776c2.262-2.413 2.262-6.027-.152-8.44z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ComproPago" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Compropago extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4l, create_fragment$4l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Concourse.svelte generated by Svelte v3.23.2 */

        function create_fragment$4m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.9679 11.2451c-.041-.4858-.1227-.9615-.2353-1.4372-.0511-.243-.133-.4758-.1943-.7187l-.1125-.334-.0614-.162-.0716-.1821c-.1739-.4454-.3887-.8705-.6342-1.2855a9.801 9.801 0 00-1.5752-2.0345l-.092-.091-.041-.0507-.0716-.0607c-.0614-.0607-.1227-.1113-.1841-.172-.0614-.0507-.1228-.1114-.1739-.162-.0716-.0608-.133-.1114-.2046-.162l-.1636-.1316-.0819-.0607-.0204-.0202-.0512-.0405-.0102-.0101-.041-.0304c-.1022-.0709-.1943-.1316-.2863-.1923-.1637-.1114-.2864-.2025-.3785-.2632.1023-.3846.1841-.7794.2455-1.1741.1023-.5972.5217-1.832-.3375-2.1863-.8081-.334-1.8617 1.1842-1.8617 1.1842-2.1173 2.4394-3.396 5.4759-3.6823 8.6744.5319.1113 1.0433.3441 1.4729.6781h.0102C16.1838 9.7876 17.084 8.6135 17.8 7.3382c.6854.425 1.2889.9716 1.7696 1.6194l.0716.0911.0716.1114.1432.2226c.0819.1417.174.2733.2455.4252.3171.587.5421 1.2146.6751 1.8623.0614.3037.1023.6074.1228.9211a5.7575 5.7575 0 010 .8401c-.0103.2328-.041.4758-.0819.7086a4.6387 4.6387 0 01-.1125.5465c-.0818.2936-.133.4656-.133.4656s.0716-.162.1944-.4453c.0511-.1417.1227-.324.1841-.5365.0716-.2328.133-.4757.1739-.7085.0511-.2834.092-.577.1125-.8705a7.8611 7.8611 0 000-.9818c-.0204-.3542-.0716-.7085-.1432-1.0526a9.0875 9.0875 0 00-.3069-1.0628c-.0613-.172-.1432-.3543-.225-.5264l-.1125-.2328-.0614-.1214-.0307-.1316c-.1739-.3239-.3784-.6275-.6035-.921-.3887-.5163-.849-.9718-1.3604-1.3766.1534-.3442.3069-.6984.4296-1.0628l.0614.0304.3069.1619.0409.0202.0102.0102c.041.0303-.0614-.0405-.0511-.0304l.0204.0101.0818.0506.174.1114.092.0607.0511.0304.0205.0202h.0102c.0103.0101-.0511-.0405-.0307-.0202l.0103.01c.0613.0507.1227.0912.1943.1418l.2046.1518.0307.0203c-.041-.0304-.0103-.0102-.0205-.0203h.0102l.0103.0101.0511.0405.1023.081a8.8213 8.8213 0 012.2401 2.743l.0716.1417.0716.162.1534.3137c.0819.2025.174.4049.2353.6174.2966.8401.4705 1.7309.5012 2.6216.0102.2125.0102.425.0102.6376 0 .2126-.0204.415-.0306.6073-.0307.3745-.0921.739-.174 1.1134-.0715.3138-.1534.6175-.2557.9211-.0818.2733-.184.5061-.2557.6984-.0818.1923-.1534.334-.1943.4352-.0512.1013-.0716.1519-.0716.1519s.0307-.0506.092-.1417c.0512-.0911.1432-.2328.2455-.415.092-.1822.2148-.4049.3274-.668.133-.2936.2557-.5972.3477-.911.1228-.3644.2148-.7389.2967-1.1235.0409-.2025.0818-.415.1023-.6276a6.8334 6.8334 0 00.0613-.6579c.0307-.4555.0307-.921-.0102-1.3867zm-12.7946.6992a15.3453 15.3453 0 00-4.4414-.625c.0404-.8037.2428-1.5875.5868-2.3118l.0506-.0992.0607-.119.1214-.2283c.0809-.1389.1517-.2778.2529-.4068.3642-.5456.8094-1.0318 1.3152-1.4485.2327-.1984.4856-.377.7487-.5358.2327-.1488.4856-.2778.7385-.3968a7.5772 7.5772 0 01.6576-.268c.2024-.0793.3845-.119.5261-.1587.2934-.0694.4755-.1091.4755-.1091s-.172.01-.4856.0496c-.1517.0198-.344.0397-.5564.0893a8.1925 8.1925 0 00-.7082.1786c-.2732.0893-.5464.1885-.8195.3076-.3035.129-.5868.2877-.86.4563-.3035.1886-.5868.387-.86.6152-.2832.2381-.5462.4861-.789.764-.1215.129-.2429.2877-.3643.4365l-.1517.2083-.0708.1092-.081.119c-.1922.2977-.3743.6152-.516.9426a6.974 6.974 0 00-.5665 1.8454v.0298c-.3642.0297-.7284.0793-1.0927.1389v-.1885-.3969c.0102-.0496-.01.0694-.01.0595V10.972c0-.0298.01-.0596.01-.0993.0102-.0694.0102-.129.0203-.1984 0-.0397.01-.0694.01-.1091v-.0894c0-.0098-.01.0695-.01.0298v-.0099c.01-.0694.0202-.1488.0303-.2282.0101-.0793.0203-.1587.0405-.238v-.0299c-.0101.0497 0 .01-.0101.0199v-.0298l.01-.0595.0203-.129c.253-1.141.7082-2.2323 1.3658-3.1947l.091-.129.1013-.139.2124-.2777c.1417-.1588.2732-.3373.435-.496.597-.645 1.295-1.2105 2.064-1.657a5.9648 5.9648 0 01.5564-.2976c.182-.0993.3743-.1786.5463-.258.344-.1488.698-.2679 1.0522-.377.3035-.0893.6171-.1588.9308-.2183.2832-.0595.526-.0794.7284-.1091.2023-.0199.3642-.0298.4755-.0397h.1619l-.172-.01c-.1113 0-.2732-.0099-.4755-.0099-.2024.01-.4553 0-.7487.0298-.3237.0298-.6475.0695-.9611.129-.3845.0694-.7588.1587-1.123.2778a8.6512 8.6512 0 00-.597.2083c-.2023.0695-.4046.1588-.607.258-.4249.1984-.8296.4167-1.2241.6647-.4047.258-.7892.5557-1.1534.8731-.182.1489-.3642.3374-.5362.506l-.2327.258-.1214.129-.1214.1488c-.3035.3572-.5868.7441-.8296 1.141-.4451.7143-.7992 1.4882-1.042 2.2919l-.0405.119-.0202.0596-.0203.0893-.0607.238c-.0202.0794-.0405.1489-.0607.2283-.0202.0893-.0303.1686-.0506.248-.01.0695-.0303.139-.0404.1984-.0102.0298-.0102.0596-.0203.0993v.0298l-.01.0594v.0596c-.0102.119-.0203.2282-.0406.3373-.0303.3076-.0505.506-.0607.5953-.354.0893-.7082.1984-1.0521.3175 0 0-1.8515.4266-1.7503 1.3196.1012.8433 1.9223 1.012 1.9223 1.012 3.1464.635 6.4142.2877 9.3482-.9922-.1518-.516-.1923-1.0517-.1012-1.5775zm4.411 1.938c-.3645.4088-.81.7255-1.3162.9299v.0102c.3848 1.4816.982 2.8916 1.7718 4.1995-.6986.3678-1.4478.613-2.2274.7152l-.1113.0102-.1317.0103-.2632.0204c-.162 0-.324.0102-.486 0-.6682-.0102-1.3262-.1226-1.954-.3372-.2936-.092-.5872-.2146-.8605-.3474-.2531-.1226-.4961-.2554-.729-.4087-.2025-.1328-.3948-.2657-.577-.419-.1722-.1328-.3038-.2656-.4253-.3678-.2227-.2145-.3442-.3474-.3442-.3474s.1012.143.2936.3883c.1012.1226.2227.2657.3746.419.1721.1839.3442.3473.5366.5108.2227.1942.4556.3679.6986.5313.2733.184.5568.3474.8504.4905.3139.1533.648.286.982.3985.3544.1124.7088.1941 1.0733.2554.1822.0307.3746.0511.567.0716l.2631.0204.1317.0102h.1518c.3645 0 .729-.0204 1.0935-.0715.6175-.0818 1.225-.2452 1.8122-.4802.2227.3065.4556.6028.6986.8889-.0101.0102-.0203.0102-.0304.0204l-.2936.184-.0405.0204-.0101.0102c-.0506.0204.0607-.0306.0506-.0204h-.0101l-.0203.0102c-.0303.0102-.0607.0306-.091.0409l-.1823.092-.1013.051-.0506.0307-.0202.0102h-.0102c-.01 0 .0608-.0307.0304-.0102l-.0101.0102-.2126.092c-.0709.0306-.1519.0612-.2228.1021l-.0303.0102c.0506-.0204.0101 0 .0202-.0102h-.0101l-.0101.0102-.0608.0205-.1215.051a8.7816 8.7816 0 01-3.4827.5927l-.1519-.0102-.1721-.0102-.3544-.0307c-.2126-.0307-.4353-.051-.658-.1022-.8809-.1635-1.7313-.4496-2.5311-.8685-.1924-.1022-.3746-.2043-.5569-.3065-.1822-.1022-.3442-.2248-.5163-.3372-.3037-.2146-.6075-.4496-.8808-.6948-.243-.2146-.4657-.4394-.6784-.6744-.2024-.2043-.3442-.4087-.4758-.5722-.1316-.1635-.2126-.2963-.2835-.3883l-.1012-.143s.0303.051.081.143c.0607.092.1316.2453.243.419.1113.1737.243.3882.4252.6233.1923.2656.405.521.6176.756.2632.2862.5365.562.8302.8073.162.1328.324.2759.496.3985.1722.1328.3544.2656.5468.3882a11.06 11.06 0 001.225.6846c.4455.2044.901.378 1.3668.511.2328.0714.486.1225.729.1838l.3442.0613.172.0307.1924.0307c.4759.0613.9517.092 1.4276.092.8605-.0103 1.711-.133 2.5412-.3577l.1215-.0307.0607-.0204.0911-.0307c.081-.0306.162-.051.2329-.0817l.2227-.0715.243-.092c.0709-.0306.1316-.051.1924-.0715.0304-.0102.0607-.0204.0911-.0409l.0203-.0102h.01l.0608-.0306.0101-.0103.0405-.0204.3038-.1533c.162-.0817.2835-.143.3847-.1839.2632.2555.5265.5007.81.7255 0 0 1.3262 1.3794 2.0552.8174.6884-.5313-.1013-2.207-.1013-2.207-1.0529-3.0245-3.0474-5.6811-5.6797-7.5407zm-.0549-1.4117a1.8824 1.8824 0 01-1.8823 1.8823 1.8824 1.8824 0 01-1.8824-1.8823 1.8824 1.8824 0 011.8824-1.8824 1.8824 1.8824 0 011.8823 1.8824Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Concourse" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Concourse extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4m, create_fragment$4m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/CondaForge.svelte generated by Svelte v3.23.2 */

        function create_fragment$4n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.206 5.866l.005.396H6.754l.006.655v.005l-6.758.002v.211L0 7.973l.02.041c.212.467.663.901 1.257 1.313.594.411 1.335.796 2.145 1.13 1.62.664 3.502 1.12 5.006 1.1.746-.01 1.265.228 1.62.672.341.426.51 1.092.524 1.92L7.94 16.239l.008 1.896H20.29l-.004-1.76-2.63-2.22c.055-2.013.708-3.443 1.777-4.405 1.087-.979 2.61-1.49 4.37-1.616l.195-.015L24 5.872zm.425.422l14.946.006-.004 1.457c-1.737.155-3.29.666-4.424 1.685-.912.822-1.433 2.062-1.691 3.534l-1.617.004.002.422 1.535-.004c-.027.226-.113.4-.123.64l-.893-.003-.002.422.995.004 2.138 1.802-2.941.002c-.724-.675-1.552-1.116-2.416-1.158-.817-.04-1.638.324-2.387 1.04l-2.978-.024 2.248-1.781v-.102c.002-.943-.2-1.72-.64-2.269-.396-.496-1.007-.749-1.741-.79l-.008-4.49h.008zm-1.45.396h1.026l.008 4.404c-1.387-.02-3.125-.404-4.631-1.023-.787-.324-1.507-.698-2.066-1.086C.968 8.6.587 8.203.424 7.86v-.514l6.336-.002v2.16h.422v-2.16h.004l-.004-.435v-.226zm6.935 8.839c.75.037 1.503.436 2.18 1.078l-.002 1.112h-4.345l-.006-1.2c.706-.717 1.443-1.026 2.173-.99zM8.36 16.537l3.16.023.006 1.153h-3.16zm11.5.142l.002 1.034h-3.148V16.68z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Conda-Forge" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class CondaForge extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4n, create_fragment$4n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Conekta.svelte generated by Svelte v3.23.2 */

        function create_fragment$4o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.25 19.502L2.7 12l5.55-7.5 3.45 4.65L9.447 12l2.25 3-3.45 4.502zM12.45 24l8.85-12-8.85-12h-6.9l9 12-9 12h6.9z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Conekta" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Conekta extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4o, create_fragment$4o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Confluence.svelte generated by Svelte v3.23.2 */

        function create_fragment$4p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.87 18.257c-.248.382-.53.875-.763 1.245a.764.764 0 0 0 .255 1.04l4.965 3.054a.764.764 0 0 0 1.058-.26c.199-.332.454-.763.733-1.221 1.967-3.247 3.945-2.853 7.508-1.146l4.957 2.337a.764.764 0 0 0 1.028-.382l2.364-5.346a.764.764 0 0 0-.382-1 599.851 599.851 0 0 1-4.965-2.361C10.911 10.97 5.224 11.185.87 18.257zM23.131 5.743c.249-.405.531-.875.764-1.25a.764.764 0 0 0-.256-1.034L18.675.404a.764.764 0 0 0-1.058.26c-.195.335-.451.763-.734 1.225-1.966 3.246-3.945 2.85-7.508 1.146L4.437.694a.764.764 0 0 0-1.027.382L1.046 6.422a.764.764 0 0 0 .382 1c1.039.49 3.105 1.467 4.965 2.361 6.698 3.246 12.392 3.029 16.738-4.04z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Confluence" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Confluence extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4p, create_fragment$4p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Consul.svelte generated by Svelte v3.23.2 */

        function create_fragment$4q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.0754 12.0285a2.5059 2.5059 0 0 0-2.506-2.506 2.5059 2.5059 0 0 0-2.5058 2.506 2.5059 2.5059 0 0 0 2.5059 2.5059 2.5059 2.5059 0 0 0 2.5059-2.506zm3.5317.0003a1.1559 1.1556 0 0 0-1.1558-1.1556 1.1559 1.1556 0 0 0-1.1559 1.1556 1.1559 1.1556 0 0 0 1.1559 1.1555 1.1559 1.1556 0 0 0 1.1558-1.1555zm4.7917 5.5103a1.1576 1.1564 0 0 0-1.1577-1.1564 1.1576 1.1564 0 0 0-1.1576 1.1564 1.1576 1.1564 0 0 0 1.1576 1.1564 1.1576 1.1564 0 0 0 1.1577-1.1564zM20.748 13.888a1.1534 1.157 0 0 0-1.1533-1.157 1.1534 1.157 0 0 0-1.1534 1.157 1.1534 1.157 0 0 0 1.1534 1.1571 1.1534 1.157 0 0 0 1.1533-1.157zm3.2512.0619a1.1542 1.1538 0 0 0-1.1542-1.1538 1.1542 1.1538 0 0 0-1.1542 1.1538 1.1542 1.1538 0 0 0 1.1542 1.1538 1.1542 1.1538 0 0 0 1.1542-1.1538zm-3.279-3.883a1.1561 1.1535 0 0 0-1.156-1.1535 1.1561 1.1535 0 0 0-1.1562 1.1535 1.1561 1.1535 0 0 0 1.1561 1.1535 1.1561 1.1535 0 0 0 1.1562-1.1535zm3.2798.045a1.1614 1.157 0 0 0-1.1614-1.157 1.1614 1.157 0 0 0-1.1613 1.157 1.1614 1.157 0 0 0 1.1613 1.1572A1.1614 1.157 0 0 0 24 10.1119zm-1.626-3.631a1.1575 1.1601 0 0 0-1.1575-1.16 1.1575 1.1601 0 0 0-1.1575 1.16 1.1575 1.1601 0 0 0 1.1575 1.1602A1.1575 1.1601 0 0 0 22.374 6.481zM11.6171.3832c-3.1098 0-6.029 1.2063-8.2197 3.3974C1.206 5.9822 0 8.9007 0 11.9998c0 3.109 1.2067 6.0279 3.3974 8.2193 2.2028 2.1922 5.1213 3.3978 8.2197 3.3978 2.578 0 5.0176-.8252 7.055-2.386l-1.4196-1.8524c-1.6263 1.246-3.5748 1.9048-5.6354 1.9048-2.4776 0-4.8112-.9641-6.5717-2.7154-1.748-1.7488-2.7118-4.0828-2.7118-6.568 0-2.4784.9645-4.812 2.7158-6.5703 1.7484-1.7488 4.0817-2.713 6.5677-2.713 2.058 0 4.0069.659 5.6365 1.9057l1.4179-1.854C16.6314 1.2083 14.1922.3831 11.617.3831Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Consul" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Consul extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4q, create_fragment$4q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Contactlesspayment.svelte generated by Svelte v3.23.2 */

        function create_fragment$4r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.878 19.1c-2.861-.25-5.385-1.312-7.03-2.954-.936-.936-1.504-1.952-1.76-3.149-.118-.544-.117-1.448 0-1.997.357-1.664 1.433-3.12 3.126-4.23 3.862-2.533 9.778-2.52 13.604.03.508.338.836.607 1.296 1.06.58.573.988 1.142 1.418 1.98.016.03.095.07.176.086.27.056.633.268.924.54.226.21.401.44.832 1.093.435.658 2.404 3.697 2.524 3.896.046.078-.046.202-.15.202-.073 0-.126-.05-.234-.22l-1.116-1.732c-1.9-2.942-2.003-3.078-2.532-3.343l-.278-.14h-.817c-.816 0-.817.001-.837.087-.108.47-.128.586-.104.608.015.014.478.278 1.03.586l1.002.562-.062.131c-.035.072-.074.132-.088.132-.014 0-.858-.468-1.875-1.039-1.018-.57-1.91-1.054-1.982-1.074-.29-.08-.734.24-.734.529 0 .292.087.378 1.874 1.841 1.115.914 1.753 1.462 1.85 1.592.178.236.357.584.523 1.012.29.754.763 1.174 1.538 1.368l.255.064-.021.14a.667.667 0 01-.037.157c-.033.037-.547-.127-.844-.27-.465-.223-.785-.541-1.099-1.094a5.565 5.565 0 00-.405.139c-.391.142-.41.154-.78.515-1.576 1.538-3.836 2.521-6.566 2.855-.443.055-2.15.079-2.621.037zm2.717-.473c1.252-.166 2.223-.414 3.24-.83 1.067-.437 2.073-1.065 2.777-1.733l.277-.264-.698-.333c-.746-.357-.82-.416-.915-.735-.06-.2.008-.415.198-.621l.149-.161-.324-.246c-.256-.195-.336-.28-.386-.41a.65.65 0 01.079-.616l.098-.138-1.023-.18a26.154 26.154 0 01-1.166-.222c-.153-.046-.31-.22-.35-.391-.022-.092.48-2.54.592-2.89a.67.67 0 01.426-.376c.169-.031 3.185.499 3.335.587.238.138.313.362.238.705l-.032.144h.167c.092 0 .31-.012.483-.025l.316-.025-.157-.29c-.474-.882-1.33-1.768-2.388-2.472-.494-.328-1.547-.847-2.181-1.074a13.51 13.51 0 00-3.043-.674c-.575-.06-2.082-.06-2.64.001-1.339.146-2.554.449-3.617.902C2.59 7.309.935 9.046.512 11.027c-.11.517-.12 1.423-.018 1.894.224 1.04.713 1.941 1.509 2.78 1.62 1.707 4.097 2.756 7.066 2.994.397.031 2.121-.015 2.526-.068zm-.543-1.864c-.153-.044-.308-.227-.34-.4-.022-.114.004-.192.166-.506.656-1.27.941-2.437.941-3.855 0-1.37-.252-2.435-.879-3.713-.135-.274-.245-.529-.245-.565 0-.136.114-.333.237-.41.169-.107.452-.087.588.04.052.05.187.271.3.494.449.88.756 1.847.908 2.853.094.623.113 1.803.038 2.373a9.33 9.33 0 01-.86 2.909c-.27.555-.438.784-.58.784a.418.418 0 00-.101.015.421.421 0 01-.173-.019zm-1.826-.955c-.234-.069-.404-.357-.336-.573.017-.052.127-.293.246-.535.502-1.024.711-2.123.609-3.201-.084-.886-.243-1.445-.643-2.263-.269-.549-.281-.634-.125-.854.148-.21.519-.245.713-.066.135.124.555 1 .716 1.496a7.106 7.106 0 01-.232 5.016c-.352.826-.599 1.081-.948.98zm-1.882-.969a.57.57 0 01-.304-.374c-.021-.094.014-.198.187-.547.632-1.28.639-2.514.02-3.765-.271-.55-.277-.659-.047-.876.113-.107.161-.126.32-.126.267 0 .406.135.644.625.367.754.518 1.408.516 2.246 0 .86-.141 1.452-.533 2.247-.225.455-.336.575-.56.606a.525.525 0 01-.243-.036zm-1.757-.902a.592.592 0 01-.286-.34c-.043-.152-.008-.273.165-.557.222-.365.274-.56.274-1.038 0-.477-.052-.673-.274-1.038a2.046 2.046 0 01-.168-.329c-.071-.24.129-.535.398-.586.228-.043.385.06.595.387a2.96 2.96 0 010 3.155c-.215.332-.454.45-.704.346zm13.09 1.473c.203-.073.379-.141.39-.153.012-.011-.027-.141-.087-.289-.122-.302-.102-.295-.534-.212-.468.09-.739.01-1.25-.366-.14-.103-.283-.187-.32-.187-.036 0-.115.053-.177.119-.13.14-.15.36-.044.49.093.113 1.377.724 1.53.727.067.002.289-.056.492-.129zm-.202-.983c.19-.038.211-.051.178-.112-.036-.068-1.812-1.542-1.966-1.632-.127-.074-.23-.057-.335.056-.309.33-.273.4.526 1.013.964.738 1.066.782 1.597.675zm-2.384-2.231c0-.01-.201-.183-.448-.385-.608-.501-.738-.688-.738-1.058 0-.31.206-.608.538-.78a.966.966 0 01.625-.057c.118.038.648.325 1.383.748l.155.089.128-.606c.13-.62.133-.782.012-.82-.037-.011-.746-.14-1.575-.286-1.473-.26-1.634-.275-1.702-.164-.037.06-.597 2.656-.597 2.767 0 .055.028.124.062.152.034.029.512.132 1.062.23 1.062.191 1.095.196 1.095.17Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Contactless Payment" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Contactlesspayment extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4r, create_fragment$4r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Convertio.svelte generated by Svelte v3.23.2 */

        function create_fragment$4s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 .037C5.373.037 0 5.394 0 12c0 6.606 5.373 11.963 12 11.963 6.628 0 12-5.357 12-11.963C24 5.394 18.627.037 12 .037zm-.541 4.8c1.91-.13 3.876.395 5.432 1.934 1.426 1.437 2.51 3.44 2.488 5.317h2.133l-4.444 4.963-4.445-4.963h2.313c-.001-1.724-.427-2.742-1.78-4.076-1.325-1.336-2.667-2.11-4.978-2.303a9.245 9.245 0 013.281-.871zM6.934 6.95l4.445 4.963H9.066c0 1.724.426 2.742 1.778 4.076 1.326 1.336 2.667 2.112 4.978 2.305-2.684 1.268-6.22 1.398-8.71-1.064-1.427-1.437-2.512-3.44-2.489-5.317H2.488L6.934 6.95Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Convertio" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Convertio extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4s, create_fragment$4s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Coronaengine.svelte generated by Svelte v3.23.2 */

        function create_fragment$4t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.986,0C11.986,0,11.986,0,11.986,0C5.358,0.008-0.008,5.387,0,12.015 C0.008,18.642,5.387,24.008,12.015,24C18.636,23.992,24,18.622,24,12C23.996,5.369,18.617-0.004,11.986,0z M12.007,22.455 c-5.774,0.006-10.461-4.67-10.467-10.445C1.535,6.236,6.211,1.55,11.985,1.544C17.763,1.541,22.449,6.223,22.452,12 C22.452,17.77,17.777,22.449,12.007,22.455z M13.689,7.5c1.008,1.059,2.329,1.903,3.472,2.133c0.362-0.118,0.688-0.326,0.948-0.605 c0.277-0.324,0.46-0.718,0.529-1.139c-0.012-0.038-0.027-0.076-0.041-0.116l0,0c-0.49-1.318-1.804-2.265-3.158-2.831 c-1.333-0.557-2.695-0.746-3.35-0.558C12.112,5.395,12.769,6.535,13.689,7.5L13.689,7.5L13.689,7.5z M16.798,12.226 c-0.697,1.284-1.093,2.799-0.96,3.957c0.225,0.307,0.523,0.553,0.869,0.713c0.394,0.163,0.826,0.215,1.247,0.151 c0.038-0.027,0.07-0.053,0.1-0.075c1.103-0.872,1.6-2.413,1.72-3.875c0.119-1.438-0.122-2.79-0.503-3.354 c-0.957,0.334-1.839,1.311-2.473,2.482L16.798,12.226z M8.227,8.993c1.32-0.631,2.532-1.625,3.105-2.639 c0-0.381-0.097-0.755-0.283-1.088c-0.223-0.363-0.541-0.658-0.92-0.853l-0.123,0.002C8.6,4.473,7.292,5.428,6.334,6.541l0,0 C5.392,7.633,4.791,8.87,4.767,9.55c0.969,0.288,2.258,0.017,3.459-0.559L8.227,8.993z M7.96,14.641 c-0.193-1.449-0.765-2.907-1.553-3.767c-0.363-0.117-0.749-0.14-1.123-0.067l0,0c-0.415,0.099-0.794,0.31-1.097,0.61l-0.036,0.118 c-0.38,1.355,0.126,2.893,0.887,4.146c0.749,1.233,1.741,2.185,2.382,2.418c0.577-0.832,0.718-2.139,0.54-3.459L7.96,14.641z M13.257,16.641c-1.439-0.264-3.004-0.172-4.065,0.311c-0.224,0.308-0.366,0.668-0.411,1.046c-0.034,0.426,0.05,0.852,0.243,1.233 c0.033,0.025,0.067,0.047,0.1,0.068c1.172,0.779,2.793,0.774,4.223,0.438c1.405-0.332,2.619-0.979,3.039-1.515 c-0.614-0.807-1.817-1.344-3.128-1.584L13.257,16.641z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Corona Engine" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Coronaengine extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4t, create_fragment$4t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Coronarenderer.svelte generated by Svelte v3.23.2 */

        function create_fragment$4u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.734,11.603c0.078,0.376,0.116,0.76,0.116,1.144c0,1.44-0.562,2.846-1.556,3.889 c-0.989,1.037-2.358,1.668-3.789,1.741c-1.445,0.074-2.885-0.418-3.979-1.365c-1.079-0.933-1.776-2.265-1.921-3.684 c-0.148-1.445,0.273-2.914,1.17-4.057c0.877-1.118,2.168-1.879,3.574-2.095c1.439-0.222,2.934,0.127,4.123,0.97 C18.627,8.965,19.448,10.214,19.734,11.603z M24,6v12c0,3.314-2.686,6-6,6H6c-3.314,0-6-2.686-6-6V6c0-3.314,2.686-6,6-6h12 C21.314,0,24,2.686,24,6z M21.828,9.483c-0.465-1.398-1.274-2.674-2.334-3.697c-1.025-0.988-2.279-1.731-3.639-2.152 c0.159,0.423,0.239,0.874,0.238,1.326c-1.109-1.455-2.809-2.4-4.632-2.564c-1.112-0.1-2.245,0.084-3.265,0.538 c0.829,0.257,1.555,0.807,2.03,1.533C8.383,3.809,6.29,4.017,4.615,5.028C3.931,5.441,3.324,5.98,2.831,6.609 c1.151-0.247,2.375,0.069,3.262,0.843c-0.74,0.709-1.754,1.087-2.778,1.039C3.469,8.742,3.652,8.973,3.859,9.18 c-0.01,0.017-0.021,0.034-0.031,0.051c-0.696,0.314-1.288,0.842-1.68,1.496c-0.438,0.729-0.613,1.6-0.498,2.442 c0.066,0.481,0.226,0.947,0.469,1.367c-0.108-0.934,0.684-1.758,1.622-1.686c0.921,0.071,1.576,0.983,1.351,1.88 c-0.16,0.635-0.732,1.107-1.386,1.142c0.87,1.547,2.362,2.701,4.08,3.146c0.608,0.157,1.238,0.226,1.866,0.206 c-0.471,0.358-1.029,0.608-1.637,0.711c1.493,1.016,3.275,1.567,5.08,1.578c1.455,0.009,2.905-0.33,4.202-0.991 c1.249-0.636,2.345-1.562,3.184-2.684c0.851-1.139,1.43-2.475,1.676-3.876C22.417,12.472,22.305,10.919,21.828,9.483z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Corona Renderer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Coronarenderer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4u, create_fragment$4u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/CounterStrike.svelte generated by Svelte v3.23.2 */

        function create_fragment$4v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.103.435c.4347-.3913 1.087-.5362 1.6522-.3623.2174.0725.4058.203.6087.3333.1595.1015.3479.145.4928.261.0725.058.0145.1594.0145.2318.1884.4493.2899.9421.1305 1.4204-.1305.1594-.3624.203-.5508.2754-.029.2029.0435.3913.0725.5942-.0435.029-.0725.058-.116.087.2754-.0145.5508-.0725.8262-.1304.1014-.1015.2608-.0435.3913-.058.0145-.203.087-.3914.087-.5943.029 0 .087-.0145.1159-.029.0145.145 0 .29.0435.4349.0724.058.1884.029.2754.0434 0 .058 0 .116.0144.174 1.6813-.0145 3.377 0 5.0583 0v.2464h.1595v-.9421h.1884c0 .2609-.0145.5072 0 .7681a.1107.1107 0 0 0 .0725.029c0 .029.0144.087.0144.116.058-.058.1305-.1015.2174-.0725.0145.0435.029.087.0435.145-.058.058-.087.1304-.058.2173.4639.0145.9277 0 1.406 0 .0434-.058.1159-.087.1884-.116.029.0146.0724.0436.087.058h.6811c.029.116.029.232.0145.3334h-.6957c-.0145.0145-.058.058-.087.0725-.0724-.0435-.1304-.0725-.2029-.116h-1.2609c-.2464.0725-.5073.058-.7537.0145v.2754h-2.0726c-.087.0725-.1739.116-.2898.1305.0434.2174-.203.2753-.29.4348-.0579.087-.1448.1449-.2318.1739-.0725.4493.087.8696.203 1.29-.1305.029-.2755.0724-.406.1014-.0724.2899-.1449.5942-.2028.884-.058.261-.261.4784-.5073.5798-.174.203-.4058.4059-.6812.4204-.1015.029-.174-.0435-.2464-.1015-.3623.029-.6957-.145-1.0146-.2899-.3478-.1594-.6667-.3623-1-.5507.029.2029-.0725.3768-.145.5507.1595.0725.3769.1305.4638.3044.058.1304.116.2754.116.4348-.0145.5218-.0725 1.0435-.1015 1.5653.0145.3769-.1739.7537-.4348 1.029-.1739-.0144-.3188-.0869-.4783-.1594-.058.1305-.1884.261-.116.4204.058.1884.058.3913.145.5652.4928.5218.9131 1.1015 1.2175 1.7537.3043.6233.5362 1.2755.7826 1.9277.0435 0 .1305-.0145.174-.0145.058.1884 0 .4058.116.5798.1014.1594.0724.3478.0724.5362-.029.4348-.058.8696-.1015 1.3044-.029.3044-.1014.6088-.1449.9132.0145.2318.116.4637.1014.6956-.0144.2175-.0144.4493-.1884.6088.0145.4928-.116.9855.058 1.4638.232.3189.4928.6233.7682.8986.3043.145.6667.174.9276.4349.1014.1594.0434.3478.0145.5217a6.7323 6.7323 0 0 1-1.8697 0c-.2464-.058-.4783-.1594-.7247-.1884-.3334.0145-.7247.145-1.029-.087-.029-.3913.1159-.7681.1884-1.145.029-.1304.1594-.2174.1449-.3478-.029-.4493-.058-.9131-.087-1.3624-.058-.029-.1594-.058-.1449-.145 0-.2173-.0725-.4347-.1304-.6377-.1015-.5507-.145-1.116-.1595-1.6812-.0145-.1595.087-.2754.203-.3769.029-.2464.058-.5072.0724-.7536-.0435-.1305-.145-.232-.203-.3479-.2608.029-.6376.087-.797-.1884-.3769-.5653-.7682-1.145-1.145-1.7102-.1595-.0145-.3479 0-.4928-.1015-.1595-.174-.261-.4058-.3624-.6232-.0435.1739-.0725.3623-.174.5072-.0869.145-.2318.2464-.3333.3769-.1014.2319-.1884.4638-.2753.6957-.1015.2898-.2464.5797-.2754.8986-.0145.1594-.0435.3044-.1015.4493-.0724.116-.2029.1594-.3188.2174-.087.1884-.145.3768-.2754.5363-.087.1014-.232.1304-.2899.2608-.058.174-.145.3334-.2174.4928-.029.174.087.3624.029.5363-.1015.4348-.3189.8406-.5218 1.232-.1014.2898-.1739.5942-.3188.8696-.058.116-.203.145-.3189.1594-.1304.3189-.2754.6232-.3623.9566-.0435.3188-.0435.6522-.029.971 0 .145.087.261.145.3914.0579.174.0144.3478-.0146.5218-.5652.0724-1.145.1304-1.6957-.0435-.058-.0435-.0435-.116-.058-.174-.0435-.2608-.0725-.5362.0145-.7826.1884-.6812.3478-1.3624.5362-2.0436-.0724-.0725-.1739-.1304-.1739-.2464-.0145-.1884 0-.3913.0435-.5797.087-.319.3189-.5653.4348-.8697.0435-.1304.029-.2609.0435-.3913 0-.3044.174-.5508.3044-.8116.1304-.2174.2318-.4493.4058-.6378.116-.1014.116-.2608.2029-.3913.087-.1594.2319-.2899.2319-.4783.029-.2319-.058-.4638-.029-.6957.058-.6812.1884-1.3479.3044-2.029-.058-.0726-.145-.145-.174-.2465.0145-.0724.029-.1304.0435-.2029l-.1304-.2174c.058-.087.116-.1884.174-.2754-.058-.0435-.1305-.1014-.1885-.145.0725-.2173.0435-.5362.3043-.6376.029.0145.1015.029.1305.0434-.0435-.3768-.0435-.7681-.087-1.145-.1014-.4058-.116-.826-.0724-1.232.1449-.2173.4203-.3043.6667-.3188-.3189-.0724-.6378-.1014-.9421-.2029-.0145-.2609.029-.5218.0725-.7826.1304-.5073.0724-1.029.1449-1.5509.0725-.1449.2609-.1739.4203-.1449.1884.029.3768-.029.5653-.087 0-.0724.0145-.1594 0-.2319-.116-.5072-.087-1.029 0-1.5218.116-.6377.3768-1.261.855-1.7102.319-.3044.7827-.4494 1.2176-.4349.1449 0 .2318.145.3478.232.058-.058.116-.116.1594-.174-.0724-.2464-.1884-.5073-.1739-.7681.029-.5798.2174-1.174.6522-1.5654m4.522 4.1017c.029.029.029.029 0 0m.203.029c.0144.1015.0434.203-.0145.2899-.0725.029-.1595.029-.232.0725.203 0 .4059.0145.6088 0 .1594-.0435.1015-.2464.1015-.3624-.1015-.116-.3189-.0435-.4638 0m-.5073.6088c.145.1594.2174.4058.3478.5652.1884-.2464.3334-.5073.5508-.7247-.2609-.0145-.5218.0145-.7827-.0145-.0435.058-.0724.116-.116.174Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Counter-Strike" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class CounterStrike extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4v, create_fragment$4v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Coursera.svelte generated by Svelte v3.23.2 */

        function create_fragment$4w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.992 11.806a5.091 5.091 0 0 0-.018-.279v-.002-.002a5.98 5.98 0 0 0-.99-2.814 6.217 6.217 0 0 0-.867-1.039 6.289 6.289 0 0 0-1.64-1.13 7.016 7.016 0 0 0-3.051-.668 7.35 7.35 0 0 0-2.546.444 6.323 6.323 0 0 0-1.822.996 6.45 6.45 0 0 0-.333.29l-.085.085-.117.125h.001l-.056.055-.026.028-.141.147c-.104.117-.202.234-.296.349v-.002l-.004-.003c-.192.233-.37.476-.5.693-.089.14-.176.283-.259.427l-1.147 2.319.002.001-.06.118-.126.256c-.251.509-.521 1.017-.821 1.435-.672.737-1.431 1.098-2.406 1.098-.068 0-.139-.003-.209-.008-.588-.023-1.092-.162-1.539-.427a2.576 2.576 0 0 1-.994-1.03 2.659 2.659 0 0 1-.326-1.369l.002-.034c.031-.76.321-1.352.904-1.861.142-.124.291-.228.446-.32.021-.013.044-.024.065-.036.434-.237.927-.355 1.492-.355l.176.005c.899.034 1.592.314 2.145.863l1.734-3.113a6.845 6.845 0 0 0-1.399-.71c-.019-.007-.04-.016-.06-.022-.062-.022-.123-.045-.186-.065a7.425 7.425 0 0 0-1.716-.348 5.545 5.545 0 0 1-.046-.006c-.091-.005-.184-.016-.275-.02a9.966 9.966 0 0 0-.297-.007h-.055a7.005 7.005 0 0 0-3.028.67 6.176 6.176 0 0 0-2.502 2.166A6.006 6.006 0 0 0 0 12.087c-.002 1.564.568 2.938 1.701 4.093 1.184 1.211 2.721 1.864 4.567 1.941.118.005.235.008.353.008 1.045 0 2.011-.186 2.878-.558.217-.093.427-.201.642-.322.117-.067.228-.139.338-.215l.08-.055.137-.093c.164-.118.317-.246.467-.381l.052-.05c.088-.083.176-.168.259-.255l.311-.352.118-.148.056-.081.055-.079c.462-.776 1.965-3.601 1.965-3.601v-.006l.09-.172.074-.135c.222-.403.382-.689.594-.99l.006-.01c.493-.717 1.344-1.227 2.346-1.313 1.68-.145 3.152.959 3.287 2.465.135 1.507-1.117 2.846-2.798 2.991a3.417 3.417 0 0 1-1.011-.064l-.009.003c-1.232-.257-2.017-1.155-2.404-1.558l-1.617 2.974s.503.506.847.759c.346.253.791.501 1.146.656a7.151 7.151 0 0 0 2.838.589c.121 0 .097 0 .222-.005 1.844-.077 3.489-.784 4.675-1.995 1.123-1.15 1.733-2.463 1.738-4.018v-.047l-.011-.257z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Coursera" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Coursera extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4w, create_fragment$4w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Coveralls.svelte generated by Svelte v3.23.2 */

        function create_fragment$4x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 12v12h24V0H0zm13.195-6.187l1.167 3.515 2.255.005c1.238.005 2.916.019 3.727.037l1.472.028-2.968 2.152c-1.63 1.181-2.976 2.18-2.99 2.212-.01.033.487 1.627 1.106 3.54.619 1.917 1.12 3.487 1.116 3.492-.005.01-1.35-.947-2.986-2.119-1.636-1.177-3-2.147-3.033-2.161-.028-.01-1.411.947-3.07 2.138-1.655 1.185-3.02 2.151-3.024 2.142-.004-.005.497-1.575 1.116-3.492.619-1.913 1.115-3.507 1.106-3.54-.014-.032-1.36-1.03-2.99-2.212L2.23 9.398l1.472-.028c.811-.018 2.49-.032 3.727-.037l2.254-.005 1.168-3.515a512.54 512.54 0 011.171-3.516c.005 0 .53 1.58 1.172 3.516z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Coveralls" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Coveralls extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4x, create_fragment$4x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cpanel.svelte generated by Svelte v3.23.2 */

        function create_fragment$4y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.586 9.346a.538.538 0 00-.34.113.561.561 0 00-.197.299L2.74 14.654h.922a.528.528 0 00.332-.113.561.561 0 00.2-.291l.968-3.604h.744a.677.677 0 01.317.077.703.703 0 01.24.199.732.732 0 01.129.281.65.65 0 01-.01.326.698.698 0 01-.676.526h-.385a.538.538 0 00-.337.113.561.561 0 00-.2.291l-.24.896h1.201a1.939 1.939 0 001.62-.867 1.988 1.988 0 00.265-.586l.027-.1a1.854 1.854 0 00.026-.907 1.973 1.973 0 00-1.031-1.34 1.875 1.875 0 00-.88-.21H4.587zm18.447 0a.401.401 0 00-.25.082.377.377 0 00-.14.217l-1.334 5.01a1.7 1.7 0 00.57-.096 1.806 1.806 0 00.496-.266 1.74 1.74 0 00.385-.408 1.648 1.648 0 00.234-.531l.996-3.696a.23.23 0 00-.045-.217.246.246 0 00-.2-.095h-.712zM8.381 10.643l-.133.503a.564.564 0 00-.006.26.544.544 0 00.1.221.552.552 0 00.185.154.53.53 0 00.252.06h2.157a.101.101 0 01.084.038.098.098 0 01.015.088l-.02.072-.324 1.201-.013.055a.172.172 0 01-.067.105.205.205 0 01-.127.04H9.178a.147.147 0 01-.12-.057.136.136 0 01-.027-.13c.022-.074.071-.112.147-.112h.808a.53.53 0 00.332-.112.564.564 0 00.2-.293l.132-.498H8.84a1.131 1.131 0 00-.38.065 1.152 1.152 0 00-.323.176 1.194 1.194 0 00-.256.271 1.052 1.052 0 00-.156.346l-.028.1a1.095 1.095 0 00-.013.533 1.203 1.203 0 00.212.464 1.141 1.141 0 00.918.453l2.157.006a.899.899 0 00.875-.67l.525-1.95a1.101 1.101 0 00.01-.514 1.114 1.114 0 00-.205-.444 1.149 1.149 0 00-.377-.312 1.048 1.048 0 00-.498-.12H8.38zm-6.397.01a1.924 1.924 0 00-.638.107 1.989 1.989 0 00-.553.295 1.962 1.962 0 00-.7 1.045l-.027.1a1.936 1.936 0 00-.023.905 1.955 1.955 0 00.361.786 1.986 1.986 0 00.668.554 1.875 1.875 0 00.88.21h.464l.266-.983a.23.23 0 00-.043-.215.239.239 0 00-.198-.096h-.423a.702.702 0 01-.319-.074.67.67 0 01-.24-.195.732.732 0 01-.127-.281.706.706 0 01.01-.34.73.73 0 01.256-.377.675.675 0 01.42-.14h.697a.538.538 0 00.338-.114.561.561 0 00.199-.297l.232-.89h-1.5zm11.08 0l-.982 3.689a.23.23 0 00.045.217.238.238 0 00.195.095h.711a.413.413 0 00.248-.08.363.363 0 00.143-.21l.644-2.41h.745a.678.678 0 01.318.075.708.708 0 01.238.2.735.735 0 01.129.28.65.65 0 01-.01.327l-.398 1.506a.243.243 0 00.24.312h.713a.403.403 0 00.244-.08.366.366 0 00.143-.213l.332-1.248a1.897 1.897 0 00.029-.908 1.955 1.955 0 00-.361-.79 1.987 1.987 0 00-.668-.554 1.889 1.889 0 00-.885-.209h-1.813zm5.793 0a1.458 1.458 0 00-.488.081 1.489 1.489 0 00-.752.58 1.493 1.493 0 00-.205.454l-.406 1.505a1.018 1.018 0 00-.016.508 1.139 1.139 0 00.205.446 1.095 1.095 0 00.377.312 1.071 1.071 0 00.498.115h2.502a.528.528 0 00.332-.113.561.561 0 00.2-.291l.21-.791h-2.748a.2.2 0 01-.191-.252l.299-1.127a.34.34 0 01.113-.162.281.281 0 01.18-.064h1.232a.153.153 0 01.147.193l-.026.1c-.022.075-.071.113-.146.113h-.81a.538.538 0 00-.339.111.526.526 0 00-.191.293l-.133.49h2.004a.887.887 0 00.547-.181.864.864 0 00.32-.483l.12-.45a1.11 1.11 0 00.013-.513 1.076 1.076 0 00-.203-.443 1.146 1.146 0 00-.375-.313 1.047 1.047 0 00-.498-.119h-1.772Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "cPanel" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cpanel extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4y, create_fragment$4y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Craftcms.svelte generated by Svelte v3.23.2 */

        function create_fragment$4z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.5 0h-19C1.1 0 0 1.1 0 2.5v18.9C0 22.9 1.1 24 2.5 24h19c1.4 0 2.5-1.1 2.5-2.5v-19C24 1.1 22.9 0 21.5 0zM12 14.6c.8 0 1.6-.3 2.4-1l1.1 1.3c-1.2 1-2.5 1.5-3.9 1.5-2.7 0-4.3-1.8-4-4.3.4-2.5 2.7-4.3 5.4-4.3 1.3 0 2.5.5 3.3 1.4l-1.6 1.3c-.5-.6-1.2-1-2-1-1.6 0-2.8 1-3.1 2.5-.2 1.6.7 2.6 2.4 2.6z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Craft CMS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Craftcms extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4z, create_fragment$4z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Creativecommons.svelte generated by Svelte v3.23.2 */

        function create_fragment$4A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.983 0c-3.292 0-6.19 1.217-8.428 3.485C1.25 5.819 0 8.844 0 12c0 3.189 1.217 6.148 3.522 8.45C5.827 22.75 8.822 24 11.983 24c3.16 0 6.222-1.25 8.593-3.583C22.815 18.214 24 15.287 24 12c0-3.255-1.186-6.214-3.458-8.483C18.238 1.217 15.275 0 11.983 0zm.033 2.17c2.7 0 5.103 1.02 6.98 2.893 1.843 1.841 2.83 4.274 2.83 6.937 0 2.696-.954 5.063-2.798 6.872-1.943 1.906-4.444 2.926-7.012 2.926-2.601 0-5.038-1.019-6.914-2.893-1.877-1.875-2.93-4.34-2.93-6.905 0-2.597 1.053-5.063 2.93-6.97 1.844-1.874 4.214-2.86 6.914-2.86zM8.68 8.278C6.723 8.278 5.165 9.66 5.165 12c0 2.38 1.465 3.722 3.581 3.722 1.358 0 2.516-.744 3.155-1.874l-1.491-.758c-.333.798-.839 1.037-1.478 1.037-1.105 0-1.61-.917-1.61-2.126 0-1.21.426-2.127 1.61-2.127.32 0 .96.173 1.332.97l1.597-.838c-.68-1.236-1.837-1.728-3.181-1.728zm6.932 0c-1.957 0-3.514 1.382-3.514 3.722 0 2.38 1.464 3.722 3.58 3.722 1.359 0 2.516-.744 3.155-1.874l-1.49-.758c-.333.798-.84 1.037-1.478 1.037-1.105 0-1.611-.917-1.611-2.126 0-1.21.426-2.127 1.61-2.127.32 0 .96.173 1.332.97l1.597-.838c-.68-1.236-1.837-1.728-3.181-1.728z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Creative Commons" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Creativecommons extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4A, create_fragment$4A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Crehana.svelte generated by Svelte v3.23.2 */

        function create_fragment$4B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12,0C5.371,0,0,5.371,0,12c0,6.626,5.371,12,12,12s12-5.374,12-12C24,5.371,18.626,0,12,0z M17.94,9.843v7.915h-3.957 v-3.892h-3.895v3.83H6.13v-3.957h3.833V9.843H6.06V5.948h3.957v3.895h3.965V5.948h3.957V9.843z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Crehana" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Crehana extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4B, create_fragment$4B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Crowdin.svelte generated by Svelte v3.23.2 */

        function create_fragment$4C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.119 17.793a2.619 2.619 0 0 1-1.667-.562c-.546-.436-1.004-1.09-1.018-1.858-.008-.388.414-.388.414-.388l1.018-.008c.332.008.43.47.445.586.128 1.04.717 1.495 1.168 1.702.273.123.204.513-.362.528zm-5.695-5.287L8.5 12.252c-.867-.214-.844-.982-.807-1.247a5.119 5.119 0 0 1 .814-2.125c.545-.804 1.303-1.508 2.29-2.073 1.856-1.074 4.45-1.673 7.31-1.673 2.09 0 4.256.27 4.29.27.197.025.328.213.333.437a.377.377 0 0 1-.355.393l-.92-.01c-2.902 0-4.968.394-6.506 1.248-1.527.837-2.57 2.117-3.287 4.012-.076.163-.335 1.12-1.24 1.022zm2.533 7.823c-1.44 0-2.797-.622-3.825-1.746-.87-.96-1.397-1.931-1.493-3.164-.06-.813.3-1.094.788-1.044l1.988.218c.45.092.75.34.825.854.397 2.736 2.122 3.814 3.15 4.046.18.042.292.157.283.365a.412.412 0 0 1-.322.398c-.458.074-.936.073-1.394.073zm-4.101 2.418a14.216 14.216 0 0 1-2.307-.214c-1.202-.214-2.208-.582-3.072-1.13C1.41 20.095.163 17.786.014 15.048c-.037-.65-.11-1.89 1.427-1.797.638.033 1.653.343 2.368.548.887.247 1.314.933 1.314 1.608 0 3.858 3.494 6.408 5.02 6.408.654 0 .414.701.127.779-.502.136-1.15.153-1.413.153zM3.525 11.419c-.605-.109-1.194-.358-1.768-.5C-.018 10.479.284 8.688.45 8.196c1.617-4.757 6.746-6.35 10.887-6.773 3.898-.4 7.978-.092 11.778.967.31.083 1.269.327.718.891-.35.358-1.7-.016-2.073-.041-2.23-.167-4.434-.192-6.656.15-2.349.357-4.768 1.099-6.71 2.665-.938.758-1.76 1.723-2.313 2.866-.144.3-.256.6-.354.9-.11.327-.47 1.91-2.215 1.6zm9.94.917c.332-1.488 1.81-3.848 6.385-3.686 1.05.033.57.749.052.731-2.586-.09-3.815 1.578-4.457 3.27-.219.546-.68.626-1.271.53-.415-.074-.866-.123-.71-.846Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Crowdin" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Crowdin extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4C, create_fragment$4C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Crunchbase.svelte generated by Svelte v3.23.2 */

        function create_fragment$4D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.6 0H2.4A2.41 2.41 0 0 0 0 2.4v19.2A2.41 2.41 0 0 0 2.4 24h19.2a2.41 2.41 0 0 0 2.4-2.4V2.4A2.41 2.41 0 0 0 21.6 0zM7.045 14.465A2.11 2.11 0 0 0 9.84 13.42h1.66a3.69 3.69 0 1 1 0-1.75H9.84a2.11 2.11 0 1 0-2.795 2.795zm11.345.845a3.55 3.55 0 0 1-1.06.63 3.68 3.68 0 0 1-3.39-.38v.38h-1.51V5.37h1.5v4.11a3.74 3.74 0 0 1 1.8-.63H16a3.67 3.67 0 0 1 2.39 6.46zm-.223-2.766a2.104 2.104 0 1 1-4.207 0 2.104 2.104 0 0 1 4.207 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Crunchbase" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Crunchbase extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4D, create_fragment$4D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Crunchyroll.svelte generated by Svelte v3.23.2 */

        function create_fragment$4E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.933 13.467a10.55 10.55 0 1 1 21.067-.8V12c0-6.627-5.373-12-12-12S0 5.373 0 12s5.373 12 12 12h.8a10.617 10.617 0 0 1-9.867-10.533zM19.2 14a3.85 3.85 0 0 1-1.333-7.467A7.89 7.89 0 0 0 14 5.6a8.4 8.4 0 1 0 8.4 8.4 6.492 6.492 0 0 0-.133-1.6A3.415 3.415 0 0 1 19.2 14z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Crunchyroll" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Crunchyroll extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4E, create_fragment$4E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cryengine.svelte generated by Svelte v3.23.2 */

        function create_fragment$4F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.714,14.875c0.296,0,0.58,0.102,0.807,0.288l0.014,0.012l-0.149,0.238 c-0.184-0.168-0.421-0.26-0.671-0.26c-0.549,0-0.995,0.446-0.995,0.995c0,0.549,0.446,0.995,0.995,0.995 c0.497,0,0.91-0.366,0.983-0.842l0.002-0.014h-0.852l0.173-0.277h0.966v0.139c0,0.702-0.571,1.273-1.272,1.273 c-0.702,0-1.272-0.571-1.272-1.273C13.441,15.446,14.012,14.875,14.714,14.875z M1.272,14.875c0.347,0,0.68,0.144,0.918,0.392 l0.012,0.013l-0.157,0.242c-0.19-0.235-0.47-0.37-0.774-0.37c-0.549,0-0.995,0.446-0.995,0.995c0,0.549,0.446,0.995,0.995,0.995 c0.287,0,0.559-0.123,0.748-0.339l0.01-0.012l0.211,0.18C2,17.256,1.646,17.419,1.272,17.419C0.571,17.419,0,16.849,0,16.147 C0,15.446,0.571,14.875,1.272,14.875z M3.712,14.89c0.639,0,0.894,0.3,0.894,0.733c0,0.363-0.184,0.619-0.621,0.706l-0.014,0.003 l0.702,1.075H4.337l-0.663-1.058H3.196v1.058H2.923V14.89H3.712z M9.592,17.163v0.244H7.87v-0.244H9.592z M5.574,14.89l0.691,1.149 c0.024,0.042,0.038,0.087,0.045,0.115c0.01-0.029,0.019-0.067,0.043-0.109l0.006-0.01l0.688-1.145h0.297l-1.564,2.518H5.509 l0.647-1.05L5.274,14.89H5.574z M23.096,17.163v0.244h-1.722v-0.244H23.096z M18.535,14.89l1.512,2.085 c-0.013-0.059-0.02-0.081-0.021-0.127l0-0.009V14.89h0.272v2.518h-0.258l-1.515-2.092c0.01,0.033,0.023,0.078,0.024,0.142l0,0.012 v1.938h-0.272V14.89H18.535z M17.174,14.89v2.518h-0.272V14.89H17.174z M10.779,14.89l1.512,2.085 c-0.013-0.059-0.02-0.081-0.021-0.127l0-0.009V14.89h0.272v2.518h-0.258l-1.515-2.092c0.01,0.033,0.023,0.078,0.024,0.142l0,0.012 v1.938h-0.272V14.89H10.779z M23.096,15.955v0.248h-1.722v-0.248H23.096z M9.592,15.955v0.248H7.87v-0.248H9.592z M3.716,15.134 h-0.52v0.967h0.517c0.384,0,0.615-0.112,0.615-0.478C4.327,15.256,4.096,15.134,3.716,15.134z M23.707,14.567 c0.162,0,0.293,0.13,0.293,0.292c0,0.162-0.131,0.292-0.293,0.292s-0.293-0.13-0.293-0.292 C23.415,14.697,23.546,14.567,23.707,14.567z M23.096,14.89v0.244h-1.722V14.89H23.096z M9.592,14.89v0.244h-1.47l0.151-0.244 H9.592z M23.707,14.616c-0.134,0-0.242,0.108-0.242,0.242c0,0.134,0.108,0.242,0.242,0.242c0.134,0,0.243-0.108,0.243-0.242 C23.95,14.725,23.841,14.616,23.707,14.616z M23.709,14.707c0.075,0,0.108,0.038,0.108,0.091c0,0.04-0.018,0.07-0.059,0.084 l-0.006,0.002l0.08,0.123h-0.058l-0.067-0.104c-0.002-0.002-0.003-0.007-0.004-0.011l0-0.003h-0.058v0.118h-0.048v-0.301H23.709z M23.71,14.753h-0.065v0.091h0.064c0.041,0,0.06-0.011,0.06-0.045C23.769,14.766,23.75,14.753,23.71,14.753z M10.909,6.6 l0.088-0.007c-2.36,0.549-3.761,2.332-3.761,2.564l0,0.001c0,0.001,0.001-0.009,0.002,0.036l0,0.006h0.001 c0.048,0.253,0.745,1.475,3.441,2.201c-3.09-0.245-4.494-1.748-4.563-2.188L6.116,9.199H6.115c0-0.046-0.001-0.037-0.001-0.034l0,0 l0.001-0.013C6.152,8.7,8.043,6.84,10.909,6.6l0.088-0.007L10.909,6.6z M11.89,6.581c3.209,0.167,5.076,2.075,5.093,2.609l0-0.001 c0-0.002-0.001,0-0.001,0.033l0,0.006H16.98c-0.025,0.268-1.045,1.358-2.571,1.86c-1.865,0.613-4.866,0.39-4.866-1.948 c0-1.097,0.894-1.99,1.992-1.99c1.108,0,1.997,0.897,1.997,1.995c0,0.535-0.231,1.053-0.581,1.419 c0.327-0.006,1.517-0.093,2.638-1.017c0.124-0.121,0.203-0.222,0.236-0.284c0.009-0.016,0.022-0.045,0.02-0.072 C15.846,8.951,14.557,7.107,11.89,6.581z M11.533,8.008c-0.625,0-1.131,0.506-1.131,1.131c0,0.625,0.506,1.131,1.131,1.131 c0.624,0,1.131-0.506,1.131-1.131C12.664,8.515,12.158,8.008,11.533,8.008z M16.982,9.19C16.982,9.19,16.982,9.19,16.982,9.19 L16.982,9.19z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CRYENGINE" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cryengine extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4F, create_fragment$4F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Csswizardry.svelte generated by Svelte v3.23.2 */

        function create_fragment$4G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.03 16.428V1.118C.03.5.53 0 1.147 0H22.8c.624 0 1.12.5 1.12 1.12v14.76c-.67-.41-1.46-.616-2.357-.616-1.254 0-2.205.3-2.854.896-.65.598-.97 1.328-.97 2.225 0 .97.33 1.69 1 2.15.39.285 1.11.54 2.14.762l1.05.24c.63.133 1.07.3 1.36.46.28.183.43.437.43.765 0 .566-.29.955-.87 1.148l-.03.016h-2.21c-.287-.104-.51-.254-.69-.45-.18-.224-.3-.55-.36-1.013h-1.98c0 .566.103 1.045.33 1.48h-1.68c.19-.39.3-.823.3-1.317 0-.88-.3-1.55-.886-2.016-.374-.297-.94-.535-1.688-.717l-1.72-.402c-.66-.14-1.09-.28-1.3-.4-.31-.18-.46-.45-.46-.79 0-.38.16-.68.47-.89.33-.21.75-.31 1.29-.31.49 0 .88.09 1.21.26.494.256.75.69.79 1.287h2c-.03-1.046-.415-1.853-1.15-2.404-.744-.55-1.625-.835-2.67-.835-1.255 0-2.195.3-2.853.88-.64.583-.97 1.33-.97 2.21 0 .97.33 1.688 1 2.15.402.27 1.12.523 2.15.76l1.045.24c.61.135 1.06.285 1.36.465.28.18.43.43.43.76 0 .57-.3.94-.88 1.15h-2.24c-.284-.106-.52-.256-.69-.465-.18-.22-.31-.564-.37-1.014H8.38c0 .558.105 1.05.32 1.48H6.61c.33-.52.553-1.12.663-1.79H5.22c-.14.51-.312.898-.525 1.15-.26.33-.6.54-1.02.645H2.448c-.45-.105-.837-.358-1.15-.76-.464-.558-.688-1.394-.688-2.5 0-1.12.23-1.97.66-2.58.45-.613 1.03-.91 1.79-.91.75 0 1.3.21 1.69.644.21.24.39.6.52 1.076h2.08c-.03-.618-.26-1.24-.686-1.86-.772-1.1-1.994-1.65-3.664-1.65-1.16 0-2.134.36-2.91 1.06l-.05-.11zm23.894 3.636V18.51h-.516c-.035-.597-.3-1.022-.783-1.274-.313-.164-.717-.248-1.193-.248-.54 0-.955.11-1.27.322-.312.215-.478.518-.478.902 0 .355.166.62.477.795.22.105.65.254 1.31.404l1.72.41c.3.06.56.15.8.23l-.05.03z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CSS Wizardry" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Csswizardry extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4G, create_fragment$4G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Css3.svelte generated by Svelte v3.23.2 */

        function create_fragment$4H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.5 0h21l-1.91 21.563L11.977 24l-8.565-2.438L1.5 0zm17.09 4.413L5.41 4.41l.213 2.622 10.125.002-.255 2.716h-6.64l.24 2.573h6.182l-.366 3.523-2.91.804-2.956-.81-.188-2.11h-2.61l.29 3.855L12 19.288l5.373-1.53L18.59 4.414z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CSS3" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Css3 extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4H, create_fragment$4H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Curl.svelte generated by Svelte v3.23.2 */

        function create_fragment$4I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.23,4.702c-0.535,0-0.967-0.433-0.967-0.967c0-0.535,0.433-0.967,0.967-0.967 c0.534,0,0.967,0.433,0.967,0.967C23.198,4.269,22.764,4.702,22.23,4.702 M12.622,21.233c-0.535,0-0.967-0.433-0.967-0.967 c0-0.535,0.433-0.967,0.967-0.967c0.534,0,0.967,0.433,0.967,0.967C13.588,20.799,13.156,21.233,12.622,21.233 M22.23,1.964 c-0.978,0-1.771,0.793-1.771,1.771c0,0.209,0.053,0.403,0.119,0.589l-8.309,14.241c-0.803,0.168-1.418,0.847-1.418,1.7 c0,0.978,0.793,1.771,1.771,1.771c0.977,0,1.77-0.793,1.77-1.771c0-0.197-0.053-0.376-0.111-0.553l8.351-14.288 c0.779-0.187,1.37-0.854,1.37-1.69C24.001,2.757,23.208,1.964,22.23,1.964 M14.983,4.702c-0.535,0-0.967-0.433-0.967-0.967 c0-0.535,0.433-0.967,0.967-0.967c0.534,0,0.967,0.433,0.967,0.967C15.95,4.269,15.517,4.702,14.983,4.702 M5.374,21.233 c-0.534,0-0.967-0.433-0.967-0.967c0-0.535,0.433-0.967,0.967-0.967c0.535,0,0.967,0.433,0.967,0.967 C6.341,20.799,5.908,21.233,5.374,21.233 M14.983,1.964c-0.979,0-1.771,0.793-1.771,1.771c0,0.209,0.053,0.403,0.119,0.589 L5.022,18.565c-0.804,0.168-1.419,0.847-1.419,1.7c0,0.978,0.793,1.771,1.771,1.771c0.978,0,1.771-0.793,1.771-1.771 c0-0.197-0.053-0.376-0.111-0.553l8.351-14.288c0.779-0.187,1.37-0.854,1.37-1.69C16.754,2.757,15.961,1.964,14.983,1.964  M1.749,7.663c0.534,0,0.967,0.433,0.967,0.967c0,0.534-0.433,0.967-0.967,0.967S0.782,9.165,0.782,8.631 C0.782,8.097,1.215,7.663,1.749,7.663 M1.749,6.883c-0.964,0-1.748,0.784-1.748,1.748s0.784,1.748,1.748,1.748 s1.748-0.784,1.748-1.748S2.713,6.883,1.749,6.883L1.749,6.883z M1.749,13.852c0.534,0,0.967,0.433,0.967,0.967 c0,0.534-0.433,0.967-0.967,0.967s-0.967-0.433-0.967-0.967C0.782,14.285,1.215,13.852,1.749,13.852 M1.749,13.072 c-0.964,0-1.748,0.784-1.748,1.748s0.784,1.748,1.748,1.748s1.748-0.784,1.748-1.748S2.713,13.072,1.749,13.072L1.749,13.072z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "curl" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Curl extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4I, create_fragment$4I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Curseforge.svelte generated by Svelte v3.23.2 */

        function create_fragment$4J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.307 5.581l.391 1.675H0s.112.502.167.558c.168.279.335.614.559.837 1.06 1.228 2.902 1.73 4.409 2.009 1.06.224 2.121.28 3.181.335l1.228 3.293h.67l.391 1.061h-.558l-.949 3.07h9.321l-.949-3.07h-.558l.39-1.061h.67s.558-3.404 2.288-4.967C21.935 7.758 24 7.535 24 7.535V5.581H6.307zm9.377 8.428c-.447.279-.949.279-1.284.503-.223.111-.335.446-.335.446-.223-.502-.502-.67-.837-.781-.335-.112-.949-.056-1.786-.782-.558-.502-.614-1.172-.558-1.507v-.167c0-.056 0-.112.056-.168.111-.334.39-.669.948-.893 0 0-.39.559 0 1.117.224.335.67.502 1.061.279.167-.112.279-.335.335-.503.111-.39.111-.781-.224-1.06-.502-.446-.613-1.06-.279-1.451 0 0 .112.502.614.446.335 0 .335-.111.224-.223-.056-.167-.782-1.228.279-2.009 0 0 .669-.447 1.451-.391-.447.056-.949.335-1.116.782v.055c-.168.447-.056.949.279 1.396.223.335.502.614.614 1.06-.168-.056-.279 0-.391.112a.533.533 0 00-.112.502c.056.112.168.223.279.223h.168c.167-.055.279-.279.223-.446.112.111.167.391.112.558 0 .167-.112.335-.168.446-.056.112-.167.224-.223.335-.056.112-.112.224-.112.335 0 .112 0 .279.056.391.223.335.67 0 .782-.279.167-.335.111-.726-.112-1.061 0 0 .391.224.67 1.005.223.67-.168 1.451-.614 1.73z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "CurseForge" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Curseforge extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4J, create_fragment$4J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Cypress.svelte generated by Svelte v3.23.2 */

        function create_fragment$4K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.998 0C5.366 0 0 5.367 0 12a11.992 11.992 0 0 0 12 12c6.633 0 12-5.367 12-12-.001-6.633-5.412-12-12.002-12zM6.37 14.575c.392.523.916.742 1.657.742.35 0 .699-.044 1.004-.175.306-.13.655-.306 1.09-.567l1.223 1.745c-1.003.83-2.138 1.222-3.447 1.222-1.048 0-1.92-.218-2.705-.654a4.393 4.393 0 0 1-1.746-1.92c-.392-.83-.611-1.79-.611-2.925 0-1.09.219-2.094.61-2.923a4.623 4.623 0 0 1 1.748-2.007c.741-.48 1.657-.698 2.661-.698.699 0 1.353.087 1.877.305a5.64 5.64 0 0 1 1.614.96l-1.222 1.658A4.786 4.786 0 0 0 9.12 8.77c-.305-.13-.698-.174-1.048-.174-1.483 0-2.225 1.134-2.225 3.446-.043 1.18.175 2.008.524 2.532H6.37zm12 2.705c-.436 1.353-1.091 2.357-2.008 3.098-.916.743-2.138 1.135-3.665 1.266l-.305-2.05c1.003-.132 1.745-.35 2.225-.7.174-.13.524-.523.524-.523L11.519 6.764h3.01l2.095 8.683 2.226-8.683h2.923L18.37 17.28z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Cypress" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Cypress extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4K, create_fragment$4K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/D3DotJs.svelte generated by Svelte v3.23.2 */

        function create_fragment$4L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.312 12C13.312 5.718 8.22.625 1.937.625H0v5h1.938c3.521 0 6.375 2.854 6.375 6.375s-2.854 6.375-6.375 6.375H0v5h1.938c6.281 0 11.374-5.093 11.374-11.375zM24 7.563C24 3.731 20.893.625 17.062.625h-8a13.4154 13.4154 0 0 1 4.686 5h3.314c1.069 0 1.938.868 1.938 1.938 0 1.07-.869 1.938-1.938 1.938h-1.938c.313 1.652.313 3.348 0 5h1.938c1.068 0 1.938.867 1.938 1.938s-.869 1.938-1.938 1.938h-3.314a13.4154 13.4154 0 0 1-4.686 5h8c1.621 0 3.191-.568 4.438-1.605 2.943-2.45 3.346-6.824.895-9.77A6.9459 6.9459 0 0 0 24 7.563z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "D3.js" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class D3DotJs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4L, create_fragment$4L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Daf.svelte generated by Svelte v3.23.2 */

        function create_fragment$4M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.649 12.782h-2.643V8.723H24v1.183h-4.351v.723h4.277v1.147h-4.277zm-7.51-3.039l-1.831 3.05H7.76l2.414-4.07h3.924l2.424 4.07h-5.364l.64-1.06h1.534zM.004 12.785V8.741h4.99c1.62 0 2.773.738 2.773 1.994 0 1.196-.914 2.05-2.82 2.05zm4.008-1.034c.621 0 .985-.53.985-.935 0-.413-.325-.896-.967-.896H2.671v1.831zM0 13.731h23.926v1.546H0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DAF" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Daf extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4M, create_fragment$4M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dailymotion.svelte generated by Svelte v3.23.2 */

        function create_fragment$4N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.068 11.313c-1.754 0-3.104 1.427-3.104 3.11 0 1.753 1.35 3.085 3.255 3.085l-.016.002c1.59 0 2.925-1.31 2.925-3.04 0-1.8-1.336-3.157-3.062-3.157zM0 0v24h24V0H0zm20.693 20.807h-3.576v-1.41c-1.1 1.08-2.223 1.47-3.715 1.47-1.522 0-2.832-.495-3.93-1.485-1.448-1.275-2.198-2.97-2.198-4.936 0-1.8.7-3.414 2.01-4.674 1.17-1.146 2.595-1.73 4.185-1.73 1.52 0 2.69.513 3.53 1.59V4.157l3.693-.765V3.39l.002.003h-.002v17.414z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dailymotion" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dailymotion extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4N, create_fragment$4N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Daimler.svelte generated by Svelte v3.23.2 */

        function create_fragment$4O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.624 10.76h-.207c-.03-.112 0-.194.177-.207.208-.017.467-.017 1.071-.017.83 0 1.287.393 1.287.985 0 .362-.225.656-.583.807 0 0 .324.298.488.432.57.458.76.497 1.136.497.039.15-.07.263-.527.263-.402 0-.665-.086-.985-.363a1.979 1.979 0 0 1-.41-.496c-.108-.195-.117-.208-.38-.208h-.29v.635c0 .125.04.169.264.169h.22c.013.125 0 .194-.125.194H20.4a.44.44 0 0 1 0-.168c.376-.026.462-.07.462-.333v-1.995c0-.169-.06-.194-.238-.194zm.985 1.443c.428 0 .773-.07.773-.652 0-.583-.345-.765-.833-.765h-.147v1.417h.207m-2.05-1.637c.012.195.038.398.068.583.022.134-.03.208-.168.195l-.057-.195c-.073-.263-.164-.332-.401-.332h-.691v1.11h.453c.13 0 .156-.044.169-.156l.03-.22h.052c.086 0 .134.03.125.164-.013.272-.013.57 0 .85a.203.203 0 0 1-.151 0c-.056-.336-.112-.375-.225-.375h-.453v.76c0 .155.039.22.333.22h.37c.32 0 .364-.021.545-.41l.12-.268c.126-.004.187.052.143.182a6.26 6.26 0 0 0-.224.777h-2.384a.281.281 0 0 1 0-.168c.458-.026.54-.057.54-.346v-1.995c0-.156-.039-.181-.233-.181h-.207c-.018-.113 0-.195.19-.195h2.055m-3.51 0a.372.372 0 0 1 0 .169c-.454.026-.54.065-.54.345v1.909c0 .142.073.181.194.181h.276c.32 0 .363-.021.544-.41l.121-.268c.125-.004.19.048.143.182a6.16 6.16 0 0 0-.225.777h-2.107a.445.445 0 0 1 0-.168c.419-.026.514-.083.514-.363v-1.978c0-.156-.056-.181-.238-.181h-.207c-.026-.113 0-.195.181-.195h1.343m-2.383 0a.279.279 0 0 1 0 .169c-.402.026-.428.095-.415.22l.207 2.107c.013.138.082.151.415.195.013.125 0 .194-.12.194h-1.525a.281.281 0 0 1 0-.168l.233-.014c.363-.021.423-.069.401-.28l-.194-1.883-1.036 2.177c-.078.155-.112.18-.212.18l-1.191-2.357-.139 1.939c-.013.168-.013.212.445.212h.233c.03.125.013.194-.108.194H9.242a.37.37 0 0 1 0-.168c.475-.026.514-.113.527-.294l.177-2.03c.013-.138-.013-.185-.44-.198-.027-.1 0-.195.18-.195h.873l1.084 2.077.997-2.077h1.024m-4.975 0a.37.37 0 0 1 0 .169c-.375.026-.432.108-.432.289v2.051c0 .151.044.182.225.182h.233c.03.125.017.194-.112.194H7.29a.279.279 0 0 1 0-.168c.346-.057.428-.1.428-.277v-2.064c0-.156-.04-.181-.238-.181h-.207c-.026-.113 0-.195.181-.195H8.69m-3.23-.056c.013.095.043.169.112.32l.998 2.275c.048.113.095.152.315.152h.1c.025.125 0 .194-.113.194h-1.4a.367.367 0 0 1 0-.168c.47-.014.518-.052.47-.165l-.271-.652H4.557l-.177.47c-.1.256-.1.32.138.32h.371c.03.126 0 .195-.108.195H3.546a.369.369 0 0 1 0-.168c.333-.044.372-.07.488-.346l.855-2.025c.143-.333.199-.402.402-.402zm.112 1.719l-.47-1.123-.45 1.123zM.316 10.704H.11c-.03-.185-.013-.224.609-.224h.876c1.244 0 1.784.561 1.784 1.485 0 .89-.51 1.486-1.745 1.486H.01a.368.368 0 0 1 0-.168c.462-.026.544-.057.544-.346v-2.038c0-.169-.043-.195-.238-.195zM2.8 12.047c0-.829-.432-1.312-1.26-1.312h-.445v2.172c0 .263.095.306.496.306.739 0 1.21-.237 1.21-1.166Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Daimler" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Daimler extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4O, create_fragment$4O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Darkreader.svelte generated by Svelte v3.23.2 */

        function create_fragment$4P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.281 8.572c-.18-1.671-.926-3.132-2.105-4.173A6.315 6.315 0 0012 2.824c-1.538 0-3.026.56-4.176 1.575C6.646 5.44 5.9 6.901 5.72 8.572a4.968 4.968 0 01.987-.101 4.587 4.587 0 014.24 2.827l2.107-.002a4.57 4.57 0 014.241-2.825 4.88 4.88 0 01.987.101zM3.624 16.494l-2.212 6.094H0l2.662-7.324a4.621 4.621 0 01-.401-1.046 4.803 4.803 0 01-.143-1.16 4.7 4.7 0 01.574-2.283 4.43 4.43 0 011.576-1.642c.08-2.207.943-4.178 2.43-5.593A7.7 7.7 0 0112 1.412c1.973 0 3.876.768 5.305 2.13 1.486 1.417 2.348 3.388 2.427 5.596a4.42 4.42 0 011.576 1.64c.383.693.576 1.478.574 2.28 0 .39-.047.78-.142 1.159-.091.362-.225.713-.402 1.045L24 22.588h-1.412l-2.212-6.097c-.41.367-.879.649-1.383.843a4.653 4.653 0 01-1.699.313 4.635 4.635 0 01-3.132-1.227c-.827-.765-1.344-1.814-1.443-3.008H11.28c-.103 1.192-.62 2.241-1.447 3.005a4.637 4.637 0 01-3.128 1.23 4.644 4.644 0 01-1.698-.31 4.514 4.514 0 01-1.384-.843zm11.2-3.445a2.462 2.462 0 002.489 2.48 2.47 2.47 0 00-.019-4.94 2.464 2.464 0 00-2.47 2.46zm-10.589.01a2.463 2.463 0 002.47 2.47 2.469 2.469 0 002.472-2.47 2.469 2.469 0 00-2.471-2.47 2.463 2.463 0 00-2.47 2.47zm5.647 6c.033-.423.327-.703.706-.706a.681.681 0 01.706.706v2.823a.681.681 0 01-.706.706c-.38-.003-.673-.283-.706-.706V19.06zm2.824 0c.033-.423.326-.703.706-.706a.681.681 0 01.706.706v2.823a.681.681 0 01-.706.706c-.38-.003-.673-.283-.706-.706V19.06zm2.823 1.412c.033-.423.327-.703.706-.706a.681.681 0 01.706.706v1.411a.681.681 0 01-.706.706c-.38-.003-.673-.283-.706-.706v-1.411zm-8.47 0c.033-.423.326-.703.706-.706a.681.681 0 01.706.706v1.411a.681.681 0 01-.706.706c-.38-.003-.673-.283-.706-.706v-1.411z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dark Reader" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Darkreader extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4P, create_fragment$4P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dart.svelte generated by Svelte v3.23.2 */

        function create_fragment$4Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.105 4.105S9.158 1.58 11.684.316a3.079 3.079 0 0 1 1.481-.315c.766.047 1.677.788 1.677.788L24 9.948v9.789h-4.263V24H9.789l-9-9C.303 14.5 0 13.795 0 13.105c0-.319.18-.818.316-1.105l3.789-7.895zm.679.679v11.787c.002.543.021 1.024.498 1.508L10.204 23h8.533v-4.263L4.784 4.784zm12.055-.678c-.899-.896-1.809-1.78-2.74-2.643-.302-.267-.567-.468-1.07-.462-.37.014-.87.195-.87.195L6.341 4.105l10.498.001z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dart" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dart extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4Q, create_fragment$4Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Daserste.svelte generated by Svelte v3.23.2 */

        function create_fragment$4R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.646.005C5.158.2-.001 5.57 0 12.127.135 18.724 5.468 24 12 24s11.865-5.276 12-11.873C24.001 5.291 18.41-.195 11.645.005zm5.138 4.93V16.96L8.78 19.92v-9.08l-3.9 1.386V9.263l11.903-4.328z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Das Erste" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Daserste extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4R, create_fragment$4R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dash.svelte generated by Svelte v3.23.2 */

        function create_fragment$4S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.211 9.967c-2.29 0-2.617 1.49-2.832 2.393C.093 13.538 0 14.02 0 14.02h8.947c2.29 0 2.617-1.492 2.832-2.394.285-1.178.379-1.66.379-1.66zM15.72 2.259H6.983L6.26 6.307l7.885.01c3.885 0 5.03 1.41 4.997 3.748-.019 1.196-.537 3.225-.762 3.884-.598 1.753-1.827 3.749-6.436 3.744l-7.666-.004-.725 4.052h8.718c3.076 0 4.38-.36 5.768-.995 3.071-1.426 4.899-4.455 5.633-8.41C24.76 6.448 23.404 2.26 15.72 2.26Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dash" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dash extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4S, create_fragment$4S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dashlane.svelte generated by Svelte v3.23.2 */

        function create_fragment$4T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.63 10.04c-.47-.393-.863-1.02-.863-1.648 0-.235.078-.627.157-.863 0-.156.078-.156.157-.235.706-.157 1.02-.157 1.098-.235.157-.314.235-.706.235-.706l-5.49-1.726s.314.863.549.942l2.51 1.098s-1.255.313-1.961.47l-.157.079s.235.47.706.706c.47-.157 1.333-.314 1.333-.314-1.176 2.353-3.686 3.921-6.353 3.921h-.94c-.315 0-.393.236-.158.393.47.235.863.705 1.02 1.176.078.314-.079.55-.314.706-.47.392-1.725 1.255-2.902 2.196a3.664 3.664 0 0 1-.392-.784C2.767 12.784 2.218 9.333 2.218 4.784v-.157l9.412-3.058 9.411 3.058v.079c0 1.647-.078 3.216-.235 4.549v.157h1.569v-.079c.157-1.411.235-2.902.235-4.549V3.53L11.63 0 .65 3.53v1.176c0 4.784.548 8.392 1.725 11.059.157.392.392.784.549 1.098-.941.706-1.726 1.255-1.726 1.255l.47.784 6.04-4.314a19.5 19.5 0 0 1 10.98-3.372h1.883c-.235 1.49-.628 2.823-1.098 3.921-.55 1.255-1.255 2.353-2.196 3.451-.706.863-1.569 1.569-2.51 2.196-1.569 1.098-2.98 1.569-3.059 1.647-.157-.078-1.49-.549-3.059-1.647-1.02-.706-1.882-1.411-2.588-2.274-.235-.235-.47-.55-.706-.863l-.078-.078-1.255.94.078.08c.314.391.55.705.785 1.019.784.941 1.725 1.725 2.745 2.431 1.725 1.177 3.215 1.726 3.45 1.804 0 0 .314.079.393.157h.157c.157 0 .392-.157.392-.157.314-.078 1.725-.627 3.45-1.804a16.44 16.44 0 0 0 2.746-2.431 15.164 15.164 0 0 0 2.431-3.843 16.555 16.555 0 0 0 1.255-4.55h1.334c.078-.313.156-.862.156-.862h-4.862c-1.804-.078-2.432 0-2.902-.314z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dashlane" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dashlane extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4T, create_fragment$4T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dassaultsystemes.svelte generated by Svelte v3.23.2 */

        function create_fragment$4U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.161 8.04c1.063.192 1.93.34 2.129.79.223.508-.935.54-1.518.551-2.797.054-4.483.11-4.568 1.06-.11 1.223 1.195 2.454 2.484 4.181 1.177 1.576 2.515 3.132 2.13 4.582-.481 1.807-2.696 2.19-4.805 2.19-2.02.001-3.935-.323-4.739-.482-1.001-.198-.852-.693-.585-.852.298-.178 2-.182 3.184-.252.974-.058 3.802-.056 4.243-.78.54-.888-.783-2.406-1.999-3.996-1.517-1.983-3.183-4.031-2.301-5.527 1.14-1.935 4.48-1.802 6.345-1.465 M7.482 10.987c1.771-.104 3.923.206 5.13 1.13.602.46 1.024 1.305.78 2.274-.698 2.75-3.301 6.078-9.085 8.635-1.84.813-3.286 1.124-3.59.906-.326-.234.623-2.05.908-2.652.924-1.95 2.077-3.85 3.202-5.59.414-.64 1.054-1.75 1.633-1.661.518.08-.089 1.26-.488 2.01-.671 1.258-2.52 4.755-1.91 4.964 1.348.462 7.673-4.35 6.74-7.029-.432-1.244-3.178-1.362-4.908-1.362-.786 0-2.505.186-2.6-.417-.102-.555 2.61-1.115 4.188-1.208M11.851.034c2.066-.098 4.51.342 4.965 1.8.747 2.388-3.036 5.872-6.332 7.581-.808.42-1.298.535-1.502.506-.195-.027-.225-.221-.162-.355.118-.251.649-.763 1.36-1.32 3.711-2.897 4.918-5.024 4.217-5.885-.449-.552-2.33-.936-4.283-.936-.53 0-1.924.123-2.067-.367C7.93.655 9.8.13 11.85.034");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dassault Systèmes" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dassaultsystemes extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4U, create_fragment$4U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Datacamp.svelte generated by Svelte v3.23.2 */

        function create_fragment$4V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.156,5.579l-0.194,0.269c-0.24-0.247-0.819-0.509-0.86-0.528l0.155-0.411 l-0.014-0.01c-0.024-0.016-0.05-0.028-0.078-0.037c-0.873-0.329-1.675-0.333-2.768-0.017l0.517,1.381h-0.01 C10.18,6.461,9.64,7.114,9.581,7.187L8.865,6.676C8.47,7.198,8.19,8.142,8.19,8.867H7.277c0.007,0.656,0.126,1.794,0.9,2.738 l0.682-0.521c0.623,0.916,1.925,1.581,3.015,1.468l-0.016-1.906h0.014v0.026c0.273,0.08,0.843-0.093,1.092-0.289l0.517,0.692 c0.543-0.185,0.964-1.238,1.008-1.351l0.822,0.281l0.001,0.001c0.22-0.763,0.228-1.572,0.023-2.339l-0.001,0.001V7.659 c0.001,0.002,0.001,0.005,0.001,0.007l0.294-0.107C15.411,6.734,14.883,6.025,14.156,5.579z M12.168,9.258 c-0.341,0.142-0.735,0.063-0.995-0.2c-0.261-0.265-0.339-0.66-0.198-1.004c0.142-0.344,0.475-0.568,0.845-0.568c0,0,0,0,0,0h0.001 c0,0,0,0,0,0c0.505,0.003,0.913,0.415,0.912,0.92C12.732,8.779,12.509,9.116,12.168,9.258z M22.662,3.692L12.139,0.043 c-0.162-0.057-0.338-0.057-0.499,0L1.341,3.695C1.006,3.814,0.798,4.147,0.836,4.5l1.453,13.842 c0.025,0.248,0.17,0.469,0.387,0.591l8.961,4.973C11.749,23.967,11.875,24,12.003,24h0.001c0.131,0,0.26-0.034,0.373-0.099 l8.739-4.973c0.209-0.119,0.35-0.333,0.38-0.575l1.67-13.842C23.208,4.152,23,3.812,22.662,3.692z M16.764,12.917 c0,0-0.127,0.144,0.051,0.445c0.179,0.299,0.23,0.299-0.102,0.612c0.256,0.222,0.256,0.406-0.127,0.58 c0.009,0.618,0.134,1.171-0.651,1.218c-0.785,0.046-1.78-0.482-2.039,0.939c-0.259,1.419-0.192,0.888-0.269,1.244H8.082 c0.69-1.902,1.28-4.001,0-5.032c-1.279-1.03-3.373-5.358,0.756-7.575c0.465-0.248,0.961-0.435,1.474-0.554L10.138,4.33l0.054-0.021 c0.017-0.007,1.774-0.684,3.293,0.062l0.05,0.025l-0.183,0.416c0.979,0.22,1.709,0.582,1.98,0.751 c0.614,0.382,1.429,0.99,1.507,1.566c0.077,0.575-0.664,0.286-0.664,0.286c0.46,1.117,0.485,1.918,0.28,2.768v0.001 c-0.204,0.848,0.945,1.725,0.92,2.342C17.3,12.812,16.764,12.917,16.764,12.917z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DataCamp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Datacamp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4V, create_fragment$4V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Datadog.svelte generated by Svelte v3.23.2 */

        function create_fragment$4W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.55 17.04l-1.99-1.32-1.66 2.78-1.93-.57-1.7 2.6.09.82 9.25-1.71-.54-5.79-1.52 3.19zm-8.63-2.5l1.48-.2c.24.11.41.15.69.22.45.12.97.23 1.74-.16.18-.09.55-.43.7-.63l6.08-1.11.62 7.53-10.41 1.88-.9-7.53zm11.29-2.71l-.6.11L20.46 0 .82 2.28l2.42 19.69 2.3-.33c-.18-.26-.47-.58-.96-.99-.68-.56-.44-1.52-.04-2.13.53-1.02 3.25-2.32 3.1-3.96-.06-.59-.15-1.37-.7-1.9-.02.22.02.43.02.43s-.23-.29-.34-.68c-.11-.15-.2-.2-.32-.4-.08.23-.07.5-.07.5s-.18-.44-.21-.81c-.11.17-.14.48-.14.48s-.24-.69-.19-1.06c-.11-.32-.43-.97-.34-2.42.6.42 1.92.32 2.43-.44.17-.24.29-.93-.08-2.28-.24-.87-.83-2.16-1.07-2.65l-.02.02c.12.4.37 1.22.47 1.63.29 1.22.37 1.64.23 2.2-.12.49-.4.81-1.1 1.16-.71.36-1.65-.51-1.71-.56-.69-.55-1.22-1.45-1.28-1.88-.06-.48.27-.77.44-1.16-.24.07-.51.2-.51.2s.32-.34.72-.63c.16-.11.26-.18.43-.32h-.46s.43-.22.86-.39c-.32-.01-.62 0-.62 0s.93-.42 1.67-.73c.51-.21 1-.15 1.28.26.37.53.75.82 1.56 1 .51-.23.66-.34 1.29-.51.55-.61.99-.69.99-.69s-.22.2-.27.51c.31-.25.66-.45.66-.45s-.13.16-.26.43l.03.04c.37-.22.8-.39.8-.39l-.27.36c.28 0 .84.01 1.05.04 1.28.03 1.55-1.37 2.04-1.55.62-.22.89-.35 1.94.68.9.89 1.6 2.48 1.25 2.83-.29.3-.87-.12-1.51-.92-.34-.42-.59-.93-.71-1.56-.1-.54-.49-.85-.49-.85s.23.51.23.96c0 .25.03 1.16.42 1.68-.04.08-.06.37-.1.43-.46-.55-1.44-.95-1.6-1.07.54.45 1.79 1.47 2.27 2.45.45.93.19 1.78.41 2 .07.06.97 1.2 1.15 1.77.3.99.02 2.04-.38 2.69l-1.11.17c-.16-.05-.27-.07-.42-.15.08-.14.24-.5.24-.57l-.06-.11c-.35.49-.93.97-1.41 1.25-.63.36-1.36.3-1.83.16-1.34-.42-2.62-1.33-2.92-1.57 0 0-.01.19.05.23.34.38 1.12 1.08 1.87 1.56l-1.6.18.76 5.91c-.34.05-.39.07-.75.12-.32-1.15-.94-1.9-1.62-2.33-.6-.38-1.42-.47-2.21-.31l-.05.06c.55-.06 1.19.02 1.86.44.65.41 1.18 1.48 1.37 2.12.25.82.42 1.7-.25 2.63-.47.66-1.86 1.03-2.98.24.3.48.7.88 1.25.95.81.11 1.57-.03 2.1-.57.45-.46.69-1.43.63-2.46l.71-.1.26 1.83 11.79-1.42-1-9.44zm-7.17-4.98c-.03.08-.08.12-.01.37v.01l.01.03.03.07c.14.29.29.56.55.7.07-.01.14-.02.21-.02.24-.01.39.03.49.08.01-.05.01-.12.01-.22-.02-.36.07-.98-.62-1.31-.26-.12-.63-.08-.75.07.02 0 .04.01.06.01.18.07.05.13.02.21m1.95 3.39c-.09-.05-.52-.03-.82.01-.57.07-1.19.27-1.32.37-.25.19-.13.52.05.66.51.38.96.64 1.43.58.29-.04.54-.5.73-.91.11-.3.11-.61-.07-.71M11.93 7.3c.16-.15-.8-.36-1.55.16-.55.37-.57 1.18-.04 1.64.05.05.1.08.14.1a4.857 4.857 0 011.39-.41c.11-.13.24-.35.21-.75-.05-.53-.46-.45-.15-.74");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Datadog" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Datadog extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4W, create_fragment$4W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dazn.svelte generated by Svelte v3.23.2 */

        function create_fragment$4X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.774 8.291l.772-2.596.79 2.596zm3.848 2.268l-2.025-6.128c-.045-.135-.097-.224-.154-.266-.059-.041-.152-.063-.28-.063h-1.12a.485.485 0 0 0-.284.068c-.06.045-.11.132-.149.261l-2.045 6.128c-.025.032-.038.096-.038.192 0 .149.09.223.27.223h.84c.076 0 .139-.003.187-.01a.207.207 0 0 0 .116-.048.326.326 0 0 0 .077-.116c.022-.051.046-.119.072-.202l.318-1.071h2.306l.327 1.051c.026.09.051.16.077.213a.395.395 0 0 0 .087.12c.031.028.07.047.114.053h.002c.045.006.103.01.173.01h.897c.18 0 .27-.074.27-.223a.59.59 0 0 0-.005-.09.878.878 0 0 0-.036-.108l.003.006zm-.994 2.467h-.646c-.168 0-.279.024-.333.072-.055.049-.082.147-.082.295v3.638l-1.91-3.647c-.076-.155-.152-.253-.226-.295-.074-.041-.204-.063-.39-.063h-.599c-.167 0-.278.025-.332.073-.055.048-.082.147-.082.294v6.138c0 .148.025.246.077.294.052.048.16.072.328.072h.656c.167 0 .278-.024.332-.072.055-.048.082-.146.082-.294v-3.648l1.91 3.657c.077.155.152.253.227.295.073.042.204.062.39.062h.598c.167 0 .278-.024.333-.072.054-.048.082-.146.082-.294v-6.138c0-.148-.028-.246-.082-.294-.055-.048-.166-.073-.333-.073zm3.203-.581l1.665 1.665v8.385H1.505V14.11l1.663-1.664a.63.63 0 0 0 0-.89L1.504 9.891V1.505h20.991v8.384l-1.665 1.666a.63.63 0 0 0 0 .89zM24 0H0v10.613L1.387 12 0 13.387V24h24V13.387L22.613 12 24 10.613zM10.67 18.469H7.96l2.855-4.014a.67.67 0 0 0 .087-.155.425.425 0 0 0 .019-.135v-.772c0-.148-.028-.246-.082-.294-.055-.048-.166-.073-.334-.073H6.382c-.149 0-.245.028-.29.082-.045.055-.068.169-.068.343v.58c0 .172.023.287.068.341.045.055.141.083.29.083h2.545L6.11 18.469a.438.438 0 0 0-.107.27v.792c0 .148.027.245.082.294.055.048.167.072.334.072h4.25c.148 0 .245-.027.29-.081.045-.055.068-.17.068-.344v-.579c0-.173-.023-.287-.068-.342-.045-.055-.142-.082-.29-.082zM9.408 8.233c0 .264-.017.484-.052.661-.036.177-.093.32-.174.43a.648.648 0 0 1-.318.231 1.523 1.523 0 0 1-.487.068h-.79v-4.17h.79c.366 0 .63.11.79.324.16.215.241.571.241 1.067v1.389zm1.38-2.789c-.225-.457-.533-.795-.921-1.013-.39-.219-.88-.328-1.47-.328H6.418c-.167 0-.278.024-.333.072-.054.049-.082.147-.082.294v6.138c0 .148.028.246.082.295.055.048.166.072.333.072h2.218c1.048 0 1.765-.447 2.15-1.342.09-.205.153-.413.188-.622a4.91 4.91 0 0 0 .054-.796V6.911c0-.367-.018-.656-.054-.868a2.2 2.2 0 0 0-.193-.612l.006.013z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DAZN" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dazn extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4X, create_fragment$4X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dblp.svelte generated by Svelte v3.23.2 */

        function create_fragment$4Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.3 14.58l-2.45-9.16s-.15-.59-.72-.33l-5.6 2.6.86 3.2 1.09 4.08.01.06c.05.47-.41.79-.41.79l-1.88.87.5 1.89.04.1c.07.17.28.6.81.91l6.95 4.27s.68.41.52-.17l-1.98-7.4 1.86-.86s.56-.26.4-.85zM13.76 14.67l-.01-.06-1.13-4.22-.66-2.45-.67-2.49v-.04s-.16-.59-.84-1L3.5.14s-.68-.41-.52.17l1.99 7.42-1.87.87s-.56.26-.4.85l2.45 9.16s.16.59.72.33l6.17-2.87 1.3-.61s.52-.24.42-.79z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "dblp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dblp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4Y, create_fragment$4Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dcentertainment.svelte generated by Svelte v3.23.2 */

        function create_fragment$4Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.215 8.787h2.154c.601 0 1.088.487 1.088 1.088v4.954c0 .6-.487 1.088-1.088 1.088H6.05V9.475a.159.159 0 00-.066-.129zM12 23.099a11.078 11.078 0 01-8.659-4.155.046.046 0 01.036-.074h5.936a.26.26 0 00.153-.05l2.27-1.648a.159.159 0 00.064-.128V7.616a.159.159 0 00-.065-.129L9.466 5.84a.261.261 0 00-.153-.05H2.886a.046.046 0 01-.037-.071A11.087 11.087 0 0112 .9c3.798 0 7.15 1.907 9.151 4.817a.046.046 0 01-.038.071h-1.597c-.052 0-.1.03-.123.079l-.353.757-1.082-.786a.26.26 0 00-.153-.05h-2.553a.261.261 0 00-.154.05L12.83 7.487a.159.159 0 00-.065.129v9.428c0 .05.024.098.065.128l2.27 1.648a.26.26 0 00.153.05h5.371c.038 0 .06.045.036.074A11.078 11.078 0 0112 23.1zM1.602 8.3l1.038.755c.043.03.068.08.068.132v8.73c0 .046-.06.063-.084.025A11.046 11.046 0 01.901 12c0-1.289.22-2.526.624-3.677a.05.05 0 01.077-.024zm13.67.488h3.225v1.776c0 .046.038.084.084.084h2.701a.098.098 0 00.096-.083l.535-3.374c.007-.044.066-.053.086-.013a11.053 11.053 0 011.1 4.823 11.05 11.05 0 01-1.39 5.382c-.022.04-.084.024-.084-.023v-3.084a.084.084 0 00-.084-.084h-2.96a.084.084 0 00-.084.084v1.642h-1.301a1.089 1.089 0 01-1.089-1.088V9.475a.159.159 0 00-.065-.129zM12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DC Entertainment" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dcentertainment extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4Z, create_fragment$4Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Debian.svelte generated by Svelte v3.23.2 */

        function create_fragment$4_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.88 12.685c-.4 0 .08.2.601.28.14-.1.27-.22.39-.33a3.001 3.001 0 01-.99.05m2.14-.53c.23-.33.4-.69.47-1.06-.06.27-.2.5-.33.73-.75.47-.07-.27 0-.56-.8 1.01-.11.6-.14.89m.781-2.05c.05-.721-.14-.501-.2-.221.07.04.13.5.2.22M12.38.31c.2.04.45.07.42.12.23-.05.28-.1-.43-.12m.43.12l-.15.03.14-.01V.43m6.633 9.944c.02.64-.2.95-.38 1.5l-.35.181c-.28.54.03.35-.17.78-.44.39-1.34 1.22-1.62 1.301-.201 0 .14-.25.19-.34-.591.4-.481.6-1.371.85l-.03-.06c-2.221 1.04-5.303-1.02-5.253-3.842-.03.17-.07.13-.12.2a3.551 3.552 0 012.001-3.501 3.361 3.362 0 013.732.48 3.341 3.342 0 00-2.721-1.3c-1.18.01-2.281.76-2.651 1.57-.6.38-.67 1.47-.93 1.661-.361 2.601.66 3.722 2.38 5.042.27.19.08.21.12.35a4.702 4.702 0 01-1.53-1.16c.23.33.47.66.8.91-.55-.18-1.27-1.3-1.48-1.35.93 1.66 3.78 2.921 5.261 2.3a6.203 6.203 0 01-2.33-.28c-.33-.16-.77-.51-.7-.57a5.802 5.803 0 005.902-.84c.44-.35.93-.94 1.07-.95-.2.32.04.16-.12.44.44-.72-.2-.3.46-1.24l.24.33c-.09-.6.74-1.321.66-2.262.19-.3.2.3 0 .97.29-.74.08-.85.15-1.46.08.2.18.42.23.63-.18-.7.2-1.2.28-1.6-.09-.05-.28.3-.32-.53 0-.37.1-.2.14-.28-.08-.05-.26-.32-.38-.861.08-.13.22.33.34.34-.08-.42-.2-.75-.2-1.08-.34-.68-.12.1-.4-.3-.34-1.091.3-.25.34-.74.54.77.84 1.96.981 2.46-.1-.6-.28-1.2-.49-1.76.16.07-.26-1.241.21-.37A7.823 7.824 0 0017.702 1.6c.18.17.42.39.33.42-.75-.45-.62-.48-.73-.67-.61-.25-.65.02-1.06 0C15.082.73 14.862.8 13.8.4l.05.23c-.77-.25-.9.1-1.73 0-.05-.04.27-.14.53-.18-.741.1-.701-.14-1.431.03.17-.13.36-.21.55-.32-.6.04-1.44.35-1.18.07C9.6.68 7.847 1.3 6.867 2.22L6.838 2c-.45.54-1.96 1.611-2.08 2.311l-.131.03c-.23.4-.38.85-.57 1.261-.3.52-.45.2-.4.28-.6 1.22-.9 2.251-1.16 3.102.18.27 0 1.65.07 2.76-.3 5.463 3.84 10.776 8.363 12.006.67.23 1.65.23 2.49.25-.99-.28-1.12-.15-2.08-.49-.7-.32-.85-.7-1.34-1.13l.2.35c-.971-.34-.57-.42-1.361-.67l.21-.27c-.31-.03-.83-.53-.97-.81l-.34.01c-.41-.501-.63-.871-.61-1.161l-.111.2c-.13-.21-1.52-1.901-.8-1.511-.13-.12-.31-.2-.5-.55l.14-.17c-.35-.44-.64-1.02-.62-1.2.2.24.32.3.45.33-.88-2.172-.93-.12-1.601-2.202l.15-.02c-.1-.16-.18-.34-.26-.51l.06-.6c-.63-.74-.18-3.102-.09-4.402.07-.54.53-1.1.88-1.981l-.21-.04c.4-.71 2.341-2.872 3.241-2.761.43-.55-.09 0-.18-.14.96-.991 1.26-.7 1.901-.88.7-.401-.6.16-.27-.151 1.2-.3.85-.7 2.421-.85.16.1-.39.14-.52.26 1-.49 3.151-.37 4.562.27 1.63.77 3.461 3.011 3.531 5.132l.08.02c-.04.85.13 1.821-.17 2.711l.2-.42M9.54 13.236l-.05.28c.26.35.47.73.8 1.01-.24-.47-.42-.66-.75-1.3m.62-.02c-.14-.15-.22-.34-.31-.52.08.32.26.6.43.88l-.12-.36m10.945-2.382l-.07.15c-.1.76-.34 1.511-.69 2.212.4-.73.65-1.541.75-2.362M12.45.12c.27-.1.66-.05.95-.12-.37.03-.74.05-1.1.1l.15.02M3.006 5.142c.07.57-.43.8.11.42.3-.66-.11-.18-.1-.42m-.64 2.661c.12-.39.15-.62.2-.84-.35.44-.17.53-.2.83");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Debian" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Debian extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4_, create_fragment$4_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Deepin.svelte generated by Svelte v3.23.2 */

        function create_fragment$4$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.104.696c-1.724-.63-3.49-.8-5.205-.64-1.988.157-2.958.772-2.9.661-3.251 1.16-6 3.657-7.272 7.157-2.266 6.234.944 13.128 7.168 15.398 6.228 2.27 13.111-.945 15.378-7.179C25.54 9.86 22.33 2.966 16.104.696zM8.305 22.145a10.767 10.767 0 0 1-1.867-.904c2.9.223 6.686-.445 9.239-2.834 0 0 4.866-3.888 1.345-10.269 0 0 .568 2.572-.156 4.687 0 0-.69 2.877-3.757 3.712-4.517 1.231-9.664-1.93-11.816-3.463-.162-1.574-.018-3.2.56-4.788.855-2.352 2.463-4.188 4.427-5.42-.49 3.436-.102 6.6.456 7.925.749 1.777 2.05 3.85 4.59 4.115 2.54.267 3.94-2.11 3.94-2.11 1.304-1.98 1.508-4.823 1.488-4.892-.02-.07-.347-.257-.347-.257-.877 3.549-2.323 4.734-2.323 4.734-2.28 2.201-3.895.675-3.895.675-1.736-1.865-.52-4.895-.52-4.895.68-2.064 2.66-5.084 4.905-6.62.374.092.75.15 1.12.284a10.712 10.712 0 0 1 3.554 2.16c-1.641.599-4.291 1.865-4.291 1.865-4.201 1.77-4.485 4.446-4.485 4.446-.435 2.758 1.754 1.59 1.754 1.59 2.252-1.097 3.359-4.516 3.359-4.516-.703-.134-1.257.08-1.257.08-.899 2.22-2.733 3.132-2.733 3.132-.722.382-.89-.293-.89-.293-.122-.506.522-.592.522-.592 1-.389 1.639-1.439 1.784-1.868.144-.43.412-.464.412-.464a12.998 12.998 0 0 1 2.619-.535c1.7-.209 4.303.602 4.303.602.584.235 1.144.41 1.641.551.954 2.384 1.105 5.098.16 7.7-2.039 5.61-8.236 8.504-13.841 6.462z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$4$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "deepin" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Deepin extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$4$, create_fragment$4$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Deezer.svelte generated by Svelte v3.23.2 */

        function create_fragment$50(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.81 4.16v3.03H24V4.16h-5.19zM6.27 8.38v3.027h5.189V8.38h-5.19zm12.54 0v3.027H24V8.38h-5.19zM6.27 12.594v3.027h5.189v-3.027h-5.19zm6.271 0v3.027h5.19v-3.027h-5.19zm6.27 0v3.027H24v-3.027h-5.19zM0 16.81v3.029h5.19v-3.03H0zm6.27 0v3.029h5.189v-3.03h-5.19zm6.271 0v3.029h5.19v-3.03h-5.19zm6.27 0v3.029H24v-3.03h-5.19Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$50($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Deezer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Deezer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$50, create_fragment$50, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Delicious.svelte generated by Svelte v3.23.2 */

        function create_fragment$51(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 12H0v12h12V12zM24 0H12v12h12V0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$51($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Delicious" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Delicious extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$51, create_fragment$51, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Deliveroo.svelte generated by Svelte v3.23.2 */

        function create_fragment$52(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.861 0l-1.127 10.584L13.81 1.66 7.777 2.926l1.924 8.922-8.695 1.822 1.535 7.127L17.832 24l3.498-7.744L22.994.636 16.861 0zM11.39 13.61a.755.755 0 01.322.066c.208.093.56.29.63.592.103.434.004.799-.312 1.084v.002c-.315.284-.732.258-1.174.113-.441-.145-.637-.672-.47-1.309.124-.473.71-.544 1.004-.549zm4.142.548c.447-.012.832.186 1.05.543.217.357.107.75-.122 1.143h-.002c-.229.392-.83.445-1.422.16-.399-.193-.397-.684-.353-.983a.922.922 0 01.193-.447c.142-.177.381-.408.656-.416Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$52($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Deliveroo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Deliveroo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$52, create_fragment$52, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dell.svelte generated by Svelte v3.23.2 */

        function create_fragment$53(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.963 14.6V9.324h1.222v4.204h2.14v1.07h-3.362zm-9.784-3.288l2.98-2.292c.281.228.56.458.841.687l-2.827 2.14.611.535 2.827-2.216c.281.228.56.458.841.688a295.83 295.83 0 0 1-2.827 2.216l.61.536 2.83-2.295-.001-1.986h1.223v4.204h2.216v1.07h-3.362v-1.987c-.995.763-1.987 1.529-2.981 2.292l-2.981-2.292c-.144.729-.653 1.36-1.312 1.694-.285.147-.597.24-.915.276-.183.022-.367.017-.551.017H3.516V9.325H5.69a2.544 2.544 0 0 1 1.563.557c.454.36.778.872.927 1.43m-3.516-.917v3.21l.953-.001a1.377 1.377 0 0 0 1.036-.523 1.74 1.74 0 0 0 .182-1.889 1.494 1.494 0 0 0-.976-.766c-.166-.04-.338-.03-.507-.032h-.688zM11.82 0h.337a11.94 11.94 0 0 1 5.405 1.373 12.101 12.101 0 0 1 4.126 3.557A11.93 11.93 0 0 1 24 11.82v.36a11.963 11.963 0 0 1-3.236 8.033A11.967 11.967 0 0 1 12.182 24h-.361a11.993 11.993 0 0 1-4.145-.806 12.04 12.04 0 0 1-4.274-2.836A12.057 12.057 0 0 1 .576 15.67 12.006 12.006 0 0 1 0 12.181v-.361a11.924 11.924 0 0 1 1.992-6.396 12.211 12.211 0 0 1 4.71-4.172A11.875 11.875 0 0 1 11.82 0m-.153 1.23a10.724 10.724 0 0 0-6.43 2.375 10.78 10.78 0 0 0-3.319 4.573 10.858 10.858 0 0 0 .193 8.12 10.788 10.788 0 0 0 3.546 4.421 10.698 10.698 0 0 0 4.786 1.946c1.456.209 2.955.124 4.376-.26a10.756 10.756 0 0 0 5.075-3.062 10.742 10.742 0 0 0 2.686-5.28 10.915 10.915 0 0 0-.122-4.682 10.77 10.77 0 0 0-7.098-7.626 10.78 10.78 0 0 0-3.693-.525z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$53($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dell" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dell extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$53, create_fragment$53, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Deno.svelte generated by Svelte v3.23.2 */

        function create_fragment$54(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.055.008c-.056.006-.236.027-.398.041C8.349.291 6.076 1.27 4.223 2.82a15.658 15.654 0 00-1.405 1.405C1.283 6.058.386 8.115.056 10.549c-.074.54-.074 2.364 0 2.904.33 2.435 1.228 4.492 2.762 6.325a15.658 15.654 0 001.405 1.405c1.833 1.535 3.89 2.432 6.325 2.762.54.073 2.364.073 2.904 0 2.435-.331 4.492-1.228 6.325-2.762a15.658 15.654 0 001.405-1.405c1.535-1.833 2.432-3.89 2.762-6.325.074-.54.074-2.364 0-2.904-.33-2.433-1.228-4.49-2.762-6.323a15.658 15.654 0 00-1.405-1.405C17.95 1.291 15.872.382 13.47.061c-.26-.036-.637-.05-1.337-.057a25.795 25.788 0 00-1.077.003zm.147 1.275c0 .345.024 1.095.056 1.806.018.348.038.847.047 1.107.032.92.13 3.338.145 3.553l.015.215-.133-.015a.504.504 0 01-.153-.032 3.247 3.247 0 01-.041-.455 702.86 702.682 0 01-.245-5.723l-.018-.655.083-.012c.044-.006.118-.015.165-.018l.08-.003v.23zm2.825-.07c.003.002.012.893.021 1.98.012 1.088.027 2.065.035 2.17.01.11.006.205-.009.21a.433.433 0 01-.159 0l-.136-.011-.02-.86-.033-1.17c-.024-.523-.044-2.297-.027-2.34.012-.033.044-.036.168-.016.086.018.156.032.16.035zM7.2 2.2c.018.027.156 1.653.328 3.78.056.724.112 1.385.12 1.468.016.15.013.156-.082.215a.519.519 0 01-.118.059c-.01 0-.027-.077-.035-.171-.041-.384-.201-2.237-.313-3.577a173.64 173.628 0 00-.133-1.57c-.015-.13-.012-.142.065-.183.094-.05.148-.059.168-.02zm8.125.593c.083.03.091.044.11.213.03.295.02 1.706-.013 1.706-.086 0-.263-.1-.277-.156a14.379 14.375 0 01-.018-.93c0-.959-.012-.903.198-.832zm-5.451.14c0 .08.02.518.044.982L9.98 5.22c.02.514.027.496-.171.508-.097.003-.097.003-.103-.145-.006-.083-.021-.34-.038-.576-.015-.236-.05-.747-.074-1.136a32.49 32.486 0 00-.062-.859c-.018-.148-.015-.153.065-.183a.617.617 0 01.183-.032c.094-.003.094-.003.094.136zm8.187.403l.1.041.021.395c.01.215.015.682.01 1.033l-.01.643-.124-.062-.124-.06-.009-.98a21.73 21.728 0 01.003-1.017c.012-.044.012-.044.133.006zm-5.389.387c.018.018.059 1.45.062 2.175l.003.437-.139-.021a1.3 1.3 0 01-.148-.021c-.009-.006-.097-2.193-.097-2.405V3.67l.151.018a.743.743 0 01.168.035zm6.797.21c.035.04.041.687.05 4.252.01 4.092.01 4.2-.044 4.2a.197.197 0 01-.103-.04c-.044-.032-.05-.39-.065-3.885a475.465 475.342 0 00-.035-4.277l-.018-.425.086.062c.05.035.106.086.13.112zm-2.647.605c.015.012.03.18.032.372.015.652.018 4.65.003 4.663-.006.006-.059-.01-.118-.032l-.106-.044v-5.02l.083.018c.044.012.092.03.106.044zm-8.146.165c.009.08.024.26.032.407l.047.732c.035.519.03.552-.14.552-.088 0-.1-.01-.111-.097-.03-.174-.133-1.626-.118-1.65a.654.654 0 01.239-.08c.018-.003.04.06.05.136zm-4.882.752l.145 1.455c.05.487.092.9.092.918 0 .035-.227.148-.251.124a96.061 96.036 0 01-.31-2.745c0-.07.227-.37.257-.336a6.6 6.6 0 01.068.584zm11.572.31l.086.05.003.638c.003.348.01.738.01.865.005.266-.028.31-.187.254l-.09-.032v-.254c0-.142-.01-.552-.022-.915l-.018-.655h.068a.41.41 0 01.151.05zM5.09 6.91l.195 2.125.1 1.09-.115.115-.112.115-.021-.233c-.012-.13-.071-.73-.133-1.34-.062-.606-.151-1.49-.195-1.96l-.083-.85.115-.104c.103-.097.115-.1.136-.047.012.03.062.519.112 1.089zm-2.211.358c.065.58.236 2.128.384 3.433.148 1.307.286 2.568.313 2.804.024.236.065.593.089.797.04.345.04.37-.006.404-.071.053-.1.047-.1-.015 0-.027-.027-.25-.06-.493l-.338-2.627c-.041-.31-.121-.927-.177-1.372a466.6 466.482 0 01-.37-2.87c-.052-.401-.085-.76-.076-.797.02-.08.195-.357.213-.34.006.01.065.49.13 1.075zM1.976 8.54l.183 1.44c.056.435.127.981.159 1.21l.056.411-.062.053c-.035.03-.071.04-.083.03a1.17 1.17 0 01-.053-.26c-.018-.13-.127-.888-.245-1.68l-.21-1.446.068-.201a.724.724 0 01.083-.198c.012 0 .056.289.103.64zm16.203-.387c.041.04.047.224.047 1.579v1.53h-.083c-.18 0-.177.044-.189-1.63l-.009-1.526h.094c.05 0 .115.02.14.047zm-6.46.528c.667.1 1.248.286 1.824.58.372.193.55.326.962.72.614.586.992 1.1 1.346 1.826.516 1.057.717 1.992.971 4.5.115 1.125.266 3.165.298 4 .01.242.03.64.047.885.032.519.071.449-.387.67-.635.307-1.245.519-2.05.717-.987.242-1.624.319-2.598.322l-.708.003.006-.34c0-.185.018-.62.035-.958.089-1.644.071-3.72-.044-4.87-.065-.66-.192-1.464-.263-1.64-.015-.04.053-.072.345-.172.534-.186.998-.42 1.068-.534.127-.218-.1-.53-.39-.53-.05 0-.201.052-.339.114-.661.304-1.986.66-2.751.74a7.794 7.792 0 01-1.918-.08c-.31-.055-.865-.265-1.328-.504-.534-.277-.862-.646-.96-1.083-.052-.236-.037-.708.03-.974a3.15 3.15 0 01.47-.965c.84-1.105 2.577-2.064 4.356-2.4a6.632 6.632 0 011.977-.027zm9.105.092c.106.044.118.056.118.156.006.806-.012 2.645-.027 2.722-.003.027-.156.03-.22.006-.042-.015-.048-.174-.048-1.476 0-.931.012-1.456.03-1.456.015 0 .083.02.148.047zm1.29 1.62l.105.042-.02 2.444c-.025 3.114-.028 3.205-.14 3.474-.183.44-.174.528-.156-1.402.006-.965.021-1.942.027-2.17.006-.226.012-.867.015-1.425 0-.673.01-1.01.03-1.01.018 0 .08.022.14.045zm-17.75.733c.018.24.012.263-.074.452l-.094.2-.035-.294c-.056-.472-.056-.493.056-.564.05-.035.103-.06.112-.053.009.006.027.124.035.26zm-1.824 1.78c.027.242.233 1.848.339 2.636.159 1.219.17 1.393.1 1.319a14.7 14.696 0 01-.148-.912c-.46-3.182-.457-3.16-.42-3.185.08-.053.107-.024.128.142zm2.125 1.35c.018.075.103.875.103.972 0 .083-.106.16-.153.112-.015-.015-.053-.266-.083-.555l-.074-.676-.018-.148.103.118a.656.656 0 01.12.177zm2.382 1.114c.032.03.053.148.08.466.044.576.05.53-.071.53-.124 0-.121.01-.162-.51-.041-.528-.041-.522.038-.522.038 0 .089.018.115.035zm2.337.044c.006.03.02.207.032.393.009.186.035.605.059.93.083 1.192.086 1.343.035 1.343-.056 0-.062-.044-.127-.885a70.726 70.708 0 00-.097-1.22c-.027-.32-.044-.59-.035-.595.032-.035.118-.01.133.035zm-5.548.567c.018.027.13.97.269 2.26.04.39.083.765.09.836l.016.127-.074-.047a.153.153 0 01-.077-.145c0-.186-.127-1.411-.224-2.16-.056-.425-.1-.8-.1-.835 0-.062.07-.086.1-.035zm17.032 1.234l-.02 1.234-.075.109c-.168.248-.159.295-.15-1.086l.005-1.266.11-.112a.574.574 0 01.13-.11c.008 0 .008.556 0 1.232zm-2.73 1.956c.015 1.715.012 1.848-.035 1.9-.03.033-.056.054-.065.045-.02-.024-.05-3.763-.027-3.784.012-.012.041-.018.068-.015.038.009.047.218.06 1.853zm-9.64-1.174c.022.183.095 1.06.125 1.473.018.277.018.286-.047.307-.035.012-.077.009-.09-.006-.02-.021-.085-.676-.164-1.685l-.021-.242h.09c.087 0 .092.006.107.153zm-2.32 1.033c.022.02.036.094.036.168 0 .077.035.475.074.888.112 1.13.12 1.284.07 1.254-.076-.044-.144-.112-.13-.13a2.02 2.02 0 00-.03-.328 14.43 14.429 0 01-.058-.62 19.044 19.04 0 00-.062-.694c-.056-.516-.053-.576.012-.576.03 0 .068.015.089.035zm1.397 1.986c.009.065.027.307.038.537.02.443.012.475-.11.384-.034-.027-.058-.14-.093-.475-.062-.608-.065-.584.05-.573.086.009.097.02.115.127zM6.52 10.094c-.307.133-.331.55-.041.697.21.106.422.056.53-.127a.392.392 0 00-.49-.57zm2 .283a.453.453 0 000 .767c.28.168.644-.053.644-.39 0-.325-.372-.543-.643-.378z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$54($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Deno" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Deno extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$54, create_fragment$54, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dependabot.svelte generated by Svelte v3.23.2 */

        function create_fragment$55(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.949.314a1.918 1.918 0 0 1 2.102 0l9.333 6.118c.541.354.866.957.866 1.604v7.928c0 .647-.326 1.25-.866 1.604l-9.333 6.118a1.918 1.918 0 0 1-2.102 0l-9.333-6.118a1.916 1.916 0 0 1-.866-1.604V8.036c0-.647.326-1.25.866-1.604L10.949.314zM12.75 7.5v.75h-6A.75.75 0 0 0 6 9v3h-.5a.25.25 0 0 0-.25.25v2.5c0 .138.112.25.25.25H6v1.5c0 .415.336.75.75.75h10.5a.75.75 0 0 0 .75-.75V15h.5a.25.25 0 0 0 .25-.25v-2.5a.25.25 0 0 0-.25-.25H18V9a.75.75 0 0 0-.75-.75H13.5V5.5a.25.25 0 0 0-.25-.25H11.5a.25.25 0 0 0-.25.25v1.75c0 .138.112.25.25.25h1.25zm3.286 5.089l-1.572 1.572a.303.303 0 0 1-.428 0l-.947-.947a.303.303 0 0 1 0-.428l.322-.322a.303.303 0 0 1 .428 0l.41.411 1.037-1.036a.303.303 0 0 1 .428 0l.322.322a.303.303 0 0 1 0 .428zM9.464 14.16v.001a.303.303 0 0 1-.428 0l-.948-.947a.302.302 0 0 1 0-.428l.323-.322a.303.303 0 0 1 .427 0l.412.411 1.036-1.037a.303.303 0 0 1 .427 0l.323.322a.303.303 0 0 1 0 .428L9.464 14.16z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$55($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dependabot" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dependabot extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$55, create_fragment$55, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Derspiegel.svelte generated by Svelte v3.23.2 */

        function create_fragment$56(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.868 13.054v-2.108h.677v2.108zm1.29.19v-2.488a.346.346 0 0 0-.338-.337H0v.527h.254v2.108H0v.527h1.841a.33.33 0 0 0 .318-.337zm1.905-.78v.59h-.72v-.864h.953v-.527h-.952v-.717h.72v.442h.592v-.97H2.497v.528h.233v2.108h-.233v.527h2.16v-1.117zm1.778-.801v-.717h.699v.717zm1.334 1.391v-.759a.334.334 0 0 0-.339-.337c.19 0 .339-.148.339-.338v-.843c0-.169-.149-.337-.318-.337H4.974v.527h.275v2.108h-.275v.506h1.121v-.527h-.233v-.864h.699v.864h-.254v.527h1.1v-.527zm4.507-1.391v-.717h.72v.717zm1.334.19v-1.097a.334.334 0 0 0-.339-.337h-1.862v.527h.254v2.108h-.254v.527h1.1v-.527h-.233v-.864h.995c.19 0 .339-.148.339-.338zm1.08 1.201v-2.108h.253v-.527h-1.1v.527h.254v2.108h-.254v.527h1.1v-.527zm2.094-.59v.59h-.72v-.864h.953v-.527h-.952v-.717h.72v.442h.613v-.97h-2.18v.528h.233v2.108h-.233v.527h2.18v-1.117zm1.736-.801v.527h.487v.864h-.72v-2.108h.72v.442h.634v-.632a.334.334 0 0 0-.338-.337h-1.27a.325.325 0 0 0-.212.084c-.063.063-.127.148-.127.253v2.488a.3.3 0 0 0 .127.253.32.32 0 0 0 .233.084h1.587v-1.918zm2.984.8v.591h-.72v-.864h.953v-.527h-.953v-.717h.72v.442h.614v-.97h-2.18v.528h.233v2.108h-.233v.527h2.18v-1.117zm2.476 0v.591h-.698v-2.108h.254v-.527H21.82v.527h.254v2.108h-.254v.527H24v-1.117zm-12.846.8v-1.592H9.227v-.722h.699v.446h.635v-.637c0-.204-.19-.34-.381-.34H8.931a.335.335 0 0 0-.338.34v1.444h1.312v.87h-.699v-.594h-.613v.764c0 .19.148.34.338.34h1.249c.195 0 .36-.128.36-.319Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$56($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Der Spiegel" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Derspiegel extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$56, create_fragment$56, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Designernews.svelte generated by Svelte v3.23.2 */

        function create_fragment$57(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.27 11.98c0-3.83-2.354-6.43-6.84-6.43H0v12.9h4.524c4.354 0 6.747-2.624 6.747-6.464v-.005zM8.056 12c0 2.766-1.42 3.963-3.7 3.963h-1.16V8.037h1.16c2.185 0 3.7 1.252 3.7 3.963zM24 18.45V5.55h-2.97v7.213L16.28 5.55h-3.105v12.9h2.973v-7.723l5.084 7.718H24v.004z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$57($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Designer News" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Designernews extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$57, create_fragment$57, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/DevDotTo.svelte generated by Svelte v3.23.2 */

        function create_fragment$58(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.42 10.05c-.18-.16-.46-.23-.84-.23H6l.02 2.44.04 2.45.56-.02c.41 0 .63-.07.83-.26.24-.24.26-.36.26-2.2 0-1.91-.02-1.96-.29-2.18zM0 4.94v14.12h24V4.94H0zM8.56 15.3c-.44.58-1.06.77-2.53.77H4.71V8.53h1.4c1.67 0 2.16.18 2.6.9.27.43.29.6.32 2.57.05 2.23-.02 2.73-.47 3.3zm5.09-5.47h-2.47v1.77h1.52v1.28l-.72.04-.75.03v1.77l1.22.03 1.2.04v1.28h-1.6c-1.53 0-1.6-.01-1.87-.3l-.3-.28v-3.16c0-3.02.01-3.18.25-3.48.23-.31.25-.31 1.88-.31h1.64v1.3zm4.68 5.45c-.17.43-.64.79-1 .79-.18 0-.45-.15-.67-.39-.32-.32-.45-.63-.82-2.08l-.9-3.39-.45-1.67h.76c.4 0 .75.02.75.05 0 .06 1.16 4.54 1.26 4.83.04.15.32-.7.73-2.3l.66-2.52.74-.04c.4-.02.73 0 .73.04 0 .14-1.67 6.38-1.8 6.68z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$58($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "dev.to" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class DevDotTo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$58, create_fragment$58, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Deviantart.svelte generated by Svelte v3.23.2 */

        function create_fragment$59(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.207 4.794l.23-.43V0H15.07l-.436.44-2.058 3.925-.646.436H4.58v5.993h4.04l.36.436-4.175 7.98-.24.43V24H8.93l.436-.44 2.07-3.925.644-.436h7.35v-5.993h-4.05l-.36-.438 4.186-7.977z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$59($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DeviantArt" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Deviantart extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$59, create_fragment$59, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Devrant.svelte generated by Svelte v3.23.2 */

        function create_fragment$5a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.72 0C5.482-.015 1.592 4.046 1.701 10.322c-.074 3.907 1.437 7.002 4.127 8.734.663.405 1.364.737 2.137.995l2.174 3.353c.333.848.7.774.848-.11l.59-2.69h.442c2.469.073 4.57-.517 6.228-1.585 2.616-1.733 4.126-4.791 4.053-8.697C22.41 3.948 18.431-.144 12.019.004c-.1-.002-.2-.004-.299-.004zm4.571 4.636c.258 0 .516.092.7.276h.001c.185.185.295.442.295.737 0 .148 0 .295-.074.406l-3.722 9.25c-.258.441-.627.552-.885.552a1.007 1.007 0 0 1-.994-.995c0-.148.037-.258.073-.406l3.685-9.212c.073-.147.148-.258.221-.332a.989.989 0 0 1 .7-.276zM9.456 7.5c.313 0 .626.12.866.359h.001c.221.221.368.516.331.848 0 .332-.147.589-.368.848-.222.258-.517.369-.848.369-.332 0-.59-.148-.848-.37-.259-.22-.37-.515-.37-.847s.149-.627.37-.848c.24-.24.552-.36.866-.36zm0 4.974c.313 0 .626.12.866.36h.001c.221.258.368.553.331.848a1.2 1.2 0 0 1-.368.848c-.221.258-.516.368-.848.368a1.2 1.2 0 0 1-.848-.368c-.259-.222-.37-.516-.37-.848s.149-.627.37-.848c.24-.24.552-.36.866-.36z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "devRant" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Devrant extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5a, create_fragment$5a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dhl.svelte generated by Svelte v3.23.2 */

        function create_fragment$5b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.22 10.303l-.767 1.043h4.18c.21 0 .208.078.105.218-.105.142-.28.39-.386.534-.054.073-.154.207.171.207h1.71l.505-.69c.314-.426.028-1.312-1.095-1.312H4.22zm7.204 0l-1.475 2.002h5.39l1.473-2.002H14.61l-.843 1.146h-.985l.846-1.146h-2.203zm6.105 0l-1.474 2.002h2.334l1.472-2.002H17.53zm-12.845 1.3l-1.54 2.094h3.754c1.24 0 1.932-.844 2.145-1.136h-2.56c-.326 0-.226-.133-.172-.207.107-.143.283-.388.388-.53.104-.14.107-.22-.105-.22h-1.91zM0 12.562v.242h3.398l.176-.242H0zm9.762 0l-.836 1.136h2.203l.836-1.136H9.762zm3.185 0l-.836 1.136h2.203l.836-1.136h-2.203zm2.918 0s-.159.22-.238.326c-.276.374-.033.81.87.81h3.538l.834-1.136h-5.004zm5.408 0l-.177.242H24v-.242h-2.727zM0 13.01v.24h3.068l.178-.24H0zm20.943 0l-.175.24H24v-.24h-3.057zM0 13.457v.24h2.74l.176-.24H0zm20.615 0l-.177.24H24v-.24h-3.385z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DHL" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dhl extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5b, create_fragment$5b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Diaspora.svelte generated by Svelte v3.23.2 */

        function create_fragment$5c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.26 21.896l-2.332-3.256c-.622-.87-1.127-1.547-1.154-1.547s-1.006 1.314-2.316 3.113C8.21 21.92 7.178 23.32 7.163 23.32c-.033 0-4.498-3.144-4.51-3.177-.006-.016 1.005-1.498 2.242-3.293 1.24-1.795 2.254-3.29 2.254-3.326 0-.055-.408-.193-3.557-1.245L0 11.08c-.03-.018.156-.64.793-2.65.46-1.446.844-2.64.855-2.655.014-.016 1.71.524 3.772 1.205 2.063.68 3.765 1.234 3.788 1.234.022 0 .046-.03.053-.07.01-.03.03-1.786.04-3.9.02-2.1.04-3.84.05-3.87.02-.03.6-.03 2.73-.03 1.484 0 2.713.015 2.733.03.025.016.065 1.186.136 3.78.11 4.275.11 4.335.18 4.335.025 0 1.66-.54 3.63-1.22 1.973-.66 3.592-1.2 3.605-1.186.03.044 1.65 5.31 1.635 5.325-.017.016-1.667.585-3.66 1.26-2.76.93-3.647 1.245-3.647 1.29-.014.03.93 1.455 2.146 3.21 1.184 1.74 2.143 3.165 2.143 3.18-.015.046-4.44 3.302-4.483 3.302-.015 0-.585-.766-1.245-1.695l.005-.067z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Diaspora" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Diaspora extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5c, create_fragment$5c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Digg.svelte generated by Svelte v3.23.2 */

        function create_fragment$5d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.76 8.16v8.16h3.84v.96h-3.84v1.92H24V8.16h-6.24zm-7.2 0v8.16h3.84v.96h-3.84v1.92h6.24V8.16h-6.24zM3.84 4.8v3.36H0v8.16h6.24V4.8h-2.4zM9.6 8.16H7.2v8.16h2.4V8.16zm12 6.24h-1.44v-4.32h1.44v4.32zm-17.76 0H2.4v-4.32h1.44v4.32zm10.56 0h-1.44v-4.32h1.44v4.32zM9.6 4.8H7.2v2.4h2.4V4.8z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Digg" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Digg extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5d, create_fragment$5d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Digitalocean.svelte generated by Svelte v3.23.2 */

        function create_fragment$5e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.836 19.365H.832V16.38h2.985v2.985H7.38V14.73h4.635v4.62c4.927-.006 8.73-4.883 6.852-10.066-.698-1.92-2.23-3.45-4.15-4.146C9.527 3.255 4.647 7.068 4.647 12H0C0 4.144 7.59-1.976 15.824.595c3.6 1.125 6.456 3.982 7.58 7.58C25.974 16.41 19.858 24 12 24v-4.635H7.377v3.56h-3.56v-3.56H.833h.002z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DigitalOcean" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Digitalocean extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5e, create_fragment$5e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dior.svelte generated by Svelte v3.23.2 */

        function create_fragment$5f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.767 16.383h.622c2.313 0 2.934-.214 3.748-1.296.814-1.081.91-2.634.91-3.159 0-.525-.139-1.842-.953-2.956C7.28 7.858 5.92 7.569 4.73 7.569h-.968c-.23 0-.242.102-.242.262v8.349c0 .182.065.203.247.203M0 16.58c0-.084.11-.099.211-.102 1.178-.033 1.398-.074 1.532-.214.074-.077.182-.14.182-.685v-7.51c0-.674-.82-.567-1.398-.626-.203-.02-.22-.048-.22-.107s.039-.087.145-.091h4.745c5.216 0 5.483 3.813 5.483 4.83 0 2.186-1.445 4.59-4.465 4.59H.152c-.074 0-.152-.01-.152-.086m15.638-1.98c.124 1.126.795 2.002 1.625 1.855.833-.147 1.25-.942 1.15-2.215-.103-1.295-.744-1.94-1.605-1.863-.891.081-1.296 1.097-1.17 2.223m.824-2.421c1.072-.2 2.597.036 2.944 1.714.346 1.678-.809 2.572-1.811 2.79-.98.212-2.643.06-2.943-1.744a2.35 2.35 0 0 1 1.81-2.76m-3.849-1.514a.62.62 0 1 0 0-1.24.62.62 0 0 0 0 1.24m-1.283 2.4c-.034-.066.03-.109.218-.158.21-.056.669-.196 1.033-.402.365-.206.427-.227.504-.202.078.026.07.162.07.272v3.47c0 .195.026.276.114.357.089.081.31.129.596.129.13 0 .17.015.17.07 0 .055-.04.055-.092.055h-2.517c-.077 0-.096-.033-.096-.066 0-.04.035-.067.152-.067.098 0 .554.034.657-.202.04-.09.06-.217.06-.334v-2.753c0-.21-.163-.302-.35-.257-.219.05-.474.174-.519.088m8.868-.001c-.007-.045-.007-.084.218-.155.224-.069.769-.254 1.1-.437.33-.184.386-.21.463-.159.078.051.056.177.056.265v.898c.12-.199.519-.86.834-1.056.249-.153.336-.166.49-.17.185-.003.621.111.64.572.015.36-.25.504-.42.482-.135-.02-.231-.144-.312-.27-.08-.126-.21-.202-.338-.158-.129.044-.85.512-.891 1.178-.03.49 0 2.016 0 2.016 0 .232.088.321.192.383.103.063.481.066.588.081.107.015.103.04.103.074 0 .032 0 .048-.095.048H20.29c-.08 0-.113-.016-.113-.063 0-.066.106-.055.187-.066.08-.011.51.024.633-.192.09-.141.079-.368.079-.368l-.013-2.682c0-.217-.064-.249-.123-.283-.06-.034-.16-.053-.37.019-.198.065-.334.126-.372.043Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dior" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dior extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5f, create_fragment$5f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Directus.svelte generated by Svelte v3.23.2 */

        function create_fragment$5g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.187 13.909a1.74 1.74 0 0 1-.286-.092.657.657 0 0 1-.203-.139c.056-.488 0-.912.047-1.392.184-1.862 1.355-1.272 2.406-1.577.655-.184 1.31-.562 1.475-1.336a13.528 13.528 0 0 0-2.397-2.204c-2.85-2.028-6.574-2.84-9.958-2.277a5.113 5.113 0 0 0 2.238 2.074s-.917 0-1.703-.587c-.23.092-.692.274-.913.384a5.094 5.094 0 0 0 6.63.37c-.01.017-.185.285-.397 1.4-.47 2.38-1.826 2.195-3.504 1.596-3.485-1.264-5.403-.093-7.145-2.49-.507.286-.82.82-.82 1.402 0 .599.331 1.106.81 1.383.262-.348.38-.446.836-.446-.706.4-.79.75-1.094 1.718-.368 1.171-.212 2.37-1.936 2.683-.913.046-.894.664-1.226 1.586-.415 1.199-.968 1.678-2.047 2.812.443.535.904.6 1.374.406.968-.406 1.715-1.66 2.415-2.471.784-.904 2.665-.517 4.085-1.402.977-.599 1.457-1.41.811-2.784a2.72 2.72 0 0 1 .701 1.66c1.641-.213 3.836 1.788 5.836 2.12a3.574 3.574 0 0 1-.488-.82c-.23-.554-.304-1.06-.258-1.503.184 1.097 1.29 2.507 3.07 2.637.452.036.95-.019 1.466-.176.618-.184 1.19-.424 1.872-.295.507.093.977.35 1.272.784.443.645 1.41.784 1.844-.009-.977-2.554-3.67-2.72-4.813-3.015z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Directus" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Directus extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5g, create_fragment$5g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Discogs.svelte generated by Svelte v3.23.2 */

        function create_fragment$5h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.7422 11.982c0-5.6682 4.61-10.2782 10.2758-10.2782 1.8238 0 3.5372.48 5.0251 1.3175l.8135-1.4879C16.1768.588 14.2474.036 12.1908.0024h-.1944C5.4091.0144.072 5.3107 0 11.886v.1152c.0072 3.4389 1.4567 6.5345 3.7748 8.7207l1.1855-1.2814c-1.9798-1.8743-3.218-4.526-3.218-7.4585zM20.362 3.4053l-1.1543 1.2406c1.903 1.867 3.0885 4.4636 3.0885 7.3361 0 5.6658-4.61 10.2758-10.2758 10.2758-1.783 0-3.4605-.456-4.922-1.2575l-.8542 1.5214c1.7086.9384 3.6692 1.4735 5.7546 1.4759C18.6245 23.9976 24 18.6246 24 11.9988c-.0048-3.3717-1.399-6.4146-3.638-8.5935zM1.963 11.982c0 2.8701 1.2119 5.4619 3.146 7.2953l1.1808-1.2767c-1.591-1.5166-2.587-3.6524-2.587-6.0186 0-4.586 3.7293-8.3152 8.3152-8.3152 1.483 0 2.875.3912 4.082 1.0751l.8351-1.5262C15.481 2.395 13.8034 1.927 12.018 1.927 6.4746 1.9246 1.963 6.4362 1.963 11.982zm18.3702 0c0 4.586-3.7293 8.3152-8.3152 8.3152-1.4327 0-2.7837-.3648-3.962-1.0055l-.852 1.5166c1.4303.7823 3.0718 1.2287 4.814 1.2287 5.5434 0 10.055-4.5116 10.055-10.055 0-2.8077-1.1567-5.3467-3.0165-7.1729l-1.183 1.2743c1.519 1.507 2.4597 3.5924 2.4597 5.8986zm-1.9486 0c0 3.5109-2.8558 6.3642-6.3642 6.3642a6.3286 6.3286 0 01-3.0069-.756l-.8471 1.507c1.147.624 2.4597.9768 3.854.9768 4.4636 0 8.0944-3.6308 8.0944-8.0944 0-2.239-.9143-4.2692-2.3902-5.7378l-1.1783 1.267c1.1351 1.152 1.8383 2.731 1.8383 4.4732zm-14.4586 0c0 2.3014.9671 4.382 2.515 5.8578l1.1734-1.2695c-1.207-1.159-1.9606-2.786-1.9606-4.5883 0-3.5108 2.8557-6.3642 6.3642-6.3642 1.1423 0 2.215.3048 3.1437.8352l.8303-1.5167c-1.1759-.6647-2.5317-1.0487-3.974-1.0487-4.4612 0-8.092 3.6308-8.092 8.0944zm12.5292 0c0 2.4502-1.987 4.4372-4.4372 4.4372a4.4192 4.4192 0 01-2.0614-.5088l-.8351 1.4879a6.1135 6.1135 0 002.8965.727c3.3885 0 6.1434-2.7548 6.1434-6.1433 0-1.6774-.6767-3.1989-1.7686-4.3076l-1.1615 1.2503c.7559.7967 1.2239 1.8718 1.2239 3.0573zm-10.5806 0c0 1.7374.7247 3.3069 1.8886 4.4252L8.92 15.1569l.0144.0144c-.8351-.8063-1.3559-1.9366-1.3559-3.1869 0-2.4502 1.9846-4.4372 4.4372-4.4372.8087 0 1.5646.2184 2.2174.5976l.8207-1.4975a6.097 6.097 0 00-3.0381-.8063c-3.3837-.0048-6.141 2.7525-6.141 6.141zm6.681 0c0 .2952-.2424.5351-.5376.5351-.2952 0-.5375-.24-.5375-.5351 0-.2976.24-.5375.5375-.5375.2952 0 .5375.24.5375.5375zm-3.9405 0c0-1.879 1.5239-3.4029 3.4005-3.4029 1.879 0 3.4005 1.5215 3.4005 3.4029 0 1.879-1.5239 3.4005-3.4005 3.4005S8.6151 13.861 8.6151 11.982zm.1488 0c.0048 1.7974 1.4567 3.2493 3.2517 3.2517 1.795 0 3.254-1.4567 3.254-3.2517-.0023-1.7974-1.4566-3.2517-3.254-3.254-1.795 0-3.2517 1.4566-3.2517 3.254Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Discogs" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Discogs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5h, create_fragment$5h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Discord.svelte generated by Svelte v3.23.2 */

        function create_fragment$5i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.222 0c1.406 0 2.54 1.137 2.607 2.475V24l-2.677-2.273-1.47-1.338-1.604-1.398.67 2.205H3.71c-1.402 0-2.54-1.065-2.54-2.476V2.48C1.17 1.142 2.31.003 3.715.003h16.5L20.222 0zm-6.118 5.683h-.03l-.202.2c2.073.6 3.076 1.537 3.076 1.537-1.336-.668-2.54-1.002-3.744-1.137-.87-.135-1.74-.064-2.475 0h-.2c-.47 0-1.47.2-2.81.735-.467.203-.735.336-.735.336s1.002-1.002 3.21-1.537l-.135-.135s-1.672-.064-3.477 1.27c0 0-1.805 3.144-1.805 7.02 0 0 1 1.74 3.743 1.806 0 0 .4-.533.805-1.002-1.54-.468-2.14-1.404-2.14-1.404s.134.066.335.2h.06c.03 0 .044.015.06.03v.006c.016.016.03.03.06.03.33.136.66.27.93.4.466.202 1.065.403 1.8.536.93.135 1.996.2 3.21 0 .6-.135 1.2-.267 1.8-.535.39-.2.87-.4 1.397-.737 0 0-.6.936-2.205 1.404.33.466.795 1 .795 1 2.744-.06 3.81-1.8 3.87-1.726 0-3.87-1.815-7.02-1.815-7.02-1.635-1.214-3.165-1.26-3.435-1.26l.056-.02zm.168 4.413c.703 0 1.27.6 1.27 1.335 0 .74-.57 1.34-1.27 1.34-.7 0-1.27-.6-1.27-1.334.002-.74.573-1.338 1.27-1.338zm-4.543 0c.7 0 1.266.6 1.266 1.335 0 .74-.57 1.34-1.27 1.34-.7 0-1.27-.6-1.27-1.334 0-.74.57-1.338 1.27-1.338z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Discord" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Discord extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5i, create_fragment$5i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Discourse.svelte generated by Svelte v3.23.2 */

        function create_fragment$5j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.103 0C18.666 0 24 5.485 24 11.997c0 6.51-5.33 11.99-11.9 11.99L0 24V11.79C0 5.28 5.532 0 12.103 0zm.116 4.563c-2.593-.003-4.996 1.352-6.337 3.57-1.33 2.208-1.387 4.957-.148 7.22L4.4 19.61l4.794-1.074c2.745 1.225 5.965.676 8.136-1.39 2.17-2.054 2.86-5.228 1.737-7.997-1.135-2.778-3.84-4.59-6.84-4.585h-.008z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Discourse" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Discourse extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5j, create_fragment$5j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Discover.svelte generated by Svelte v3.23.2 */

        function create_fragment$5k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0A12 12 0 1 0 12 24A12 12 0 1 0 12 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Discover" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Discover extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5k, create_fragment$5k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Disqus.svelte generated by Svelte v3.23.2 */

        function create_fragment$5l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.438 23.654c-2.853 0-5.46-1.04-7.476-2.766L0 21.568l1.917-4.733C1.25 15.36.875 13.725.875 12 .875 5.564 6.05.346 12.44.346 18.82.346 24 5.564 24 12c0 6.438-5.176 11.654-11.562 11.654zm6.315-11.687v-.033c0-3.363-2.373-5.76-6.462-5.76H7.877V17.83h4.35c4.12 0 6.525-2.5 6.525-5.863h.004zm-6.415 2.998h-1.29V9.04h1.29c1.897 0 3.157 1.08 3.157 2.945v.03c0 1.884-1.26 2.95-3.157 2.95z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Disqus" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Disqus extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5l, create_fragment$5l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Disroot.svelte generated by Svelte v3.23.2 */

        function create_fragment$5m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.824 6.655q.092.128 0 .255-.093.032-.154 0l-.154-.223-.369-.095q-.092-.096 0-.255.092-.128.246-.096.277.16.43.415zm4.49 4.336q.031.095.031.159l-.154.223v-.35q.062-.032.123-.032zm-5.382-4.75l.153.255q-.123.223-.246.287l-.092.127q-.061-.159-.092-.318-.031 0-.062-.032l-.123.127-.553-.127q-.123-.16.061-.35.185-.192.43-.096l.524.127zm-1.138.67l-.154-.096.123-.064.03.16zm-2.461-1.626l-.184.223-.185-.223-.154-.032.492-.096.031.128zm3.814 12.208zm5.782-7.427q.123.096.031.478l-.184.542-.154.191-.031-.382q0-.128-.03-.223 0-.096-.032-.191l-.4.19q.031.065.031.16.031.096.062.128l-.43.032.03.127.092.096-.153.35q-.031.287-.154.32l-.123-.192-.37.095q-.122-.127-.122-.223l-.093-.127.154-.191q-.061-.128-.123-.128l-.154.064-.153.382q-.216 0-.277.064l.184.255.646.35.031.224q.123.032.185.095.092.064.123.096-.031.064-.062.16-.03.063-.123.127l-.277.191.031.255q-.246.096-.43.319l-.093.35q-.338 0-.43.064l.03.479-.092-.032q-.123-.192-.246-.096l.123.414q-.092 0-.154.032l-.061.064.123.223q.03.128.03.192-.184.159-.369.19-.153.033-.246.224l.031.382q-.092.224-.154.287-.307 0-.461.064l-.185.35-.153-.063q-.124-.032-.185 0l-.123.255q-.277 0-.4.127l-.246.224.062-.287q.092-.255-.093-.287l-.123.095-.03.16-.308.191-.03.35h-.585l-.123.224q-.062.191-.308.287-.246.095-.861.095t-.769.064q-.154 0-.277.16-.092.159-.215.223l-.492.159-.154.287-.215.16q-.154.095-.492.095l-.308.16-.461.19-.339-.031q-.184-.096-.43-.096h-.554l-.185-.128-.369.064-.184.255-.277-.191-.215-.223-.492-.032-.185-.16.277-.35.369-.51v-.35l.43-.479v-.542q0-.255.093-.446l.338.096q.123-.128.123-.192-.184-.159-.338-.414l-.308-.446-.369-.478-.246-.447-.277-.446-.215-.542-.461-.51-1.692-2.486-.308-.542-.307-.606-.246-.159q-.277-.35-.462-.765l-.092-.383-.277-.127-.953.191q-.339 0-.738.128l-.646.255-.77.095-.43.16q-.277.064-.43-.064L1.23 8.6l-.338.128-.277-.096q0-.319-.061-.383l-.277-.382Q.092 7.739 0 7.707l.03-.159h.308q-.03-.095-.03-.223v-.16l.307.128q.154-.095.185-.16l.123-.254.246.032.184-.542-.03-.287.154.095.153.16q.154-.064.185-.128l.277-.35.276.032-.092-.223-.184-.224-.277-.095q.184-.287.8-.415l.984-.095.338-.223.8-.16 1.23-.064.43-.095q.247-.096.493-.032l.492-.032q.492-.127.707-.064l.4.032.554.032.83.16.738.063.523-.223q.185 0 .4.255l.308.223h.646l.215.255-.03.16.184.51.123-.064.277-.319.307.478-.369-.127q-.215 0-.246.318l.308.064.123.16.184-.064q.154-.064.308.064.184.095.246.223l.184.255h.4q0-.096.03-.128.032-.064.062-.095l.062.318h.123l.092-.095.093.16.092-.256q.4 0 .461-.064 0-.095-.061-.159l-.123-.16q0-.159.246-.127l.43.128.308-.032.184.16.062.127q-.277-.064-.37.032-.06.063-.03.223l.215.19q0 .224.216.479l.123-.127.03-.255.124.159h.522q.154 0 .246.35l.093.32.123.095.154-.16.492.16.092-.16.154-.063q.123-.096.154-.16v-.159l-.062-.16.43.128q.124-.127.154-.191-.061-.16-.123-.16l-.307-.063v-.16l.092-.223.092-.191q.154.095.185.16l.154.222.215-.031.215-.032.77.669.215-.032.215.287.185.096q-.093.127 0 .286l.215-.095h.215l.185.319.184.318q.246 0 .37.064l.122.574.339.191.276.096q0 .16-.061.255l.061.319.093.19-.031.224.123-.064q.123-.16.185-.191l.123-.064zM16.18 5.35q.092.095 0 .286-.031.064-.185.096-.092-.096 0-.287.03-.064.185-.095zm6.305 5.928q.092.096 0 .255l-.154.064-.03-.223q0-.095.03-.127.062-.032.154.032zm-1.292-1.561q.061.063.061.318-.123.064-.246.032-.153-.095-.061-.287.061-.16.246-.063zm-8.704-4.24l-.185.35.092-.254.093-.096zm4.244 12.304l-.123-.191.123-.096q.154.032.123.223l-.123.064zm5.137-4.75q-.185-.127-.246-.254l.184.127.062.128zM9.566 18.705l.153-.159.154-.096-.307.255zM22.79 10.45l-.092.19-.03.097-.031-.224.153-.063zm.154 1.562l-.061.286.061-.286zm-2.184-3.507l.093.128-.123.032-.123-.096.153-.064zm-5.505 7.491l-.123.096.123-.096zM14.61 5.253l-.03.16.03-.16zm6.551 3.538l-.061.16.061-.16zm-.123 5.196l.062.095-.093.064.031-.16zm-5.905-8.543l-.062.096.062-.096zm1.66 11.635l-.06.127.06-.127zm-6.92-6.822l-.123.128.123-.128zm-.184 9.149l-.031.16.03-.16zm9.32-12.464l.06.096-.153-.064.092-.032zm-5.014 8.67l-.031.128.03-.127zm7.105-6.47l-.031.127.03-.127zm-.216 1.498l-.061.096.061-.096zm.4 3.952l-.092.064.092-.064zM1.692 6.624l-.031.159.03-.16zm20.607 5.323l-.123.064.123-.064zm-.4-.223l-.184.032.184-.032zm-6.49 6.821l-.03.096.03-.096zm6.214-6.152v-.16.16zm1.507-2.136q-.031.064-.031.128 0-.096.03-.128zm-1.23 3.411zM1.506 6.018l-.03.127.03-.127zm17.84 11.507zm-.339-8.734l-.123.032.123-.032zm-.492-1.912l-.061.095.061-.095zM10.92 5.062l-.092.032.092-.032zm3.076 1.275l-.031.127.03-.127zm-.43-.032l-.062.064.061-.064zM9.595 19.183l-.03.127.03-.127zm11.442-8.67zm0 0zm0 0zm0 0zm0 0zm0 0zm0 0zm0 0zm-5.352 5.323zm7.013-3.539zm-2-1.083l-.06-.064.06.064zm-8.55 2.9zm9.843-1.275zm-9.228-7.012zm-.707.191zm0-.287zm3.968.478zm-2.891-.095l-.062-.064.062.064zm6.49 3.283zm2.89 0zm-4.92 7.81zm4.92-6.918zm-10.98 9.563zm1.507-14.854zm-.184 0zm7.843 3.92zm2.307 1.244q0-.255-.093-.415-.061-.159-.215-.286l-.03.414.215.096q.03.095 0 .159l.123.032zm-2.4-.765l-.06-.064.06.064zm1.23 1.434l-.153-.032-.184-.287.061-.255-.277.192.154.19.03.097-.368.159.246.032q.061.064.123.095.092.032.123.032l.246-.223zm-.614-.574l-.123-.095-.216-.064-.092-.16-.123.128-.092.223.246.096q.184 0 .277.095l.123-.223zM15.84 6.783l-.123-.064-.184-.095q-.123 0-.123.063l.03.192.216.127.184-.223zm3.691 6.79l.062-.383q0-.51-.37-1.084-.307-.574-.8-.924-.4-.383-1.106-.67l-1.23-.541-.462-.287-.677-.255-.707-.223-1.138-.255-.37-.064q-.276 0-.43.064-.123.031-.092.223l.369.733q.277.51.523.701l.277.191v.192l.307.382.03.255q.124.096.185.096.154.095.4.478l.339.414.522.765.462.829.215.637-.061.415.123.191-.123.191q-.093.096 0 .192l.215-.064.369-.16q.154 0 .523-.19l.677-.32.953-.382q.584-.255.83-.51l.123-.319q0-.223.062-.319z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Disroot" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Disroot extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5m, create_fragment$5m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Django.svelte generated by Svelte v3.23.2 */

        function create_fragment$5n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.146 0h3.924v18.166c-2.013.382-3.491.535-5.096.535-4.791 0-7.288-2.166-7.288-6.32 0-4.002 2.65-6.6 6.753-6.6.637 0 1.121.05 1.707.203zm0 9.143a3.894 3.894 0 00-1.325-.204c-1.988 0-3.134 1.223-3.134 3.365 0 2.09 1.096 3.236 3.109 3.236.433 0 .79-.025 1.35-.102V9.142zM21.314 6.06v9.098c0 3.134-.229 4.638-.917 5.937-.637 1.249-1.478 2.039-3.211 2.905l-3.644-1.733c1.733-.815 2.574-1.53 3.109-2.625.561-1.121.739-2.421.739-5.835V6.059h3.924zM17.39.021h3.924v4.026H17.39z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Django" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Django extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5n, create_fragment$5n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dlna.svelte generated by Svelte v3.23.2 */

        function create_fragment$5o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.254,12.667H13.019c-1.051,0-2.1,0.489-2.692,1.266v-0.017c-0.591,0.816-1.544,1.353-2.629,1.353 c-1.796,0-3.249-1.458-3.249-3.251c0-1.795,1.454-3.251,3.249-3.251c1.085,0,2.039,0.536,2.629,1.353v-0.013 c0.592,0.776,1.641,1.273,2.692,1.273h10.129c0.186-0.005,0.873-0.095,0.848-0.981c-0.884-5.086-5.879-8.987-11.923-8.987 c-3.721,0-7.047,1.48-9.262,3.803c-0.356,0.527,0.014,0.689,0.35,0.734h6.608c1.05,0,2.1-0.498,2.691-1.277V4.69 c0.591-0.817,1.546-1.355,2.63-1.355c1.795,0,3.249,1.456,3.249,3.251c0,1.793-1.454,3.252-3.249,3.252 c-1.084,0-2.039-0.537-2.63-1.355v0.019c-0.591-0.779-1.641-1.266-2.691-1.266h-7.22l0.028,0.003c0,0-1.068-0.06-1.719,0.859 C0.361,8.9,0,10.621,0,12.002c0,1.388,0.198,2.649,0.867,3.923c0.564,0.908,1.71,0.849,1.71,0.849L2.535,16.78h7.233 c1.05,0,2.1-0.49,2.691-1.268v0.019c0.591-0.817,1.546-1.355,2.63-1.355c1.795,0,3.249,1.458,3.249,3.251 c0,1.795-1.454,3.251-3.249,3.251c-1.084,0-2.039-0.537-2.63-1.354v0.018c-0.591-0.779-1.641-1.277-2.691-1.277H3.164 c-0.328,0.042-0.698,0.198-0.379,0.699c2.216,2.337,5.555,3.824,9.288,3.824c6.054,0,11.056-3.911,11.926-9.009 C23.995,12.866,23.51,12.702,23.254,12.667");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DLNA" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dlna extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5o, create_fragment$5o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Docker.svelte generated by Svelte v3.23.2 */

        function create_fragment$5p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.983 11.078h2.119a.186.186 0 00.186-.185V9.006a.186.186 0 00-.186-.186h-2.119a.185.185 0 00-.185.185v1.888c0 .102.083.185.185.185m-2.954-5.43h2.118a.186.186 0 00.186-.186V3.574a.186.186 0 00-.186-.185h-2.118a.185.185 0 00-.185.185v1.888c0 .102.082.185.185.185m0 2.716h2.118a.187.187 0 00.186-.186V6.29a.186.186 0 00-.186-.185h-2.118a.185.185 0 00-.185.185v1.887c0 .102.082.185.185.186m-2.93 0h2.12a.186.186 0 00.184-.186V6.29a.185.185 0 00-.185-.185H8.1a.185.185 0 00-.185.185v1.887c0 .102.083.185.185.186m-2.964 0h2.119a.186.186 0 00.185-.186V6.29a.185.185 0 00-.185-.185H5.136a.186.186 0 00-.186.185v1.887c0 .102.084.185.186.186m5.893 2.715h2.118a.186.186 0 00.186-.185V9.006a.186.186 0 00-.186-.186h-2.118a.185.185 0 00-.185.185v1.888c0 .102.082.185.185.185m-2.93 0h2.12a.185.185 0 00.184-.185V9.006a.185.185 0 00-.184-.186h-2.12a.185.185 0 00-.184.185v1.888c0 .102.083.185.185.185m-2.964 0h2.119a.185.185 0 00.185-.185V9.006a.185.185 0 00-.184-.186h-2.12a.186.186 0 00-.186.186v1.887c0 .102.084.185.186.185m-2.92 0h2.12a.185.185 0 00.184-.185V9.006a.185.185 0 00-.184-.186h-2.12a.185.185 0 00-.184.185v1.888c0 .102.082.185.185.185M23.763 9.89c-.065-.051-.672-.51-1.954-.51-.338.001-.676.03-1.01.087-.248-1.7-1.653-2.53-1.716-2.566l-.344-.199-.226.327c-.284.438-.49.922-.612 1.43-.23.97-.09 1.882.403 2.661-.595.332-1.55.413-1.744.42H.751a.751.751 0 00-.75.748 11.376 11.376 0 00.692 4.062c.545 1.428 1.355 2.48 2.41 3.124 1.18.723 3.1 1.137 5.275 1.137.983.003 1.963-.086 2.93-.266a12.248 12.248 0 003.823-1.389c.98-.567 1.86-1.288 2.61-2.136 1.252-1.418 1.998-2.997 2.553-4.4h.221c1.372 0 2.215-.549 2.68-1.009.309-.293.55-.65.707-1.046l.098-.288Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Docker" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Docker extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5p, create_fragment$5p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Docusign.svelte generated by Svelte v3.23.2 */

        function create_fragment$5q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.517 3.31h4.966v6.621h3.31L12 16.552 6.207 9.931h3.31V3.31zM0 19.034h24v1.655H0v-1.655z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DocuSign" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Docusign extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5q, create_fragment$5q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dolby.svelte generated by Svelte v3.23.2 */

        function create_fragment$5r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24,20.352V3.648H0v16.704H24z M18.433,5.806h2.736v12.387h-2.736c-2.839,0-5.214-2.767-5.214-6.194S15.594,5.806,18.433,5.806z M2.831,5.806h2.736c2.839,0,5.214,2.767,5.214,6.194s-2.374,6.194-5.214,6.194H2.831V5.806z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dolby" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dolby extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5r, create_fragment$5r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Douban.svelte generated by Svelte v3.23.2 */

        function create_fragment$5s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.643.92v2.412h22.714V.92H.643zm1.974 4.926v9.42h18.764v-9.42H2.617zm2.72 2.408H18.69v4.605H5.338V8.254zm1.657 7.412l-2.512.938c1.037 1.461 1.87 2.825 2.512 4.091H0v2.385h24v-2.385h-6.678c.818-1.176 1.589-2.543 2.303-4.091l-2.73-.938a29.952 29.952 0 01-2.479 5.03h-4.75c-.786-1.962-1.677-3.641-2.672-5.03Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Douban" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Douban extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5s, create_fragment$5s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/DraugiemDotLv.svelte generated by Svelte v3.23.2 */

        function create_fragment$5t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.154 15.096c.048.346.14.562.278.693.144.13.34.18.596.21.304-.03.51-.1.65-.3.083-.13.14-.33.166-.61l.098-1.16v-.02l-.02-.18-.03-.17-.03-.175-.032-.165-.03-.174-.03-.165-.03-.164-.03-.17-.028-.16-.03-.15-.03-.15v-.138l-.03-.136-.03-.133-.015-.126-.03-.116-.03-.1-.03-.17L9.41 11l-.045-.18-.045-.18-.013-.197-.052-.203-.045-.21-.053-.21-.03-.21-.043-.215-.03-.213-.017-.242-.015-.21-.01-.228V8.1l.02-.21.035-.21.046-.21.06-.2.09-.194.106-.186.04-.074c-.2-.046-.44-.076-.69-.076-.11 0-.2 0-.3.016-2.33.2-1.38 2.836-.98 4.283.28 1 .6 3.34.72 4.06l-.02-.02zm.28-8.664c.09.03.178.045.283.045.48 0 .79-.255.96-.645.112-.27.162-.602.153-.945-.014-.3-.074-.572-.164-.81-.195-.467-.54-.782-1.066-.782-.074 0-.135 0-.18.016-.675.11-.976.78-.945 1.61.015.78.314 1.43.93 1.58l.028-.06zm1.244 3.843c.084.36.168.69.237.975.285 1.156.562 3.843.665 4.668.098.826.39.99.97 1.05.576-.044.867-.224.965-1.034.097-.81.38-3.498.657-4.653.068-.28.16-.61.24-.96.258-1.05.466-2.29 0-3.1-.296-.51-.865-.84-1.86-.84-1.007 0-1.583.33-1.872.86-.465.81-.256 2.06 0 3.11l-.002-.06zm1.858-4.28h.015c.9 0 1.33-.823 1.33-1.83s-.42-1.846-1.32-1.846h-.01c-.91 0-1.33.84-1.33 1.86s.42 1.84 1.337 1.84v-.03zm2.827.752c-.27 0-.51.03-.705.075l.045.075.105.194.075.2.06.21.045.21.03.21.015.23v.44l-.015.23v.167l-.03.217-.03.213-.044.213-.046.21-.044.21-.045.206-.05.2-.05.197-.06.195-.05.18-.03.18-.05.168-.018.09-.03.12-.03.137-.026.134-.015.132-.03.12v.03l-.03.15-.03.15-.02.163-.03.168-.02.165-.03.165-.02.18-.013.165-.014.18-.014.18-.017.18V14c.045.496.075.93.09 1.17.03.287.075.48.166.616.14.2.35.27.66.3.26-.03.45-.07.6-.22.15-.12.23-.343.29-.69.12-.703.44-3.05.71-4.053.4-1.45 1.35-4.083-.98-4.284-.105-.014-.195-.014-.3-.014l.012-.05zm.016-.27c.09 0 .18-.014.27-.03.6-.15.9-.794.93-1.56.03-.81-.27-1.5-.95-1.592-.06-.016-.12-.016-.18-.016-.54 0-.89.33-1.07.79-.09.24-.15.52-.15.82-.02.36.03.69.15.96.16.4.48.66.96.66l.03-.05zm2.79 1.2c4.29.062 6.8 2.702 3.96 6.305-1.32 1.667-3.53 3.317-6.49 4.368l-.42.15c-.29.09-.56.18-.83.256-.65.18-1.26.345-1.86.465-.65.14-1.28.23-1.88.3-.44.05-.86.08-1.25.08-2.747.08-4.818-.67-5.49-2.28-.81-1.92.823-4.59 4.11-6.63-2.43.97-6.84 3.29-7.036 6.57v.42c.016.35.074.68.195 1.04.707 2.22 4.01 3.27 8.21 2.9.407-.03.827-.073 1.25-.14.605-.082 1.23-.21 1.86-.36.605-.13 1.23-.31 1.865-.51l.42-.13c.285-.09.557-.18.826-.285 3.646-1.32 6.35-3.075 7.926-5.102.9-1.152 1.365-2.232 1.455-3.18v-.733c-.26-2.413-3.06-3.824-6.877-3.435l.044-.045z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Draugiem.lv" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class DraugiemDotLv extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5t, create_fragment$5t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dribbble.svelte generated by Svelte v3.23.2 */

        function create_fragment$5u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 24C5.385 24 0 18.615 0 12S5.385 0 12 0s12 5.385 12 12-5.385 12-12 12zm10.12-10.358c-.35-.11-3.17-.953-6.384-.438 1.34 3.684 1.887 6.684 1.992 7.308 2.3-1.555 3.936-4.02 4.395-6.87zm-6.115 7.808c-.153-.9-.75-4.032-2.19-7.77l-.066.02c-5.79 2.015-7.86 6.025-8.04 6.4 1.73 1.358 3.92 2.166 6.29 2.166 1.42 0 2.77-.29 4-.814zm-11.62-2.58c.232-.4 3.045-5.055 8.332-6.765.135-.045.27-.084.405-.12-.26-.585-.54-1.167-.832-1.74C7.17 11.775 2.206 11.71 1.756 11.7l-.004.312c0 2.633.998 5.037 2.634 6.855zm-2.42-8.955c.46.008 4.683.026 9.477-1.248-1.698-3.018-3.53-5.558-3.8-5.928-2.868 1.35-5.01 3.99-5.676 7.17zM9.6 2.052c.282.38 2.145 2.914 3.822 6 3.645-1.365 5.19-3.44 5.373-3.702-1.81-1.61-4.19-2.586-6.795-2.586-.825 0-1.63.1-2.4.285zm10.335 3.483c-.218.29-1.935 2.493-5.724 4.04.24.49.47.985.68 1.486.08.18.15.36.22.53 3.41-.43 6.8.26 7.14.33-.02-2.42-.88-4.64-2.31-6.38z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dribbble" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dribbble extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5u, create_fragment$5u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Drone.svelte generated by Svelte v3.23.2 */

        function create_fragment$5v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.07 13.633a3.07 3.07 0 1 1-6.14 0 3.07 3.07 0 0 1 6.14 0zM12 1.856c5.359.042 11.452 3.82 12 10.94h-7.256S15.809 8.863 12 8.889s-4.744 3.907-4.744 3.907H0C.353 5.802 6.344 1.812 12 1.856zM12.05 22.144c-3.996.011-7.729-3.005-9.259-7.674h4.465s.963 3.889 4.773 3.863 4.716-3.863 4.716-3.863h4.465c-.995 4.94-5.164 7.664-9.159 7.674z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Drone" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Drone extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5v, create_fragment$5v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Drooble.svelte generated by Svelte v3.23.2 */

        function create_fragment$5w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 11.986a7.599 7.599 0 0 0-7-7.559v7.574a5 5 0 0 1-10 0c0-3.604 3.707-6.022 7-4.583V.17C6.615-1.069 0 4.63 0 12c0 6.628 5.373 12 12 12 6.628 0 12-5.372 12-12v-.014m-14 .015a2 2 0 1 0 4 0 2 2 0 0 0-4 0m14-.015a7.599 7.599 0 0 0-7-7.559v7.574a5 5 0 0 1-10 0c0-3.604 3.707-6.022 7-4.583V.17C6.615-1.069 0 4.63 0 12c0 6.628 5.373 12 12 12 6.628 0 12-5.372 12-12v-.014m-14 .015a2 2 0 1 0 4 0 2 2 0 0 0-4 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Drooble" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Drooble extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5w, create_fragment$5w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dropbox.svelte generated by Svelte v3.23.2 */

        function create_fragment$5x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6 1.807L0 5.629l6 3.822 6.001-3.822L6 1.807zM18 1.807l-6 3.822 6 3.822 6-3.822-6-3.822zM0 13.274l6 3.822 6.001-3.822L6 9.452l-6 3.822zM18 9.452l-6 3.822 6 3.822 6-3.822-6-3.822zM6 18.371l6.001 3.822 6-3.822-6-3.822L6 18.371z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dropbox" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dropbox extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5x, create_fragment$5x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Drupal.svelte generated by Svelte v3.23.2 */

        function create_fragment$5y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.45 3.552C18.258 1.257 15.233.006 12 .006 5.431.006.007 5.428.007 12S5.43 23.994 12 23.994 23.995 18.572 23.995 12c0-3.233-1.251-6.258-3.546-8.448zM12 19.822c-3.65 0-6.57-2.92-6.57-6.57 0-3.025 2.085-5.111 3.858-6.884 1.252-1.252 2.4-2.4 2.712-3.755.313 1.252 1.46 2.399 2.712 3.65 1.773 1.774 3.859 3.86 3.859 6.884 0 3.65-2.92 6.571-6.571 6.675z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Drupal" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Drupal extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5y, create_fragment$5y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dsautomobiles.svelte generated by Svelte v3.23.2 */

        function create_fragment$5z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.201 0v15.865l9.473-7.377c.102-.077.259-.222.315-.412.049.16.164.277.204.315.686.648 3.802 3.612 4.639 6.148.169.51.264 1.024.264 1.528 0 .434-.095.877-.264 1.317-.38.994-1.226 2.055-2.086 2.96-.367.386-1.955 1.976-2.479 2.5a.903.903 0 0 0-.232.44 2.218 2.218 0 0 0-.041.419L11.99 24l9.47-7.378c.13-.095.339-.294.339-.555 0-.23-.175-.41-.226-.457-.686-.648-3.802-3.612-4.639-6.148a4.886 4.886 0 0 1-.264-1.529c0-.434.095-.876.264-1.316.381-.995 1.227-2.057 2.088-2.962.368-.387 1.955-1.975 2.479-2.499a.89.89 0 0 0 .232-.439c.03-.158.042-.307.042-.419l.004-.297-9.474 7.377c-.104.077-.26.221-.316.41-.057-.189-.214-.334-.315-.41zm.222.757c.53.36 1.117.755 1.858 1.35.7.563 1.469 1.228 2.217 1.997C7.667 5.305 8.56 6.625 8.56 7.92s-.894 2.615-2.063 3.817a24.382 24.382 0 0 1-2.217 1.996c-.741.596-1.305.99-1.835 1.35.606-.474 4.289-3.322 5.255-5.747.188-.473.298-.949.298-1.416 0-.467-.11-.943-.298-1.416C6.735 4.079 3.029 1.23 2.423.757zM21.535.99l-.008.011c-.73.586-4.298 3.766-5.063 5.621-.18.437-.298.876-.298 1.307 0 .474.08.956.247 1.435.858 2.458 4.077 5.355 4.616 5.836-.47-.365-.913-.776-1.571-1.38-.622-.57-1.24-1.243-1.904-2.023-1.038-1.217-1.95-2.555-1.95-3.868 0-1.196.855-2.414 1.973-3.524.69-.685 3.32-2.958 3.958-3.415zm-8.828 7.774c.468.37.962.812 1.62 1.416.62.57 1.24 1.244 1.903 2.023 1.038 1.218 1.95 2.555 1.95 3.868 0 1.196-.855 2.414-1.973 3.524-.689.684-3.334 2.97-3.975 3.43l.007-.012c.736-.59 4.317-3.782 5.081-5.635.18-.437.298-.876.298-1.307 0-.473-.08-.955-.247-1.435-.857-2.458-4.126-5.39-4.664-5.872Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DS Automobiles" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dsautomobiles extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5z, create_fragment$5z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dtube.svelte generated by Svelte v3.23.2 */

        function create_fragment$5A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.6 5.5a9.91 9.91 0 0 0-3.88-4.04A11.18 11.18 0 0 0 13.08.04H.18l6.91 4h5.99c1.94 0 3.41.62 4.42 1.88C18.5 7.17 19 9 19 11.43v1.27c-.01 2.34-.53 4.14-1.55 5.4-1.02 1.26-2.5 1.89-4.42 1.89H6.86L0 23.95h13.13c2.09 0 3.97-.49 5.63-1.44 1.66-.95 2.95-2.3 3.87-4.02S24 14.79 24 12.56v-1.1c0-2.22-.47-4.2-1.4-5.96zM.13 3.96v16.1L14.07 12z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DTube" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dtube extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5A, create_fragment$5A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Duckduckgo.svelte generated by Svelte v3.23.2 */

        function create_fragment$5B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm0 23C5.925 23 1 18.074 1 12S5.926 1 12 1s11 4.925 11 11-4.925 11-11 11zm10.219-11c0 4.805-3.317 8.833-7.786 9.925-.27-.521-.53-1.017-.749-1.438.645.249 1.93.718 2.208.615.376-.144.282-3.149-.14-3.245-.338-.075-1.632.837-2.141 1.209l.034.156c.078.397.144.993.03 1.247-.001.004-.002.01-.004.013a.218.218 0 0 1-.068.088c-.284.188-1.081.284-1.503.188a.516.516 0 0 1-.064-.02c-.694.396-2.01 1.109-2.25.971-.329-.188-.377-2.676-.329-3.288.035-.46 1.653.286 2.442.679.174-.163.602-.272.98-.31-.57-1.389-.99-2.977-.733-4.105 0 .002.002.002.002.002.356.248 2.73 1.05 3.91 1.027 1.18-.024 3.114-.743 2.903-1.323-.212-.58-2.135.51-4.142.324-1.486-.138-1.748-.804-1.42-1.29.414-.611 1.168.116 2.411-.256 1.245-.371 2.987-1.035 3.632-1.397 1.494-.833-.625-1.177-1.125-.947-.474.22-2.123.637-2.889.82.428-1.516-.603-4.149-1.757-5.3-.376-.376-.951-.612-1.603-.736-.25-.344-.654-.671-1.225-.977a5.772 5.772 0 0 0-3.595-.584l-.024.004-.034.004.004.002c-.148.028-.237.08-.357.098.148.016.705.276 1.057.418-.174.068-.412.108-.596.184a.828.828 0 0 0-.204.056c-.173.08-.303.375-.3.515.84-.086 2.082-.026 2.991.246-.644.09-1.235.258-1.661.482-.016.008-.03.018-.048.028-.054.02-.106.042-.152.066-1.367.72-1.971 2.405-1.611 4.424.323 1.824 1.665 8.088 2.29 11.064-3.973-1.4-6.822-5.186-6.822-9.639C1.781 6.356 6.356 1.781 12 1.781S22.219 6.356 22.219 12zM9.095 9.581a.758.758 0 1 0 0 1.516.758.758 0 0 0 0-1.516zm.338.702a.196.196 0 1 1 0-.392.196.196 0 0 1 0 .392zm4.724-1.043a.65.65 0 1 0 0 1.299.65.65 0 0 0 0-1.3zm.29.601a.168.168 0 1 1 0-.336.168.168 0 0 1 0 .336zM9.313 8.146s-.571-.26-1.125.09c-.554.348-.534.704-.534.704s-.294-.656.49-.978c.786-.32 1.17.184 1.17.184zm5.236-.052s-.41-.234-.73-.23c-.654.008-.831.296-.831.296s.11-.688.945-.55a.84.84 0 0 1 .616.484z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "DuckDuckGo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Duckduckgo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5B, create_fragment$5B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dunked.svelte generated by Svelte v3.23.2 */

        function create_fragment$5C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.791 0V19.766a4.18 4.18 0 004.182 4.12h4.18V4.122A4.18 4.18 0 0017.972 0H13.79zM6.326 14.93a4.479 4.479 0 00-4.478 4.37v.221a4.479 4.479 0 008.957 0v-.214a4.479 4.479 0 00-4.479-4.377Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dunked" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dunked extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5C, create_fragment$5C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Duolingo.svelte generated by Svelte v3.23.2 */

        function create_fragment$5D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.2 2.869a2.458 2.458 0 00-2.45 2.455v3.117l-3.672-.913h-.002a.864.864 0 00-.242-.026.864.864 0 00-.832.919 6.573 6.573 0 004.886 5.87A7.286 7.286 0 0012 20.18a7.286 7.286 0 007.106-5.888 6.573 6.573 0 004.892-5.871.864.864 0 00-.831-.92.864.864 0 00-.245.027l-3.673.913V5.324a2.458 2.458 0 00-2.45-2.455 2.845 2.845 0 00-.96.192c-1.87.797-3.114 1.188-3.831 1.2-.717-.012-1.962-.403-3.832-1.2a2.845 2.845 0 00-.975-.192zm8.135 1.408a.19.19 0 01.036 0c.065.008.127.05.176.127a1.95 1.95 0 01.07.143 1.95 1.95 0 01.037.088 1.95 1.95 0 01.035.092 1.95 1.95 0 01.029.094 1.95 1.95 0 01.025.093 1.95 1.95 0 01.019.096 1.95 1.95 0 01.015.097 1.95 1.95 0 01.01.093 1.95 1.95 0 01.005.102 1.95 1.95 0 010 .157 2.723 2.723 0 01.007 0l.473-.526a.248.248 0 01.01-.01.248.248 0 01.01-.009.248.248 0 01.012-.01.248.248 0 01.007-.006.248.248 0 01.012-.008.248.248 0 01.009-.006.248.248 0 01.011-.006.248.248 0 01.01-.005.248.248 0 01.011-.005.248.248 0 01.013-.005.248.248 0 01.01-.003.248.248 0 01.013-.004.248.248 0 01.013-.003.248.248 0 01.011-.002.248.248 0 01.016-.002.248.248 0 01.007 0 .248.248 0 01.02 0 .248.248 0 01.005 0 .248.248 0 01.017.002.248.248 0 01.01 0 .248.248 0 01.011.003.248.248 0 01.013.003.248.248 0 01.013.004.248.248 0 01.01.003.248.248 0 01.011.005.248.248 0 01.013.006.248.248 0 01.001 0 .248.248 0 01.004.002.248.248 0 01.016.01.248.248 0 01.008.004.248.248 0 01.012.008.248.248 0 01.01.01.248.248 0 01.007.005.248.248 0 01.011.011.248.248 0 01.007.008.248.248 0 01.006.007.248.248 0 01.01.014.248.248 0 01.003.005.248.248 0 01.01.017 1.95 1.95 0 01.06.121 1.95 1.95 0 01.04.088 1.95 1.95 0 01.035.094 1.95 1.95 0 01.03.088 1.95 1.95 0 01.025.097 1.95 1.95 0 01.021.094 1.95 1.95 0 01.016.098 1.95 1.95 0 01.016.132 2.723 2.723 0 01.192.119 2.723 2.723 0 01.11.079 2.723 2.723 0 01.11.083 2.723 2.723 0 01.1.088 2.723 2.723 0 01.101.095 2.723 2.723 0 01.092.098 2.723 2.723 0 01.09.103 2.723 2.723 0 01.082.108 2.723 2.723 0 01.08.112 2.723 2.723 0 01.07.114 2.723 2.723 0 01.068.12 2.723 2.723 0 01.059.122 2.723 2.723 0 01.054.123 2.723 2.723 0 01.048.131 2.723 2.723 0 01.042.126 2.723 2.723 0 01.034.135 2.723 2.723 0 01.03.13 2.723 2.723 0 01.02.135 2.723 2.723 0 01.016.136 2.723 2.723 0 01.011.225v1.758a2.715 2.715 0 01-.011.237 2.715 2.715 0 01-.017.132 2.715 2.715 0 01-.02.135 2.715 2.715 0 01-.03.136 2.715 2.715 0 01-.033.127 2.715 2.715 0 01-.044.134 2.715 2.715 0 01-.045.123 2.715 2.715 0 01-.057.126 2.715 2.715 0 01-.058.12 2.715 2.715 0 01-.068.118 2.715 2.715 0 01-.07.116 2.715 2.715 0 01-.078.109 2.715 2.715 0 01-.084.11 2.715 2.715 0 01-.09.102 2.715 2.715 0 01-.09.097 2.715 2.715 0 01-.104.096 2.715 2.715 0 01-.098.087 2.715 2.715 0 01-.107.081 2.715 2.715 0 01-.113.081 2.715 2.715 0 01-.113.07 2.715 2.715 0 01-.12.068 2.715 2.715 0 01-.119.057 2.715 2.715 0 01-.127.058 2.715 2.715 0 01-.123.045 2.715 2.715 0 01-.133.044 2.715 2.715 0 01-.132.033 2.715 2.715 0 01-.13.03 2.715 2.715 0 01-.14.02 2.715 2.715 0 01-.129.017 2.715 2.715 0 01-.237.011h-.21a2.714 2.714 0 01-.244-.012 2.714 2.714 0 01-.134-.017 2.714 2.714 0 01-.133-.02 2.714 2.714 0 01-.136-.032 2.714 2.714 0 01-.127-.032 2.714 2.714 0 01-.131-.045 2.714 2.714 0 01-.126-.046 2.714 2.714 0 01-.124-.056 2.714 2.714 0 01-.121-.059 2.714 2.714 0 01-.118-.068 2.714 2.714 0 01-.116-.071 2.714 2.714 0 01-.107-.079 2.714 2.714 0 01-.11-.083 2.714 2.714 0 01-.102-.09 2.714 2.714 0 01-.098-.092 2.714 2.714 0 01-.094-.102 2.714 2.714 0 01-.088-.1 2.714 2.714 0 01-.081-.109 2.714 2.714 0 01-.08-.11 2.714 2.714 0 01-.068-.115 2.714 2.714 0 01-.028-.048v.98a1.032 1.032 0 01-.004.073 1.032 1.032 0 01-.004.05 1.032 1.032 0 01-.008.054 1.032 1.032 0 010 .002 1.032 1.032 0 01-.009.042 1.032 1.032 0 01-.016.063 1.032 1.032 0 01-.01.034 1.032 1.032 0 01-.024.065 1.032 1.032 0 01-.012.031 1.032 1.032 0 01-.033.067 1.032 1.032 0 01-.018.034 1.032 1.032 0 01-.025.04 1.032 1.032 0 01-.032.047 1.032 1.032 0 01-.028.037 1.032 1.032 0 01-.034.042 1.032 1.032 0 01-.035.038 1.032 1.032 0 01-.037.036 1.032 1.032 0 01-.04.034 1.032 1.032 0 01-.038.031 1.032 1.032 0 01-.044.032 1.032 1.032 0 01-.041.027 1.032 1.032 0 01-.046.026 1.032 1.032 0 01-.045.024 1.032 1.032 0 01-.047.02 1.032 1.032 0 01-.05.02 1.032 1.032 0 01-.047.016 1.032 1.032 0 01-.049.014 1.032 1.032 0 01-.052.012 1.032 1.032 0 01-.05.009 1.032 1.032 0 01-.052.006 1.032 1.032 0 01-.049.004 1.032 1.032 0 01-.053 0 1.032 1.032 0 01-.052 0 1.032 1.032 0 01-.05-.004 1.032 1.032 0 01-.051-.006 1.032 1.032 0 01-.052-.01 1.032 1.032 0 01-.05-.011 1.032 1.032 0 01-.05-.014 1.032 1.032 0 01-.047-.016 1.032 1.032 0 01-.05-.02 1.032 1.032 0 01-.046-.02 1.032 1.032 0 01-.046-.024 1.032 1.032 0 01-.046-.026 1.032 1.032 0 01-.04-.027 1.032 1.032 0 01-.045-.032 1.032 1.032 0 01-.038-.031 1.032 1.032 0 01-.04-.034 1.032 1.032 0 01-.036-.036 1.032 1.032 0 01-.035-.038 1.032 1.032 0 01-.035-.042 1.032 1.032 0 01-.028-.037 1.032 1.032 0 01-.032-.047 1.032 1.032 0 01-.018-.03 1.032 1.032 0 01-.046-.087 1.032 1.032 0 01-.003-.006 1.032 1.032 0 01-.034-.084 1.032 1.032 0 01-.005-.015 1.032 1.032 0 01-.022-.073 1.032 1.032 0 01-.008-.032 1.032 1.032 0 01-.011-.06 1.032 1.032 0 01-.007-.043 1.032 1.032 0 01-.003-.034 1.032 1.032 0 01-.002-.02 1.032 1.032 0 010-.002 1.032 1.032 0 01-.003-.068v-.979a2.714 2.714 0 01-.026.046 2.714 2.714 0 01-.07.116 2.714 2.714 0 01-.077.107 2.714 2.714 0 01-.084.113 2.714 2.714 0 01-.086.097 2.714 2.714 0 01-.095.104 2.714 2.714 0 01-.1.092 2.714 2.714 0 01-.1.09 2.714 2.714 0 01-.11.083 2.714 2.714 0 01-.108.079 2.714 2.714 0 01-.114.07 2.714 2.714 0 01-.12.069 2.714 2.714 0 01-.12.058 2.714 2.714 0 01-.124.056 2.714 2.714 0 01-.129.047 2.714 2.714 0 01-.128.044 2.714 2.714 0 01-.127.032 2.714 2.714 0 01-.137.032 2.714 2.714 0 01-.13.02 2.714 2.714 0 01-.137.017 2.714 2.714 0 01-.245.012h-.21a2.715 2.715 0 01-.237-.012 2.715 2.715 0 01-.13-.016 2.715 2.715 0 01-.14-.02 2.715 2.715 0 01-.128-.03 2.715 2.715 0 01-.133-.033 2.715 2.715 0 01-.132-.044 2.715 2.715 0 01-.123-.045 2.715 2.715 0 01-.128-.058 2.715 2.715 0 01-.12-.057 2.715 2.715 0 01-.119-.069 2.715 2.715 0 01-.113-.069 2.715 2.715 0 01-.113-.08 2.715 2.715 0 01-.106-.082 2.715 2.715 0 01-.099-.087 2.715 2.715 0 01-.103-.096 2.715 2.715 0 01-.09-.097 2.715 2.715 0 01-.09-.102 2.715 2.715 0 01-.084-.11 2.715 2.715 0 01-.078-.109 2.715 2.715 0 01-.071-.116 2.715 2.715 0 01-.068-.118 2.715 2.715 0 01-.058-.12 2.715 2.715 0 01-.056-.126 2.715 2.715 0 01-.045-.124 2.715 2.715 0 01-.045-.133 2.715 2.715 0 01-.032-.127 2.715 2.715 0 01-.03-.136 2.715 2.715 0 01-.02-.135 2.715 2.715 0 01-.017-.132 2.715 2.715 0 01-.012-.238V8.17a2.723 2.723 0 01.012-.227 2.723 2.723 0 01.016-.135 2.723 2.723 0 01.02-.132 2.723 2.723 0 01.03-.136 2.723 2.723 0 01.035-.13 2.723 2.723 0 01.042-.129 2.723 2.723 0 01.047-.128 2.723 2.723 0 01.056-.126 2.723 2.723 0 01.058-.119 2.723 2.723 0 01.07-.123 2.723 2.723 0 01.069-.111 2.723 2.723 0 01.081-.114 2.723 2.723 0 01.08-.106 2.723 2.723 0 01.091-.103 2.723 2.723 0 01.093-.1 2.723 2.723 0 01.097-.09 2.723 2.723 0 01.106-.093 2.723 2.723 0 01.104-.08 2.723 2.723 0 01.114-.08 2.723 2.723 0 01.192-.119 1.95 1.95 0 01.016-.133 1.95 1.95 0 01.015-.094 1.95 1.95 0 01.021-.096 1.95 1.95 0 01.025-.093 1.95 1.95 0 01.03-.094 1.95 1.95 0 01.034-.091 1.95 1.95 0 01.04-.089 1.95 1.95 0 01.058-.118.248.248 0 01.01-.018.248.248 0 01.004-.005.248.248 0 01.01-.013.248.248 0 01.006-.007.248.248 0 01.007-.008.248.248 0 01.01-.011.248.248 0 01.007-.006.248.248 0 01.011-.009.248.248 0 01.012-.008.248.248 0 01.008-.005.248.248 0 01.016-.009.248.248 0 01.006-.003.248.248 0 01.013-.006.248.248 0 01.011-.005.248.248 0 01.01-.003.248.248 0 01.013-.004.248.248 0 01.013-.003.248.248 0 01.011-.002.248.248 0 01.01-.001.248.248 0 01.017-.002.248.248 0 01.006 0 .248.248 0 01.019 0 .248.248 0 01.007 0 .248.248 0 01.016.003.248.248 0 01.01.002.248.248 0 01.014.003.248.248 0 01.012.004.248.248 0 01.011.003.248.248 0 01.013.005.248.248 0 01.01.005.248.248 0 01.01.005.248.248 0 01.012.006.248.248 0 01.009.006.248.248 0 01.012.008.248.248 0 01.007.005.248.248 0 01.012.01.248.248 0 01.01.01.248.248 0 01.01.01v-.005l.471.523a2.723 2.723 0 01.01 0 1.95 1.95 0 01-.001-.155 1.95 1.95 0 01.006-.103 1.95 1.95 0 01.009-.093 1.95 1.95 0 01.015-.097 1.95 1.95 0 01.02-.095 1.95 1.95 0 01.024-.094 1.95 1.95 0 01.03-.094 1.95 1.95 0 01.034-.092 1.95 1.95 0 01.036-.087 1.95 1.95 0 01.07-.142c.085-.135.214-.163.32-.083.015.011.03.025.044.04l1.78 1.94v-.002a1.926 1.926 0 00.092.089 1.926 1.926 0 00.071.064 1.926 1.926 0 00.076.06 1.926 1.926 0 00.078.057 1.926 1.926 0 00.08.05 1.926 1.926 0 00.084.05 1.926 1.926 0 00.085.043 1.926 1.926 0 00.087.04 1.926 1.926 0 00.092.036 1.926 1.926 0 00.089.03 1.926 1.926 0 00.095.026 1.926 1.926 0 00.091.022 1.926 1.926 0 00.097.016 1.926 1.926 0 00.094.013 1.926 1.926 0 00.096.006 1.926 1.926 0 00.096.003 1.926 1.926 0 00.097-.003 1.926 1.926 0 00.096-.006 1.926 1.926 0 00.094-.013 1.926 1.926 0 00.097-.016 1.926 1.926 0 00.09-.022 1.926 1.926 0 00.096-.025 1.926 1.926 0 00.089-.031 1.926 1.926 0 00.092-.036 1.926 1.926 0 00.087-.04 1.926 1.926 0 00.085-.043 1.926 1.926 0 00.084-.05 1.926 1.926 0 00.08-.05 1.926 1.926 0 00.078-.058 1.926 1.926 0 00.075-.059 1.926 1.926 0 00.072-.064 1.926 1.926 0 00.092-.089V6.3l1.78-1.94a.294.294 0 01.044-.04.212.212 0 01.107-.044zm.02.168c-.813.742-1.419 1.714-2.325 2.358-.932.557-2.21.194-2.823-.67-.512-.56-1.007-1.17-1.563-1.667-.324.258-.164.745-.332 1.078-.208.206-.42-.181-.526-.316-.084-.17-.317-.283-.386-.048-.163.278-.04.74-.416.857-.919.59-1.277 1.757-1.149 2.792-.03.982-.066 2.116.698 2.859 1.106 1.18 3.29 1.048 4.174-.32.058-.14.145-.301.261-.42v-.42a1.048 1.048 0 010-.006l-.35-.059a.052.052 0 01-.042-.058 1.446 1.446 0 011.418-1.194 1.446 1.446 0 011.43 1.194.052.052 0 01-.043.058l-.35.06a1.03 1.03 0 010 .001v.38l.007.001c.584 1.534 2.728 2.067 4.017 1.128a2.694 2.694 0 001.106-2.535c.014-1.033.13-2.231-.653-3.042-.216-.27-.604-.399-.762-.697-.055-.25-.041-.588-.286-.736-.31.129-.381.556-.728.634-.2-.38-.055-.897-.377-1.213zM8.422 6.468a1.995 1.995 0 011.994 1.995v1.2a1.996 1.996 0 01-.245.913 27.203 27.203 0 00-.815-.328.95.95 0 00.035-.037.95.95 0 00.016-.018.95.95 0 00.048-.058.95.95 0 00.012-.017.95.95 0 00.04-.06.95.95 0 00.013-.02.95.95 0 00.032-.062.95.95 0 00.011-.022.95.95 0 00.024-.06.95.95 0 00.012-.031.95.95 0 00.017-.058.95.95 0 00.009-.033.95.95 0 00.01-.054.95.95 0 00.007-.043.95.95 0 00.007-.082V8.56a.95.95 0 00-.004-.08.95.95 0 00-.005-.047.95.95 0 00-.007-.047.95.95 0 00-.01-.047.95.95 0 00-.012-.045.95.95 0 00-.016-.047.95.95 0 00-.015-.042.95.95 0 00-.02-.047.95.95 0 00-.02-.04.95.95 0 00-.025-.042.95.95 0 00-.024-.04A.95.95 0 009.464 8a.95.95 0 00-.03-.039.95.95 0 00-.03-.034.95.95 0 00-.033-.036.95.95 0 00-.035-.032.95.95 0 00-.035-.031.95.95 0 00-.038-.029.95.95 0 00-.039-.028.95.95 0 00-.04-.025.95.95 0 00-.04-.023.95.95 0 00-.043-.02.95.95 0 00-.046-.02.95.95 0 00-.043-.017.95.95 0 00-.043-.014.95.95 0 00-.049-.012.95.95 0 00-.046-.01.95.95 0 00-.045-.008.95.95 0 00-.048-.006.95.95 0 00-.08-.004.96.96 0 00-.06.004.96.96 0 00-.05.005.96.96 0 00-.043.007.96.96 0 00-.051.01.96.96 0 00-.045.012.96.96 0 00-.047.014.96.96 0 00-.046.018.96.96 0 00-.055.023.6.6 0 01.04.04.6.6 0 01.022.024.6.6 0 01.017.02.6.6 0 01.018.025.6.6 0 01.017.026.6.6 0 01.013.023.6.6 0 01.016.028.6.6 0 01.011.026.6.6 0 01.013.03.6.6 0 01.008.025.6.6 0 01.01.031.6.6 0 01.007.03.6.6 0 01.006.029.6.6 0 01.004.037.6.6 0 01.002.021.6.6 0 010 .041.6.6 0 010 .02.6.6 0 01-.002.03.6.6 0 01-.003.031.6.6 0 01-.004.024.6.6 0 01-.007.034.6.6 0 01-.008.028.6.6 0 01-.01.03.6.6 0 01-.012.03.6.6 0 01-.01.024.6.6 0 01-.016.03.6.6 0 01-.013.024.6.6 0 01-.02.03.6.6 0 01-.012.018.6.6 0 01-.026.032.6.6 0 01-.013.015.6.6 0 01-.02.02.6.6 0 01-.024.024.6.6 0 01-.02.015.6.6 0 01-.025.021.6.6 0 01-.027.018.6.6 0 01-.024.015.6.6 0 01-.023.012.6.6 0 01-.03.016.6.6 0 01-.034.013.6.6 0 01-.02.008.6.6 0 01-.038.011.6.6 0 01-.02.006.6.6 0 01-.034.006.6.6 0 01-.026.005.6.6 0 01-.04.003.6.6 0 01-.018.002.6.6 0 01-.035 0 .6.6 0 01-.028 0 .6.6 0 01-.031-.005.6.6 0 01-.026-.003.6.6 0 01-.056-.012v.859a.95.95 0 00.004.048.95.95 0 00.007.062 15.08 15.08 0 00-1.336-.332v-.908a1.987 1.987 0 011.996-1.995zm7.156 0a1.995 1.995 0 011.996 1.995v.909c-.425.085-.87.195-1.336.333a.95.95 0 00.007-.066.95.95 0 00.004-.046V8.56a.95.95 0 00-.004-.081.95.95 0 00-.006-.046.95.95 0 00-.007-.047.95.95 0 00-.01-.046.95.95 0 00-.012-.048.95.95 0 00-.014-.041.95.95 0 00-.018-.048.95.95 0 00-.019-.043.95.95 0 00-.02-.042.95.95 0 00-.024-.04.95.95 0 00-.025-.042.95.95 0 00-.028-.039.95.95 0 00-.028-.036.95.95 0 00-.032-.037.95.95 0 00-.032-.035.95.95 0 00-.036-.033.95.95 0 00-.033-.03.95.95 0 00-.04-.03.95.95 0 00-.037-.026.95.95 0 00-.042-.026.95.95 0 00-.04-.023.95.95 0 00-.042-.02.95.95 0 00-.046-.02.95.95 0 00-.04-.016.95.95 0 00-.048-.015.95.95 0 00-.046-.012.95.95 0 00-.047-.01.95.95 0 00-.047-.007.95.95 0 00-.045-.006.95.95 0 00-.081-.004.96.96 0 00-.057.004.96.96 0 00-.045.004.96.96 0 00-.052.008.96.96 0 00-.044.008.96.96 0 00-.046.012.96.96 0 00-.047.014.96.96 0 00-.043.016.96.96 0 00-.045.018.96.96 0 00-.045.023.96.96 0 00-.048.024.6.6 0 01.04.045.6.6 0 01.033.05.6.6 0 01.03.052.6.6 0 01.024.055.6.6 0 01.018.057.6.6 0 01.005.025.6.6 0 01.007.034.6.6 0 01.005.042.6.6 0 01.002.017.6.6 0 010 .001.6.6 0 010 .06.6.6 0 01-.005.06.6.6 0 01-.004.022.6.6 0 01-.007.036.6.6 0 01-.017.057.6.6 0 010 .001.6.6 0 01-.023.055.6.6 0 01-.028.053.6.6 0 01-.033.05.6.6 0 01-.039.046.6.6 0 01-.042.042.6.6 0 01-.046.038.6.6 0 01-.05.033.6.6 0 01-.001 0 .6.6 0 01-.053.027.6.6 0 01-.055.023.6.6 0 01-.058.016.6.6 0 01-.032.006.6.6 0 01-.087.01.6.6 0 01-.06 0v.838a.95.95 0 00.007.084.95.95 0 00.007.042.95.95 0 00.01.054.95.95 0 00.01.032.95.95 0 00.016.06.95.95 0 00.011.029.95.95 0 00.025.06.95.95 0 00.01.022.95.95 0 00.034.063.95.95 0 00.011.018.95.95 0 00.041.063.95.95 0 00.01.012.95.95 0 00.052.063.95.95 0 00.008.008.95.95 0 00.043.046c-.268.103-.54.213-.815.33a1.996 1.996 0 01-.247-.916v-1.2a1.986 1.986 0 011.995-1.995zM12.035 9.32c-.038 0-.077 0-.115.003a1.35 1.35 0 00-1.224 1.042l1.301.198.688-.108.603-.138c-.13-.565-.68-.983-1.253-.997zm.86 1.184c-.084-.005-.009.142-.024.214.01.453.025.912-.024 1.362-.143.554-.892.836-1.35.477-.337-.235-.425-.684-.371-1.068-.001-.32-.02-.641.014-.96-.161-.086-.06.106-.086.194.01.609-.049 1.226.045 1.829.186.598 1.027.855 1.5.43.31-.25.399-.685.35-1.067-.004-.466.012-.933-.009-1.399a.142.142 0 00-.046-.012zm-.144.046a.399.399 0 00-.066.013 1.568 1.568 0 01-.112.036l-.03.008a1.3 1.3 0 01-.085.02l-.028.006a1.681 1.681 0 01-.27.03l-.035.002a3.33 3.33 0 01-.148 0h-.016a2.6 2.6 0 01-.171-.013c-.006 0-.012 0-.017-.002a5.958 5.958 0 01-.279-.038l-.072-.01-.182-.033a.794.754 0 00-.035.223v1.087a.803.763 0 00.795.755.794.754 0 00.794-.755V10.79a.795.755 0 00-.043-.243zm.04 1.367a.794.794 0 01-.005.035.794.794 0 00.004-.035zm-.013.082a.794.794 0 01-.007.03.794.794 0 00.007-.03zm-.02.075a.794.794 0 01-.01.03.794.794 0 00.01-.03zm-.028.079a.794.794 0 01-.01.022.794.794 0 00.01-.022zm-.035.071a.794.794 0 01-.012.02.794.794 0 00.012-.02zm-.044.07a.794.794 0 01-.01.014.794.794 0 00.01-.014zm-.05.064a.794.794 0 01-.01.01.794.794 0 00.01-.01zm-.053.056a.794.794 0 01-.006.006.794.794 0 00.006-.006zm-3.066 2.62a.132.132 0 01.014 0h1.823a.14.14 0 01.14.181c-.14.42-.573.709-1.056.712a1.085 1.085 0 01-1.047-.712.132.132 0 01.126-.182zm3.203 0a.144.144 0 01.005 0h1.824a.14.14 0 01.14.179c-.14.418-.572.71-1.06.71a1.085 1.085 0 01-1.043-.708.144.144 0 01.134-.18zm-1.6 1.548a.14.14 0 01.005 0h1.824a.14.14 0 01.139.182c-.135.423-.568.711-1.056.711a1.085 1.085 0 01-1.046-.711.14.14 0 01.135-.182zM4.45 18.236a.931.931 0 00-.66.299v-.002a.944.944 0 00.041 1.325l1.088 1.02a.938.938 0 001.284-1.367l-1.088-1.019a.931.931 0 00-.665-.256zm15.115 0a.931.931 0 00-.678.256l-1.089 1.019a.938.938 0 001.285 1.368l1.087-1.019a.944.944 0 00.042-1.325.931.931 0 00-.647-.299z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Duolingo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Duolingo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5D, create_fragment$5D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/DynamicsThreeHundredSixtyFive.svelte generated by Svelte v3.23.2 */

        function create_fragment$5E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.59 7.41l4.94 3.54L4.59 24zm0-7.41v6.36l9.53 5.29 4.59-3.52zm0 24l14.82-8.47v-6.7Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dynamics 365" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class DynamicsThreeHundredSixtyFive extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5E, create_fragment$5E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Dynatrace.svelte generated by Svelte v3.23.2 */

        function create_fragment$5F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.373 0c-.31.006-.93.09-1.521.654C6.98 1.478 2.628 5.61.88 7.27.09 8.024.16 8.865.16 8.934v.377c.067-.292.187-.499.427-.825.496-.616 1.3-.788 1.627-.822a64.233 64.233 0 0 1 .002 0 64.233 64.233 0 0 1 6.527-.549c4.335-.137 7.197.225 7.197.225l6.084-5.793s-3.188-.6-6.82-1.027A93.394 93.394 0 0 0 9.566.006c-.021 0-.09-.008-.193-.006zm13.56 2.508l-6.066 5.79s.222 2.88-.137 7.198c-.189 2.45-.584 4.866-.875 6.494-.052.326-.256 1.114-.925 1.594-.29.198-.491.295-.748.363 1.546-.51 1.091-7.047 1.091-7.047-4.335.137-7.214-.222-7.214-.222L1.975 22.47s3.222.634 6.855 1.045c2.056.24 4.833.429 5.227.463.023 0 .045-.007.068-.012-.013.003-.022.009-.035.012.138 0 .259.015.379.015.085 0 .925.105 1.713-.648 1.748-1.663 6.083-5.81 6.94-6.633.788-.754.72-1.594.72-1.68a81.84 81.84 0 0 0-.207-5.654c-.24-3.65-.701-6.871-.701-6.871zM3.856 8.305C2.125 8.307.348 8.513.16 9.326c.017 1.216.05 3.137.205 5.28.24 3.65.703 6.886.703 6.886l6.082-5.79c-.017.017-.239-2.88.121-7.198H7.27s-1.684-.202-3.415-.2z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Dynatrace" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Dynatrace extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5F, create_fragment$5F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ea.svelte generated by Svelte v3.23.2 */

        function create_fragment$5G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.635 6.162l-5.928 9.377H4.24l1.508-2.3h4.024l1.474-2.335H2.264L.79 13.239h2.156L0 17.84h12.072l4.563-7.259 1.652 2.66h-1.401l-1.473 2.299h4.347l1.473 2.3H24zm-11.461.107L3.7 8.604l9.52-.035 1.474-2.3z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "EA" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ea extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5G, create_fragment$5G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Easyjet.svelte generated by Svelte v3.23.2 */

        function create_fragment$5H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.964 12.225H1.463c-.066 0-.099.029-.099.086 0 .138.075.269.225.391.15.122.311.184.484.184.102 0 .216-.02.34-.059.125-.039.227-.088.308-.145.072-.051.13-.077.172-.077.055 0 .11.034.163.102a.34.34 0 0 1 .08.211c0 .153-.096.301-.287.444-.339.253-.729.38-1.172.38-.447 0-.822-.13-1.124-.39a1.6 1.6 0 0 1-.364-.463 1.611 1.611 0 0 1-.189-.76c0-.358.109-.679.326-.964.187-.247.426-.431.715-.552.217-.092.452-.137.706-.137.404 0 .748.115 1.031.345.143.115.258.251.345.409.1.179.15.353.15.524a.617.617 0 0 1-.086.34c-.057.087-.132.131-.223.131zm-1.418-.597h.323c.136 0 .204-.063.204-.188a.4.4 0 0 0-.099-.281.335.335 0 0 0-.259-.109.328.328 0 0 0-.281.141.445.445 0 0 0-.096.265c0 .064.015.109.046.134.031.025.085.038.162.038zm3.693-1.156c.37 0 .684.094.942.281.136.1.232.215.286.343.054.129.081.306.081.532l-.006.476c0 .33.023.544.07.642.023.047.046.077.067.089a.41.41 0 0 0 .134.035c.068.011.102.055.102.134a.54.54 0 0 1-.123.319 1.024 1.024 0 0 1-.318.278.975.975 0 0 1-.501.141.659.659 0 0 1-.53-.23c-.045-.055-.086-.083-.125-.083-.043 0-.099.027-.169.08a1.202 1.202 0 0 1-.725.233c-.279 0-.505-.06-.677-.179a.842.842 0 0 1-.268-.308.85.85 0 0 1-.099-.398c0-.221.089-.417.268-.588.279-.268.696-.403 1.252-.406.123 0 .201-.012.233-.037.032-.024.048-.081.048-.171 0-.226-.023-.389-.07-.49-.047-.101-.123-.152-.23-.152a.27.27 0 0 0-.171.058c-.05.038-.112.109-.187.211-.19.27-.387.406-.594.406a.356.356 0 0 1-.255-.093.318.318 0 0 1-.099-.243c0-.102.041-.204.123-.307.082-.102.193-.192.334-.268a2.557 2.557 0 0 1 1.207-.305zm-.214 1.849a.317.317 0 0 0-.244.115.397.397 0 0 0-.104.275c0 .102.024.185.073.248a.234.234 0 0 0 .195.094c.17 0 .255-.144.255-.431 0-.117-.012-.196-.037-.236-.024-.042-.07-.063-.138-.065zm3.33-1.846c.106 0 .28.023.521.07a.685.685 0 0 0 .121.013.797.797 0 0 0 .211-.057.357.357 0 0 1 .125-.029c.098 0 .197.063.297.188.081.1.147.21.198.329a.81.81 0 0 1 .077.31.28.28 0 0 1-.089.212.315.315 0 0 1-.224.085.375.375 0 0 1-.2-.054 2.06 2.06 0 0 1-.283-.24c-.136-.132-.249-.198-.339-.198a.214.214 0 0 0-.155.065.21.21 0 0 0-.065.155c0 .104.1.202.3.294.36.162.636.339.827.53.162.162.243.36.243.594 0 .296-.13.543-.39.741a1.307 1.307 0 0 1-.821.259c-.083 0-.234-.014-.453-.041a7.38 7.38 0 0 0-.348-.035.505.505 0 0 0-.096.01 1.244 1.244 0 0 1-.134.013.342.342 0 0 1-.236-.077 1.107 1.107 0 0 1-.243-.372 1.111 1.111 0 0 1-.112-.436c0-.196.077-.294.23-.294.06 0 .114.02.164.059.05.039.155.144.315.315.087.094.16.158.217.193a.348.348 0 0 0 .185.053c.07 0 .127-.019.169-.056a.187.187 0 0 0 .064-.149c0-.096-.082-.183-.246-.262-.343-.168-.59-.342-.742-.521a.928.928 0 0 1-.228-.62c0-.253.078-.472.233-.655.221-.261.524-.392.907-.392zm4.994 1.571l-.422 1.159a4.405 4.405 0 0 1-.315.704 2.064 2.064 0 0 1-.359.465c-.277.264-.61.396-1 .396-.315 0-.571-.083-.766-.249a.613.613 0 0 1-.227-.489c0-.164.053-.302.158-.414a.512.512 0 0 1 .388-.168c.153 0 .277.051.37.153a.418.418 0 0 1 .089.125c.015.036.037.116.067.24.023.094.077.141.16.141a.204.204 0 0 0 .166-.086.336.336 0 0 0 .067-.214c0-.1-.055-.267-.166-.501l-.77-1.638a1.506 1.506 0 0 0-.182-.319.908.908 0 0 0-.268-.156.234.234 0 0 1-.11-.101.274.274 0 0 1-.046-.145c0-.189.188-.318.565-.386.251-.045.538-.067.859-.067.226 0 .403.023.533.07.175.062.262.167.262.316a.35.35 0 0 1-.073.188.332.332 0 0 0-.07.182c0 .051.011.104.034.16.022.055.07.149.142.281.081.149.152.224.214.224.066 0 .134-.065.204-.196a.802.802 0 0 0 .105-.378.357.357 0 0 0-.08-.24c-.081-.096-.121-.178-.121-.246 0-.109.072-.195.217-.26.145-.065.338-.097.581-.097.451 0 .677.109.677.326a.263.263 0 0 1-.069.19.658.658 0 0 1-.251.136.49.49 0 0 0-.243.192c-.091.139-.199.374-.32.702zm3.189-2.816c.238 0 .481.021.728.064.202.034.347.081.434.141.087.06.131.142.131.246a.23.23 0 0 1-.048.155.715.715 0 0 1-.208.136c-.123.064-.194.139-.212.225s-.035.421-.05 1.004c-.006.564-.012.903-.018 1.016a2.208 2.208 0 0 1-.04.329c-.062.311-.186.555-.374.731-.153.145-.35.259-.591.342a2.316 2.316 0 0 1-.76.125 2.81 2.81 0 0 1-.711-.093 2.26 2.26 0 0 1-.618-.255.975.975 0 0 1-.345-.362.985.985 0 0 1-.128-.487c0-.213.067-.389.201-.529a.672.672 0 0 1 .505-.209c.198 0 .366.059.505.176a.56.56 0 0 1 .208.441c0 .045-.013.119-.038.224a.38.38 0 0 0-.006.07.21.21 0 0 0 .073.166.285.285 0 0 0 .195.064.4.4 0 0 0 .345-.192c.087-.128.131-.296.131-.505l-.003-.291-.006-.782a20.503 20.503 0 0 0-.043-.838.438.438 0 0 0-.072-.206.28.28 0 0 0-.085-.083 1.304 1.304 0 0 0-.2-.061.217.217 0 0 1-.131-.089.259.259 0 0 1-.054-.156c0-.115.045-.207.136-.276.09-.069.238-.125.442-.168a3.3 3.3 0 0 1 .707-.073zm4.155 2.995h-1.501c-.066 0-.099.029-.099.086 0 .138.075.269.225.391.15.122.311.184.484.184.102 0 .216-.02.34-.059.125-.039.227-.088.308-.145.072-.051.13-.077.172-.077.055 0 .11.034.163.102a.34.34 0 0 1 .08.211c0 .153-.096.301-.287.444-.339.253-.729.38-1.172.38-.447 0-.822-.13-1.124-.39a1.616 1.616 0 0 1-.552-1.223c0-.358.109-.679.326-.964.187-.247.426-.431.715-.552.217-.092.452-.137.706-.137.404 0 .748.115 1.032.345.143.115.258.251.345.409.1.179.15.353.15.524a.617.617 0 0 1-.086.34c-.059.087-.133.131-.225.131zm-1.418-.597h.323c.136 0 .204-.063.204-.188a.4.4 0 0 0-.099-.281.335.335 0 0 0-.259-.109.328.328 0 0 0-.281.141.445.445 0 0 0-.096.265c0 .064.015.109.046.134.032.025.086.038.162.038zm3.761-.316v1.079c0 .128.031.232.094.313a.292.292 0 0 0 .241.121c.083 0 .193-.038.329-.115a.187.187 0 0 1 .096-.029c.051 0 .098.031.141.093a.352.352 0 0 1 .063.202c0 .132-.072.259-.217.38-.302.258-.669.386-1.099.386-.341 0-.614-.096-.821-.289-.207-.193-.31-.447-.31-.762v-1.475c0-.049-.006-.079-.018-.091-.012-.012-.042-.018-.091-.018h-.329c-.062 0-.101-.01-.118-.03-.017-.02-.026-.068-.026-.142v-.141c.002-.064.027-.111.073-.141l1.463-.92a.286.286 0 0 1 .134-.029h.259c.053 0 .089.012.107.037.018.024.027.073.027.145v.431c0 .064.01.105.03.125.02.019.063.029.129.029h.591c.079 0 .13.014.153.043.023.029.035.09.035.184v.188c0 .102-.015.173-.045.212-.03.039-.084.059-.163.059h-.578c-.06 0-.1.011-.121.032-.019.023-.029.063-.029.123z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "easyJet" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Easyjet extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5H, create_fragment$5H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ebay.svelte generated by Svelte v3.23.2 */

        function create_fragment$5I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.056 12.13V7.21h1.2v3.026c.59-.703 1.402-.906 2.202-.906 1.34 0 2.828.904 2.828 2.855 0 .233-.015.457-.06.668.24-.953 1.274-1.305 2.896-1.344.51-.018 1.095-.018 1.56-.018v-.135c0-.885-.556-1.244-1.53-1.244-.72 0-1.245.3-1.305.81h-1.275c.136-1.29 1.5-1.62 2.686-1.62 1.064 0 1.995.27 2.415 1.02l-.436-.84h1.41l2.055 4.125 2.055-4.126H24l-3.72 7.305h-1.346l1.07-2.04-2.33-4.38c.13.255.2.555.2.93v2.46c0 .346.01.69.04 1.005H16.8c-.03-.255-.046-.51-.046-.765-.603.734-1.32.96-2.32.96-1.48 0-2.272-.78-2.272-1.695 0-.15.015-.284.037-.405-.3 1.246-1.36 2.086-2.767 2.086-.87 0-1.694-.315-2.2-.93 0 .24-.015.494-.04.734h-1.18c.02-.39.04-.855.04-1.245v-1.05h-4.83c.065 1.095.818 1.74 1.853 1.74.718 0 1.355-.3 1.568-.93h1.24c-.24 1.29-1.61 1.725-2.79 1.725C.95 15.007 0 13.82 0 12.23c0-1.754.982-2.91 3.116-2.91 1.688 0 2.93.886 2.94 2.806v.005zm9.137.183c-1.095.034-1.77.233-1.77.95 0 .465.36.97 1.305.97 1.26 0 1.935-.69 1.935-1.814v-.13c-.45 0-.99.006-1.484.022h.012zm-6.06 1.875c1.11 0 1.876-.806 1.876-2.02s-.768-2.02-1.893-2.02c-1.11 0-1.89.806-1.89 2.02s.765 2.02 1.875 2.02h.03zm-4.35-2.514c-.044-1.125-.854-1.546-1.725-1.546-.944 0-1.694.474-1.815 1.546h3.54z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "eBay" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ebay extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5I, create_fragment$5I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Eclipseide.svelte generated by Svelte v3.23.2 */

        function create_fragment$5J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.108.024c-.274.004-.604.012-.737.023C6.727.361 3.468 2.518 1.578 5.86A12.53 12.53 0 0 0 .02 11.112c-.04.517-.02 1.745.035 2.208.306 2.682 1.353 5.06 3.07 6.965 1.962 2.173 4.586 3.467 7.437 3.663.42.032 1.043.04 1.02.012a2.404 2.404 0 0 0-.338-.074c-1.674-.33-3.388-1.13-4.777-2.232a12.345 12.345 0 0 1-2.45-2.636A12.388 12.388 0 0 1 1.883 12.5a12.414 12.414 0 0 1 .56-4.275c.785-2.522 2.37-4.726 4.475-6.228A11.074 11.074 0 0 1 11.155.122l.443-.098zm1.475.51C10.645.65 8.806 1.299 7.3 2.4 5.425 3.77 3.994 5.644 3.22 7.746c-.145.397-.282.82-.282.879 0 .012 3.828.024 10.31.024 8.464 0 10.316-.008 10.316-.036 0-.047-.153-.525-.283-.878-.153-.42-.576-1.31-.82-1.722-.4-.683-.91-1.373-1.474-1.992-1.651-1.82-3.593-2.934-5.82-3.334-.785-.141-1.8-.2-2.585-.153zM23.83 9.97c-.02 0-4.792 0-10.609.004l-10.574.008-.011.059c-.036.16-.134 1.082-.134 1.243 0 .028 1.785.032 10.747.032H24v-.075c0-.102-.07-.792-.106-1.055-.02-.16-.04-.216-.063-.216zm-10.573 2.636c-9.37-.004-10.731 0-10.743.035-.02.04.024.557.075.973.02.157.035.298.035.314 0 .027 2.137.035 10.625.035h10.624l.024-.188c.043-.326.102-.97.094-1.067l-.008-.094zm.003 2.718c-8.883 0-10.322.004-10.322.035 0 .02.054.208.121.42a11.123 11.123 0 0 0 2.071 3.741c.282.342.945 1.036 1.228 1.287 1.568 1.4 3.247 2.216 5.18 2.53.605.094.887.113 1.75.11.91 0 1.298-.032 2.024-.177 2.11-.416 3.914-1.451 5.53-3.17 1.267-1.348 2.106-2.76 2.628-4.411l.117-.365z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Eclipse IDE" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Eclipseide extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5J, create_fragment$5J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Eclipsemosquitto.svelte generated by Svelte v3.23.2 */

        function create_fragment$5K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.353 11.424c0 2.637.964 5.105 2.636 7.013l-1.007.903A11.968 11.968 0 010 11.424C0 8.065 1.38 5.029 3.604 2.85l.05.045L6.637 5.57a7.942 7.942 0 00-1.433 9.963l1.03-.923a6.59 6.59 0 011.416-8.132l1.02.915.909.814.941.844a2.778 2.778 0 00-1.311 2.367c0 1.23.795 2.273 1.899 2.646l.095 1.297a4.024 4.024 0 01-2.483-6.27l-.9-.809-.004-.003a5.233 5.233 0 00.205 6.546l-3.023 2.71a9.291 9.291 0 01-.21-11.97L3.777 4.66a10.599 10.599 0 00-2.407 6.14l-.006.008.005.004c-.011.203-.017.406-.017.612zm11.54 2.639a2.793 2.793 0 00.588-5.013l.941-.844.908-.814 1.021-.915a6.59 6.59 0 011.417 8.132l1.029.923a7.942 7.942 0 00-1.433-9.963l2.981-2.673.05-.045A11.964 11.964 0 0124 11.424c0 2.98-1.095 5.769-2.982 7.916l-1.007-.903a10.61 10.61 0 002.619-7.625l.005-.004-.006-.007a10.598 10.598 0 00-2.407-6.141l-1.008.904a9.291 9.291 0 01-.211 11.97l-3.023-2.71a5.233 5.233 0 00.205-6.546l-.004.003-.9.808a4.024 4.024 0 01-2.482 6.27zM12 21.149l.335-4.571.271-3.712a1.56 1.56 0 10-1.212 0l.271 3.712Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Eclipse Mosquitto" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Eclipsemosquitto extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5K, create_fragment$5K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Egnyte.svelte generated by Svelte v3.23.2 */

        function create_fragment$5L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.742 11.214l-.447-.78a.062.062 0 0 0-.082-.022l-2.014 1.162-1.986-1.167a.062.062 0 0 0-.082.021l-.458.78a.062.062 0 0 0 .021.083l2.009 1.178v2.363c0 .033.027.06.06.06h.89a.06.06 0 0 0 .06-.06v-2.374l2.007-1.162c.028-.016.039-.055.022-.082zm-3.863 1.583c-.017-.028-.055-.038-.088-.022l-1.342.797c-.027.016-.038.054-.022.087l.191.327c.016.028.055.039.087.022l1.343-.797c.027-.016.038-.054.022-.087zm1.533-3.69l-.442.006c-.016 0-.027.011-.027.033l.005 1.62c0 .017.011.028.033.028h.442c.016 0 .027-.01.027-.033l-.005-1.62a.035.035 0 0 0-.033-.033zm2.554 4.377l-1.413-.791c-.017-.005-.033-.005-.039.011l-.218.387c-.005.017-.005.033.011.039l1.413.79c.017.006.033.006.039-.01l.218-.388c.01-.01.005-.032-.011-.038zm-14.057.12h-1.9v-.584h1.687a.075.075 0 0 0 .076-.076v-.65a.075.075 0 0 0-.076-.076H1.01v-.556h1.87a.075.075 0 0 0 .077-.077v-.715a.075.075 0 0 0-.077-.076H.076A.075.075 0 0 0 0 10.87v3.526c0 .043.033.076.076.076H2.91a.075.075 0 0 0 .076-.076v-.715a.078.078 0 0 0-.076-.077zm3.967-1.282H5.26v.748h.725v.442c0 .005 0 .01-.005.01-.153.099-.338.148-.584.148-.584 0-.999-.426-.999-1.02v-.012c0-.562.41-1.01.939-1.01.338 0 .584.11.83.301.032.027.081.022.103-.01l.502-.607a.078.078 0 0 0-.01-.109c-.377-.305-.82-.485-1.436-.485-1.14 0-1.98.84-1.98 1.915v.01c0 1.114.856 1.905 2.002 1.905a2.49 2.49 0 0 0 1.572-.545.088.088 0 0 0 .027-.06v-1.545c.005-.043-.027-.076-.071-.076zm4.044-1.533h-.857a.075.075 0 0 0-.077.076v1.866l-1.49-1.915a.088.088 0 0 0-.06-.027h-.834a.075.075 0 0 0-.077.076v3.525c0 .044.033.077.077.077h.856a.075.075 0 0 0 .077-.077v-1.943l1.55 1.992a.088.088 0 0 0 .06.028h.78a.075.075 0 0 0 .076-.077v-3.525c-.005-.038-.043-.076-.081-.076zm9.571 0H17.42a.075.075 0 0 0-.077.076v.742c0 .044.033.076.077.076h1.026v2.713c0 .043.032.076.076.076h.868a.075.075 0 0 0 .076-.076v-2.702c0-.005.006-.01.011-.01h1.015a.075.075 0 0 0 .077-.077v-.742a.078.078 0 0 0-.077-.076zm3.433 2.815h-1.9v-.584h1.692a.075.075 0 0 0 .077-.076v-.65a.075.075 0 0 0-.077-.076h-1.691v-.556h1.871a.075.075 0 0 0 .077-.077v-.715a.075.075 0 0 0-.077-.076h-2.805a.075.075 0 0 0-.076.076v3.526c0 .043.033.076.076.076h2.833a.075.075 0 0 0 .076-.076v-.715a.075.075 0 0 0-.076-.077Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Egnyte" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Egnyte extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5L, create_fragment$5L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Eljueves.svelte generated by Svelte v3.23.2 */

        function create_fragment$5M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.2718 14.6722a1.1453 1.9092 0 01-1.1452 1.9092 1.1453 1.9092 0 01-1.1453-1.9092 1.1453 1.9092 0 011.1453-1.9092 1.1453 1.9092 0 011.1452 1.9092zm-3.8177 0a1.1453 1.9092 0 01-1.1453 1.9092 1.1453 1.9092 0 01-1.1453-1.9092 1.1453 1.9092 0 011.1453-1.9092 1.1453 1.9092 0 011.1453 1.9092zM15.3655 2.073a1.7777 1.8407 0 00-1.775 1.7777c-2.5466.4872-4.0567 2.173-4.5407 5.0449a7.6188 6.8373 0 00-.515.2363C7.4214 8.107 6.3713 7.614 5.3837 7.6602c-.9043.0424-1.7564.537-2.5553 1.4772a1.7777 1.8407 0 00-1.0508-.3581A1.7777 1.8407 0 000 10.6199a1.7777 1.8407 0 001.7777 1.8406A1.7777 1.8407 0 003.5554 10.62a1.7777 1.8407 0 00-.2063-.8567c1.054-.4705 2.054-.1291 2.9993 1.0152a7.6188 6.8373 0 00-1.7135 4.311 7.6188 6.8373 0 007.6192 6.8377 7.6188 6.8373 0 007.618-6.8376 7.6188 6.8373 0 00-2.0675-4.676c.5393-1.5004 1.4322-2.1684 2.6768-2.0058a1.7777 1.8407 0 00-.0368.3716 1.7777 1.8407 0 001.7777 1.8406A1.7777 1.8407 0 0024 8.7793a1.7777 1.8407 0 00-1.7777-1.842 1.7777 1.8407 0 00-1.3446.6382c-.8736-.4223-1.6929-.6431-2.4514-.6395-1.2713.006-2.3817.6123-3.33 1.8146a7.6188 6.8373 0 00-2.547-.485c-.0668-1.6928.333-2.8897 1.1997-3.5897a1.7777 1.8407 0 001.6165 1.0781 1.7777 1.8407 0 001.7777-1.8405 1.7777 1.8407 0 00-1.7776-1.8406zm-3.1114 8.6044c3.615 0 6.5453 2.2229 6.5453 4.9642 0 2.7415-2.9302 4.963-6.5453 4.963-3.615 0-6.5465-2.2215-6.5465-4.963 0-2.7413 2.9315-4.9642 6.5465-4.9642z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "El Jueves" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Eljueves extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5M, create_fragment$5M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Elastic.svelte generated by Svelte v3.23.2 */

        function create_fragment$5N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.32 16.3152l-3.9463-.923-1.048-2.0031 5.1615-4.522c1.5305.5798 2.551 2.0476 2.551 3.6903 0 1.6906-1.1146 3.2278-2.7182 3.7578m-2.9667 4.666c-.6147 0-1.217-.2062-1.709-.5845l.7801-4.0648 3.5847.8388c.1139.3094.1714.6396.1714.9835 0 1.559-1.268 2.827-2.8272 2.827m-2.6292-.5844a5.902 5.902 0 0 1-4.8925 2.593c-3.2651 0-5.9215-2.6564-5.9215-5.921 0-.4008.039-.7966.1156-1.1785l5.1509-4.6553 5.2557 2.3956 1.1637 2.2235zM.9636 11.443c0-1.69 1.1145-3.2266 2.7175-3.7577l3.9374.93.9242 1.9747-5.0336 4.5498C1.9815 14.558.9636 13.0885.9636 11.4429m5.6847-8.424a2.8325 2.8325 0 0 1 1.718.5798l-.7861 4.079-3.5876-.847c-.114-.3095-.1714-.6397-.1714-.984 0-1.5592 1.268-2.8278 2.8271-2.8278m2.653.5875c1.1044-1.6082 2.9212-2.5674 4.8692-2.5674 3.2562 0 5.9049 2.6492 5.9049 5.9055 0 .3983-.0373.7789-.1139 1.1607l-5.2819 4.628-5.235-2.3865-1.022-2.1822zm14.662 8.9622c0-2.0052-1.2432-3.7582-3.114-4.4403a6.6742 6.6742 0 0 0 .125-1.2855c0-3.7274-3.0325-6.76-6.7605-6.76-2.1775 0-4.2033 1.0443-5.4761 2.804a3.575 3.575 0 0 0-2.1963-.7516c-1.9786 0-3.5883 1.6097-3.5883 3.5882 0 .4373.078.8557.2244 1.2505-1.86.6712-3.139 2.4653-3.139 4.4579 0 2.0155 1.2493 3.7763 3.1287 4.4536a6.8545 6.8545 0 0 0-.1233 1.285c0 3.7189 3.0252 6.7441 6.7441 6.7441 2.183 0 4.2075-1.0485 5.4732-2.8155.63.4947 1.4004.7662 2.1994.7662 1.9784 0 3.5881-1.609 3.5881-3.5876 0-.4373-.078-.8562-.2243-1.2512 1.86-.6706 3.139-2.4652 3.139-4.4578");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Elastic" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Elastic extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5N, create_fragment$5N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Elasticcloud.svelte generated by Svelte v3.23.2 */

        function create_fragment$5O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.62 19.46a11.95 11.95 0 0 1-9.32 4.48 11.95 11.95 0 0 1-9.32-4.48A11.95 11.95 0 0 1 13.3 15c3.76 0 7.14 1.76 9.32 4.48zM10.32 12c0-1.52 1.25-2.99 2.62-2.99h.42c3.91 0 7.1-1.76 9.29-4.48A12.05 12.05 0 0 0 13.3.05a11.95 11.95 0 0 0-9.32 4.48A11.83 11.83 0 0 0 1.35 12c0 1.94.45 3.76 1.29 5.38a14.3 14.3 0 0 1 7.85-4.45c-.09-.3-.18-.63-.18-.93z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Elastic Cloud" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Elasticcloud extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5O, create_fragment$5O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Elasticstack.svelte generated by Svelte v3.23.2 */

        function create_fragment$5P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.07 2.45A2.4 2.4 0 0 1 2.45.07h19.1a2.4 2.4 0 0 1 2.38 2.38v4.78H.07zM.07 16.77H11.4v7.16H2.45a2.38 2.38 0 0 1-2.38-2.32zM12.6 16.77h11.33v4.78c0 1.28-1.1 2.38-2.38 2.38H12.6zM.07 8.42h23.86v7.16H.07z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Elastic Stack" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Elasticstack extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5P, create_fragment$5P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Elasticsearch.svelte generated by Svelte v3.23.2 */

        function create_fragment$5Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.27 15.58H1.61A11.81 11.81 0 0 1 1.07 12c0-1.25.18-2.45.54-3.58h15.86A3.57 3.57 0 0 1 21.05 12a3.56 3.56 0 0 1-3.55 3.58zm-.45 1.2H2.05a11.8 11.8 0 0 0 4.39 5.18A11.8 11.8 0 0 0 13 23.93c4.15 0 7.78-2.12 9.93-5.3a6.08 6.08 0 0 0-4.35-1.86zm7.76-9.55c1.7 0 3.25-.72 4.35-1.85A11.96 11.96 0 0 0 2.05 7.23h8.74z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Elasticsearch" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Elasticsearch extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5Q, create_fragment$5Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Electron.svelte generated by Svelte v3.23.2 */

        function create_fragment$5R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.648 11.678c-1.038-1.81-1.249-3.504-.511-4.781.988-1.712 3.468-2.31 6.604-1.739a.322.322 0 1 1-.115.633c-2.9-.528-5.111.005-5.932 1.428-.605 1.047-.423 2.509.512 4.14a.322.322 0 1 1-.558.32zm14.92-6.069c1.835.024 3.156.596 3.751 1.626.82 1.419.18 3.595-1.718 5.837a.322.322 0 1 0 .49.416c2.054-2.426 2.771-4.866 1.785-6.575-.726-1.257-2.26-1.92-4.299-1.947a.322.322 0 1 0-.008.643zm-1.854 15.239a.322.322 0 0 0-.442.11c-.934 1.553-2.08 2.399-3.26 2.399-1.642 0-3.208-1.647-4.2-4.418a.322.322 0 1 0-.606.217C8.279 22.154 10.036 24 12.01 24c1.44 0 2.773-.982 3.813-2.71a.322.322 0 0 0-.11-.442zm7.356-2.594a1.54 1.54 0 0 1-2.436 1.25c-2.455 1.445-7.146.71-11.56-1.84-1.88-1.085-3.527-2.392-4.795-3.785a.322.322 0 1 1 .476-.433c1.222 1.343 2.817 2.609 4.64 3.661 4.167 2.406 8.553 3.12 10.797 1.906a1.54 1.54 0 1 1 2.878-.759zm-19.062 0a1.54 1.54 0 1 1-2.285-1.345c-.233-2.877 2.79-6.734 7.36-9.372 1.898-1.096 3.874-1.874 5.731-2.271a.322.322 0 0 1 .135.628c-1.79.384-3.703 1.137-5.545 2.2-4.304 2.485-7.148 6.067-7.048 8.627.038-.003.075-.006.113-.006.85 0 1.54.69 1.54 1.54zM10.472 1.54a1.54 1.54 0 0 1 3.078 0c0 .023-.002.045-.003.067 2.549 1.317 4.32 5.81 4.32 11.003 0 2.135-.298 4.184-.854 5.96a.322.322 0 1 1-.614-.192c.536-1.712.825-3.697.825-5.768 0-4.89-1.626-9.095-3.847-10.363a1.538 1.538 0 0 1-2.905-.707zm1.304 9.981a1.114 1.114 0 1 0 .47 2.178 1.114 1.114 0 0 0-.47-2.178z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Electron" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Electron extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5R, create_fragment$5R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Elementary.svelte generated by Svelte v3.23.2 */

        function create_fragment$5S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm0 1a11 11 0 0 1 10.59 8.01 19.09 19.09 0 0 1-4.66 6.08c-.94.81-1.96 1.53-3.08 2.04-1.13.5-2.37.8-3.6.72a6.23 6.23 0 0 1-2.66-.76 20.02 20.02 0 0 0 5.68-4.58 9.97 9.97 0 0 0 2.31-4.17c.18-.79.2-1.6.04-2.4a4.42 4.42 0 0 0-1.08-2.11 4.33 4.33 0 0 0-2-1.19 5.25 5.25 0 0 0-2.33-.08A7.8 7.8 0 0 0 7.2 4.85a9.77 9.77 0 0 0-2.94 7.49 7.88 7.88 0 0 0 1.95 4.59 18 18 0 0 1-3.56.85A11 11 0 0 1 12 1zm.07 2.22c.77 0 1.55.24 2.17.7.55.42.97 1.02 1.2 1.68.23.65.3 1.37.21 2.06a7.85 7.85 0 0 1-1.7 3.76 16.22 16.22 0 0 1-6.37 4.96c-.48-.42-.9-.92-1.2-1.48a6.61 6.61 0 0 1-.75-3.87c.12-1.32.58-2.6 1.2-3.79a7.92 7.92 0 0 1 3.02-3.42c.68-.37 1.45-.6 2.22-.6zm10.83 7.3A11 11 0 0 1 3.52 19a19.8 19.8 0 0 0 3.63-1.2c.51.4 1.08.71 1.67.94a8 8 0 0 0 5.44-.04 13.3 13.3 0 0 0 4.64-2.95 20 20 0 0 0 4-5.22z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "elementary" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Elementary extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5S, create_fragment$5S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Eleventy.svelte generated by Svelte v3.23.2 */

        function create_fragment$5T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.386 12.032v-12H20.59v24H3.386zm13.17 6.07a1.07 1.07 0 0 0 .373-.107c.432-.213.68-.672.877-1.626.076-.372 1.195-6.168 1.209-6.263.026-.186-.008-.382-.084-.476a.325.325 0 0 0-.087-.064l-.06-.031h-.291c-.253 0-.298 0-.348.02-.113.039-.207.156-.255.316-.011.038-.168.881-.348 1.873l-.328 1.802-.046-.21c-.56-2.547-.764-3.452-.794-3.532a.383.383 0 0 0-.103-.16c-.105-.107-.117-.11-.567-.11-.411 0-.422 0-.5.074-.086.079-.122.216-.111.42.006.115.045.27.688 2.784.663 2.587.751 2.943.787 3.177.046.3-.05.713-.208.893-.032.037-.037.039-.084.032-.028 0-.12-.027-.204-.051-.268-.078-.362-.072-.462.028-.096.096-.137.248-.138.51 0 .256.028.34.159.473.131.133.324.208.595.23.164.012.22.012.33-.001zM14.66 16.39a.31.31 0 0 0 .16-.192c.02-.058.022-.098.022-.356 0-.255-.003-.299-.021-.354-.04-.121-.136-.196-.278-.217-.041-.01-.2-.01-.355-.01-.365-.001-.378-.01-.446-.184-.068-.18-.096-.326-.113-.602a85.799 85.799 0 0 1-.012-1.94V10.77h.35c.454 0 .507-.01.602-.113a.465.465 0 0 0 .102-.24 3.273 3.273 0 0 0 0-.534c-.026-.16-.099-.271-.211-.322-.057-.025-.065-.026-.45-.03h-.392l-.003-1.22c-.003-1.09-.005-1.227-.021-1.278a.378.378 0 0 0-.201-.247c-.052-.024-.072-.025-.32-.029-.27 0-.356 0-.429.038-.087.042-.148.133-.185.278-.014.054-.032.346-.076 1.262l-.06 1.194s-.08 0-.18.01c-.206.01-.263.022-.327.086-.092.092-.12.19-.127.455-.01.334.02.487.115.588.075.081.134.1.345.106l.173.01v1.785c0 1.7.006 2.019.034 2.274.041.37.13.709.241.928.194.38.544.617.988.668h1.005l.07-.04zm-7.447 0c.098-.053.16-.154.2-.332.016-.077.018-.401.018-4.518 0-4.184-.001-4.44-.02-4.51-.05-.194-.19-.29-.378-.26-.035.01-.344.084-.686.175-.343.09-.684.18-.758.198-.17.043-.214.062-.281.126-.105.098-.122.185-.122.606 0 .416.016.5.12.604.094.095.189.1.456.03.103-.026.193-.048.2-.048.01 0 .014.784.017 3.763.003 3.436.005 3.77.021 3.84.048.202.113.296.236.34.034.013.133.016.487.014.435 0 .445 0 .49-.027zm3.203 0c.092-.046.152-.135.197-.29l.024-.084.003-4.435c.002-3.194 0-4.456-.01-4.509-.033-.2-.145-.308-.322-.308-.066 0-.198.03-.857.204-.56.147-.799.214-.849.239a.34.34 0 0 0-.17.184c-.024.06-.024.071-.024.479 0 .415 0 .417.026.483a.362.362 0 0 0 .083.12c.1.1.172.105.456.034a5.46 5.46 0 0 1 .208-.05c.008 0 .012 1.202.014 3.791l.003 3.79.026.086a.48.48 0 0 0 .135.23c.078.062.085.063.57.06.414 0 .447 0 .487-.024z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Eleventy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Eleventy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5T, create_fragment$5T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Elixir.svelte generated by Svelte v3.23.2 */

        function create_fragment$5U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.789,16.578c0,3.75-2.926,7.422-7.739,7.422c-5.246,0-7.839-3.708-7.839-8.285 c0-5.207,3.89-12.946,7.995-15.639c0.277-0.182,0.643,0.041,0.611,0.371c-0.03,0.313-0.046,0.631-0.046,0.951 c0,2.067,0.641,3.985,1.738,5.563c0.522,0.795,1.092,1.477,1.763,2.351c0.94,1.226,1.636,1.905,2.642,3.84 c0.005,0.01,0.01,0.018,0.015,0.028C19.48,14.197,19.789,15.352,19.789,16.578z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Elixir" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Elixir extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5U, create_fragment$5U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ello.svelte generated by Svelte v3.23.2 */

        function create_fragment$5V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.377 0 0 5.377 0 12s5.377 12 12 12 12-5.377 12-12S18.623 0 12 0zm6.96 13.8c-.8 3.16-3.68 5.4-6.96 5.4s-6.16-2.24-6.96-5.4c-.08-.36.12-.76.48-.84s.76.12.84.48c.68 2.56 3 4.36 5.64 4.36 2.64 0 4.96-1.8 5.64-4.36.08-.36.48-.6.84-.48.36.08.6.48.48.84z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ello" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ello extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5V, create_fragment$5V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Elm.svelte generated by Svelte v3.23.2 */

        function create_fragment$5W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.986 12.806V23.2l-5.197-5.197zM6.796 6.01H17.19l-5.197 5.197zm9.275-1.12H5.677L.8.015h10.394zm7.116 7.117L17.99 6.81l-5.197 5.197 5.197 5.197zm.813-.813L12.806 0H24zM0 23.2V.813l11.194 11.194zm23.187.8H.8l11.193-11.194Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Elm" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Elm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5W, create_fragment$5W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Elsevier.svelte generated by Svelte v3.23.2 */

        function create_fragment$5X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.34 11.44v.169l-.043.126.043.085.042.042h.084l.084-.085h-.084l-.042.043h-.042l.042-.085v-.084l.042-.084v-.085l-.084-.086-.085-.042h-.128l.086.042.085.044m3.967.464v-.042h-.042l-.043.126.085.085.084-.043h-.084v-.126m6.583 8.904l.21.084.15.042-.107-.042-.253-.084M2.856 5.445v-.168l-.043-.127-.126-.126-.127-.085v.043l.043.168-.043.169-.084-.253-.169-.21-.126-.127-.169-.127-.337-.126.169.253.126.295.084.168.17.127.168.084.168.042v.17l.085.126.084.168.127.127v-.59m-.675-.254l-.084-.126-.127-.21-.126-.254.168.084.169.127.169.21.084.127.042.211-.295-.169zm.636.717l-.154-.243-.042-.234.046-.17-.04-.221.136.158.013.176.04.534zm10.289 9.854l.217-.145-.052-.03-.165.175m3.677-12.638l-.18-.166-.116-.256-.168-.253.042.253.126.21.127.212.126.084.127.042.148.003-.138-.074-.094-.055m-3.701-.269l.317.218.204.084.182.043.107.021h.19l.149-.028-.09.086-.21.136-.44.122-.225.09-.084.043-.063.074-.096.155-.088.176-.044.088-.087.087-.263.176-.203.29-.116-.253.148-.105.159-.136.19-.221.086-.142.044-.088v-.135l.044-.087v-.132l-.217.176-.188.14-.136.094-.113.07-.088.262v.176l-.088-.044-.028-.137-.043-.189-.042-.116-.042-.127-.01-.189.034-.202.175.22.132.13.131.045.044-.176v-.175l-.088-.132-.185-.111-.105-.126.306.158.106.032.098.004.234-.027.164-.041.116-.037.078-.02-.176-.064-.126-.071-.127-.085-.084-.042-.133-.055-.162-.03-.169.043-.084.042-.056.022-.029-.064V2.73l.043-.042.042-.042.126-.043h.127l.084-.042.169-.126.21-.38.127.169.127.126.168.127.169.084.21.042h.085l.084-.042-.295-.337-.21-.127-.17-.126.296-.042.169-.085.126-.084.084-.126v-.17l-.126.085-.127.042-.295.043-.175.04-.127.084-.084.085-.084.168-.169.043-.169.084-.126.126-.127.127.043-.169.042-.21-.042-.254-.085-.168-.042-.169-.04-.064-.105.253-.042.116-.037.156.013.301-.09-.113-.036-.1-.043-.127-.084-.085-.128-.042-.21-.084.126.169.084.21-.127.127-.126.084-.253.127v-.253l-.084-.211-.127-.169-.169-.168v.295l-.016.189.018.15.042.295-.21-.127-.17-.168.085-.085.084-.084.043-.126.042-.085-.127-.421-.042.042v.084l-.126.127-.06.146-.042.306-.151-.2-.172-.128-.211-.126h-.211l.126.169.085.168.21.211.12.03.137.022.08-.008.212.126.38.38.041.084v.042l-.042.043-.168-.043h-.17l-.126.043-.168.042-.295.168-.211.211h.59l.253-.042.127-.042.126-.084v.084l-.042.084-.042.169v.169l.042.168.098.091.052.064-.108.098-.175.071.116.052.06.046.17.042.126.042-.127.127-.168.126-.127.169-.084.169v.21l-.042.043-.085-.169V4.67l-.042-.085-.168-.126-.17-.127-.17-.084.085-.127.084-.168.169-.253.084-.085.127-.126-.253.042-.253.127-.211.126-.169.169-.126.21v.127l.042.127.169-.043.21-.084.127.253.169.295.126.253.127.085.168.084v.21l-.126-.168-.127-.126-.295-.211-.337-.169-.127-.126-.126-.17-.085-.168-.084-.126-.253-.253-.422-.38.08-.013.064.01.327.158.21.032.244-.042.133-.103.126-.126-.253-.042-.21-.085H8.78l.253-.295.253-.295-.506.127-.084.042-.085.084-.057.167-.042.095-.112.202-.21-.169-.253-.168-.464-.38-.127-.042-.042-.084-.084-.422-.042-.127-.043-.084-.084-.126-.084-.043-.174-.128-.38-.126.085.295.084.253.169.253.253.169.126.042.169.084-.126.042h-.085l-.21-.084-.254-.042-.21-.042-.127.042-.169.042-.126.126-.085.085v.042l.549.084.28-.015.126-.042.142-.07.126-.041h.043l.106.01-.338.295-.02-.052-.168-.043-.253.043-.253.042-.253.084-.17.169-.083.126v.127l.084-.085.084-.042.085.253.084.085.21.126.296.127.126.084.127.084-.214-.013-.18.01-.407.003-.211-.042-.169-.042-.21-.042h-.211l-.127.042-.126.084-.211.253v-.295l-.043-.253-.084-.126-.253-.253-.084-.127v-.589h-.042l-.043.127-.084.126-.21.253-.127.253-.042.127v.169l.042.042v.126l-.169-.126-.253-.211-.337-.127-.295-.168-.338-.169-.337-.084-.127-.085-.168-.042-.26-.168-.126-.085-.127-.084-.126-.042-.17-.042H.674l-.295.042v.084l.042.042.21.169.507.169.253-.043h.042l.084-.042h.043l.084.042-.169.085h-.168l-.296.042-.295.084-.21.169-.254.253-.042.084.422-.042.21-.042.338-.169.127-.126.253-.253.21-.042h.085l.084.084-.169.126-.21.127-.127.169-.042.084-.042.126-.042.043-.043.042-.042.084-.042.084.21-.084.254-.084.169-.127.084-.126.042-.127.042-.084V3.32l.042-.084.338.126.295.17.39.218-.306-.032-.263.075-.158.106-.137.052.179.052.285.064.138.098-.253.042-.337.127-.169.084-.126.085.421.084.211.042h.21l.254-.084.126-.085.085-.084V4.25l-.086-.088.136-.084.053-.075-.02-.094.465.383.253.253.253.21.251.25.078.098.36.47.313.38.421.38.211.168.253.127.548.253.59.21-.294.085-.127.084-.169.085-.168.253-.211.21v.043h.295l.295-.042.253-.127.085-.084.084-.127.084-.126.085-.169-.085.422v.21l.043.127.084.084.084.043.085.084.042-.21.042-.254-.042-.084v-.085l-.169-.337.169.084.21.085.338.295.253.21.21.254.422.548-.21-.127-.17-.042h-.126v-.168l-.042-.17-.042-.126-.126-.126-.211.422v-.211l-.085-.211-.253-.38-.042.043v.253l-.084.253-.042.253.042.126.042.127-.084-.043-.042-.126-.043-.084-.042-.085-.126-.168-.169-.127-.169-.042h-.464l.127.126.169.085.253.295.126.126.127.085.168.084h.211l.042.042v.127l.043.042.126-.169.084-.168-.042.21-.042.17-.126.294-.38-.084-.38-.084-.379-.17-.336-.166v-.295l-.042-.253-.126-.295-.169-.211v-.042l.042-.043.085-.084.084-.126.042-.211v-.38l-.042-.042-.042.042v.042h-.338l-.253-.042.085-.042.084.042h.21l-.21-.21-.253-.17-.253-.084-.295-.084h-.145l-.042.035.06.05.042.042.085.126.126.084.295.17h-.379l-.127.083-.126-.337-.084-.169-.096-.19v-.05l.053-.099.043-.21.01-.134-.029-.14-.162-.303-.098-.105-.028.064-.05.176-.006.21.106.345-.167-.22-.028-.204v-.126l-.085-.253-.042-.085-.084-.084-.169-.084-.169-.085-.084-.042.042.084.085.211.126.422h-.042L3.84 5.39l-.085-.084-.084-.043h-.253l-.127.043h-.084l-.084-.043.21-.253.085-.168v-.169l-.084-.464-.338.59-.042.127v.169l.084.253-.084.38v.21L3 6.105l.064.078-.275-.16-.295-.127-.295-.084v-.213l-.042-.127-.085-.168-.084-.127-.253-.21-.221-.247-.02.211.022.179.01.067.084.169.21.21.254.212v.042h-.091l-.169.084-.21.042-.17.085-.168.126-.042.084-.042.127.042.295.042-.042.042-.042.253-.127.169-.168.169-.211.126-.211.295.084.295.127.506.422-.168-.043-.169-.042-.169-.042-.21-.042h-.17l-.126.042-.168.084-.127.127h.169l.126.084h.085l-.338.169-.21.084-.17.042-.041.043h-.169l.042.337.127.295.168.295.211.253-.253-.168-.21-.253-.17-.211-.252-.169-.253-.084-.169-.042-.169.042L0 7.328v.042l.169.084.337.253.169.085.337.126.337.042.253.127-.21.042H.97l-.211.042-.169.085-.168.126-.127.169-.042.168h.422l.38-.126.337-.211.295-.21.084.084.084.084.127.042.042.084-.295.127-.127.042-.168.084-.127.085-.126.168-.085.169-.084.169-.042.295.084.042.422-.337.337-.422.253-.422.127.043.084.084-.21.253-.17.253-.084.21.042.254.043.126.084.127.169-.253.126-.253.042-.042.127-.043.126-.042h.253l.042.042-.168.085-.127.084-.084.127v.042l.169-.042.21.042.17.042h.126l-.125.059-.122-.002-.21-.042-.211.042-.211.127-.302.324v.042l.59-.085.295-.126.127-.084.126-.085.043-.084.084-.042.042-.042.042-.043.127-.042.084-.042.169-.169.084-.084H3.5l-.422-.042h-.126l.253-.127.253-.21.21.084.211.126.38.253.169.127.21.084h.127l.167.056-.243.01-.093.019-.168.042-.085.042h-.168l-.085.042.169.042.126.085.296.1.295-.016.126-.042.127-.085.042.085v.126l-.042.127.042.126.084.169.127.169.168.126v-.295l.043.042v.042l.168-.168.169-.127.126-.126.085-.17.084-.379.042.085.042.084.043.21v.212l.042.084.042.042v-.126l.042-.085.042-.168.085-.169-.043-.084-.042-.085-.126-.042-.127-.042.169-.042.21-.084.718.253.042.042-.253.084-.169.084-.169.127-.126.126-.084.17h.337l.126-.043.127-.084.337-.338.127-.042.126.042.127.042-.295.085-.127.084-.126.084-.043.085v.042h.043l.168-.042.211-.042.169-.085.084-.084.042-.084.717.042.38.21.168.085.211.084.127.042h.126l.211-.084.127-.042h.21l.127.084-.042.085-.042.042-.085.042-.042.042-.042.127.042.084h.042l.085.084v.042l-.043.085v.084l.085.042.042.042v.085l.042.084.084.042h.127l.084-.084v-.127l.042-.042.043-.042h.084l.042-.042.042-.084.042-.17h.043l.126.127.127.127.084.126.084.17.042.336.085.38.042.38v.252h-.084l-.085-.042-.084-.084-.084-.127-.127-.126h-.042l-.084-.042-.127.042-.169.042-.042-.042-.084-.042-.042-.085v-.126h.084v.042h.127l.126-.042.042-.042v-.211l-.042-.042-.084-.042h-.042l-.127.042v-.039l.042-.042.042-.127.135-.084.085-.042h-.085l-.126.042-.085.084-.084.127v.126l-.084.253.042.169.042.084.042.042.127.043h.084l.253-.043.127.085.042.084v.042h-.169l-.169.085-.084.168-.035.176.035.035-.042.085h-.084l-.085-.085h-.084l-.169.085-.042-.043h-.042l-.084-.084v-.126l-.085-.085-.042-.042-.084.042-.042.042-.127.085-.042.042h-.084l-.086.044-.043.084-.042.127.042.042.043.042v.126l-.38.043-.21.042-.17.084-.042-.042h-.042l-.084.042-.084.042-.253.042.126-.168h-.169l-.126-.042.042.084h.084l.043.042v.042l-.043.042v.043l.043.042h.084l.126-.042.127-.085.084-.042.085.042v.042l-.043.043-.168.084-.127.169-.084.168-.127.127-.168.084h-.085l-.084-.042h-.042l-.084-.084-.043-.127.043-.169.084-.168.084-.042h.085l.042.042.084.084.042.042v.127l-.042.042-.084.084h-.085l-.084-.084.042-.042.042-.085-.042-.042-.042.127-.042.084.084.084.085.043.084-.043.042-.042.084-.126v-.253l-.084-.042h-.042l-.042-.043h-.169l-.169.169-.084.169.042.21v.043l.085.084.084.042.084.042.169-.042.295-.126v.084l.042.084.042.043v.042l-.042.084v.21l.085.085.084.042.084.043.042.084.085.042.042-.126v-.085l-.042-.126v-.127l-.127-.126-.084-.042h-.084l-.043-.043-.042-.084-.042-.126.127-.253.084-.085.084-.084v.042l-.042.042v.211l.084.042h.085v.127l.042.084.042.042.042.085-.084.084.084.042.042.084v.085l.043.084h.042l.042.042.042.085.042.042.085-.042h.042l.042-.043v-.084l.084-.042.042-.042v-.085l.085-.042.042-.084v-.21H9.79l-.043-.043.085-.169.042-.042.084.042.169-.126.084-.169-.084-.084v-.085l-.084-.126.084-.042h.21l.17.042.126.042-.127.084-.168.169v.084l-.042.043-.085.126-.126.084v.17l.042.083.126.085v.042h-.042l-.042.126.042.127.085.084.042.085v.126l.042.042h.169l.042.085.042.084.042.042h.169l.042-.084.084-.085h.127l.042-.126v-.169h.084l.076-.072.022.285.064.243-.116.01-.085-.042-.084.042-.042.042-.127.126v.17l.043.083.084.043-.127.126-.084.253.042.127v.042l.085.042.295-.084.168-.085.085-.126.042.042h.126l-.084.295-.042.337-.042.59.042.465.042.421v.085l.042.126v.084l-.042.043-.042.042-.042-.085v-.042l-.085-.168-.042-.085-.042-.084-.042.042v.084l-.084.085-.043.084v.084l-.042.043v.042h.042l-.042.042h-.084l-.084.042h.084l.084.084-.126.043-.042.084-.085.126h-.126l.084.127.084.042h.085l.126-.084.127-.169.042.042v.169l-.042.169v.126l.042.169.084.126.085.127.253.126v.043l-.043.126-.126.084-.127-.084-.126-.042h-.295l-.295.126-.296.085h.17l.21-.085h.21l.17-.042.084.085.084.042h.084l.085.042v.126l-.085.253-.084.085.084-.042.085-.043.084-.126v-.211l.042-.042h.042l.127-.042h.21l.127.042.169.042.127.084.084.127.126.042.085.042.042.085v.126l-.042.169v.084l.084.084h.084l.127.043.169.042.168.126.169.169.084.126.127.043.084-.043.127-.042.21-.126.127-.042.084-.043h.042v.043l-.21.126-.253.169.168-.042.127-.043.084-.084.127-.042h.042l.042.042-.127.042-.084.085h.127l.126-.085.127-.042h.126l.127.21.168.127.127.085h.084l.084-.042h.338l.337.084.633.169h-.296l-.253-.085-.253-.042-.548-.042h-1.056l.38.042.38.042h.379l.38.042h.084v.043H14.22l-.043-.043-.168.043h-.464l.169-.127.126-.126-.337.126-.338.127v-.17l.211-.041.085-.042.084-.085h.084l.042.042h.043l.042-.042-.338-.295-.126-.126-.211-.127h-.21l-.043-.042v.126l.042.169.042.084.127.127v.21l.042.212h-.38l.043-.043.042-.042h.126v-.126l-.126-.127V21.8h-.084l-.085.042-.126.084-.127.127-.168.126h-.043l-.084.042h.295l.253-.042.042.042-.337.043h-.337l-.633.042-.084-.042h-.127l.085-.043h.168l.085-.042h-.76l-.758-.084H8.695l-.633.084-.632.085H5.995l-.338-.085H5.49l-.17.042H3.503v-.042H3.29l-.211.042-.169.043-.21-.043H1.517l.042-.042.085-.084.168-.084H1.73l-.042-.043v-.084l.042-.084.169-.127-.043-.042-.084-.042-.084.042h-.042l-.085-.042-.042.042v.042l-.042.169v.084l.042.042v-.084l.042-.084.042-.042h.043l-.043.084v.21h-.084l-.159-.126.033-.084v-.127l-.043-.042-.074.127.042.084.042.127.085.084-.042.042h-.043l-.084.084-.126.043H.685v.38h22.441l.061-.08v-.295l-.024-.078v-.042l.046-.096v-.085l.084.043.042.042.085.042h.042l-.127-.169-.084-.168-.042-.127-.084-.084v-.042h.042l.042.042.21-.042.17.042.21.042.169.084-.042-.126-.042-.085-.211-.084h-.211l-.084.042h-.211l-.085.042-.084.043-.042-.043.126-.042.085-.084h-.127l-.126-.042h-.042l-.17-.169-.336-.169-.147-.042.106.042.211.169.169.169.084.084-.127.042-.042.085h.253l.042.084v.042h-.379l-.042.042h-.042l-.043-.042v-.042h.043l.042-.084-.169.042-.21-.127-.212-.126-.337-.042h-.337v-.043h-.38l.169-.084h.506l.675.169.128.067v-.042l.042-.042v.042l.042.084.042.085v-.169l-.297-.194-.168-.084-.169-.042-.337-.085-.042.042h-.127l-.126.043-.253.084-.17.084-.126.085-.126.042h-.127l-.126-.042.169-.085v.085h.126l.042-.043.085-.126.084-.084.253-.127-.38-.084h-.21l-.17.042.212-.169.21-.084.254-.042.253.042.126.126.042.043v.084h-.042l-.042-.042-.042-.042h-.085v.042l.085.084.126.042.127-.126v-.085l.042-.042-.042-.126-.085-.042-.168-.085h-.338l-.253.085-.253.168-.253.211-.126.042-.084-.042.21-.21.127-.085.169-.042H20.3l-.126.042-.085.084-.126.127-.085.084h-.084l-.042-.042.38-.38.21-.084h.085l.126-.084h-.21l-.17.042-.168.084-.127.127-.168.295h-.085l.043-.169.126-.168.169-.17.168-.083.253-.085h.127l.126.085.043-.043v-.042l-.043-.084-.168-.042H20.3l-.126.042-.127.084-.21.169-.17.253-.126.253.127-.464.126-.21.127-.17.126-.084h-.084l-.127.085-.084.084-.084.084-.127.253-.084.211-.042.084-.043.043-.042-.085v.127l-.168.084-.043-.042-.042-.084.042-.085.043-.042.168-.084.042-.548.085-.59.042-.254v-.253l.042-.253.042-.084.042-.127-.042-.548v-.589l.042-.8v-.886l-.126-1.014-.127-.337v-.59l-.084-.549-.126-.548-.17-.548-.041-.042-.169-.085h-.042v-.126l.042-.084v-.13l-.042-.043-.084-.042-.085.042-.126.085-.127.042v-.084l.085-.043.084-.042.121-.175.053-.263-.005-.152-.043-.084-.02-.105.027-.121-.131-.112-.127-.042-.084-.084-.127-.042-.084-.043-.042-.084.042-.084-.169-.085-.21-.042-.17.042-.168.043v.126l.042.127-.126.084-.127.126-.042.085-.042.126-.169.211-.126.211.042.084h.126v.085l.043.042h.084l-.084.042-.043.042v.127l-.042.084-.042.042-.042.084-.169.085-.126.126-.169.211-.084.211-.169.506-.253.253-.042.042v.085l-.042.042h-.042l-.043-.085-.168-.126-.127-.169-.084-.168-.042-.211H15.2l-.043-.042-.042-.085-.042-.126-.126-.253-.043-.085-.084-.126-.042-.042h-.084l.042-.085-.042-.042h.042l-.085-.169v-.084l-.042-.084.085-.042h.042l.042-.043v-.084l-.042-.126-.042-.043.042-.042.126.085.085.042h.084l.042-.042V11l.042-.042.085.127.042.042v.084H15.2l-.085-.084h-.042v.042l.084.084.085.043v.042l-.05.042.041.042.042.042h.127l.042.042.084.043h.043l.042.084h-.042l-.17-.084h-.21l-.126.126-.085.127v.168l.042.085.043.084.126.084.084.042h.17l.041-.042.042-.126v-.127l-.126-.126h-.084l.084.042.042.084v.169l-.042.084h-.042l-.169-.084-.042-.084-.042-.085v-.21l.042-.085.084-.084.169.042.169.084.168.042.211.043.169-.043.126-.126.085-.127.042-.168-.042-.169-.043-.21-.084-.17-.126-.126-.085-.084-.084-.042-.169-.127-.042-.042v-.042h.127l.126.042h.127l.126-.042v.042h.084l.127.084.126.042h.127l-.169-.084.139-.05.148-.02.159.041-.063.043-.074.032-.138.04h.126l.127-.042.084-.084-.084-.043-.085-.042h-.126l-.169.042-.126.043-.043-.043h.043l.042-.042.126-.126.042-.085v-.084h.17l-.043-.253v-.084l-.042-.042-.053-.061.043-.062.094-.046.169-.042.222-.007.159.049.084.042h.042l-.463.127-.169-.043h-.127l.043.043.21.042h.211l.211-.085.169-.084-.38-.169h-.295l-.126.085-.127.084-.253-.126-.253-.043v-.042h.127l.118.024.094.018h.211l.21-.084.17-.126-.338-.085h-.169l-.126.085-.127.042-.084.042-.126.042-.085-.084-.042-.085v-.126l.084.084h.296l.38-.168-.116-.06-.168-.042-.307.017-.105.015-.064.03-.084-.043.042-.042.506-.085h1.393l.169.211.169.169.421.295.085.042-.043.253v.295l.043.254.084.21.084-.21.085-.211V9.74l-.043-.253.043-.042.421.21.253.085.253-.042.127-.043h.126l.085-.042.126-.042-.253-.126-.253-.127-.337-.169-.169-.042h-.21l.21-.084.169-.127.168-.126.17-.169v-.084l-.127.042h-.127l-.253.042v-.168l.042-.169.211.126.253.085h.506l.042-.085-.21-.084-.211-.126h-.043l-.084-.043-.21.043h-.127l-.085-.043-.084-.042.253-.084.295-.042h.253l.253.042.378.3.34.46.085.17.084.379.127.126-.084.38-.043.337v.211l.043.169.084.126.126.127.085-.295.042-.296V9.91l-.084-.126-.085-.127-.126-.337-.085-.38.043.043v.084h.084l.084.253.127.21.126.212.169.084.094.013.12-.028-.013-.12-.029-.12.159-.047.116-.073.12-.162.067-.14.042-.126-.042-.127.024-.274.018.064.042.084.085.169-.042.21-.043.098-.168.211-.169.211-.084.126v.253l.042.17h.042l.295-.296.127-.169.042-.21v-.17l-.003-.154.013-.078.056.197.035.402-.143.212-.042.127-.043.169v.674l-.042.169.127-.042.084-.127.169-.21.042-.211.042-.253-.042-.211-.084-.211-.043-.38.073.014.049.049.047.106.042.337.085.338.126.084h.169V9.91l-.042-.126-.169-.169-.169-.126-.21-.127V9.32l-.085-.337-.126-.338.276.373.155.162.191.12.148.049.183.021.133.022-.063-.126-.077-.182-.101-.14-.145-.155-.26-.134-.267-.12-.266-.112-.14-.17-.186-.154h.127l.169.042.2.155.14.106.113.071.307.091.182-.02.127-.084-.125-.022-.14-.19-.204-.077-.347-.028-.338-.085-.236-.098.11.014h.21l.338-.084.295-.127.253-.253v-.042h-.717l-.21.042-.17.084-.126.127-.084.169-.464-.17-.464-.083.127-.127.042-.084.042-.042.21.084.17.042.379-.042.295-.084.211-.127-.506-.126h-.59l.253-.17.253-.126.253.169.253.127.253.042.276-.02.14-.03.09-.035.042-.042-.159-.049-.217-.07-.302-.176-.13-.07-.11-.035h-.113l.12-.097.068-.009.253.127h.379l.253-.127.253-.126-.253-.043-.21-.042-.254-.042-.253.042.042-.168.085-.127v-.35l-.042-.043h-.085l-.506-.169-.21-.084h-.296l.253-.126.253.126.169.042.295.042.337-.084.296-.126.21-.043.085-.042.084-.042h-.253l-.548-.042h-.295l-.253.042.21-.126.254-.338.126-.21.253-.507.042-.126-.042-.169-.084-.337-.085-.295-.126.464-.042.463v.253l.042.211-.211.338.042-.506v-.296l-.168-.337-.338.042h-.168l-.552.18.182-.434.14.07.253.043h.14l.169-.071.464-.211-.506-.155-.296-.014-.253.056.183-.169.759.029.229-.054.169-.084.168-.17.118-.272-.097.055-.095.017-.22-.012h-.338l-.337.043-.127.084-.126.084.042-.084v-.297l-.085-.21-.168-.212-.169-.21v.632l.025.322.071.169.032.101-.197.182-.169.338-.168.295-.183.261-.178.169.107-.177.081-.16.046-.135.042-.17-.042-.168-.084-.126.337-.042v.126h.042l.169-.59.042-.127-.042-.168-.084-.253-.127-.253-.084-.253-.085.168-.042.211.085.337.084.38.042.169v.21l-.084-.042-.042-.253-.043-.21-.042-.127-.084-.084-.211-.17-.21-.168-.17-.168h-.042l.042.253.085.21.126.211.169.211h-.169l-.126-.042h-.253v.042l.295.21.169.127.168.043v.168l-.042.127-.169.253-.084.253-.042.168.042.17-.21.168-.212.126-.21.085-.211.126-.253.084-.295.043-.506.042-.549.084-.253.084-.21.127-.296.169-.337.126-.295.042-.337-.042.21-.169.211-.21h.085l.042.042.084.084h.084l.127.042h.084l.253-.084.169-.127.169-.168h-.717l.042-.085.042-.126v-.337h.169l.21-.043.17-.042h.21l-.169-.084-.168-.127-.169-.084-.169-.042h-.253l-.126.084-.084.085V4.12l.018-.172-.052-.273-.253-.337-.074.285-.01.263.075.32-.21-.21-.253-.085-.253-.084h-.296l-.084-.042v.084l-.21.38-.061.106.005.164-.043.21.043.253.084.085.042.084.21-.253.127-.295.043-.169v-.337l-.085-.127V3.93l.253.253.127.127.168.126.506.085h-.168l-.169.042-.169.042-.126.084-.295.211-.253.21.042.085.126-.084.17-.084h.336l.17-.043.126-.042.168-.084.085-.127.042-.084.084-.084.042-.253.127.084.168.042-.042.085-.084.042-.127.168-.126.169-.042.21-.338.043-.168.084-.085.043-.074.087-.116.179-.085.233-.684.113-.675.126-.253.085-.22.148v-.042l.041-.042.042-.085.043-.168v-.211l-.043-.337.211.168.211.127.253.042h.21v.042l.043.042.084-.042h.211l.253-.042.169-.084.179-.191.126-.21.074-.107-.168.042-.506.127-.169.084-.126-.211-.17-.422-.126-.168-.084-.127-.126-.042-.127-.042-.169.042v-.21l-.126-.212-.273-.324.064-.052.293.336.233.16.263.052.19-.042.043-.017L15.162 4l-.085-.084-.168-.162-.159-.117-.22-.084-.296-.032.285-.263.233-.105.305-.136-.062.243-.01.253.054.192.084.126.126.127.043.042h.084l.042-.253v-.253l-.169-.422.211.253.211.211.127.084.168.043.127.042h.168l.211-.042-.253-.211-.21-.211-.17-.084-.21-.085-.21-.042-.17-.084.253.042.296.042.126-.042.127-.042.126-.042.127-.127-.518-.14.2-.074.075-.095.076-.03h.168l.127.042.126.042.21.178.128.244.084.253v.042l.042.042.042.127.042.084.085.042h.126l.085-.084.042-.169.042-.126v-.34l-.084-.338-.169-.295v.21l-.084.211-.127.38-.084-.169-.127-.21-.168-.127-.203-.118.16-.05.127-.127.21-.295.17-.296-.17.043-.225.04-.211.042-.169.085-.168.126-.127.127-.084.168v.211l-.085.042-.126.042-.21.043.21-.17.084-.126.042-.126.127-.295.084-.338-.042.043h-.084l-.127.042-.168.126-.129.127-.042.168-.042.211-.084.253-.042.127h-.127l.127-.253v-.127l-.043-.126-.042-.085-.084-.084-.169-.084-.168-.085-.085-.084-.042-.084-.042.042v.084l-.042.127v.126l.042.127.169.21.168.17.085.126v.126l-.633.253.056-.173.163-.178.042-.084.012-.096-.008-.064-.014-.085-.11-.148-.05-.07-.084-.043-.042.253-.085.253-.057.241.05.154.014.128-.062.084-.113-.175-.218-.122-.261-.089-.191.005-.204.022-.189.062m3.44 6.25l.13-.048.269.051-.11.056-.064.062-.118.035h-.14l-.228-.038.26-.118zm-.313-.312h.218l.173.05-.163.064-.15.07-.213-.014-.111-.096.246-.074zm3.385-.562l.306.044.13.044.13.087h-.306l-.174-.044-.13-.087.044-.044zm1.852 1.582l.043.127.042.21-.085.464-.084-.084-.042-.084v-.253l.042-.211.042-.253.042.084zm1.198-.452l-.012.116-.015.117-.022.104-.098.134-.255.313-.04-.148.046-.233.094-.131.15-.21.105-.106.064-.162-.017.206zm.425.206l.174.165.133.233-.003.356-.172-.081-.098-.268-.034-.405zm-.154.536v.228l-.104.408-.105.091v.046h-.052v-.5l.052-.271.107-.228.102.226zm-.047-1.48l.317.146.218.197.084.134.091.182-.175-.042-.155-.043-.231-.168-.247-.31-.182-.208.28.111zm.211-.409l.182.084.05.091.105.085-.204.007-.234-.088-.187-.103-.162-.14.45.064zm-.872-.433l.084-.085.085-.042.253-.126h.632l-.168.126-.211.127-.169.042-.214.047-.334-.005.042-.084zm.66-3.974l.047-.304.042-.21.07.208.041.306-.059.234-.12.198-.021-.432zm-1.559-1.474l-.084-.267v-.169l.042-.126.077.197.05.101.128.361v.211l-.098.24-.042-.309-.073-.24zm-5.703.796l.275.138.457.37-.285-.007-.295-.113-.224-.225-.157-.21.23.047zm1.515-.213l.116-.37.04-.195.087.27.052.37-.062.359-.127.126-.076-.12-.072-.207.042-.233zm-1.064-.696l.064-.127.136-.137.169-.126.58-.18-.104.14-.085.126-.12.131-.11.132-.232.084-.126.075-.241.062.069-.18zm-3.649.021l.159-.116.163-.056-.097.183-.147.182-.147.09-.194.045.263-.328zM9.672 4.23l-.26.076.028-.192.17-.21.168-.127.246-.14.133-.04-.24.288-.114.216-.131.13zm.495.756l-.102-.226-.093-.186-.123-.2.077.025.086.042.117.096.13.157.053.417-.145-.125zM8.943 3.423l.293.025.299.092-.187.116-.238.02-.213-.045-.236-.117.11-.066.172-.025zm-.417-.029l.071-.163.06-.144.092-.1.137-.045.22-.069-.232.287-.16.182-.248.176.06-.124zM6.917 2.41l-.21-.21-.14-.31-.03-.196.218.097.149.113.189.156.089.275.059.273-.324-.198zm-.106.486l-.294.02-.457-.069.086-.108.204-.074h.23l.454.103-.223.128zm-5.565.198l-.26-.058-.332-.143-.188-.169.313-.034.26.058.26.116.26.174-.313.056zm-.086.377l-.337.169-.442.095.18-.22.262-.15.391-.101.167.007-.22.2zm.623.265l-.218.16-.214.107.108-.213.147-.212.337-.265-.16.423zm-.036 2.407l-.126.169-.354.163.017-.121.084-.169.169-.126.337-.127-.127.211zm.275-.496l-.253-.253-.168-.21-.042-.127v-.169l.421.38.127.21.042.254-.127-.085zm-.937 2.191l-.42-.168-.432-.277.356-.005.318.09.269.192.202.281-.293-.113zm.131.543l-.261.154-.314.094-.261.026.134-.206.388-.206.314-.025.346-.015-.346.178zm.53.481l-.231.263-.312.332-.14.07.097-.277.196-.361.245-.137.293-.167-.148.277zm.561.172l-.042.169-.253.464-.084-.338.169-.421.168-.17h.042v.296zm.317.936l-.512.12.25-.253.133-.106.133-.053h.177l.243.061-.424.231zm3.861-.398l.085.042.045.139-.087.327-.043-.253-.084-.253h.084V9.57zm4.313 2.235l.053-.05.102-.051.103.05.05.053v.103l-.05.052h-.205l-.051-.103v-.054h-.002zm-1.975 2.633h.093l.093.096.047.096-.047.047v.097l.047.096.025.11-.118-.206-.093-.097h-.092l-.048-.096v-.096l.093-.047zm3.837 7.447h.066v.135l-.197-.068.131-.067zm-.356.285l.117-.086h.175l-.292.086zm.382-.096l.113-.083v.167l-.169-.083h.056v-.001zm.19-.604h.277l-.138.07h-.07l-.069-.07zm.125.248l-.066-.068.198-.066h.197v.068h-.066l-.131.067H13v-.001zm.261.032h.255l-.255.087h-.19l.19-.087zm-.096.212l.063-.079h.253l.062-.08.063.08-.252.08-.251.079.062-.08zm9.83-.34l.098.096h-.098v-.096zm-.001.293l.045-.045.046.045-.046.046h-.09l.045-.046zm-.166-.131h.092l.045.045v.046h-.091l-.046.045-.09-.045.09-.091zm-.313.048l.057-.08h.086l-.143.08L22.4 22h-.172l.287-.166zm-.015.149h.187l-.123.07-.063.073h-.062l.06-.143zm-.228-.285h.187l-.125.07-.062.073h-.063l.063-.143zm-.192-.06l.07-.063.071.064-.07.062h-.071v-.062zm.1.235l-.048.047h-.047l-.048.048h-.047l-.047-.048.094-.047.048-.047.094.047zm-.072-.339l-.15.042-.108-.114-.108-.115.366.187zm-.305.22l.094-.048.048.047v.048h-.048l-.047.047-.094-.047.047-.048zm.135.225l-.103.114h-.103l-.052-.058.052-.057h.206v.001zm-.275-.003h-.05l-.104-.057.051-.058h.052l.053.058h.05l-.052.057zm.005-.63l.126.085h-.126v-.086zm-.06.22l.136.046-.137.09h-.045l-.091-.045.045-.045.091-.046zm-.394-.039l.091-.045.183.045-.137.092h-.18l.043-.092zm.216.312h-.212l.052-.059h.054l.106.06zm-.454-.393l.095-.047.094.047-.14.095h-.187l.138-.095zm.174.238l-.055.083h-.333l.166-.083h.222zm-.5-.324h.227l-.137.092h-.09l-.046-.046.045-.046zm0 .248h.153l-.152.102-.05.05-.102-.05.152-.102zm.14.257l-.048.096h-.292l.05-.049.097-.049h.194v.002zm-.404-.39h.096l.05.05-.099.097h-.098l-.048-.049.1-.098zm.04.351l-.146.098h-.194l.196-.098.048-.049.097.049zm-.065-.884h.09l.18-.09.045.046h.046l-.09.135-.089.046-.09.045-.045-.045-.046-.046h-.045l-.046-.045.09-.046zm-.203.005h.076l-.076.091v-.09zm-.072.246l.045-.045.18.045-.134.046h-.09v-.046h-.001zm-.022.194h.113l.17.056-.057.056h-.113l-.17-.056.057-.056zm.029.265l.049.05h.097l-.146.146-.097.049-.097-.05.097-.097.05-.049.047-.049zm-.277-.556h.213l-.053.106h-.106l-.16-.052.106-.054zm.14.244l-.066.088h-.131l.065-.088h.132zm-.202.275l.242.05-.193.146-.098.049-.145-.05.049-.048.048-.049.05-.049.047-.049zm-.102-.23h-.227l.057-.057.056-.057.227.057-.113.058zm-.011-.369h.11l-.166.112h-.167v-.056l.056-.056h.167zm-.23-.202h.063v.07h-.124l.061-.07zm.068.808l.097-.049h.098l-.194.147-.097.049h-.05l-.097-.05.243-.097zm-1.125-.262h.087l-.087.088-.044-.044v-.044h.044zm-.05-.126l-.004-.08.084.007.047.066-.066.009h-.06v-.002zm.218.212l.091-.089.091.046-.136.136-.135.046h-.091l.18-.139zm.139-.296h.089l-.09.089-.089.046h-.09l.136-.09.044-.045zm.032-.13h.224l.09-.05-.046.05-.135.05h-.179v-.05h.046zm-.037-1.613h-.08l.081-.069v.07h-.001zm-.857-1.928l-.091.046h-.091v-.046l.045-.043h.412v-.046l.045-.133h-.136l-.046-.044-.138-.18-.091-.18-.091-.133-.183-.312.125.034.091.046v.089l.366.312.15.1h.091l.149-.032.182-.09.106-.013.11-.007-.057.3-.091.268-.262.602.273-.089.275-.09.23-.178.325-.24-.005.17-.103.134-.217.091-.182.07-.149.154-.62.272-.098-.052-.048-.105-.045-.224-.046-.223-.136-.223h-.05v-.005zm.039.112l-.065.074h-.042l-.096-.02.203-.054zm-.587-.128v-.086h.055l.054.042v.042h-.11v.002zm.118.062v.084l-.054-.042-.054.042-.054-.084h.162zm1.497-4.667v.126l-.168.117.027-.145.141-.098zm-.145.012l.022-.18.17-.11-.011.121-.085.084-.096.085zm.522 1.454l-.14.143-.289.184-.312.125.06-.17.08-.028.111-.05.366-.18.211-.205-.087.18zm.027.492l.148-.067.012.064v.054l-.18.064.02-.115zm.016.462l.223-.113.022.118-.074.054-.274.108.012-.113.091-.054zm-.482 2.389l.206-.09.489-.312-.044.115-.5.354-.497.235.09-.211.256-.091zm-.177-.044l.106-.245.235-.059.21-.136.31-.237-.013.184-.425.267-.21.136-.213.09zm.833-.76l-.13.06-.26.162-.317.182.053-.091.028-.122.182-.09.211-.092.095-.064.15-.088.07.112-.082.03zm-.971-2.953l-.01.117-.06.087-.172.071.048-.158.074-.066h.05l.07-.05zm-.13-.055l.084-.258.251-.159-.028.204-.088.093-.22.12zm.086.312l-.075.162-.069.087-.263.07.07-.164.14-.037.197-.118zm-.123.342l.045-.044h.046l.045-.044.039-.057.13-.042-.037.143-.13.091-.15.053.012-.1zm.232.636l-.145.074-.08-.044.214-.089.222-.113-.21.172zm.238-.09l.33-.252-.073.153-.044.143-.23.12-.118.064-.13.07-.042-.09.307-.207zm-.076.313h.208l-.053-.102.107-.07.096-.06-.005.186-.095.096-.103.05-.08.073-.259.068-.204.042-.076.073h-.052l-.113.035-.094.015-.096.019-.054-.075.458-.148.415-.202zm-.48.512l.1-.121.277-.073.35-.16.177-.103-.231.233-.253.143-.174.075-.334.103.088-.097zm.708.834l.118-.046.169-.091.202-.106.081-.027.007.172-.278.13-.393.182.043-.078.051-.136zm.265-.272l-.253.137.025-.117.06-.047.11-.067.176-.095.21-.111v.126l-.328.174zm.322-.413l-.206.106-.305.179.057-.152.19-.108.267-.158-.003.133zm-.516-1.333l-.054.043-.064.09-.387.18-.327.116-.157-.093.2-.074.06.035.046-.067.366-.144.3-.148.157.047-.14.015zm-.51-.08l-.048.165-.092.054-.209.084-.273.091-.096-.116.37-.117.348-.162zm-.355.537l-.365.098-.23.06-.094-.115.215-.043.285-.079.189.08zm-.26.144l.288-.073.064.053-.308.138-.252.06-.069-.102.277-.076zm-.157.254l.288-.079.257-.138.08.017.087.059-.285.138-.355.106-.072-.103zm.433.228l-.022.091-.042.117-.38.084-.377.138-.003.037.049.048.401-.112.479-.138.074.106-.295.047-.214.102-.226.064-.218-.07-.104-.003-.04-.263.089-.03h.226l.177-.064.426-.154zm.12.47l.725-.301-.067.138-.14.037-.21.134-.832.25-.154-.104.678-.155zm.098.134l.26-.08.303-.132-.023.141-.521.187-.512.154-.09-.09.583-.18zm.064.175l.452-.17-.03.17-.71.228-.123-.005-.081-.07.492-.153zm-.336.314l.375-.113.366-.12-.032.103-.179.07-.228.094-.204.025-.098-.059zm1.436-1.103l-.137.088-.327.187.039-.162.12-.077.217-.11.095-.064-.007.138zm-1.124-1.427l.06-.19h.064l.14-.102-.027.096-.009.097-.228.1zm.318-.332l.207-.155.172-.127.165-.135.012.113.002.103-.138.108-.046-.045-.046.089-.146.108-.226.147.044-.206zm.128-.203l-.095.09-.248.136.027-.163.107-.063.204-.143.005.143zm-.093-.509l-.24.148.071-.146.05-.098.168-.105-.049.201zm-.214-.811v-.07l.13-.069-.13.139zm.08.008l.016.09v.084l-.08.047.01-.152.055-.069zm-.068.3l.079-.015-.005.142-.02.064-.112.042.053-.158.005-.075zm.052.264l-.052.136-.02.064-.174.095.032-.053.04-.077.05-.111.124-.054zm-.117.317l-.074.136-.084.095-.093.07.071-.214.086-.057.094-.03zm-.178.337l-.042.16-.164.108.08-.162v-.054l.126-.052zm-.05.791l-.07.123-.07.063-.348.123.069-.123.14-.124.278-.062zm-.099-.317l-.086.07-.113.024.095-.188.084-.043.084-.052-.064.189zm-.125.126l-.11.146-.112.048.055-.097.056-.05.111-.047zm-.158.18l-.206.217-.206.145.07-.145.136-.073.206-.145zm-.255.414l.012-.111.096-.037.005.059-.017.059-.059.027.123.121-.344.096-.069-.027-.042-.032-.044-.052.115-.044.135-.022.09-.037zm-.288-.015h-.105l.211-.118-.106.118zm-.128.067l.045.09-.045.045h-.091v-.135h.09zm.008.24l.118-.027.096.128-.113.037-.128.027-.059-.037-.032-.101.118-.027zm-.078.233l.13.013.091-.047.118-.007.06.07-.119.058-.195.06h-.046l.032-.053-.07-.094zm.545.246l-.204.047-.303.024-.007-.12.147-.007.136-.018.135-.037.096.111zm-.398 1.602h.054v.043h-.054v-.043zm0-.086v-.042l.054-.042v.086h-.054v-.002zm-.074-1.21l-.022-.171.307-.01.213-.06.102.083-.236.08-.227.04-.137.037zm.06.369l.1-.01.047.057-.047.037.037.084-.1.032-.036-.2zm.16.212l.01.073-.053-.01-.074-.016.118-.047zm0 .091h.048v.048h-.096l.047-.048zm.046.081h.05l.047.047-.048.05h-.096l.047-.097zm-.02.182h.05l.046-.047.05-.049.048.096.076.14-.123.005-.096.048v-.048l.096-.048h.049l-.049-.05h-.145v-.047h-.002zm.29.226l.075.088-.17.009h-.146l.194-.145.047.048zm-.226.226l.048-.048.096-.048h.24l-.144.096h-.096l-.145.048v-.048h.001zm.513.911v.044h-.21v-.044l.045-.044h.12l.045.044zm.012.115l.044-.029.044.042-.152.065h-.044l-.04-.016.148-.062zm.013.101h.12l-.044.044h-.12l.044-.044zm-.005.093l.08-.007.398-.086.044.044.006.108-.22.044-.225.045-.083-.103v-.045zm.5-.295l-.09.044-.09.043.045.044h.045l-.09.044h-.138l.092-.044v-.044l-.046-.043.091-.044.091-.044h.137l.09-.044.318-.177.417-.235-.012.216-.064.048-.134.08h-.045l-.116.036-.078.12-.09.044-.136.043-.091.044-.06-.086-.046-.045zm.195.41l.23-.073.136-.057.27-.137-.027.149-.253.168-.31.08-.046-.13zm.198-.144l-.12.056-.12.022-.018-.078-.03-.049.12-.038.168-.066v.153zm.104-.04h-.045l.003-.144.078-.062.055.025v-.087l.046-.044.222-.07v.176l-.21.15-.149.056zm-.344.41l.248-.048-.204.166h-.1l-.195-.009.251-.11zm.275.512l-.076.004h-.155l.002-.056.172-.044.135-.045v.23l-.095.041-.172.09v-.098l.093-.047.088-.043.079-.033-.071.001zm-.192.282l.111-.047.167-.046v.044l-.002.06-.103.051-.224.043.05-.105zm0 .21l.118-.051.163-.081-.047.094-.044.052-.244.051.054-.064zm.27.035v.108l-.093.003-.076.04-.047.004-.13.05.346-.205zm-.176.26l.177-.124v.144l-.08.038-.217.09-.06-.002.003-.052.177-.095zm.176.421l-.066.154-.238.168.304-.322zm-.157-1.375h-.16v-.055l.377.055h-.217zm.163 1.034l-.042.1v.05l-.094.046-.123.039-.076.039-.07.003.004-.057.401-.22zm-.23.304l.222-.09v.066l-.17.13-.135.042-.127.058.21-.206zm-.06.867h.187l-.094.047-.094.095h-.14l.141-.142zm.078-.154h-.093l-.047-.047.14-.094.047-.047.14.047-.047.047h-.047l-.093.094zm.288.206h.243l-.194.147-.098.049-.145-.049.194-.147zm-.133-.195l.113-.056.113-.057h.113l-.113.113h-.226zm.186-.346h.18l-.091.09h-.27l.09-.045.09-.045zm-.194-1.854l-.085-.015-.08-.06.418-.163-.08.164-.079.022-.094.052zm.266.405l-.116.064v-.064l.059-.064.116-.064v.064l-.059.064zm.044.265v.072l-.05.04-.104.053v-.07l.066-.062.088-.033zm-.164.776l-.062.006.003-.06h.159l-.1.054zm.083-.252l-.105.105v-.115l.2-.047-.095.057zm-.14-.135l.116-.136.132.008-.248.128zm.28-.93l-.052.052-.157.052.052-.052.052-.053.105-.052v.052zm.027-.298v.054l-.054.054h-.054l.108-.214v.106zm.12-3.569l.006.145-.11.044-.3.123.024-.13.125-.069.153-.062.102-.05zm-.075-.35l-.065.042-.184.082.029-.145.102-.02.06-.045.058.021v.065zm-.043-.409l-.156.091.022-.07.007-.07.127-.018v.067zm-.009-.146l-.123.043.012-.064v-.069l.084-.022.027.112zm-.09-.473l-.045.09-.179.133-.207.135-.263.101.042-.172.137-.07.236-.163.234-.184.046.13zm-.08-.578l.007.098-.134.113-.189.113-.013-.147.111-.088.198-.158.02.069zm-.022-.13l-.084.047-.071.052-.08.053.038-.135-.088.066-.044.123-.179.126.04-.207.146-.127.15-.126.067-.08.07-.037.035.245zm-.054-.324l-.086.057-.23.196.078-.224.21-.182.028.153zm-.226-.052l.008-.11-.001-.066.12-.09.006.063.029.064-.162.139zm.094-.486l.048.064.008.054-.056.06-.086.041.03-.16.056-.059zm-.015-.155v.057l-.209.214v-.057l.06-.115.15-.156v.057zm-.049-.157v.066l-.069.066-.138.065.138-.13.07-.067zm-.246-.157v-.069l.06.07-.06.068v-.069zm-.022.17l.108-.121h.054l.054.06-.108.122-.162.06v-.06l.054-.06zm-.106-.372v-.214h.108v.214l-.054.054h-.054v-.054zm-.037.17h.069v.056h-.07v-.056zm.006.147l.05.059h-.088l-.088-.042h-.305l-.093.069.142-.01h.131l.132.042.12.096-.088-.037-.088-.042h-.265l.047.08h.11l.159.055.044.086.043.128v.258l-.11.3-.13.3-.132.259-.088.3-.132.258-.219.258-.246.204-.263.128-.076-.054v-.3l-.044-.258.088-.128.214-.093.256-.111.044-.043v-.042h-.088l-.07-.005v-.258l.043-.214.044-.172.155-.246.017.2.044.213.032-.034.027-.145v-.128l-.044-.258.044-.214.044-.129.103-.069-.044-.042-.088.042-.044.086-.087.172-.044.169-.088.172-.087.086-.066.186-.034.318-.088.258-.087.172-.12.054h-.33l.045-.042.044-.086v-.172l.043-.214v-.042l.044-.086.044-.172.005-.145.105.177-.044.172-.066.162.088-.086.044-.086.044-.214.022-.237.043-.258.024.18.02.164.027-.14.039-.1v-.129l.044-.128.415-.531-.22.214-.229.243.005-.135.088-.042.044-.044.017-.091.219-.215.18-.108.071.05.066.004v.043h-.088l.044.043.078.027.175.043h.176l.075.047zm-1.44.922l.014-.052.075-.27-.01.464-.079-.142zm1.13-1.098h.256l-.064.066h-.256l.064-.066zm-.027-.049v-.1h.101v.05l-.05.05h-.05zm.005-1.497l.047.044.048.087.022.095.001.087.046-.089-.002-.088.091-.025.093.084.002.088-.071-.093-.066.034.111.17.05.176v.177l-.043.177-.002-.132-.006-.126-.05-.175-.104-.086.106.27.012.198-.054.142-.045.046.033-.17-.001-.134-.05-.132-.094-.087.05.131.003.221.033.09-.09.133-.03.126.018.063.128.007.039.028.067-.023-.019.106.002.088-.135-.115-.14-.042-.072.069-.105-.132.039-.106.116-.083.093-.042.015-.12-.001-.131-.095-.175.054.197-.046.133-.06-.197-.004.116.007.085-.023.11-.054.058-.01-.192-.05-.176v.044l.009.221-.039.26v.044l.074.044.095.131-.071-.028-.094-.024-.048-.044-.018-.052.035-.154.015-.175-.001-.175.045-.134v-.044l-.093.09.027.076-.043.177-.046.177-.057.034-.086.045-.04-.335.036-.178.113-.128h-.047l-.113.07.1-.142.24-.113.006-.039-.26.091.052-.098.046-.044.16-.079-.094.002-.139.045.036-.054.082-.076.17-.067.095.044.085.059-.002-.088-.095-.042-.141-.13.202.024zm-.718-.333l.153-.037.233.037.045.05.046.047-.019.256-.094-.064-.046-.05h-.136l-.137-.095v-.05l.002-.072-.057.04-.036.031.003.068-.062.017-.02-.139.125-.039zm-.695 1.117l.057-.15.128-.127.086-.12.061-.19.358-.329.197.086.088.044.087.044h.088l.044.044-.22.173-.087.13.017.13-.044.086-.044.088-.06.088v.13l.075-.014.05.361h-.126l-.043-.044v-.044h.087v-.086h-.044l-.087.088v.088l.033.077.144.02h.087l.088-.043.1-.105-.056.18.044.044-.307.174-.132.13-.023.159-.064.015v-.218l-.088-.174-.003-.175-.038-.111.086-.103-.047-.135-.044-.13-.062-.22.258-.052.157-.12-.044-.085-.044-.086-.131-.086h-.088l-.088.043.056.05-.054.038.056.05-.044.087-.054.039v.086l-.088-.044-.039.049h-.044l.044.044h.044v.043l-.131.044-.152.039zm.329.111l.16.115-.009.135-.079.059-.01-.164-.062-.145zm.192-.4l.093-.085.018.1-.111-.014zm-.32.39v-.054l.053-.106h.054l.054.054.054.106h-.216zm-.137.707l.128-.15-.047-.042-.046.042h-.047v-.042l.047-.086.046-.043.093-.042.03-.077-.088-.05.047-.045.046-.042.067.15.048.086.045.086.047.086v.285l.063.05v.266l.002.093-.048.043v-.258l-.015-.133-.093-.128v.128l.01.103.063.214-.063.187-.016-.23-.05-.117.018.27-.097.44-.005-.137v-.214l-.092.258.067.15v.086l-.093.215-.045.214-.047.258-.093.258-.068-.106v-.086l.093-.344-.045-.086v-.086l-.048-.129-.01-.182.093-.258.093-.3.047-.172.005-.165-.04.003-.139.344v-.179l.046-.214.09-.172zm-.346.094v.107h-.108l.108-.107zm-.179.167l.154.118-.058.095-.123-.095.027-.118zm.015.299l.054.084-.032.107-.182-.085.064-.158.096.052zm-.192.24h.164v.13l-.081.065-.083-.13v-.066zm.054.306l.138.005.1-.516.16-.598.046-.092.136-.045.022.101-.006.081-.085.054-.045.091v.633l-.046.18-.045.09h-.137l-.046.09v.092l.046.18h-.182v.046l-.046-.18-.01-.212zm.439.392v.489l.049.147v.049l-.147-.343-.245-.342.196.098v-.447l.098.055.049.098-.05.098v.147l.05-.05zm-.513-.478h.049v.464h-.05v-.464zm-.108.51l.285.54h-.212l-.071-.135.07-.203-.072-.202zm.027.958v-.383l.223.212.222.255.044-.084-.044-.085-.133-.17-.09-.042-.043-.084h.044l.089.042v-.042l-.09-.255-.133-.297h.09v-.084l.044.042v.042l.045.084.133.129.09.128.045.17.09.17v.043h.09l-.045-.042v-.043l.046-.042v.127l.044.084.045-.084v-.085l.211-.074-.21.287.043.042.078-.032v.552l.043.509.134 1.135-.434-.08-.045-.43.045-.424.046-.383v-.425l.044-.255v-.213h-.044l-.044.085-.046.084-.043.51v1.486l.043.128v.51l.046.17v.126l-.015.074-.105.015-.044.08-.05.089.044.142.06-.01.029-.075-.052-.018.008-.096.128-.02-.082.721-.211-.458-.073-.316-.017-.3.08-.813.09-.977.043-.467.078-.5-.044.129-.134.084-.222.085v-.042l-.09.042-.089.084-.005-.467zm.04.583v-.094l.048-.047.047.047v.187h.094v-.14l.048-.094.187-.14h.047v.047h-.047v.187l-.047-.094-.048.047.048.187.047.14-.093-.093-.094-.14v.048l.047.234.094.235-.234-.235-.144-.282zm.245.554l-.273-.218-.085-.152v-.15h.086l.085.226.187.294zm-.356-2.566h.076v.192l-.076-.064v-.128zm-.08.159l.11.157.056.156-.22-.209.055-.104zm-.014.238l.052.097.052.296v.592l-.23.13.104-.493v-.541l-.085-.18.107.099zm-.07.133l-.048.452v.271l-.097.226h-.096l-.047-.045.145-.226.05-.272.094-.406zm-.118-.19h.048l-.073.529-.187.528-.115-.088.187-.44.095-.263.045-.265zm-.074.041l-.133.377-.133.313.067.063-.067.062h-.07v.062h-.067v-.062l-.067-.062.067-.063v-.062l.068-.063h.067l.068-.313.2-.252zm-.226-.254l.002.394-.113.338-.149.261-.064-.032v-.05l.324-.911zm-.1-.002l-.053.29-.053.2-.209.397.027-.256.107-.2.182-.431zm-.153-.054l.071-.28.014.267-.095.345-.22.464-.065-.187.056-.103.055-.206.184-.3zm-.008-.381l-.115.43-.172.43h-.057v-.16l.344-.7zm-.091-.218l-.095.474-.09.228-.11.153-.066-.042.165-.359.196-.454zm-.145-.012v-.226l.069-.003v.226l-.052.206-.114.204-.128.346.05-.31.127-.247.048-.196zm-.221-.615l.09.045.092.312v.18l-.046.134-.09.046h-.092l-.09-.09-.046-.09.09-.045-.045-.044h-.091l-.046-.045-.045-.09h.091v-.045l-.228-.133-.09-.09-.046-.133v-.044l.045-.09v-.043h.046v.09l.045.045v.09l-.045.045.045.045v-.043h.046l.045-.044.091.09.137.045.091.089v.09l.046-.046v-.133l-.137-.134-.182-.089.228.046.09.079zm-.488.418v-.123h.073l.074.062v.124l-.147-.063zm.142.116v.054l-.054.054h-.054v-.108h.108zm-.37-.141h.164v.121h-.11l-.053-.06v-.061zm-.082-.424l.059-.072h.059l.059.072v.146h-.118l-.06-.146zm.14.356l-.074-.086v-.086h.076l.15.086-.076.086h-.076zm.212-.639h.152v.105h-.152v-.105zm.18-.042v-.07h.13v.07l-.065.07-.066-.07zm.188.098l-.005.1h-.078l-.001-.088.084-.012zm.042-.353l-.033-.003v-.044h-.046v.09l-.046.089-.065-.046-.03-.104.01-.147.02-.108-.046-.046h-.069l-.002.144.002.128.046.18-.046.135-.046-.089-.18.18v-.045l-.046-.046-.089.046-.046.09h-.043l-.046-.046.046-.09-.046-.045-.09.045h-.045v-.089l.014-.111.045-.135.076-.07v-.045l-.09-.045-.023.077-.044.09-.045.18-.112-.032-.045-.09-.044-.045h-.046l.046-.046.046-.045.09-.046v-.045l-.045-.046v-.045h.224l.046-.09h.045l.09.046.27-.135h.226l.09.046.045.089v.045l.1.154.024.165h-.047zm-.87.69v-.067l.123.067v.068l-.06.069-.061-.068v-.069h-.002zm-.017-.145l-.057-.054v-.108h.114l.058.054v.054l-.058.054h-.057zm-.078-.293v.048h-.048l-.05.05-.048-.05-.05-.048.05-.05.049.05h.097zm1.768-.105h-.15v-.2l.1.052h.05v.148zm.162 0v.1h-.05l-.05-.1v-.148h.051l.05.048v.1h-.001zm.35.177l-.051.049-.051.1-.1-.051-.05-.049-.05-.15.05-.1.101-.1.1.051.05.1v.15zm.041-.816l.044-.046.132.18.044.227.043.226-.043.226-.177.09-.044-.225v-.135l-.088-.046-.088-.045-.087.045h-.088l-.044-.045.088-.09v-.317l.131.046h.177v-.091zm-.227-.208h.086l.042.086.042.042v.129h-.128l-.128-.085-.085-.086-.042-.042h-.042l.086.213.042.086-.042.128.042.042-.042.042-.086.086h-.17l-.085-.128v-.042l-.042-.042-.1-.05-.062-.104.106.01.01-.062-.052-.063-.07-.028-.055.018-.03.068.02.09.064.075-.084.084-.104-.02-.105-.084-.002-.186.042-.128.043-.086.042-.042.086-.042.044-.042.086-.043.086.043.086.042h.128l.086-.042h.128l.086.086.073.077zm-.376-.435l.09-.045h.137v.182l-.09.045-.092.046-.182-.046h-.275l-.091.093-.137-.091-.09-.137v-.09l.045-.046.045-.046h.091l.046.046h.091l.046-.046.045-.136.046-.092h.182l.09.046V9.9l-.045.091v.046l.048.09zm.924-.713l.136.094.183.19.09.286-.136-.048-.137-.094-.09-.094-.137-.142-.046-.19h.137v-.002zm.094.55l-.042.084h-.084l-.042-.042v-.127l.042-.084.084.084.042.084zm-.39-.112l.068-.307.022-.14.123.363-.084.126v.169l.126.084h.127l.042-.084.084-.084.043.084-.043.084-.126.085-.084.042-.043.042h-.634l.084-.127v-.084l-.042-.042-.084-.084h-.084l-.043-.043v-.084l-.126-.126-.084-.043h-.085l-.126.085-.042.084-.085.042h-.084l-.127.085-.126.126v.084l.084.17.085.041.042.042-.085.211-.042.085v.126h-.045l-.042-.084-.085-.042h-.042v-.043h-.295l-.084.043-.127.084h-.128l-.084.042h-.127l-.084.042h-.042l-.043.085v.126l-.084.042-.042.127h.126l.043.084-.043.085v.126l.043.042.126.042.042.085v.042l.042.042v.253l.085.084.084-.042h.042l-.042.085v.042l.042.168.042.043h.085l.084.042.042.042.085.084h.084l.042-.042v-.042l.042-.084v-.043l.085.169.042.084.084.043.127-.043-.17.592.085.085.042.126.085.211.042.21.126.212.127.168.169.085.168.084.127.127h.084l.084.042.17-.085.083-.084v.508l-.042.084-.126.084-.127.043-.084.084-.084.126-.085.127-.042.169-.126.126.168.084h.127l.126-.084.085-.042v.042l.042.042-.054-.205.037-.206.059-.179h-.042l-.085.21-.074.269-.01-.074-.042-.112-.078-.072.083-.108.084-.127.085-.042.126-.047.05.184.132.125.113.113.18.052.041.042-.005.1-.042.094v.211l-.01.148.042.085-.042.042-.042.084-.042.085-.063.074v-.085l.042-.084.022-.032v-.169l-.042-.126v-.115l.042-.084v-.21l-.07.252-.043.253.042.042-.084.085-.032.106-.074.21-.044-.06.012-.13.084-.126.042-.34.085-.337-.127.169v.169l-.042.168-.042.211-.149.309-.03-.113v-.042l.042-.127.085-.169.042-.21v-.211l.01-.238-.042.042.01.101-.042.169v.169l-.085.126-.236.179.047-.154.095-.084.084-.126v-.125l-.042.042v.042l-.042.042-.042.042-.127.17-.042.083v.127h.126l.127-.127.084-.042-.084.211-.042.084v.127l.084.084v.042l.084-.042.043-.042h.042l.042.042.126-.295v.21l.043.043h.084l.042-.042-.042-.042.042-.042.042-.043-.042.296-.042.295v.253l.042.297.042.168-.126.887.042.338-.042.084v.127l.042.21v.635l-.042.253v.042l.042.042v.042l.126-.592v-1.177l.043-.592.084.206.042.042.084.084.043-.21v-.17l.042-.421v-.042h.042l.02-.009-.02-.033-.042-.085.042-.042-.042-.381-.015-.402.042-.042h.21l.122.101-.042.043-.042.126-.085.127-.042.168-.106.3.042.085.083-.108.034-.13.084-.21v-.085l.126-.253.053.111v.253l-.127.338v.168l-.169.677.043-.085.042-.126.084-.211v.38l-.042.21-.042.211h.042l-.127.972-.042.465-.042.466-.295-.042-.127-.043-.168.043v-.085l-.042-.042-.085.042h-.042l-.042-.042v-.042l.042-.042h.042v-.042l-.042-.043h-.084l-.127.043-.126-.043.084-.042.084-.042-.126-.084-.127-.042-.295.042-.084.042-.084.042v-.126l.042-.085-.042.042-.085.043-.126-.085-.169-.042.084.084.085.043h.042l-.38.168-.042-.042.042-.042.043-.042v-.042l.042-.043h.042l-.042-.042-.253.127h-.127l-.042.042-.042.042h-.169l.085-.126.126-.085.295-.126v-.127l.042.085v.042l.043.042h.126v-.042l-.126-.085-.043-.042-.042-.084-.084-.084-.127-.085-.126-.042h-.169l-.042-.084-.084-.085h-.169l.084-.042.127-.042h.21l.127.084.085.043.168.168-.042-.168-.084-.17-.085-.126-.126-.042h-.295l-.169.042-.169.127-.126.126-.084.169v.042l-.127-.38-.084-.168-.042-.169-.085-.38.054.143.032.025.042.042.043-.042v-.085l.138-.053-.18.011-.017.095-.026-.053-.023-.053-.019-.073-.042-.042v-.085l-.042-.042h.253l.042.085.042.042v.042h.084l-.042-.084-.042-.043-.126-.084h-.085l.085-.169.126-.084.127-.084.168-.042.042-.085.043.127v.084l.084.084.042.043.084-.085h.043v.38l.126-.042.042-.085.085-.253-.085-.253-.126-.084-.085-.084h-.131l.042-.085h.169l.084-.042.042-.084.042-.169.043-.084.042-.042.042.042.042.084-.042.127.042.126.084.042h.043l.084-.042h.042l.042-.084.085-.127v-.084l.042-.042.042.042.084.042v.169l-.084.126-.042.085.042.084.084.042h.085l.084.042.042.042v.127l-.084.126-.169.17-.137-.021-.084-.084.01-.105.042-.127.043-.042.042-.042.074.032.042.042v.085l-.042.042-.032.052h.084l.042-.042.043-.169-.085-.084-.084-.042-.127.042-.084.084-.042.042v.043l-.042.168.084.127.127.084h.084l.084-.042.127-.084.084-.085.084-.168v-.169l-.084-.042-.084-.042h-.085l-.084-.085.127-.21.042-.127-.042-.084-.085-.085h-.042l-.169.042-.084.085-.042.084-.042.084-.085.085-.042-.085.042-.042.043-.042-.043-.084v-.127l-.042-.042-.042-.042h-.126l-.085.084-.084.127-.042.042v.084l-.042.042-.043.043h-.042v-.296l-.042-.126-.042-.084.042-.085h.042l.169-.042h.084l.127.084.084.043h.127l.042-.085v-.253l.084-.042.042-.042.042-.042v-.042l-.042-.085h-.04v-.042l.084-.084.084-.085-.042-.089-.084-.084h-.042l.042-.042.042-.085.042-.042-.042-.042-.169-.084-.042-.043-.084.043-.042.042h-.085v-.042l-.042-.043-.084-.084h-.084l-.043.042-.084.042-.042-.126-.084-.169h-.127l-.126-.042-.127-.042h-.169v.042l-.084-.042h-.084l.084.042-.042.042v.085l-.042.042H13.1l.042-.592v-.295h.126l.042.084.043.042h.168l.127-.126.084-.043h.042v-.084l.042-.084-.084-.085v-.084l.042-.084-.084-.127.042-.126v-.085l-.042-.084h.042v.042l.042.042.085.085.084.042.169.042-.043.21.043.17.126.126h.042l.085.253.168.169.127.042h.126l.042-.042.17-.169.041-.042v-.253l-.042-.127-.042-.042-.042.042-.085.043.085.084.042.042v.169l-.042.042-.042.084-.083.06-.096.025-.042-.043-.169-.084-.042-.084-.019-.098.115-.071.042-.042.042.126.042.085.085.042h.042l.126-.042v-.127l-.084-.126-.042.042h-.042l.084.084v.042l-.042.043h-.042l-.085-.127v-.042l.043-.084.084-.043-.042-.084-.085-.169-.084-.084h-.042l-.084.042-.085.127v.084l-.05.155-.108-.103-.042-.084.023-.086.029-.073v-.084l-.084-.042-.043-.042-.084-.042-.052-.01-.081-.065.133-.008h.084l.043-.084-.02-.107v-.084h.041l.043-.042.126-.042.127-.085v-.168l-.127-.127-.295-.126h-.084l-.085.042-.168.042.042-.084v-.085l.042-.042-.084-.084-.211-.042.042-.211-.042-.211-.085-.169-.126-.168v-.127l.042-.126-.042-.127.042-.126.084-.169.127-.127.042-.042.084-.21.085-.127.084-.169v-.337l.21.126.043-.084v-.042h.042l.085.042.084.084.042.211v.042l-.042.085-.042.042-.042.084-.085.042-.084.043-.21.042.041.042h.085l.168-.042.127-.085.168-.253v-.253l-.084-.084-.126-.169-.17.085h-.041l-.085-.042h-.084v-.043l.337-.168.34-.169.042.127.042.042.084.042h.084l.127-.042.126-.169.043-.084V9.27l.084-.042.21-.169.23-.137-.09.127-.057.197-.008.262.07-.042.067-.04.126-.126.074-.227-.006-.225.055-.028.107.097-.134.36-.028.246.059.243.126.253.042.126.042-.126.043-.169zm-.455 5.775v.154l-.055.05h-.056v-.153l.056-.101.055.05zm.687.667l-.066.158v-.158h.066zm1.476 5.097l-.105-.02-.066-.056-.251-.159.076-.08.103.102.062.064.18.149zm-.412-.444l.275.085.13.145-.024.097-.381-.327zm-.096.326l-.474-.324.01-.111h.047l.236.19.237.19.425.288-.019.094-.462-.327zm.433.381l-.025.07-.189-.095v-.102l.142.048.072.079zm-.27-.164v.122l-.094-.047-.094-.048-.095-.047-.094-.094-.142-.096-.142-.097v-.168h.048l.283.24.33.235zm-.33-2.116h.22v.042l-.274.042v-.042l.054-.042zm-.027-.044V19.2h.273v.042l-.11.042-.163.044zm.083.214h.11l-.055.042-.11.044h-.055v-.086h.11zm.183.128l-.054.042-.054.042-.219.043v-.129h.327v.002zm-.24.17h.165v.043h-.164l-.11.042v-.086h.11v.001zm.031.17h.22l-.164.043-.11.042-.11-.042.055-.042h.11zm.004.129h.136v.086h-.271l-.046-.086h.18zm0 .15l.136.042h-.226l-.045.042-.046-.042v-.042h.18zm-.046.15h.182v.042h-.271l-.046.043v-.086h.135v.001zm.135.17l.046.043h-.046l-.137.042h-.136l-.046-.042v-.042h.319zm-.02.235l-.076-.086h.077l.078.086h-.08zm.054.123l.094.149-.49-.343h.094l.153.058.149.136zm.062-1.852h-.22v-.086h.274l-.054.086zm0-.214l-.054.042h-.11l-.053.042V18.9l.054-.042h.219l-.056.044zm-.22-.128l.055-.042.054-.043h.11v.043l-.054.042h-.164zm.22-.17h-.22l.055-.043v-.042h.164l.053.042-.052.042zm0-.17h-.163v-.043h.11l.109-.042-.056.084zm-.055-.171h-.11v-.086h.22v.086h-.11zm.033-.172h-.11v-.085h.164v.042l-.054.043zm-.116-.17l.056-.087h.11v.086h-.166zM13.58 19.72l.11-.105.094-.045-.143.224-.047.135v.09l-.06-.122.046-.177zm-.13-.14l.071-.113.085-.098.126-.084-.084.14-.014.126-.126.169-.058-.14zm.59-.143l-.151.114h-.101l-.1-.057v-.057l.05-.058.153-.057.069.003.055.029.024.083zm-.026.126l.136-.049.183.05.182.099.045.097-.111.06-.149-.1-.136-.022h-.046l-.104.066-.113.056-.115.089-.182.295.072-.271.127-.225.12-.094.09-.05zm-.47.666l.095.17-.22-.117.126-.053zm.116.002l.126-.182.127-.127.21-.126h.085l.212.066-.098.028-.097.056-.056.07-.128.077-.042.042h-.085l.085-.127-.085.043-.084.084-.042.056-.128.04zm.018.154l.13-.065.324-.128-.26.194h-.194l-.13.066.13-.067zm.494-.022l.053-.053h.104v.053h-.052l-.159.052-.158.105h-.053l-.052-.053.105-.052h.158l.054-.052zm-.404.079l.052.052.052.052h-.106l-.052-.052.054-.052zm.048.194h.048l.047-.047.047.047.047.047-.047.047h-.047l-.095-.047v-.047zm.275.15l.1-.05v.052l.05.052.051.052-.05.05-.15-.05-.051-.052-.05-.05h.1v-.004zm.026-.123l-.095-.093.095-.047h.094l.047.047v.046l-.141.047zm.236.047h.094l.047.047-.047.048h-.14l-.047-.048.093-.047zm.236-.076l.062-.08.063.08v.081h-.247l.122-.08zm-.01-.185v-.05h.05l.1-.05h.05l-.099.1h-.101zm-.009-.2l-.052.053h-.104l.052-.052.104-.053v.053zm-.145.19h.122l-.122.079-.06.08-.06-.078.12-.081zm-.079.418h.145l.096.096-.047.049h-.096l-.049-.049-.047-.049v-.047h-.002zm.36.373l.126-.071.064.07h.064v.071l-.127.071h-.064l-.126-.07.062-.071zm-.051-.257h.141l.071.07v.067h-.07l-.142-.137zm.152-.062l-.184-.06.123-.063h.062l.123.062-.06.06h-.064zm.317-.582l.173-.057.037.123-.113.084-.14-.013-.016-.078.059-.06zm-.09-.123l.056-.056.056-.056v.056l-.056.056h-.056zm.385.246l.103.047.06.061v.06h-.06l-.188.056-.055-.055-.044-.071.184-.098zm-.064-.128l.05-.103h.103l.154.05-.05.051h-.052l-.1.05h-.051l-.054-.048zm-.388-.022l-.182.06.121-.12h.182l-.121.06zm-.046.135h.083l.082.084-.082.083h-.081l-.083.082-.082-.082v-.083h.082l.081-.084zm.118.626h.066l.066.065h.064l-.064.066h-.066l-.13-.064.064-.067zm.098-.07h-.143l-.073-.072.145-.07.073.07.072.145-.074-.073zm.06-.202h-.132l-.134-.086.134-.086h.067l.133.086v.086H15.2zm.127.226l.14-.066.071.13h-.21v-.064zm-.057-.147l.096-.12h.192v.122h-.288v-.002zm.31.139v-.075l.078-.074.157.074-.078.075h-.157zm.198-.672l.06.061.061.06-.12.062h-.06l-.12-.061.06-.06.119-.062zm-.152-.153h.177l-.088.044-.09-.044zm.077.464h.259l-.173.084-.086.084-.086-.084.086-.084zm.073.41h.091l.046.045-.046.046-.091.045-.046-.045-.045-.046.091-.045zm.152-.183l-.117-.06.117-.061h.116v.06l-.116.061zm-.019-.278v-.077h.174l-.057.077h-.117zm.13.292h.091v.045l-.09.046h-.046l.045-.091zm.06-.177l.043-.044h.088v.044l-.044.044-.088-.044zm-3.077-2.753l-.088-.088-.176.044.088-.087.088-.088.088.131.087.088h-.087zm.059.125l-.091.072v-.143l.09.07zm-.773-1.673v-.13l-.044-.044h.044v-.044l.218.044.173.044h-.086l-.043.044-.044.173.044.132.043.13-.13.044h-.043l-.044-.088-.044-.13v-.088l-.044-.087zm-.212-.729l-.255-.07-.127-.099-.146-.163-.108-.177-.042-.17-.043-.341.004-.324.126-.348.169-.219.298-.467v.212l-.001.19-.179.296-.159.364-.037.233.043.226.037.179.042.128.084.128.17.129.17.086.426.17.131.012.022.074.107.042.042.064-.052.095-.29-.073-.432-.177zm.212.18h-.265l-.133.044-.133.044.044-.22h.133l.088.043.266.09zm-.292-2.988l-.084-.338-.042-.38.169.043.084-.042.084-.042.042-.085.085-.084.084-.21v.084l-.042.084v.084l.084.042h.127l.232-.01-.096.063-.136.032h-.042l-.043.042.145.022.191-.007-.081.07h-.084l-.085.041-.042.043.346-.004-.105.042-.113.046h-.084l-.042.042.084.042.123-.027.172-.015-.08.064-.097.005-.077.017-.085.042.127.042.2-.02-.123.057-.12.048-.041.042.347-.042-.073.082-.276.044-.103-.037-.105.01-.13.027-.168.169-.084.084.042.127v.126l.042.085h.169v.042l-.043.042-.042.084v.085l.085.042.042.126.042.085.084.042h.085l.126.126.042.085.042.042h.085l-.085.042h-.253l.127.084.158.022.174-.022.147-.027-.16.112-.139.022-.136-.02h-.127l.085.041.12.036.242.03-.216.05-.143-.018-.127-.013.24.106.263.022-.253.042-.253.042.127.042h.126l.253.043-.123.065-.12-.003h-.126l-.183-.002.13.066.132.012.28.03-.253.042-.285.043.21.042.296.022-.084.042-.211.022h-.211l.084.084h.39l-.208.056-.266.028.126.085.159-.02.295-.043.003.076-.188.01-.127.032-.116.053-.15-.066-.127-.084-.169-.043-.168-.084-.127-.126v-.38l.076-.405.029-.334.022-.317.042-.042v-.464l-.046-.384zm.048-1.365h-.044l-.13-.044.086-.086.044-.042.086-.216.216.086.13.044.13-.044-.044.13-.043.086h-.13l-.086-.044h-.042l.086.086v.044l.044.044-.172.13-.172.172h.044l.172-.13.172-.172.044.044.044.044v-.044l.044-.086-.043-.044.13-.216.044.044v.044l-.044.086-.086.13v.086h-.049l-.086.044-.086.043-.044.044v.13l-.042.086-.13.086-.043.044h-.086v-.172l-.02-.226.043-.044.086-.044.064-.076v-.047h-.087zM8.16 5.69l.098-.286.084-.253-.084.042-.042.043-.084.042h-.085l-.168.084-.085.169-.168.295v-.464l-.085-.126-.084-.085-.211-.253-.169-.21h-.042v.463l.042.253.127.169.21.21.212.17-.043.084v.084h.043l.21-.084.17-.127.112-.136.042-.085zm.388-.871l-.168.137-.211.106-.221.042-.27-.022.175-.157.211-.074.484-.032zm.545.034l-.123.199-.138.194-.2.155-.192.106.132-.217.135-.226.136-.127.12-.039.13-.045zm-1.017.87l-.177.177-.221.09.177-.355.133-.177.177-.133-.09.398zm-.531.025l-.221-.177-.154-.2-.042-.211-.025-.252.177.178.185.178.107.253-.027.231zm.953-.022l.22.134.178.22.133.222.133.22-.133-.043-.128-.061-.155-.155-.127-.253-.121-.284zm-.255.245l.032.294-.106.209-.095.084-.158.21-.05-.004-.046-.238.084-.267.152-.155.187-.133zm-1.827.182l.074-.05.135-.073.145-.01.22.062.177.115-.2.064h-.183L6.6 6.206h-.184v-.054zm.844.037l-.25-.349.179.064.158.053.137.148.147.23.043.16-.414-.306zM6.85 4.722l-.074.246-.206.177-.182.05.052-.178.127-.244.253-.211.297-.095-.267.255zm-.431.71l.059.147v.133l-.108.251-.05.088-.046.133-.097-.177v-.22l.097-.62.047.133.098.132zm.168.82l.194.08h.211l.127-.041.084-.043.111.068.2.148.202.127.077.123.042.042-.38-.126-.379-.127-.759-.253.27.002zM9.34 6.8l.046-.272.148-.253.32-.394v.172l-.025.222-.118.22-.158.148-.213.157zm.182.17l.139.047.138.048h.186l.207.106.317.432-.258-.044-.312-.17-.231-.186-.186-.233zm.964.845l-.044.132-.005.13-.061.185-.108.068-.116.022-.105-.01.22-.306.089-.087.13-.134zM9.11 5.77l.007-.224v-.266l.087.087.095.149.064.21.022.233-.133.381-.142-.57zm2.221 3.075l.275.515-.012.192-.02.179-.115-.066.01-.137.065-.178-.211-.454.03-.135.064-.221.005-.263-.047-.2-.076-.097-.168-.253-.043.38.043.21.042.085.084.042.084.042.019.084-.019.085-.084.042-.21.042-.085.126-.127.127-.126.084h-.169v.085l.127.084.168.084h.296l.084-.084.042-.084.042-.211.127.253.042.168-.042.085-.042.042v.126l-.63-.168-.298-.213-.127-.126-.126-.169-.675-.928-.548-.506-.248-.229-.273-.21-.147-.117-.137-.063-.188-.094.22-.243.149-.295-.052-.39-.316.211-.189.243-.052.148-.074-.189-.074-.116-.092-.13-.077-.09-.337-.17h-.117l-.104-.02.2.285-.357-.084-.159.042-.126.064.052-.158.056-.162.028-.112-.028-.141-.085-.127V5.24h.127l.126-.085.127-.126.126-.253.085-.127.084-.084.126-.042h.17l.59.169.59.042-.304.037h-.295l-.126.042-.127.042-.084.127-.127.126.085.042h.168l.253.042.253-.084.211-.126.169-.211h.126l.169.042-.169.042-.087.044-.105.137-.231.463.01.053.078.273.084.253.042.084.084.169.17.169.21.084.21.042v.169l.043.084.084.042.253.253.253.296.127.084.168.084.17.042h.168l.042.043-.127.042-.084.042-.169.169-.27.435.201.022.169-.043.113-.075.042-.085.042-.168.042-.17V7.81l.085-.085-.211-.421-.127-.17-.084-.083-.126-.043-.169-.042-.169-.042H9.57L9.4 6.839l.21-.127.17-.168.126-.211.042-.253-.042-.169.042-.169-.38.338-.12.184-.127.242-.02.032-.026-.077.047-.123.043-.085.032-.074.047-.098.042-.126-.042-.295-.085-.295-.21-.253v-.085l-.127.38v.38l.084.379.127.337-.127-.253-.168-.295-.211-.211L8.6 5.66l-.168-.085.21-.084.17-.126.168-.17.084-.168.042-.126h.043l.084.126.126.127.253.168.253.211.127.127.126.126.338.675.21.337.254.295.295.422.253.464.057.062.04.066.012.029.127.179-.014-.016.033.061.087.164.047.087.058.095.057.06.047.088-.054.169-.084.147-.084.168-.053.201-.032.159-.02.126-.047-.088.015-.408-.3-.575-.029.091zm.017-.425l-.093-.062-.044-.056-.074-.212.026-.2.173.225.03.155-.018.15zm-.056.337l-.1.299-.05.148-.148.053h-.149l-.167-.083.296-.179.158-.178.16-.06zm-.148.87l.253.095.282.166.308.362.253.306.167.197.211.2.19.127.18.285.17.251.21.32.063.178.032.19-.047.16-.057.183-.238.347-.218-.057h-.084l-.084.042h.17l.096.063.074.15.125.187-.04.24v.086l-.086.086-.086-.086-.043-.129v-.256h-.042v-.042l-.042.17v.128l-.042.129-.042.042h-.086l-.085.17-.042.042-.086-.042-.042-.086-.042-.084-.086-.086v-.086l.212-.383v-.042l-.042-.043h-.045l-.043.085-.086.086-.042.086h-.084l-.042-.084.042-.087.042-.042h-.084l.042-.128.155-.128.179-.02.177.02h.17l.17-.042.087-.042-.029-.117.052-.074.032-.088.016-.26v-.146l-.024-.12-.049-.135-.084-.17-.213-.299-.214-.256-.172-.127-.221-.126-.084-.236-.296-.355-.266-.266-.224-.182-.457-.289.261.063zm1.373 1.173v-.052l.16.05.147.03-.005.073-.164.01-.138-.11zm-.413-3.203l-.098-.084-.09.022-.075.028-.044-.09.09-.134.089-.046.134-.043.18.089.089.179v.09l-.046.223-.044.09-.09.09-.043-.046-.046-.046.046-.09.02-.12-.072-.112zm-.19.03l.092-.03.07.084.023.166-.123-.11-.063-.11zm.176.392l-.155-.029-.098-.07-.07-.127-.014-.098.022-.12.315.444zm.22.003l.084-.126.084-.211-.042-.253-.084-.127-.085-.084-.126-.042h-.084l-.127.042-.084.042-.085.084-.168-.295-.211-.253v-.042l.253.042.21.085.235.023.272-.066.21-.126.127-.042h.042l.15.033-.084.107-.169.064-.2.084-.306.137.328.136.168.01.263-.062.127-.116.02-.139v-.168l.084.168.043.127v.084l-.43.54-.372.6-.084-.084-.042-.126.083-.046zM11.9 5.447l.169-.179.094-.022-.043.22-.088.219-.176.22-.209.197.032-.221.085-.221.136-.213zm-.032-.133l-.23.059-.28-.06-.234-.058.279-.118.128-.029.126-.042.21.013.232.06-.092.118-.139.057zm.127.565l.13-.177.086-.223v-.222l.172.312.258.266.172.267.086.356V6.5l-.086-.133-.172-.133-.172-.09-.172-.043h-.258l-.172-.044.128-.179zm.344.346h.128l.13.086.172.172.172.172-.258-.086-.214-.086-.214-.128-.215-.172.299.042zm-.859.465l.095-.072.141-.073H12l.565.073-.094.072-.142.073h-.142l-.19.045-.231-.045-.284-.073zm1.481.007v.275l-.133.152-.273.042-.306-.062.264-.117.168-.062.137-.042.143-.186zm-.376 1.346l.106-.137.292.204.295.085-.183.027-.085.042-.224-.003h-.275l.074-.218zm7.676-1.44l.45-.331h.05l-.117.299-.147.23-.276.164-.246.093.097-.231.19-.224zm-.332-.218l-.007-.096.066-.361.01-.316.095.233v.285l-.043.201-.05.196-.071-.142zm.437-.327l-.2.24-.05-.007.042-.17v-.21l-.042-.169-.084-.168h.126l.085-.042.21-.085v.38l-.01.133-.077.098zm-.231-.564l-.159-.02-.315-.136-.127-.105.159.01.148.032.253-.01.279.155-.238.074zm-.567-.133l.127.042.21.127.043.126v.127l-.043.253-.042.253.042.126.043.127-.296.506-.084.295-.084.295h-.253v-.084l.042-.084.084-.127.042-.21v-.21l-.042-.21-.126-.17-.042-.084v-.126l.042.042.042.042.084.042.085.042.126.38.127.084.042-.253.084-.337.042-.337-.042-.17V5.7l-.084-.126-.085-.169v.21l-.042.17-.126.379-.042-.253-.085-.21-.168-.17-.211-.168-.042.042v.084l.042.043v.042l-.464-.127-.38.042.296-.126.337-.042.717-.085.084.125zm-2.913 2.744h-.21l-.212.043.043-.127.084-.126.126-.253.211-.211.295-.127-.126.169-.127.21-.084.17-.042.126.042.126zm.084-1.393v-.126l.002-.058.083.142.126.21.127.17.084.042.127.042h.084l-.422.084-.168.085-.221.141.074-.168.062-.1.085-.126v-.127l-.043-.21zm.107-.131l.2.052.18.11.151.15.165.173-.168.032-.211-.062-.147-.158-.116-.17-.054-.127zm-.127 1.347l.05-.14.252-.421.05.14.031.138-.03.155-.095.125-.1.094-.105.091-.051-.086v-.096h-.002zm.231.135l.085-.084.106-.154.02-.141v-.127l-.084-.253.168-.042.127.253.126.38.085.084.126.126.127.043-.042.042-.464-.042-.464-.043.084-.042zm.845 0l-.084-.084-.127-.21-.084-.212-.126-.21.21.126.127.169.127.21.084.211v.042l-.127-.042zm.085-.295l-.085-.169-.168-.126-.127-.127-.21-.084.21-.084.211-.042h.253l.21-.043-.041.085-.085.126-.084.169-.084.295zm1.013-1.351h.085l.084-.042.042.042-.042.422-.042.38-.253-.17-.295-.126v-.042l.084-.127.169-.337h.168zm-.264-.132l-.274-.178-.146-.208.226.058.237.055.117.074.21.17.065.063-.201.042-.234-.076zm-.081.318l-.098.155-.14.155-.211.098-.2.027-.188.044.236-.267.283-.223.378-.133-.06.144zm-.658-.06l-.101.282-.154.235-.05-.235.05-.187.154-.47v-.142l.05.141.05.142v.235zm.067 1.325L18 7.615l.134-.27.126-.211.042.295v.169l-.042.168-.076.144-.092.11-.085.042-.049-.194zm.375 0l.09-.348-.045-.217-.136-.262.136-.088.228.48.137.173.136.044.091.044-.362.174-.409.173.134-.173zm.545-.314l-.159-.095-.06-.168-.176-.263.22.087.227.135.256.35-.072.058-.098-.013-.138-.091zm.24-.241V7.05l.034-.306.014-.197.083.15.043.132.044.219-.044.22-.087.218-.044-.087-.042-.086zm-.033-1.495v-.27l.18.18.09.227.045.226.046.27-.09-.09-.136-.072-.063-.179-.072-.292zm.477.884v-.135l-.027-.292.107-.305.057-.26.091.18-.01.217V6.2l-.137.665-.08-.164zm-1.067-1.165l.232.047.188.093-.14.092h-.188l-.325-.047-.14-.093-.047-.047-.048-.047h.468v.002zm-.361.204l.168.084.211.042h.253l.127-.084.084-.127.042.296.042.168.043.127-.085-.085-.126-.084-.169-.126-.21-.043-.422-.084h-.043l.253.295.169.127.169.126-.211.085-.169.042-.168.084-.17.127.043-.211v-.253l-.084-.211-.169-.169h-.042l.042.085v.168l-.127-.042h-.126l-.253.084-.295.043h-.127l.096.079.18-.032.21-.032.2-.053.202.01-.043.107-.116.084-.179.042-.295-.037-.084-.042-.083-.057.127.141.21.043.211.042.211-.127-.084.295v.296l-.169-.17-.169-.168-.21-.084-.252-.015-.052-.095-.02-.104-.054-.206.38-.042.337-.127.337-.168.295-.211.164.167zm-1.72 1.646l-.294-.142-.179-.2-.128-.247-.15-.244.251.097.292.203.11.238.097.295zm-1.45.43l.263.073.277.021.22.061.117.088.095.103-.283.064-.218-.06-.258-.104-.213-.246zm.004-.346l-.088.06.003-.186.034-.216.127-.159.2-.189-.02.18-.052.178-.204.332zm-.137-.474v.338l-.042.21-.091-.042-.098-.168v-.211l.062-.169.085-.253.084.295zm-.2-.18l-.088.26v.26l.044.13.086.129h-.086l-.086-.13-.086-.174-.085-.08-.179-.085.137.117.084.106.13.246-.044.044h-.086l-.087-.086-.071-.108-.063-.305v.148l.004.137.044.13.043.086h-.217l-.26-.086.13-.216.13-.174.303-.348.174-.13.174-.085-.046.214zm-.507.909l.267-.017.63-.177-.21.113-.351.14-.437.027-.36-.05.053-.137.408.1zm1.852.157l.071.14-.042.098-.24-.211-.21-.085-.464-.028-.211-.029.084.155.085.127.113.098.271.082-.126.042-.127.085-.126.126-.046.002-.098-.127-.337-.224-.182-.056-.309-.097.056.224.197.253.295.182.215-.03-.127.126-.169.127v-.085l-.337-.084-.295-.126-.169-.043-.126-.042-.169.042-.169.043.338-.717.378.017h.276l.267-.043.172-.059.22-.124.16.082h.252l.393-.163.083-.03.155-.14-.376.166-.251.1h-.169l-.179-.063.263-.104.317-.063.382-.02-.243-.032-.211.01-.327.064-.095.022-.076.047.127-.21.126-.211.042-.211v-.253l-.21.21-.127.085-.042.084-.169-.421.169-.042.169-.043.38-.084.379-.042.168-.084.169-.085.21-.042.085-.042h.084v.548l-.042.253-.084.253-.084-.169-.043-.126-.042-.084-.168-.127-.169-.084-.21-.042-.17-.085v.085l.085.084.042.084.084.211.169.253.169.169.126.042.127.042-.253.38-.088-.026-.046.095zm-1.841.15l.38.172.16.103.151.066.14.097-.027.076-.184.009-.153-.012-.142-.073-.155-.126-.084-.127-.086-.185zm.538 1.253l-.085-.042-.126-.127-.004-.11.056-.028.074.052.169.253h-.084v.002zm.079.294h.044v-.174l.087-.044.088-.044v.088l-.032.09-.034.104-.086.088-.1.01-.105-.032-.063-.147.074-.025.044-.044h.044l.039.13zm-1.01-.024l.067.111.135.056v.056l-.145.03-.19-.422.133.169zm-.075-.228l-.047-.047.047-.094.095-.048h.094l.095.048-.142.094-.142.047zm.061.086l.06-.057h.06l.059.057.116.157.127.098-.267-.042-.155-.213zm.393.144l-.24-.253.127-.043.047.058.206.238h-.14zm-.056-.324l.091-.047.135.136.09.182-.179-.09-.137-.181zm.125-.086l.054-.06.11-.062.11.183.11.182h-.11l-.055-.061-.219-.182zm-.803-.555l.277-.02.22.074.276.116.275.064-.137.064-.179.053-.308-.026-.316-.108-.263-.161.155-.056zm.02.271l.211.085-.084.084-.084.084-.085.127v.126l-.168.043h-.085l-.042-.085-.042-.126.042-.169.085-.126.042-.17.21.127zm.046.69l-.024.176-.116-.042.03-.134h.11zm-.287.302h.208l-.105.135h-.104v-.135h.001zm-.04-.162v-.07l.072-.071.073.07v.071h-.145zm-.224-.11h.161v.117h-.161v-.116zm.11.264h.094l-.108.158-.08-.158h.093zm.046.335h-.167l.085-.128.082.128zm-.074.201l.253-.21.295-.17.043.085-.043.042-.084.042h-.084l-.042.042v.085l-.043.084.043.084.042.127-.127.169-.084.168-.042.211.042.211v-.042l.015-.115.022-.158.064-.127.095-.158.165-.257.094-.315-.02-.19-.052-.168-.02-.2-.085-.201v-.201l.159-.189.114-.042h.085l.11.013.092-.003.13.003.175-.055.17-.042-.4.22-.117-.01-.116-.042-.147.042-.095.095-.02.148.042.169.064.137.075.2.032.233-.032.149-.043.136-.113.267-.104.178-.127.117-.084.158-.052.169-.026.167v.084l-.126-.168-.127-.127-.084-.168v-.213l.118-.464zm.552-.179l-.061.274-.06.054-.061-.11.037-.137.086-.08h.059zm.23 2.667l.18-.044h.222l.09.044.133.133v.09l-.133.044-.134.043-.177.044-.09-.044-.043-.043-.045.043.089.09.09.044.089.043v.134h-.177l-.09-.044-.133.044-.044-.044-.266-.133-.178-.134v-.133l.09-.133.133-.177.046-.09.09-.043h.088l.09.043-.09.267.17-.044zm-.465 1.545v-.072h.216v.146h-.143v-.072H13.3v-.002zm-.02-.406l.022-.075.064-.074.106.064-.067.108.035.115.053.052-.063.084-.116-.032.042-.094.002-.08-.078-.068zm-.002.086l.012.102-.104.03-.063-.095.022-.095h.066v.058h.067zm.016-.503v.212l-.043.043-.042.086-.042-.043-.042.043-.042.042v.086l-.042-.042-.086.042-.17.128-.043-.17-.042-.043-.042-.042.042-.086.042-.042.086-.042.042-.084.042.042h.043v.128h.17l.084-.086.086-.256v-.129h.042l-.043.213zm.41 1.822l-.129.042-.131-.002-.125.172.195.262.19.25-.043-.127-.086-.129-.187-.258.06-.082.087-.042h.086l.086.042.086.042h.086l.086.042.042.042-.042.086h-.042l-.042-.042-.087-.042h-.042l.042.212-.086-.086h-.086v.086l.043.086.17.043.086.042.042.042v.086l-.042.086h.128l.042-.042v-.086l-.042-.042v-.042l-.042-.043-.17-.042.042-.086v-.042h.17l.042-.128v-.086l-.042-.042.086-.043.042-.042.129.17.086.043h.086l.042-.042v-.043l.042-.042h.042l.042.042v.086l-.042.086v.129h.128l-.01.086-.086.042-.042.042-.032.086.042.044.032.096-.032.064-.076.05-.02.083.012.091-.032.107h-.086l-.128-.086-.139-.02-.02-.065v-.086l-.049-.111-.057-.039h-.086l.086.128v.17l-.086.043-.086.042v-.086l-.09-.088h-.042l-.042-.042v-.086l-.042-.084-.042.042-.085.042-.042-.128v-.086l.042-.042v-.042l-.042-.086-.086-.043-.042.043-.086.086v.086l-.042.086-.086.086-.042.086-.087.042-.084-.042-.042-.042v-.043l.042-.042.042-.042h.042v-.128l-.084-.086v-.086l.042-.042.086-.341h.129l.086-.042.086-.34h.128l.128.041.128.042h.086l.042.043.043.086-.043.086h-.086v-.091h-.049zm.143 2.143h.09l.092.046.133.153.046.183-.042.12-.068.143-.022-.33-.045-.045-.091.046h-.092l-.074-.248.073-.068zm-.095-.902l-.06-.064h.06v.064zm.024.182l.044.044v.09l-.118.063-.235.036-.044-.088.22-.055.044-.044.089-.046zm-.03-.147l-.118.145-.134.044h-.044l-.042-.11.206-.035.044-.044h.088zm-.157-.108l-.044.044-.088.044-.064.054-.044-.044-.044-.087.066-.01.044-.088.044-.044h.088l.087.088-.045.043zm-.243-.113h-.177l.044.134.087.177.044.133v.177l-.044.133-.087.134-.178.22.044-.31v-.575l.044-.133.044-.133h.09l.043-.088.044-.044.044.044.044.044-.086.087zm-.265 1.196l.044.088.09.044.043.044-.013.072-.134-.087-.087-.044.013-.117h.044zm.03-.045l.086-.091.255.243-.158.011-.183-.163zm.122-.118l.072-.086v-.044l.086.072.044.044.09.044.043.044.102.059-.078.032-.116.042-.243-.207zm.322-.015l-.196-.154.044-.044h.044l.21.066h.176l-.044.045-.072.146-.162-.06zm.234-.221h-.087l-.103-.017-.176-.044.06-.073h.085l.09.017.177-.044.044.117h-.044l-.046.044zm-1.013-.385h-.14l.044-.086.106.01h.172l-.01.074h-.172v.002zm.192.086l-.096.084-.128-.01h-.172v-.064l.01-.064.386.054zm-.256-.226l-.01-.064h.278l-.076.064h-.192zm.411-2.557l-.052.074-.063.01-.097-.037.086-.042.065-.037.061.032zm.338-.523l.064.042.052.074-.052.095-.085-.02-.074-.085.022-.084.073-.022zm-.061-.131l.135-.01.084.031.042.043-.062.116-.063-.084-.136-.096zm.135.59l-.074-.024.02-.11.079.053.017-.088.042-.084.074.106-.067.123-.091.024zm-.009.088h.058l.057-.058.057.117v.116h-.057l-.057-.057-.058-.058v-.06zm-.566-2.073l-.024-.272v-.194l.164.381.028.198-.033.244-.051.106-.084-.463zm-.112-.371l-.152.018-.016-.103.19-.02-.022.105zm.032.062l-.042.116-.179.022-.003-.106.224-.032zm-.236-.256v-.043l.14-.037.064.107-.162.016-.042-.043zm-.416-.61l.042.043.042.042.042.042h.086l.042.086h-.168l-.043-.086h-.086l.043-.126zm.425.802l-.054.047v.047l-.054.096-.086-.011.086-.277h.054l.054.098zm-.808 2.756l-.04.636-.104-.295-.052-.328.137-.38.158-.284-.1.65zm.904 1.138l.165-.059-.032.127-.133-.068zm.226.957h-.117l-.148.022-.096-.128.202.001.159.105zm-.145-.15l-.215-.042.054-.081.117.038.044.044v.04zm-.312.592l.128.042.158.022.159-.01-.073.072-.202.002-.255-.042.085-.086zm1.87-2.79l.066-.2v-.09l.046-.046h.089l.045.09.046.09-.046.045-.134.089-.066.066-.046-.044zm1.297-5.39l-.006.232-.056.169-.169.155.056-.33.077-.105.098-.122zm.238.234l.108.194.034.177-.086.432-.112-.15-.055-.25.008-.208.103-.195zm2.277-.204l-.13-.13-.087-.13.305-.088.261-.13.565-.261v.174l-.044.087-.087.044h-.218l-.217.044-.174.088-.13.173-.044.129zm.737-.388l-.059.062-.116.125-.292.189-.234.062.116-.189.175-.125.176-.124h.234zm-.388.649l-.261-.174.261-.044.218-.13.347-.347.044.044.044.088-.174.087-.173.13-.098.144-.032.094.022.095.064.021-.074.053-.054-.015-.134-.046zm.188 1.026l-.063-.296v-.273l.064-.2.074.031.032.18.004.259-.111.299zm.448-.98l.297.064.653.261-.348.088-.263-.03-.39-.147-.325-.16.186-.075h.19v-.001zm.452-.567l-.143.148-.295.201-.37.116.053-.2.234-.177.521-.088zm-.472-.231l.022-.095v-.158l.064-.032.052.084-.02.169-.042.126-.076-.094zM21.89 9.75l-.145-.081-.108-.172-.132-.2-.121-.264.21.127.193.167.175.21.05.233-.122-.02zm.578-.74l-.035.12-.113.203-.147.127-.104.022.125-.223.092-.15.118-.132.043-.168.021.2zm-.244-.564l.003.165-.013.152-.127.221-.02-.116-.01-.085-.052-.136v-.19l.055-.183.042-.126.122.298zm-.208-.34v.042l-.042.042v.042l-.042.21v.212l.084.421.043.042.21-.253.043-.126v-.169l-.043-.21-.126-.211.126.084.085.084.108.216-.024.08v.042l-.042.168-.084.169-.127.169-.084.126-.103.187-.192-.23-.253-.21h-.043l-.084-.042-.042-.042-.042.042-.042-.084-.043-.043h-.042l-.182-.27-.113-.151-.088-.112.117.032.055.04.061.077.179.263.14.123.126.084.127.043h.295v-.085l-.042-.042-.042-.042v-.042l-.211-.253-.11-.05-.273-.083.13.006.113-.006.094-.053-.123.017-.084-.042-.169-.21-.084-.043-.108-.017h-.116l-.137.052-.116.043-.071-.036-.098-.069h.169l.158-.042.285-.074.289-.026h.126l.376.08.172.09-.044.04zm-1.308.084l.21-.085.145.026.107.052.148.148-.21.01-.188-.067-.212-.084zm.398.246l.168.022.211.084.169.127.179.243-.253-.01-.221-.147-.253-.319zm-1.399-.754l.166.024.38.044.345.037.2.022.215-.117.158.01.17.022.294.054.511.208.155.059-.188-.036-.508-.175-.295-.022-.274.044-.295.098-.158.01-.169-.032-.25-.019-.303-.049-.295.044-.289.073-.295.087v.044l-.02.044h-.084l-.107-.044v.044l.03.081-.074.044h-.126l-.137-.066-.032.029.042.087-.084.044h-.084l-.085-.044-.084.044.042.044.137.047-.221.04-.084-.045-.085-.044h-.042l.084.088-.084.044-.105-.007-.084-.12-.064.04.042.087h-.084l-.105-.105-.094-.021.074.13-.126-.004-.085-.044-.042-.044-.042.044.042.044h-.084l-.042-.044L17 8.417h-.084L17 8.55h-.084l-.042-.044-.042-.044h-.085l.042.088h-.084l-.042-.044-.084-.088h-.043l.043.132h-.085l-.084-.044-.06-.098h-.072l.042.088.048.054-.085.044-.084-.044-.084-.044-.085-.044.085.174h-.127l-.126-.086-.042-.044h-.043v.044l.127.13-.169.044-.023.006-.066.071-.211-.217v.101l.126.16-.07.044-.18-.12-.045-.098-.028.058.032.082.103.119-.056.028-.052-.018-.103-.083-.11-.047.039.09.088.127-.043.044-.126-.087-.042-.044h-.042l.042.13.11.075-.056.058-.14-.13-.1-.1.014.117.14.145-.053.012-.084-.044-.084-.044-.085-.088-.038-.082.2-.196.243-.196.083-.08.126-.045.127-.13.656-.104.083-.167v-.088l-.085-.087V7.85l.085.044.168-.218.19-.398.134-.334.057-.493.043.262.022.261-.201.382-.064.202-.086.135-.05.088-.104.195-.042.164.042.076h.506l.422.044.444.032.237.001.267-.13.302-.107.271-.117.297-.137.174-.062.381-.045.06-.129.15-.5.237-.409.307-.442.34-.354-.308.405-.23.425-.17.36-.126.185-.1.396.027.05zm1.245-.567l.052-.307.053.088.052.088.081.24.022.2-.063.148-.136-.01-.095-.126.034-.32zm.666.081l.203-.032h.175l.176.053.175.052h.175l-.263.106-.261.039-.282-.014-.29-.077.066-.098.126-.029zm-.064-.168l-.185.162-.01-.205.055-.207.12-.21.187-.161-.045.411-.122.21zm.963-.28l.183.106.219.131.273.066-.266.042-.324-.042-.218-.113-.273-.162.182-.077.224.049zm.297-.378l.179-.01.283.055.22.02-.25.093-.21.064-.264-.01-.25-.103.095-.079.197-.03zm-.15-.277l-.093.225-.246.224-.175.131v-.087l.042-.226.116-.18.412-.296-.056.21zm-1.073-.609h.216l.268.032.326.13.162.054-.108.054-.221.036-.265-.036-.22-.059-.318-.157.16-.054zm.186-.217l.012-.2.045-.278.118-.224.176-.175v.263l-.088.219-.263.395zm.858-.11l.313.019.362.023-.373.132-.268.06-.263-.016-.33-.112.56-.106zm-.11-1.314l.078.22-.01.305-.01.275-.101.21-.044-.263v-.482l.086-.265zm-.171.253v.548l.084.295-.103.107-.108.062-.286.093.16-.22.084-.252.042-.253v-.169l-.042-.127.042-.126.253-.253-.126.295zm-.933-.175l.634-.2.383-.006-.088.108-.1.096-.28.143-.223.03-.35-.112.024-.06zm.727-1.238l.268-.108.312-.054.312.022.18-.02-.045.107-.09.108-.178.108-.223.054h-.49l-.232-.018.186-.2zm-.401-.046l-.054-.234v-.235l.054-.281.106.094.054.14.054.234v.282l-.074.231-.14-.23zm-.017.567l.266-.071.248.012.368.108-.265.09-.197.084-.155.013-.183-.042-.131-.093.049-.101zm-.43.85l.421.126h.211l.21-.084-.083.211-.127.169-.126.168-.085.211-.042.422-.21.168-.17.127.043.042h.084l.295.169.295.084h.296l.168-.042.127-.084h.126l-.21.21-.254.17-.126.126-.084.253.042.168v.043l-.211.084-.21.126.083-.295v-.295l-.042-.042-.168.169-.17.168-.083.211-.043.127.043.126v.042l.042.085v.042l-.042.084-.043-.169-.084-.168-.21-.338-.127.76.042.126.084.084-.126.085h-.169l-.295-.043-.337-.042-.296-.042.043-.21.126-.212.084.127.085.126.253.169.21.042.127.042.127-.042-.17-.168-.126-.17-.126-.126-.21-.084.294-.169.211-.21.127-.296.084-.337-.169.084-.126.127-.38.253.422-.59.21-.296.254-.253.126-.253.042-.295.043-.253-.043-.295-.21.295-.211.337-.042.17v.168l-.043.38-.38.463.17-.21.084-.254.084-.21v-.254l-.084-.126-.084-.084-.17-.127h-.041l.126.464-.253-.084-.084-.043h-.38l.844-.506.21-.084.211-.126.17-.211.126-.211zm-1.348 3.061l.196.053.197.11.35.333-.244-.05-.197-.108-.302-.338zm.884-1.538l.049-.557.178-.285.132-.268v.279l-.047.339-.132.271-.18.221zm-.348-.428l-.057-.17.094.084.095.116.018.121v.152l-.124.295v-.369l-.026-.23zm.277-2.623l-.154-.294-.131-.219.22.175.218.22.132.087.088.088.044.132.008.227-.073-.021-.352-.395zm.18.583l-.285-.136-.136-.12-.063-.07.454.075.179.127.136.114-.285.01zm-.216.849l.085-.211.126-.21.043-.254.084.169v.126l-.084.169-.043.169-.21.295h-.043l.042-.253zM16.466 5.47l-.105.106-.263.148.162-.264.059-.115.114-.062.088-.044.093-.04.19-.021-.242.221-.096.07zm.993-.405h.337l-.084.084-.169.085h-.295l-.084-.043h-.042V5.15l.337-.084zm-.21-.21l-.117.17-.137.064-.01-.17.094-.147.211-.253.02.202-.062.133zm-.15-.677l.105-.06.21-.058.21.059.157.118h.052l.053.059-.228.044-.19.017-.473-.118.105-.061zm-.294-.545l.064.126.042.18v.232l-.02.21-.159-.158-.062-.453.032-.253.103.116zm-.748.305l.274.108.227.164.228.217-.046.054-.273-.108-.182-.054-.091-.107-.137-.054-.09-.108-.183-.162.273.05zm-.678.876V4.53l.101-.283.102-.236.028-.047.051-.048.049.142.013.184-.05.33-.101.284-.166.241-.027-.283zm1.481-.265l-.055.115-.112.114-.278.115-.278.057-.279.058.223-.23.223-.114.556-.115zM13.787 6.5l-.165.132-.088.08-.084-.127-.096-.176-.03-.162V6.08l-.085-.169-.127-.169.169-.042h.21l.17-.042.084-.042.084-.042.085-.085.042-.126.042-.211.084-.21.085-.085.084-.042-.042-.042h-.042l-.211.126-.211.084-.169.085-.168.168-.043-.295-.042-.168-.084-.127h-.042l-.085.21-.084.254-.042.21.042.254-.253-.338-.084-.168v-.213l.084-.084.127-.085.126-.084.084-.126.043-.085.042-.126.084-.253.042-.085.068-.097.084-.063.143-.008V3.8l-.126.21-.084.212v.21l.042.253.126.127.085.169.126-.296.084-.295v-.295l-.084-.126-.084-.253.295-.043-.042.211.042.253.084.211.169.169.169.168.084.085.042.084h.042v-.084l-.042-.127-.039-.253.064-.02.043.14.055.197.056.24.074.12.169.126.38.169-.085.126-.084.085-.085-.127-.126-.126-.295-.127-.296-.084-.295-.042.127.168.042.085-.042.126-.169.253-.21.253-.085.127-.042.126v.169l.084.126zm-.464-1.315v.136l-.104.18-.107.126-.062-.317.042-.221.137-.348.066.216.028.228zm.117.116l.278-.22.241-.099-.047.248-.088.225-.209.131-.234.039-.145.049h-.097l.3-.373zm.28-1.319l.072.145.007.267-.118.428-.167-.228-.032-.285.064-.24.088-.217.086.13zm.323-.248l.063.03.05.048.102.141.151.284.056.393-.158-.2-.201-.16-.095-.263.032-.273zm.62.712l.166.064.127.098.133.175.218.478-.13-.044-.235-.147-.121-.132-.159-.492zm.684 1.044l.282-.14.282-.047.234-.095-.07.123-.137.159-.231.127-.506.074.053-.108.093-.093zm-.227.07l-.25.057-.283-.086-.223-.184-.142-.17.236.041.236.087.237.128.189.128zm-1.32.588l.095-.159.179-.178.082-.12.065-.154.013.177-.035.277-.085.179-.104.19-.155.091-.078-.143.024-.16zm.638-2.527l.282.09.234.178.152.166-.256.001-.218-.106-.21-.147-.18-.22.196.038zm.89-.147l.01.221-.02.243-.2-.21-.063-.201.027-.3.046-.282.091.234.11.295zM16 2.738l.192.071-.145.083-.189.052-.337.005-.241-.07.192-.142.27-.036.258.037zm-.433-.725l.067-.165.23-.182.099-.05-.138.517-.18.263-.227.164.149-.547zm-.663.278l-.112-.172-.069-.157-.039-.264.122.155.226.076.118.162.032.14.049.111-.088.309-.035-.102-.037-.1-.167-.158zm-2.672 2.045v-.14l.044-.188.22-.187.266-.187-.044.187-.132.187-.177.188-.177.14zm-.147-1.478l.21-.037h.133l.155.037.15.105.23.098-.279.057h-.25l-.25-.105-.198-.103.1-.052zm.127.393l.108.147v.196l-.162-.098-.108-.147-.108-.147v-.147l.27.196zm-.31-1.326l.031-.189.085-.22.116.232.027.262-.049.226-.044.3-.104-.167-.053-.137-.01-.307zm-.478-.153l.116.05.117.102.116.254.226.35-.273-.221-.095-.147-.104-.2-.103-.188zm6.426 3.73l-.162.163-.138-.024-.103.01.1.042.057.044-.138.042-.128.046-.129-.046h-.086v.046l.086.046-.086.045h-.086l-.128-.045h-.086l.086.09h-.214l-.086-.045-.086-.045.042.09-.042.046h-.042l-.128-.045-.087-.046h-.086l-.042.046.086.045.086.046-.062.042-.066.03-.128-.072h-.086v.045l.125.083-.056.029h-.1l-.097-.066-.042-.046-.086.046.086.09.042.046h-.086l-.128-.045-.086-.046h-.086l.172.091-.122.03-.1-.041-.079-.078h-.086l.128.137-.043.045-.086-.045-.129-.091-.086-.046h-.128l.128.091.178.128-.17.015-.208-.173-.053.032.176.141-.1.058-.113-.07-.086-.043h-.13l-.037.04.142.029.113.07-.184.072-.184-.086.014.072.1.071-.142.086-.129-.086-.025.08.11.079-.1.086-.113-.034-.044-.044-.043.044.143.093-.057.057-.13-.062-.125-.024.184.128-.056.071-.046-.046-.173-.043v.043l.13.088v.044l-.044.044-.13-.086-.13-.044.088.13.13.088-.044.043h-.04l-.26-.173.1.145.146.158-.029.044-.09-.017-.127-.113-.086-.044.043.088.058.07.16.13-.113.028-.192-.142h-.086l.315.255-.1.042-.217-.081-.13-.093.044.086.086.088.245.137-.159-.007-.123-.022-.184-.128.042.1.093.094.233.09-.25.002-.2-.092-.17-.137.223-.354.245-.273.113-.157.022-.12h-.086l-.13-.261-.13-.262-.174-.521-.09-.135-.075-.108-.18-.192-.174-.26-.044-.13-.035-.15-.233-.374-.166-.3-.043-.174-.036-.193-.008-.199-.086-.173-.086-.086-.086-.086-.2-.065-.158-.064-.12-.175-.136-.196-.042-.128-.097-.192.287.386.159.172.17.113.093.064.13.044v-.088l-.13-.043-.13-.087-.435-.485.174-.044.173-.044.13-.13.044-.044.044-.087v-.172l.086-.088.13.261.086.044-.174.044-.13.086-.23.27-.117-.009-.042.043.173.087h.39l.088-.044.086-.086.043-.043.087-.044v.044l-.044.043-.086.13-.086.262-.044.13v.13l.13-.348.086-.13.087-.13-.13.435v.478l.13.479.086.26.174.217.029.103.101.115.052-.05.091-.176.183-.174.182-.132.155-.183.1-.211.106-.193.167-.079.634-.207.445-.378.267-.123.36-.128.127-.107.18-.042.097-.054.339-.064.138-.064-.115.046-.246.114-.138.044-.41.235-.273.131-.263.111-.307.258-.139.119-.2.08-.223.044-.187.044-.115.046-.208.415-.094.236-.152.179-.09.043-.137.088-.048.103-.064.096.054.16-.01.086-.084-.003-.044.044.044.044.086.044h.087l.044.087h-.13l.044.088.201.024.07.1-.154-.028-.073.036.24.104.096.076.032.076-.106-.027h-.044l-.042.032.214.091.128.042.003.063h-.226l.01.065h.044l.164.044.044.044-.218-.03.012.074h.044l.111.044.042.057-.153-.013v.044l.086.043.11.027.042.058h-.176l.014.057.17.044.1.1-.135.02h-.044l.066.066.084.015.1.028.141-.065.174-.13.39-.262.197-.155.19-.074.053-.017.433-.105.467-.074.456-.07.489-.23.336.07.256-.055.3-.09.231-.117.085-.054.288-.167.233-.078.258-.047.258-.047.565-.047.263-.027.3-.095.776-.444.255-.236.287-.268.106-.204.189-.368.222-.386-.431.99-.137.226-.138.192-.214.115-.358.208-.253.123-.186.128-.21.132-.242.047-.51.05-.465.058-.232.039-.258.141-.043-.022h-.086v.095l-.096-.017zM11.85 2.475l.116.064-.183.113-.152.077-.2.078h-.203l.1-.157.153-.155.264-.085.105.065zm-.214 1.664l-.295-.126-.211-.085h-.169l.084-.168V3.59l-.042-.337.085.084.042.042.21.042.17.085.084.084.042.084.042.253-.042.211zm.111.115l-.057.182-.073.152-.157.165-.178.169-.16.088.043-.21.137-.237.148-.159.18-.15h.117zm-.752-1.805l.052-.084.33-.186-.031.169-.095.14-.096.047-.241.047.08-.133zm-.294.015l-.047-.327-.012-.445.248.34.032.338-.065.256-.156-.162zm-.192.707l-.236.06H9.8l.189-.178.236-.059.283-.059.236.059-.236.177zm.164.255l.062-.206.125-.206.103.491-.012.25-.1.195-.116-.11-.06-.171-.002-.243zm.322.823L10.7 4.16l.085-.062.12-.1.237.015.137.043.283.148-.133.044-.113.03-.175-.001-.147-.03zm.042.528l.01-.442.334.015-.169.169-.084.168-.042.211v.211l.38-.253.168-.169.127-.21.035-.073.095.2.123.168.084.168.042.043.042.084-.295-.042-.169-.042-.168.042-.633.253.075.01.052.032.168.042.211.042.211.042h.084l.127-.042-.169.253-.084.253-.042.296.126-.043.127-.084.126.084.127.127.126.126.127.085-.253-.042h-.253l-.253.042-.211.168-.084-.042-.043-.042.085-.126.084-.338-.042-.168-.042-.085-.085-.126.253-.085.194-.136-.226-.022-.253-.085-.347-.01-.155.026.155-.11.078-.164.052-.104.074-.275zm.091.965l.084.126.043.127.042.168-.042.169-.085.21-.042-.041.042-.38-.042-.38zm.007-.032l-.263-.024-.307-.115.148-.074.292-.032.541.095-.188.064-.112.033-.111.053zm-.614-.543l.084-.338.149-.21.21-.201.02.318-.07.253-.098.22-.253.261-.042-.303zm.312.575l.126.042.127-.042v.674l-.169-.168-.126-.169-.211-.422.253.085zm-2.57-2.323l.337.305.464.506.131.159.127.271.2.193.231.108.476.325-.044.105.044.044.149.116-.053.064.076.036.074.032.044.128-.074.054-.002.055h.14l.085.113-.137.048.182.038.052.097-.148.035.194.07.064.085-.084.017-.044.042.044.044h.172l.1.073-.142.055.086.044H11.174l.085.113-.166.017-.086.042h.086l.086.044h.13l.078.024.042.07-.162.036h-.044l-.044.042.172.044.134-.022.07.084-.202.024-.086.042.086.044h.086l.132.008.052.065-.14.015v.044l-.044.042h.13l.086.044.044.042-.044.042-.044-.042-.042.042v.044h.044l.044.044v.086l.044.086.086.086.042.128.13.044h.086l.044.086h-.172l-.044.044.13.043.161-.033.075.094.116.032.08.08h.043l.01-.102h.211l.337.014.113.084-.497.046-.302.086.533-.019.253.014-.253.113-.577.064.351.062.295-.042.11-.008-.326.161-.344.043.258.043.302-.042v.086l-.288.1-.316.03h-.172l.295.056.474-.049-.038.072-.044.043-.172.05-.355.019-.3-.037.299.116.101-.008.248-.022.196-.007v.042l-.439.11-.158.017-.115-.027-.127-.056.123.115.172.025.088-.003.223-.024.196-.03-.03.097-.384.065-.263-.026-.086-.042-.137-.039.18.137.13.044.14.022.075.01.226-.02.122-.036.048.12-.24.035-.286-.013-.194-.052-.206-.108.12.155.203.101.12-.008.306.011.201.036-.056.082-.308-.023h-.295l-.13-.073-.086-.042.224.177.1.007.258.042.29-.008-.037.086-.247.022-.312-.04.101.075.284.036.24.01-.033.084-.121.042h-.147l-.258-.062.09.087.19.058.226.037-.032.074-.153-.01-.226-.062-.328-.392-.357-.393.052-.275.064-.253.243-.452-.172-.3-.218-.344-.506-.882-.411-.558-.316-.412-.146-.38-.216-.342-.13-.172-.182-.162-.172-.128-.172-.086-.172-.128-.149-.225-.143-.302-.258-.386-.258-.344-.355-.33-.232-.243.345.234zm.112.413l-.195.196-.252.103-.443.03.157-.148.204-.133.212-.03.317-.018zm-.42-.195l-.232-.071-.225-.162.263-.04.162.03.162.05.182.183-.312.01zm-2.08-.198l.185-.128.155-.113.27-.069.222-.029.095-.001.066.043-.06.075-.048.092-.476.132h-.41v-.002zm.485.447l-.2-.111-.095-.184-.046-.054.24.014.295.21.126.17.127.21-.447-.255zm.337-.297V3.8l-.126-.168-.211-.127.21-.042.17-.084-.043.21zm.096-.042l.125-.28.412-.416-.09.345-.108.233-.376.407.037-.289zm.712-.057l.19.148.276.064.38-.01.063.095-.516.01-.263.106-.105.106-.146.191.162.027h.21l.334-.057.17-.117.126-.126.074-.127.057.09.439.637-.231-.032-.221-.084-.154.069-.295-.042-.295-.084-.295-.043-.296-.042.127-.168.084-.17.042-.21-.025-.132-.032-.126-.28.258-.126.127-.043.168v.211l-.126-.253.21-.295.127-.127.166-.173-.009-.061.09-.263.021-.231.52.43.116.106-.21-.062-.211.022-.201.064.096.106zm-.263.548l-.165.184H6.99l-.018-.182.055-.169.3-.324v.169l-.041.169-.046.153zm-.968.24l.401.01.36.01.516.064.359.094.285.075.179.01.147-.071.237.074.21.044.092.206-.222-.083-.238-.034-.565-.049-.243-.062-.41-.108-.315-.062-.454-.032-.34-.086zm.297.156h.421l-.084.043h-.126l-.17.126-.126.127-.126.168-.042.169-.085-.042-.042-.042v.168l-.042.211-.042.38-.084-.169-.17-.169-.294-.253v-.042l.295-.042.253-.169.253-.21.21-.254zm-.45 1.731l-.201-.128-.124-.196-.106-.312-.06-.196.183.147.186.245.121.44zm-.652-1.098l-.113-.029.105-.192.121-.116.257-.085.266-.084.253-.042-.158.184-.296.24-.435.124zm-.523-.686l.167-.134.18-.052.284.022.297.088-.22.138-.237.108-.558-.03.087-.14zm-.64-.61l.053-.14.27.324.112.375v.187l-.176-.15-.179-.21-.082-.245v-.14h.001zm-.014.368l.042.085.211.253.21.168h.043v-.042h.675l.295-.126.23-.167.264.01.263.064-.378.093-.253.052-.16.064-.21.074-.095.105-.127.168-.012.139.117.064.064.01.084.21.085.338.084.169-.337-.337-.338-.38-.38-.38-.379-.337-.38-.295.17-.21.126-.085.042-.127v.295l.044.125zm-.449-.364l.075-.253.153-.172.15-.216v.216l-.008.192-.127.243-.23.221-.013-.231zm-.706.552l-.085.106-.263.116-.278.007-.24-.034-.138-.059.462-.179.231-.059h.277l.034.102zm.069-.324l-.074.074-.243.042-.253-.126-.264-.063.306-.136.233-.01.22.042.107.094-.032.083zm1.258 1.955L4.507 6l.131.22.132.261.11.169.065.23-.043.212-.044-.088-.044-.261-.176-.393-.087-.174-.186-.213.142.257-.176-.044h-.219l-.175.044-.132.087-.131.044.131.088.22.044H4.2l.175-.044.176-.088.175.437h-.088l-.131-.044-.176-.087-.263-.088-.263-.088-.263-.044-.263-.131.088-.218.307.044h.263l.263-.088.088-.087.087-.132.088.132zm2.908 1.177h.042l-.084.126-.042.085-.18.226-.286.158-.295.037.168-.21.105-.144.295-.179.277-.1zm.136.396l.022-.2.032-.085.053.198.05.185V8l-.113-.111-.074-.179.03-.179zm2.19 1.862l.064.053.052.064.074.074-.165.042-.266-.189-.156-.148.127-.085.113-.032.157.221zM8.38 9.34l-.248-.052h-.043l.17-.127.21-.168.126-.211.085-.211h.042l.295.295-.126.042-.085.042-.126.043-.127.042-.21.126.379.085h.422l-.127.042-.126.042-.316.024-.195-.014zm-.21-.223l.051-.509.101-.255.113-.18.064-.147.08.203v.212l-.036.177-.066.164-.124.195-.183.14zm.832.285l.054.06.283.227-.158.06-.123-.171-.17-.152.114-.024zm.07-.03l.136-.06.113.126.337.21-.253.014-.155-.126-.177-.164zm.29.415l.127-.042h.258l.129-.042.086.086.128.086.101.1-.38.084-.337-.071-.113-.071-.086-.086.086-.044zm.073-.676l-.41.049H8.82l-.257-.05.103-.048.154-.05.275-.051.187.052.153.049v.049zm-.25-.204l-.126-.085-.253-.253.127.042.24.13.181.208-.168-.042zm-1.021-.71l-.002.229-.169.337-.082-.265-.054-.271.054-.28.05-.251.101.15.051.15.05.2zm-.32.44l-.163-.007-.148-.091-.2-.186-.202-.234-.1-.093-.148-.09.351.068.19.127.212.317.209.189zM5.442 6.613l-.464-.338.255.09.226.054.228.106.24.194-.24.02-.245-.126zm.309.266l.408.029-.169.09-.133.052h-.268l-.23-.044-.26-.11h-.045l.135-.05.172-.036h.225l.165.07zm-.784.17v-.042h.126l.127.043.084.421.253.422v.084l-.169-.21-.126-.211-.295-.422V7.05zm.46.505l-.07-.127-.04-.278.058.052.057.053.115.158.077.128.014.14v.24l-.21-.366zm.258.383v-.422l-.126-.21-.169-.17h.38l.379-.126-.169.127-.084.168-.084.211v.253l-.042.042h.084l.042-.042.127-.042v.253l.042.253.126.253.169.169-.211-.085-.21-.168-.17-.211L5.6 8.02l.084-.084zm.628-1.09l.047.108-.047.162-.093.27-.14.216-.233.162.047-.27.419-.648zm-.04 1.584l-.087-.172-.042-.214V7.83l.086.044.086.086.044.215.042.472-.13-.216zM4.66 5.425l.058.174.015.233-.056.233-.1-.218-.07-.26L4.5 5.39l.036-.184.124.22zm-.136.87l-.154.051-.206.05h-.359l.154-.1.205-.051.36.05zM3.49 6.1l.199-.167.199-.056.443-.205-.116.222-.278.15h-.2L3.49 6.1zm.453-.997L3.86 4.85l.14.084.14.085.091.175.056.19.037.315-.204-.181-.106-.175-.07-.24zm-.411.258l.21.042.17.127.28.14-.321-.014-.21-.084-.338-.21h.209zm-.17.084l.168.127.169.084.21.085h.17l-.17.042-.168.042-.169.084-.168.127v-.169l-.042-.21-.085-.17-.126-.126.21.084zm-.053.402v.179l-.09.179-.136-.135-.047-.18.042-.224.047-.22.137.177.047.224zm-.251-.869l.064-.168.19-.378.063.25-.032.2-.132.21-.141.141-.012-.255zm.115 1.566l-.046.229-.093.184-.138.184-.23.183v-.229l.093-.23.184-.183.23-.138zm-1.129-.012l.186-.128h.185l.324.064.277.064-.231.128h-.231l-.51-.128zm-.001.325l.202-.116.287-.042-.17.214-.16.116-.284.042-.348-.052.473-.162zM1.695 7.9l-.175-.361-.14-.464.281.197.17.302.104.278-.034.279-.206-.231zm.402.5l-.085-.084-.042-.084v-.169l.042-.21v-.085l-.042-.126-.126-.253-.085-.127-.126-.126h.421l.211-.043.085-.042.084-.126.169-.127.084-.084h.126l-.126.126-.084.127-.043.21v.17l-.042.084.338-.127.168-.126.085-.169.21.253.253.21.253.127.17.043h.168v.042h.084v-.042l-.21-.253-.254-.253-.126-.127-.127-.042-.168-.042-.17.042.043-.422.295.169.253.126.295.17.296.083.506.506.38.549h-.043v.421l.042.211.084.21-.318-.3-.204-.239-.183-.24v.325l.05.308.107.19.127.126.168.084.211.042h-.168l-.127-.042-.295-.127-.253-.126-.253-.127.126-.084.085-.042.042-.084.042-.127v-.169l-.042-.168.042-.127-.169.085-.253.506-.042-.17-.126-.126-.127-.084-.168-.084-.043-.042-.042-.043v-.042l.169.085.21.042h.212l.168-.085.042-.042h.043l.084-.042.084-.042.085-.042h.084l.084-.042-.21-.043-.211-.042-.253-.042H3.91l-.211.042-.21.127v-.211l-.043-.169-.084-.168-.127-.127-.042-.126-.127.253-.084.168v.253l.042.085.085.21.126.17v.21L3.11 8.19l-.17-.295-.168-.253-.126-.085-.211-.084h-.337v.084l.168.295.253.211.295.211.296.169v.042l-.464-.042-.548-.042zm1.138-1.393l.295.043.169.126.38.38-.296-.085-.21-.084-.17-.169-.168-.21zm2.221 2.028l-.084-.218-.064-.258-.017-.297.198.157.131.21.066.208v.21l-.066.209-.164-.221zm-.59-.408l.224.226.458.435-.338-.091L5 9.092l-.156-.169-.098-.21-.042-.289.162.203zm-.744.153l.085-.126.042-.17.126-.252h.042v.253l-.084.21-.084.043-.127.042zm-.76-.464l.084-.168h.042l.127.295.042.126.084.127-.464-.169.085-.21zm-.178-.283l-.092-.231V7.57l.092-.277.186.231.047.277-.045.23-.093.232-.095-.231zm.444.256l.231.128.117.154.131.307-.116-.103-.18-.098-.183-.388zm-.054-.31l.084-.042.085-.042.253-.043.506.043-.295.168-.169.042-.21-.042-.254-.084zm-.492.322l-.306-.143-.295-.243-.285-.36h.159l.148.051.221.159.159.243.199.293zm-.564.69l-.126.21v-.42l.001-.193.42.066.17.042.168.042h-.169l-.169.042-.168.084-.127.127zm.6.278l.497.046-.09.09-.09.045-.225.09-.542-.089.135-.09.091-.046.225-.046zm-.102-.175l-.361.047h-.137l.18-.192.227-.144h.226l.226.048-.361.24zm1.993.754l-.237.042-.216-.025-.2-.113.191-.046.238-.042.187.012.231.07-.194.102zm.466.656l-.076-.086-.056-.197v-.183l-.047-.192.18.152.093.209.036.386-.13-.09zm.719-.59l-.088.192-.184.148-.184.149.086-.24.088-.192.136-.147.184-.148-.038.238zm-.13-.206l-.169.21-.126.211-.085.253-.042-.21-.042-.169-.127-.127-.126-.126h-.085l-.084-.084-.084-.043h.59l.253-.042.295-.042-.168.169zm1.36.19l-.168.127-.21.126h-.212l.137-.168.169-.127.2-.084.254-.042-.17.168zm.539.107l-.127.084-.295.042.101-.115.142-.064.295-.084-.116.137zm.238-.233l-.095-.169-.076-.082-.082-.012.136.22-.146-.052-.105-.158-.159-.042.137.178-.189-.052-.165-.22-.095-.02.137.191-.137-.052-.1-.11-.085-.086-.132-.087.09.131.079.09-.121-.048-.097-.055-.086-.086-.16-.075.127.147.022.042-.105-.059-.108-.052-.189.106-.347.107-.466.057-.342.044-.343-.044-.384-.098-.383-.25-.47-.261-.51-.234-.26-.068-.599-.115.803.061.623.233.337.179.454.19.258.154.182.055.182.022h.211l.412-.042.426-.13.128-.044.086-.07-.512-.39-.427-.386-.386-.452-.36-.476-.155-.197-.197-.169-.172-.07-.17-.087-.388-.18-.225-.122-.214-.103-.385-.261-.512-.3.256.086.214.128.427.26.427.146.427.174.086.044.17.086.325.06-.027.114.043.044h.042l.433.629.267.324.224.24.272.28.298.217.4.204.282.14.59.182.535.113.118.226.094.175-.094-.013zM5.73 8.714l-.049-.189.05.048.048.047.147.142.39.33-.292.142-.39.047.098-.142.049-.236-.05-.189zM8.406 9.79l-.113-.169-.113-.224.225.055.042.156.14.224-.18-.042zm.269.042l-.098-.169-.117-.22.113.052.102.11.281.183-.281.044zm.136-.23l-.189-.145.201-.01.263.275-.06.056-.215-.175zm1.12.638l-.179.01-.123-.034-.138-.053-.476-.238-.028-.05h.086l.094-.041.078.084.055.05.191.117.159.032.153.017.214-.042.172-.043h.086l.05.08-.394.111zm1.176.552l-.042.086-.042.086-.043-.042-.17.086v.086l-.042.086-.042.042-.086-.128-.129-.129.043-.128v-.042l-.043-.042v-.042h-.086v-.042l-.042-.043.042-.086.044-.042.086-.086.043-.086.128.086.17.086.256.17-.045.124zm.568.337l-.042-.127-.21-.253-.254-.168-.253-.169-.168-.084-.215-.157-.248-.25-.322-.308-.23-.348-.29-.398-.591-.843-.38-.38-.168-.168-.211-.127-.407-.18-.435-.17-.445-.166-.422-.169-.362-.187-.419-.309-.168-.126-.17-.21-.451-.564-.506-.59-.675-.577-.575-.424.322.128.115.125.222.145.159.137.462.35.223.185.21.197.478.531.408.45.159.087.11.11.27.143.338.158.169.052.234.027.282.144.182.084.182.042-.155.113.056.014.189-.096.084.042H7.8l.05.027-.134.057v.042l.253-.042.169.084-.085.043.042.042.164-.073.091.115-.047.07.174-.028.126.084-.042.043h-.091v.042l.084.042h.042l.085-.042.2.158-.158.01H8.68v.043l.21.042.117.032.084.084-.158.01H8.89l-.043.042.085.043h.126l.152.028.098.085-.123.055H9.1L9.06 7.94l-.042.042.21.042.117.033.103.092-.133.046-.127-.042h-.084l.253.084.208.029.084.126-.25-.029H9.23v.043l.253.042.19.074.085.084-.233-.074-.211.042.295.085.282.07.14.156-.204-.004-.134-.052-.042.042.169.085.25.038.097.127-.052.256.042-.084.042-.113.201.169.169.126.084.084.127.043.052.084-.042.199.042-.084.042-.046.042-.042.127.072-.014.156.056.168.013-.224.03-.046.14.073.028.169.042.18.042-.126v-.127l.084.127.043.126.042.253.055-.189-.013-.106v-.084l.126.253.041.114.002.223.055-.111.029-.186.125.213.001.335.085-.295.082.213.014.168-.098.04-.084.127-.042.127-.043.084h-.042l-.084-.042v-.042l-.007-.132-.076-.096zm.068.408l.049-.049.18.05-.049.15-.049.099v.298l-.08-.199v-.3l-.051-.049zM11.07 12.7l.051-.05.202-.102h.102l.1.05.254.102-.101.05h-.555l-.05.051V12.7h-.003zm.279.11l-.053.052-.052.054-.106-.052.106-.053h.105v-.001zm-.695.34v-.087l.044-.044h.09l.089.087h.087l.088-.043.044-.044v-.044h.177l.044-.044.044-.044.133.133v.088l-.044.09-.133.089-.134.044-.087.044h.442v-.044h-.044l-.044-.044.044-.044h.088v.09l-.044.043.044.09-.178.044h-.264v.043l.089.044h.09l.133-.044.133-.043.088-.088v-.088l.043-.088-.043-.087h-.088v-.142l-.044-.088-.044-.043-.044-.044h.134l.177-.044.044-.09.043-.043h.044l.073.51-.204.331-.221.31-.044-.133-.133-.087v.043l.044.088.043.133-.043.09-.088.09-.093-.05v-.044l.044-.043v-.09l.088-.044-.088-.044h-.177l-.088-.043v-.177l.044-.044-.088-.044-.133-.044-.088-.044-.09-.044v-.135zm-1.49 1.066v-.202l.114.304-.113-.102zm.129.35h.092v.092h-.092v-.093zm-.06-.166h.215v.115h-.106l-.108-.115zm.325.435h-.125v-.162l.125.081v.081zm.079-.271v.076l-.093-.076v-.076l.093-.076v.152zm.147-.265v.167l-.056.056v-.223h.056zm.355-.572l-.045.133-.044.044-.044.044h-.09l-.043-.044-.044-.09-.044-.132-.044-.044H9.7l-.044.09.044.089.043.133.044.09-.09.176-.043.09-.09.09-.133-.045-.09-.044-.021-.076-.052-.116-.02-.137.021-.146.075-.1v-.044h-.044l-.09.09-.045.082-.078.068-.044.044-.086-.034v-.177L9 13.67l.09-.043.209-.034h.177l-.044.31v.177l.09.134-.044-.31.043-.311.09-.044h.133l.09.044.089-.044-.177-.044h-.177l-.355.044-.087-.044.09-.044h.266l.089-.043v.043h.133l.044-.043h.267l.043.177.044.043.037.088zm.002-.401l-.045-.046-.046.046h-.135l-.045-.135-.092-.09v-.09l.092-.046h.09l.092-.046.135-.18h.09v.045l.046.135.046.091.045.046.091.045-.045.046v.091l-.09.091h-.229v-.003zm.452.035h-.09l-.043-.09.09-.089v-.045h.045v.133l.131.135-.133-.044zm-.265.813l-.01-.282.273-.244.092-.098.187-.007.09-.096-.085.238-.231.103-.186.054.05.045.094-.003.136-.098.14-.005-.04.19.054.185.01.28-.046.049-.047.001-.047.002-.05-.093-.056-.233-.007-.187-.05-.045-.045.048-.09.097-.04.189-.047.001-.049-.045v-.046zm-.114.157l-.051-.047v-.095l.05.048.102.047.152.047h.05v.047l-.05.095h-.102v-.095l-.05-.047h-.101zm.162.418l-.051-.05h-.05l.05-.204.204.1-.05.104-.103.05zm.18.147l-.047.096h-.047l-.048-.047v-.192l.096.096h.048v.047h-.002zm.027-.282l-.052-.104.052-.105h.052v.053l.105.052v.104l-.052.053-.105-.053zm.034.31v-.175l.059-.059.059.06.059.058v.06l-.117.058h-.06v-.001zm.202.235l-.128.015-.057-.057.013-.07v-.058h.115l.115.115-.058.055zm.245-.212l-.056.057-.113-.113-.057-.113.226.056v.113zm-.13-.267l-.063.064-.062-.064v-.064l.25-.064-.125.128zm.015-.212l-.025-.7.049-.05.202.087.1-.004-.098.051-.047.094.003.093.052.091-.047.095.007.187-.098.05-.098.006zm.344-.04v.057l-.064.057h-.064v-.115h.128zm-.084.284l-.096.05-.05-.097v-.096h.097l.096.096-.047.047zm.094-.421l-.042-.086v-.129h.13l-.088.215zm.295 1.691l-.042-.042v-.172l-.086-.044.022.086-.044.086-.042.086-.054.118-.042.044-.138.096h-.215l.044-.086v-.086l-.042-.042.086-.128.042-.086.044-.086-.086-.042-.052-.085.042-.086v-.086l.086-.086.182-.044.128.043.086.086.086.128.129.086v.172l-.043.172h-.09v-.002zm.027 1l.032-.347.186.06h.044l.044-.045.042.172.044.086.044.044h.042l.044-.044-.086-.042v-.258l.086-.086.042-.086-.042-.086h-.086l-.043.042v.086l-.042.086-.086.042h-.09l-.097-.054v-.258l.044-.086v-.044h.086l.044-.042v-.086l.052-.074.042-.044h.214l.215.044.128-.044h.086l.042.044.13.086.044.086.01.095h-.128l-.129-.04-.086-.043-.182-.052.042-.086-.042-.043-.044.086v.086h-.086l-.086.043-.172.13v.042l-.086.042v.086l.086-.086.086-.086.086-.086.129-.042v.214l.042.172.044.172.172.128v.042l-.043.086-.086.044h-.086v-.044l.044-.042.042-.044-.042-.086h-.044l-.086.086-.042.044v.086l.042.042.13.086.128.043h.129l.374.053-.042.044h-.042l-.054.048-.279-.014-.128-.042-.128-.044-.128.044.172.042.172.044.492.042-.13.056-.168.042-.452-.054.13.042.128.044.3.042.128-.01-.086.086-.13.042-.17.01-.128.044.128.042.192-.02-.042.086-.042.042-.292.022.139.04h.472l-.086.087-.128.042-.258.044.042.042h.214l.214-.042-.042.042-.086.044-.128.042-.258.042.258.044.214-.044v.086l-.086.042-.172.086h-.086l-.086.042h.514v.044l-.128.043-.128.043-.258.043.042.042h.258l.258-.042.044.042-.258.128-.258.042.042.044h.258l.258-.044v.086l-.086.044-.386.042.3.042h.258l.042.044-.042.044h-.086l-.086.042h-.172l-.128.044.128.042h.43l-.086.086-.086.042-.258.044.086.042h.13l.267.016-.053.07-.472.043.177.055.127.01.308.032-.172.043-.172.043-.354-.011.214.086.258.043.255-.025.047.11-.33.09-.285-.041-.33-.22-.257-.214h-.086l-.172-.086h-.129l-.042-.042-.042-.086.025-.1-.01-.104-.084-.422-.063-.6-.094-.96.008-.357zm.076 2.011l.06.304v.197l-.092-.184.032-.317zm-.477-.14l-.047.047-.186.186H10.9l.093-.093.047-.14.093-.047.093-.047.047.092h-.047v.002zm.007-.305l.05-.201.05-.049.052-.05.099.25v.099l-.049.1h-.1l-.102-.15zm.062.202h.115v.115h-.058l-.057-.057v-.058zm.587 1.456h-.12l.061-.18.06.06.06.12h-.06zm1.118.97h-.143V21.1l.336-.047.28-.042-.28.116-.193.048zm.05-.247l.222-.059-.19.112-.223.059.003-.105.187-.007zm-.156-.059v-.069h.19v.068l-.19.001zm.523.498h.07l.068.14-.209-.14-.14-.14.21-.07.208-.07v.14h-.209l-.069.07v.068h.071v.002zm.148.2l.221-.11.277-.112v.056l-.277.11-.111.055h-.11v.002zm.476.004l-.34.125.057-.11.114-.054.23-.11v-.053h.057l.117.054.052.038-.287.11zm1.488.405l-.206.02-.088-.044-.086-.086-.13-.172-.044-.086-.086-.044-.077-.02-.13.044-.044-.044h.044l-.088-.044-.086-.044-.086-.042-.13-.044-.086-.042-.13-.044h-.13l-.085.086-.13.044-.13-.044.086-.086.044-.086-.088-.13-.159-.062-.167-.132-.13-.086-.13-.043-.13-.044-.06-.06-.174-.085-.13-.13-.173-.086-.174-.086-.172-.13-.086-.086-.044-.086-.26-.13-.131-.076-.133-.186-.044-.258.044-.258.087-.258.162-.216.044.13v.086l-.04.211-.046.221v.086l.035.125.095.133.098.13.173.042.216.044.086.13.174.086.13.086.086.086h.088v.044l.086.044.044.044.086.011h.303l.086.044.044.042.086.032h.044l.086.044v.044l.088.172.13.13.173.13.174.044.088.044.13.043.13.044v.13l.043.044h-.042l-.044.044.086.086.13.042.13-.042h.174l.174.344.13.13.085.044.078.013.095-.013.13.044-.196-.012zm1.557.319h-.09l-.09-.044-.132-.09-.356-.133-.402-.044-.356-.044h.09l.09-.043.311.043.312.044.58.223.046.045v.043h-.003zm-.124-.226l-.34-.17-.383-.043-.427-.042h-.427l-.042-.042-.042-.086.511.042.511.086.896.128h.042l-.128-.128-.17-.042-.383-.086-.427-.042-.383-.043h-.47l-.085-.042-.042-.042v-.17l-.086-.086.086-.043h.086l.084.068.128.042.17-.042h.087l.384-.238.129-.17.042-.213.086-.042h.042l.128.042h.128l.137.017-.056.113-.017.127-.042.128-.02.17.032.081.02.105-.039.082-.128.043-.184-.056-.135-.027h-.128l-.298.042h-.128l-.17-.015-.124-.044-.086-.084h-.042l-.042.042.042.042.128.086.299.042h.597l.256.086h.383l.34.042h.043l.086.086h.17l.042.043-.042.042-.086.042-.128.042-.213.042h-.084l-.088.085zm1.486-1.992l-.168.042h-.218l-.121.04.133.014h.185l.17.01.092.042.116.017v.052l-.29-.032-.31.042-.098.064.452.022.2.061v.098l-.166-.07-.17-.018h-.19l-.173.078h.052l.014.032.337-.017.261.066.046.057-.316-.045-.296.037h-.051v.04l.339.005.2.047.082.078-.002.059-.138-.073-.188-.02-.295.037v.04l.042.003h.314l.268.13v.043l-.043.044-.046-.044-.046-.044-.045-.043-.133-.044h-.09l-.044.044.044.087.112.044v.35l.045.39.06.058.05.086.025.12-.017.054-.025.032-.039.006-.054-.028-.04.003-.083.025-.123-.035-.135.044-.268.044-.265.03h-.135l-.135-.044-.044-.087.36-.088.134-.088.135-.131.046-.13.044-.174.045-.35.135-.043h.09l.045-.044-.045-.044.045-.044v-.043l-.09.043-.089.044-.089-.044h-.09l-.089-.086h-.09l-.267-.043v-.611l.089-.305v-.306l.046-.61-.044-.306v-.84l-.046-.087.063-.002.001-.045h-.045l-.05-.038h-.089l-.045-.055.045-.044h.09l.076.042v-.675l.19.761.046.088.045-.044h.09l.045-.044.09-.044v.044l-.009.052-.128.043h-.045l-.043.079h.09l.09-.044h.045l.047.052-.135.044-.137.08.09.043h.045l.18-.044-.045.044-.045.044h-.09l-.045.088-.044-.088-.047-.084-.042.04.045.088.046.044.043.088v.087l.152.214.2.287h.13l.04.04.042-.036.003-.04h-.09l-.053-.048.234-.046.22-.042v.137h-.18l-.089.039-.038.043v.044l.043.044h-.229l-.083.039.324.04.356.093-.192.002-.533-.002-.032.037.297.04h.141l.186.051-.147.005-.187.04-.213-.004.004.034.32.042h.123l.129.04h.045v.101l-.261-.032-.263-.013-.13.042.045.037.068-.003h.059l.057.027.088-.037.222.042.076.027.04.027-.004.054-.324-.022-.24.01-.079.042.34.04.124.043.196.054-.351-.042h-.187l-.178.077-.003.05.133-.051.112.04.24.022-.035.029zm.108-.007h.06v.057h-.058v-.057h-.002zm-.123 1.762l-.045-.045.045-.093h.184l-.093.138h-.09zm.623.132h-.184l.045-.046h-.184l-.183-.045.045-.093.093-.045v.092l.138-.045.184.045-.045.046h-.046v.045l.184-.092.184.045-.046.046h-.045l-.046.045v.046h.046l.092-.046.093-.045h.277l-.23.184h-.183l-.139-.046-.05-.091zm.396.33h-.245v-.043l-.049-.044v-.09l.098.044-.049.044v.044l.147-.044h.147l.049.044-.098.046zm.015-.175l.23-.138.092-.046h.139l-.23.184-.093.046-.138-.046zm.332.106l-.138-.045.138-.046.046-.045.046-.093h.138l.093.046-.23.138-.093.045zm.18.036l.043-.044.044.044h-.088zm.062-.088l.183-.09h.23l-.093.09h-.32zm.384.084l-.093-.045.23-.093h.093l.138.046-.23.092h-.138zm.533.004h-.24l.097-.047h.047l.192.047h-.096zm.058-.218h-.19l.048-.047.094-.047h.19l-.095.047-.047.047zm.833.225h-.228l.046-.046-.046-.045-.045.045-.137.046h-.182l.09-.046v-.045l-.045-.046h-.045l-.046.046h-.045l-.046-.046h-.045l.136-.091.091-.046.091.046v.137l.137-.046.182.046v.045l.273-.091v.046h-.045l-.091.045v.046zm.185-.132l-.047-.052.095-.053h.094l-.094.053-.048.052zm.086.125v-.046l.046-.09h.045l.274.09h.09v-.09l.092-.046h.136l.183.136h.045l-.91.046zm1.03-.084l-.046.045-.091.046.045-.091v-.092l-.045-.045.09-.046.046.046v.137zM13.038 2.02l.26.18.163.105.16.22-.231-.046-.225-.102-.19-.177-.095-.17.159-.01zm-3.13.126l-.178-.094-.105-.152-.084-.169.168.053.149.094.261.289-.21-.02zm.263-.14l.046-.253.137-.189.074.117v.116l-.052.19-.081.075-.098.084-.026-.14zm4 1.152h-.204l-.245-.059-.282-.098-.207-.133.195-.035.274.012.19.065.188.102.09.146zm.136-.386l.068-.21.062-.205.044-.192.049.037.04.042.05.064.02.095-.02.143-.072.106-.12.14-.072.206-.049-.226zm-1.39-.909l.088-.088.21-.077.219-.024.26-.09-.093.163-.205.116-.26.017-.262.069.043-.086zM9.186 22.285h-1.31l.043-.042.634-.052h.633l.632-.042.633.094.042.042H9.186zm6.246-1.143h.195v.06l-.13.061h-.065l-.065-.06.065-.061zm.128-1.346l.084.042.253-.042.084-.042.085-.085-.295-.042-.17-.042-.126.042-.126.085-.084.253.168-.17h.127m.017-.099l.064-.052.19.052-.062.054h-.253l.06-.054zm6.27 1.028l.085.042h.506l.169-.085-.169-.084h-.21l-.212.042-.168.042.337-.21.169-.043h.21l.085.17.126.126.213.253h.042l-.042-.127-.086-.169-.253-.253h.169l.17.043.169.084.126.126.042.127v.126l-.042.255h.042l.042-.042v-.044l.043-.042.042-.084.042-.127-.084-.21-.253-.212-.297-.126-.169-.042h-.169l-.168.042-.169.042.127-.126.168-.085.211-.042.169-.084.042-.042h-.084l-.085-.043h-.084l-.084-.042-.127.042-.084.085-.127.084-.084.084-.127.253-.126.085-.084.042-.043.042.085-.169.084-.126.127-.127.042-.168v-.085l-.085.085-.253.253-.084.126v.295l-.042.127-.127.126.211-.168.127-.042M10.537 18.74l-.042-.084-.043-.169.043-.126.042-.085.126-.042.085.084.042.127-.085.084h-.084l.042.042h.042l.043-.042.084-.084v-.127l-.042-.126-.085-.042h-.168l-.127.126-.042.042-.042.085.042.21.127.127.042.042h.253v.042l.042-.084h-.295m.38 0l.084-.084-.169.084h.084m.085-5.782l.008-.035-.008-.007v.042m1.182 8.019h-.21l-.085.042-.042.042h.337v.042l-.126.042h-.296l.296.042v.043l-.043.042h-.21l-.211-.042-.043.042.17.042.168.042-.169.084-.21-.042h-.043v.042l.127.043.126.042-.042.042h-.169l-.042.042h.169v.127l-.042.042h-.085l-.126-.042.126.084.085.084.042.127.084.126.042.042.085.043h.126l-.042-.043.042-.042.042-.084h.127l.042-.042.169-.211.126-.253.127-.169-.127.127-.042.042-.084.042-.042-.084-.085-.042-.042-.043-.042-.084.084-.084.042-.169.085-.253-.085-.042-.084.042-.21.042h.294l-.084.085m-.35.568l.112-.111.11-.056.055.11-.055.055h-.112l-.11.056v-.054zm.193.49l-.056.057-.055.055-.11-.055-.111-.056.111-.056h.221l.111-.055-.11.11zm.37-.369l-.056.112-.056.055h-.165l-.165.056-.166.056h-.165l.056-.11.33-.056.221-.055.166-.058zm-.083-.055l-.275.055-.33.112v-.11l.055-.056.11.056.167-.056h.273v-.001zm-3.802.21l.169-.042h.21v-.042l-.337.042-.337.085-.295.084-.677.169h-.716l-.338-.042v.042l.38.084.421.042.38-.042.381-.084.38-.127.38-.168m-3.884.38v-.085h-.421l-.127.084h.548m-1.73-.126l-.085.084v.042h.085l.084-.042h.38l.042-.042v-.042h-.127v-.085l-.084-.042h-.38l-.126.084v.127l.042-.084.084-.043.211-.042.211.085h-.337m11.6-.066l.102-.084-.057.015-.044.069m-.336.05l-.138.048-.14.094.418-.094.186-.095-.048-.047-.278.094m.501-.146l.037-.063-.11.093.073-.03m-8.39-.176l.085-.042.042.042h.633l.126-.042h.255l.21-.042.38-.127.422-.126.21-.042h-.379l-.253.084-.253.084-.55.085-1.138.042.084.042.127.042m-.211-.084l-.127-.127-.084-.084h.126l.675.042.295.042h.548l.211-.042.76-.253.168-.042H8.51l-.295.042-.422.127-.421.084h-.845l-.085-.042h-.042l-.042-.042h.295l.253.042h.253l.253-.042.464-.127.464-.126.253-.042.253-.043v-.042H8.3l-.464.169-.506.084-1.012.042-.21-.084-.17-.042v-.042l.085-.042h.085l.084-.043.126-.168.043-.042v-.043l.042-.042h.042l.042-.042h-.042l.126-.084h.085l.084-.085.084-.084.127-.042h.084l.042-.042-.126-.042-.042-.043-.085-.042H6.74l-.126.042-.17.127-.041.042-.085.042-.042.042-.084.043h.126l.043.042v.042h-.17l-.168.042-.126.127-.127.126h-.042l.042-.169.042-.126.169-.042.169-.042.126-.127.127-.126.084-.043h.042v-.042l-.168-.042-.17.042-.42.338-.338.337v-.084l.042-.085.127-.084.126-.127.084-.126.085-.169.21-.042.085-.042.126-.084.043-.085v-.084l-.043.042-.38.042-.168.042-.126.127h.084l.042.042-.253.169.127-.38-.042-.042h-.043l.085-.169.042-.21h-.042l-.042-.043-.085.17-.042.126-.042-.17v-.168l.042-.21v-.17l.042-.168-.042-.126-.042-.127.042-.169-.126.085-.043.168-.084.127v.169l.042.126.127.127v.084l-.042.084-.043-.168-.084-.127-.126-.169-.127-.126h-.042v.21l.084.338.085.169h.084l.084.042.085.126.084.17.042.041.084.042-.084.338-.042.168-.084.17-.043-.127-.042-.085h.042v.042l.043-.042h.042v-.253l-.042-.126-.043-.169-.084-.084.084.295.043.126v.17h-.043l-.084-.212-.042-.126v.084l.042.253-.042-.042-.042.042-.042.127.042.126.084.21-.042.043-.127-.169-.21-.084h-.127l-.084.042.084.085.084.126.085.084.168.043.127.042h-.337l-.17.042-.041.084-.042.085-.085-.127H4.38l-.043-.042v-.127l-.084-.084h-.084l-.085.042-.21.085.042.042-.127.042-.042.042-.169.169h-.084l-.042.042h.084l.085-.042.168-.085.127-.084.126-.084h.253l.042.084h-.042l-.21.084-.211.085h.126l.169-.042.126-.043h.127l.126.043-.042.042v.042h.253l.085.042.126-.042-.084.253-.042.126.042.127.168-.084h.253l.043.084-.17-.042-.168.042h.211l.253.084h-.21l-.127.042-.085.043h.464l.211.042.253.042v-.042l-.21-.085H5.6l-.042-.042v-.38l.296.127.253.127-.043-.085v-.126m.54-1.322l.16-.054.16.054-.16.054-.106.106-.16.054h-.106l.212-.214zm-.477.027l.111-.112h.111l-.167.167-.11.112h-.168l.223-.167zm-.994-.891l-.059-.056-.059-.055v-.333l.118.112.06.167.117.278-.177-.113zm.265-.417l-.042.129-.042-.086v-.129l.042-.256.042-.042.042.256-.042.128zm.459 1.02l.094-.048.282-.047-.329.189v-.048h-.047l-.047.048-.048-.048.095-.047zm-.343.443l.085-.085.21-.21-.126.253-.084.126-.127.084.042-.168zm.27.494l.056-.056.113-.055.113-.11.113-.056.169-.055-.113.165-.112.11-.337.11v-.053h-.002zm-.038.204h.194l.34.145h-.34l-.194-.049-.145-.096h.145zm-.377-.076h.043l.042-.042v-.042l.086-.172.172-.172-.042.172-.129.214-.128.128-.042-.042v-.044H5.37zm-.188-.101l-.267-.057-.086-.095-.084-.138.133.05.133.051.216.189h-.045zm-.232.265l-.313.045.135-.135.133-.045h.27l-.09.09-.135.045zm-.01.482l.046-.135.045-.135.09-.135.135-.045-.046.135-.045.09-.225.225zm.32-.044h-.126l.127-.168v.168zm-.046-.995l-.046-.135v-.135l.135.225v.135l.046.134-.135-.224zm.168 1.004l-.052-.107v-.266l.106.106v.106l.053.321-.107-.16zm.387-.128l-.135-.09-.135-.09-.046-.134.09.09.18.045.135.09.09.134-.18-.045zm-1.731.414h.464l-.295-.042H3.91l-.042.042v.043l.042.042.127-.085m5.232-.084l.508.042.801.042.38.043.423-.043-.042-.042-.297.042-.338-.042-.59-.042-.632-.042-.34.042-.295.042h.211l.211-.042m-1.265-.295l-.422.126-.465.085-.464.042H6.19v.042l.169.042h.801l.255-.042.506-.169.464-.168.253-.042.253-.043h-.422l-.464.127m-4.136.21h.211l.211.043.042-.042-.337-.085h-.211l-.127.043-.084.042-.042.042-.042.042v.042l.168-.084.211-.042m-1.224.084l.126-.042.169-.042h.253v-.042l-.295-.043-.085.043-.126.042h-.084l-.043-.085v-.042l-.126-.084-.042-.084v-.127l.042-.042.084-.042-.126-.042H2.35l-.043.042-.042.084v.042l.042.169-.042.042h-.084l-.042.084-.127.043-.042.042-.042.042v.042h.042l.042-.084.085-.042h.168l.169.042.169.042v.042h.042m21.102-.21l-.295-.085v.042l.253.169.126.042.169.042v-.042l-.127-.127-.126-.042m-13.084 0l-.168.085h.337l.084-.043.042-.042v-.042l-.084-.084-.126-.085-.253-.042v.042h.084l.084.043.169.042-.084.084-.085.042m-7.005-.042h.422l.127.042h.042l.042-.042v-.042l-.084-.042h-.59l-.213.084-.127.127.213-.085.168-.042m11.156-.013h-.047l-.138.141.092-.047.093-.094m-5.12.055v-.042h.042l.042-.042-.127.042-.084.042h.126m-7.006-.084l-.042.084.126-.084.169-.042h.169l.168.042-.126-.084-.169-.043-.21.043-.085.084m7.344-.127v-.042h-.169l-.126.042H9.65l-.042.043-.042.042.253-.042.21-.043m-6.245 0v-.042h-.042l-.169-.042-.042.042-.086.042.128-.042h.127l.084.042m5.698-.042h.21l.17-.084.168-.042.21-.042v-.043l-.295.043-.253.042-.126.042-.084.084m-6.88-.042l.042.042v-.042l.042-.042h-.042l-.042.042m.8-.084v-.042l-.084-.127-.126-.086-.127.044-.168.084-.042.042-.043.085.127-.127h.295l.084.085.043.042v.042l.042-.042m7.807-.169v-.042l-.084-.044h-.084l.042.044-.042.084-.042.042-.127.043h.127l.084-.043.126.043h.086l.17-.043.126-.126.042-.044v-.084l-.042-.042-.043-.043h-.21v.085h.042v-.042h.126v.084l-.042.086-.169.084-.086.042-.042-.042h.042v-.042m-.379-.042h.126l.085-.044h-.211v.044m-1.18.084h-.085v.085l.422-.127.421-.128h-.337l-.295.086-.127.084m-1.266-.507l.084-.043.084-.084h-.168v.042l-.211.127-.211.168v.043h-.084v-.085h-.506l-.296.127-.126.042-.084-.042-.043-.042-.126-.043h-.17l-.296.043.085.084h.042l.169-.042h.21l.085.084-.211.042h-.169v.042h.042l.211.043.127-.043.084-.084.21.084h.254l.084-.042.085-.042.042-.042.084-.042h.21l.043.042.042-.042.422-.085.464-.084-.38-.042v-.042l-.042.084h-.21l.084-.084.086-.042m-.965.344l-.127.062-.126-.062h-.063l.19-.063.252-.062-.126.125zm2.105.035v.086l.506-.17.548-.211-.548.084-.253.042-.253.127v.042m-4.897-.084l-.084-.085-.042-.042-.085.042.211.085m4.981-.211l-.084.042v.084l.295-.126.295-.084.675-.127-1.012.169-.169.042m1.941-.005l.102.045h.103l-.103-.045h-.102m-1.94-.206l-.17.084-.17.17.423-.17.38-.084.422-.084.421-.042h-.464l-.421.042H9.82l-.21.084m2.752.09l-.056.089h.056v-.09m-.144-.016l-.045.047h-.046v.047h.137v-.047l.046-.047h-.092m-.541-.04h.14v.046h-.14v-.047zm-2.407-.117l.17.042.043-.042-.043-.042h-.126l-.17.042-.127.084-.084.084.21-.126.127-.042m.255-.38l-.085.042-.17.043-.253.253h-.169l-.042.042-.042.084-.042.042.084-.042.127-.084h.126l.085-.127.17-.084.126-.042h.211v-.042l-.042-.043-.084-.042m-4.77.127l-.042-.085-.169-.168H4.46l.126.337.042.127.127.126.084.042h.084l.085-.042.042-.084v-.042l-.084.084h-.127l-.084-.084-.085-.085-.084-.126v-.127l.084.127.085.126.168.042h.17v-.168l.041-.042-.042-.085-.042-.126-.084-.127-.211-.253-.042.169v.21l.042.17.084.126h-.042l-.042-.042m.03-.34l-.042-.17.086.129.086.172.086.128.042.172-.128-.086-.086-.172-.044-.172zm14.658.382l-.043.253.127-.337.084-.17.169-.168.126-.084.17-.084h.336v-.085l-.084-.042h-.21l-.17.042-.252.169-.17.253-.083.253m-7.682.135v.054h.147l-.098-.054h-.049m-1.899-.05l-.084-.043-.127.042-.084.085.084-.043h.295l-.042-.042h-.042m13.463-.295l-.084-.042h-.084l-.085.042h-.084l-.044.042-.042.042-.084.043.38.042.212.042.168.084-.042-.084-.042-.084-.169-.127m-13.126.253l.127-.042.21-.169.212-.126.126-.042h.084v-.043l-.042-.042h-.042l-.21.085-.17.168-.21.127-.211.126.126-.042m.043-.253l-.169.042h.295l-.042-.042h-.084m-3.25-1.604l-.296.169-.035.03.12-.072.21-.127m-.759.127v-.211l.043-.127-.253.338-.085.168-.042.085v.084l.042.084-.042.042-.042.085-.042.042-.042.126.042.085v.084l-.042.084-.043.127-.042.169h.042l.085-.17.084-.168.127-.126.168-.085.211.043.084.042.085.084h-.085l-.168-.084h-.085l.043.042-.085.084-.126.042-.127.085-.042.084-.042.084.042.043h.042l.085-.043.168-.126.042-.042.043-.042.042-.127H6.4v.127l-.042.084v.042l.042.042v-.084l.042-.084.042.042v.042l-.042.042v.084l-.042.043.042.042.127.126.126.042.295.085.043-.042-.127-.211.127.042.084.042h.21l-.168-.21-.084-.085-.127-.042h-.168l-.085.042h-.042l.127.084.084.085-.169-.043h-.084l-.042.043-.042-.085v-.168l.21-.043h.127l.126.043.211.126.253.169h.253l.169-.085h.042l-.042-.042-.084-.042-.043-.042-.084-.042h-.422l-.126-.042-.042-.043-.042-.042h.421l.127-.084h.168v-.042l-.253-.127H7.33l-.38.253-.126-.042-.085-.042-.126-.042-.169-.127.042-.042h.085l.168.084h.211l.38-.084-.338-.169-.168-.042h-.169l-.084.042-.042.085-.085.042-.084-.042.084-.085v-.084h.295l.085-.042.084-.042-.126-.042-.085-.043h-.084l-.169.043.218-.18-.091.053h-.042l-.043-.042.043-.042v-.127l.042-.042.126.042.127-.042.21-.084.085.042v.084l.169.085.21.042h.253l.211-.042-.295-.17-.337-.083.168-.211.085-.253-.295.21-.17.085-.083.169-.211.084h-.127l-.084-.127.042-.126.084-.127.169-.21v.126l-.042.127-.084.126-.085.084.042.043h.043l.126-.043-.084-.042.084-.126.042-.127.042-.253-.21.211-.127.169-.042.126-.042.042v.043l.042.042-.042.042-.042-.253v-.211l-.085.127-.084.168-.042.169-.042.169.042.042v-.042l.084.084.042.084-.042.042-.084.043v-.17l-.042.043-.043-.042H6.19l-.084.042-.042.127-.042.042h-.085l.085-.253.168-.169v.169l.042-.042m-.143 1.08l-.143.124v-.06l.072-.062.216-.123-.145.122zm.865.036l.073.054.153.172-.352-.209.126-.017zm-.297.208h.103l.206.153h-.103l-.103-.05-.205-.103h.102zm.79-.218l.103.015.251.088-.265.015-.155-.022-.096-.066.162-.03zm-.177-.305l.194-.064.13.065-.194.066h-.26l.13-.067zm-.6-.292h.183l.366.106h-.182l-.122.054-.364-.106.12-.054zm-.038-.23h.096l-.096.056-.096-.055h.096zm.717-.44h.179l.313.137h-.357l-.312-.091.177-.046zm-.204-.185l.093-.093.23-.138-.138.23-.23.14.045-.14zm-.744.219l-.042-.126.042-.127.084-.084v.464l-.042-.043-.042-.084zm-.103.506l.086-.086.042.042-.128.128v.129l-.128.042-.128.086.172-.214.084-.127zm-.17.015v-.128L6 18.966l.172-.172.086.042-.043.042h.043v.086l-.172.172v-.042l-.129.172-.086.128v-.128l.043-.086.128-.172h.042v.086l.044-.086zm8.84.661l.17.211-.17-.253v.042m.254-.507l-.042.212-.042.085v.126h-.086l-.042-.042-.042.042.084.042.086.042.084.211v-.168h.043l.042.042v-.042l-.085-.043-.042-.042v-.21l.042-.085.043-.042.042.084v.253l.084-.042v-.253l-.042-.084-.084-.086h-.043m-8.905.676h.042l-.042-.042v.042m-.844-.464v.085H5.6l.042-.043.084-.126.043-.169.084-.168-.127.042-.126.084-.085.169-.042.126m.066-.082l.047-.056.144-.167-.193.334v-.111h.002zm8.122-.552l-.127.127-.042.126-.042.169v.17l.042-.212.169-.253.126-.085.127-.042h-.253m-.338.169v-.085h-.042v.127l.042.126v-.168m-7.597-.38l-.042.042-.084.169-.042.127v.084h.126l.127-.084.126-.211.085-.211H5.81l-.085.084m.216-.035l-.086.128-.042.086-.042.128-.128.042v-.128l.086-.172.086-.086h.126v.002zm1.092.12h-.211l-.085.084v.042h-.042l.169.084.169.043h.337l.126-.043-.168-.084-.169-.084-.126-.042m.161.21h-.151l-.253-.116h.406l.101.059-.103.057zM1.041 16.8v-.296l-.085-.126-.042-.169v-.126l.042-.127.085-.168.421.042.422-.042.169-.043h.084l.084-.042.211-.21.085-.127v-.127h.253l.21-.084.211-.084.169-.169.126-.253.043-.295v-.295l-.085-.253-.126-.169-.169-.169-.21-.126-.212-.084-.168-.043H2.39l-.126.043-.17.084-.294.126-.127.085-.168.042-.085-.042-.042-.085V13.3l.042-.127.085-.084.21-.127h.675l.169-.042.21-.084.085-.084.042-.085h-.084l-.085.085-.084.042-.084.042.084-.084.042-.085v-.253l-.113-.104-.126-.07-.198-.042-.372-.055-.176-.071-.098-.056-.062-.09-.007-.092.042-.078.091-.07.05-.071-.071.03-.056.007h-.084l.126-.08.084-.084h-.168l-.098-.005.098-.042.084-.037.042-.042.042-.042H1.59L1.49 11.3l.182-.064.085-.127-.085.043-.155-.019.098-.042.113-.063.056-.042.028-.02-.147.029-.133-.014.085-.042.097-.037.127-.127-.127.043h-.084l.253-.169.253-.042h.295l.253.042.59.169.254.084.253.042.21.084h.211l.422.085.295-.042.253-.043.548-.126.548-.169.506-.168.296-.127.337-.042.337-.042h.295l.338.042.295.084.295.127.253.168-.253-.084-.126-.042h-.127l.295.126.169.127.084.042.043.084-.254-.126-.295-.084.295.168.17.127.126.126.084.085H9.39l-.169-.085-.169-.126-.379-.127.38.211.168.084.127.17-.042-.043-.254-.084-.168-.043-.127-.042.422.211.169.127.168.21h-.042l-.126-.126-.211-.127-.169-.042-.21-.042.294.127.254.168.21.211.169.295v.169l.042.169.042-.338-.042-.295-.084-.632-.127-.296-.21-.253-.254-.21-.295-.127-.21-.084-.254-.085H7.83l-.422.043-.422.084-.885.295-.422.169-.422.126h-.295l-.084-.042.084-.042.042-.042v-.042l.085-.085.042-.084.042-.21v-.254l-.042-.21-.253.294-.169.338v.21l.085.17H4.33l-.506-.085-.464-.127-.422-.126.085-.084.084-.085.126-.084.085-.084.168-.211.085-.506h-.042l-.17.168-.168.127-.21.169-.127.168-.042.085v.126l-.042.169-.17-.042-.168-.043h-.337l-.337.127-.296.157-.084.295-.042.295v.295l.084.296-.168.084-.211.126-.169.169-.126.21-.085.127-.084.338.042.168.084.338.085.295.126.169.169.126.169.084.21.043.338.168.126.085.169.126.042.084v.085L1.8 14.77l-.169.042-.169.084-.168.127-.042.126v.295H.956l-.168.042-.127.085-.042.084-.042.042v.253l.042.127.169.295.042.253-.042.126-.042.085-.127.042-.084-.042-.042-.042v-.085l.042-.126.084-.085h.127v-.042l-.043-.037H.577l-.127.042-.042.042-.042.085-.042.168.084.127.127.084.168.042.127-.042.084-.042.127-.126m3.845-6.401l.213-.306v.211l-.037.208-.078.21-.167.211-.055-.261.124-.273zm-1.988.022l.045-.18.18-.178.178-.133.179-.18v.18l-.09.179-.49.445v-.133h-.002zm-1.135 5.303h-.198l-.015-.071h.197l.098.049.05.049-.132-.027zm.011-.243l-.042.042-.086-.042v-.086l.042-.085.129-.086.17-.042h.17v.086l-.084.086-.128.086-.17.04zm.37-.002l-.214.101-.125-.034.192-.09.147.023zM2 15.69h-.136L2 15.623l.137-.067L2 15.69zm.318-.165l-.238.172.23-.27.008.098zm-.002-.285l-.13.184-.086-.032.108-.105.032-.111.022-.162.054.226zm-.068-.572l-.13-.177-.2-.155-.19-.169-.23-.136-.231-.147-.095-.147-.062-.22.032-.222.07.27.137.169.167.14.174.133.334.262.216.185.084.127.064.158.043.221-.068.214-.035-.266-.08-.24zm.23.582l-.064.14-.073.07v-.11l.095-.166.042.066zm-.613-1.681l.218-.132.262-.088.138-.015h.131l.211.06.22.12.173.142.132.218.087.261v.22l-.043.261-.044.132-.044.087-.132.132-.173.088-.218.076h-.174l-.01-.15.088-.044.174-.033.155-.077.111-.125.064-.12.044-.192v-.218l-.044-.187-.11-.131-.097-.086-.155-.085-.183-.027-.226.027-.217.096-.118.07-.042.116-.437-.305.26-.091zm.653 1.035l-.126-.21-.127-.211-.168-.17.168-.126.211-.084h.21l.212.042.126.127.085.337-.043.169-.084.168-.042.043-.084.084-.17.042H2.56l-.042-.21zM1.35 13.511l.085.095.148.14.44.273.159.148.125.193.133.22.07.24.02.203v.086l-.09.043.022-.232-.057-.238-.083-.177-.192-.179-.328-.285-.38-.295-.124-.15-.062-.17-.04-.161.146-.111-.02.232.028.125zm-.445.34l-.086-.173-.044-.172.017-.268.084-.22.201-.222.218-.15.26-.172H1.38l-.157.07-.253.2-.316.337.107-.37.2-.294.18-.19.24-.141.044-.044h.044l.086.044.086.086.13.044.26.044.26.044.086.043.13.044.043.086.044.13-.216.172.044.044-.26.044h-.561l-.13.086-.086.044-.174.172-.177.121-.086.216v.216l.086.258-.13-.13zm1.248.816l-.189-.18-.303-.195-.125-.082-.197-.078-.125-.052-.095-.117-.09-.226.014-.295.066.248.095.19.24.15.31.217.281.227.15.172.064.137.01.179-.106-.295zm-.79.706l-.018-.102.032-.173.113-.113.14-.07.183-.043.2.04.169.013v.143l-.123-.007h-.13l-.24.073-.094.084-.042.117.018.131-.162-.002h-.045v-.09zm.134.135l.118.027v.066l-.248-.027H1.3l.196-.066zm-.194.125l.2.064v.064l-.183-.017h-.133l.116-.11zm-.241-.125h.076l.076.076H.985l.076-.076zm-.111.152l.237-.012-.035.095-.106-.012-.118.035.022-.106zm-.113.397v.087h-.09v-.087l.09-.088v.088zm-.194-.117v-.19l.094.094-.094.096zm.1-.33l.126.124H.744v-.124zm.114.271H.769l.09-.088.089.088H.857zm.987.327l.126-.084-.042-.042h-.084l-.043.042-.042.084-.042.085v.084l.084.084.127.085.084.042.127-.042.084-.043.042-.084.085-.21-.043-.127-.084-.127-.253-.126h-.042v.084l-.084-.042h-.085l-.126.042.126.084.127.043.126.084.127.084.042.127-.042.042-.042.042h-.211l-.042-.042v-.169m.322-.094l-.134-.071-.097-.056.148-.035.14.091.056.14-.029.12-.084-.19zm10.923-.095l.077-.077h-.077v.077m-4.573-3.042l-.305-.127-.253-.169-.417-.313-.518-.365-.266-.084-.113-.042-.07.027-.046.042.295.084.295.127.592.422.29.19.28.162.302.127.346.006.131-.022h.042l-.29-.013-.295-.052M6.57 12.41l.084-.127.042-.042h.085l.253.085.253.168.463.338.253.168.211.127.295.126h.296l.253-.042.253-.084.168-.127.169-.21.042-.17v-.168l-.042-.126-.042-.17-.127-.168-.126-.126-.169-.127-.169-.084-.421-.084-.422-.085h-.675l-.337.042-.337.085-.633.168-.632.253-.38.127h-.422l-.421-.042-.422-.085-.801-.21-.422-.127-.38-.084h-.379l-.168.042-.043.042-.084.084v.085l.042.042.338-.042.337.042.38.084.295.085v-.043l-.043-.042-.463-.126-.211-.085h-.295l-.127.043H1.72v-.085h.043l.253-.042h.253l.463.127.506.126.464.169.464.126.506.085h.253l.506-.085.253-.126.295-.085.338-.168.295-.085h.169l.168.043.376.177.285.2.559.422.258.172.337.084.127.043.21-.043.17-.042.168-.084.084-.084.084-.043.043.043-.085.126-.126.127-.169.084-.169.042h.043l.042.042-.287.056-.317.013-.253-.084-.35-.21-.396-.282-.463-.338-.17-.084-.21-.084-.38-.085-.295.085-.126.084-.127.084-.084.127-.044.126v.295l.042.127.085.126.21.169.211.169.085.084.042.084.042.211-.042.127-.042.042-.127.042h-.126l-.211-.042-.211-.127-.169-.168-.337-.38-.21-.168-.17-.127-.253-.042H4.25l-.126.042L4.04 13l-.127.169-.084.21-.042.254.042.21.084.17.211.126h.21l.085-.042.084-.085.043-.168-.043-.127-.126-.126.042.084.042.126v.085l-.042.042-.042.042h-.084l-.085-.084-.084-.127-.042-.126-.002-.1.002-.113.126-.126.085-.042h.084l.169.084.168.126.59.59.296.254.21.084.254.084h.253l.285-.141.14-.155.084-.17.042-.168-.003-.167-.042-.168-.11-.156.068.029.084.042.042.042.143.07.152.183v.127l-.042.169-.126.126-.296.253-.126.169-.084.126-.085.211.042.21.043.17.084.21.169.085.126.042h.169l.126-.042.042-.042.085-.043.084-.084.042-.084.127-.211.084-.21.084-.085.169-.085.127.127v.169l-.043.042-.126.042h-.084l.084.084h.126l.127-.084.084-.253-.042-.084-.042-.127-.084-.084-.17-.042h-.168l-.084.084-.127.126-.126.253-.127.127-.084.126h-.084l-.085-.084-.084-.126.042-.17.042-.083.085-.127.168-.126.169-.085.169-.126.126-.169.042-.126v-.338l-.084-.168-.126-.17-.17-.126-.379-.21-.337-.211-.084-.169v-.21m1.681-.773l.346.055.337.043.296.168-.043.169-.042.084-.042.042-.21.043h-.17l-.126-.043-.169-.084-.237-.196-.275-.281h.335zm-.499.015l.056.029.084.042.24.24.253.21.253.127.155.028h.126l.225-.042.084-.084.07-.155.03-.098.07.042.042.084-.055.127-.127.126-.155.085-.169.042h-.21l-.17-.042-.15-.066-.164-.113-.259-.26-.141-.194-.127-.126h.04v-.002zm-.395-.042l.169.084.169.084.295.253.357.292.243.149.243.042.211-.032.179-.063.16-.092.127-.17h.042v.14l-.085.085-.168.155-.211.085-.253.042-.21-.042-.212-.085-.168-.084-.296-.295-.295-.253-.168-.127-.17-.126.041-.042zm2.21.914l-.07.126-.168.127-.116.052-.263.042-.117-.02-.238-.074-.295-.127-.253-.168-.548-.422-.253-.169-.21-.168v-.042l.252.084.28.128.39.337.174.211.21.127.211.126.295.042.29-.074.254-.126.047.074.042-.127.084-.084.042-.042-.04.167zm-1.712 2.034l-.06.073h-.061l.12-.073zm-.277.184l.117-.063-.06.125v.063h-.058v-.125h.001zm-.317.626h.073v.067h-.071v-.067H7.26zm.196-.132v-.116l.118-.117-.118.233zm-.086-.106v-.063l.057-.027.142-.224v.125l-.066.062-.076.036-.057.09v.063l-.133.063-.066.062-.066.062H7.04l.33-.25zm-.462.329h.082v.079H6.91v-.08zm-.437-2.588l.136.117.385.216.213.13.17.13.18.168.032.2-.02.18-.062.084-.118.045.116-.205v-.086l-.032-.135-.096-.166-.186-.146-.411-.242-.17-.086-.17-.108-.134-.168-.063-.198.053-.23.106-.137.159-.095-.17.211-.033.176.01.116.105.23zm.305.953l-.042.169-.098.169-.12.097-.182.092-.246.021-.233-.055-.234-.118-.15-.12-.159-.153-.273-.286-.278-.27-.147-.133-.162-.077-.187-.012-.176.105-.086.134-.042.135v.135l.07.193.105.114.218.098-.174.002-.155-.086-.106-.14-.042-.18.015-.152.042-.144.07-.157.127-.13.17-.064.154-.018.198.034.178.094.215.189.428.452.214.185.179.095.145.049.149.013.133-.02.12-.056.075-.104.065-.108.013-.115-.047-.165-.086-.143-.24-.208-.175-.113-.128-.093-.086-.18v-.226l.028-.155.071-.122.159-.128.128-.09.194-.01-.24.201-.055.13-.026.177v.226l.061.135.113.122.169.151.187.147.091.118.086.18.005.17zm.496.112l.01-.127-.032-.147-.115-.114-.173-.13-.397-.167-.243-.137-.158-.179-.084-.2.04-.115.017-.15.044-.128.086-.086.173-.13-.086.086-.104.125-.052.148-.01.149.112.239.127.127.2.136.16.095.22.106.233.136.179.211.022.233-.063.127-.084.084-.138.042.116-.234zm-.01.264l.243-.052-.273.179-.135.108h-.164l.214-.192.115-.043zm-.739.734v-.143H6.6l-.076.287v-.144zm.117.47l-.124-.27.124.134v.135zm.008-.647h-.062v-.123l.062-.062h.062l-.062.123v.062zm.084.356h-.069v-.263l.07-.088h.068l-.069.176v.175zm.002.287h.074v.087h-.074V15.4zm.113-.732l-.062.062.062-.187.125-.063-.063.125-.062.063zm.032.344v.157l-.074-.08.074-.077zm.154.354l-.117-.197.117.1v.097zm-.178-.432v-.115l.058-.057.057-.057-.115.23zm.075-.541l-.252.15.201-.2.101-.102.15-.05-.2.202zm.209.152l-.18.121.12-.182.122-.06h.122l-.184.12zm.376-.23l-.184.108h-.15l.24-.172.161-.08-.067.144zm-.837-1.444l.149.086.327.17.142.085.167.14.126.148.098.191.022.19-.007.15-.066.12-.07-.015.042-.136.028-.147-.018-.162-.066-.137-.212-.212-.277-.164-.552-.295-.116-.2-.008-.208.074-.127.168-.158-.104.179-.039.148.022.113.049.12.121.121zm-4.582-.882l.337.042.632.211V12.2l-.042-.042-.421-.127-.464-.084h-.253l-.211-.042.084.084h.338M12.433 13h.14l-.016-.022-.124.022m.212-.044l-.042.044h-.03l.03.042.042.043-.017.425.061-.127.042-.34L12.69 13l-.044-.044m.343.257v-.086l-.044-.042h-.127l-.086-.043.257.17m-1.927.16l-.1-.105-.05-.053h-.05l.1.105.1.052m.112-.227l-.053.182.103-.182.053-.044v-.093l-.053.093-.05.044m6.338-.397l-.084.211-.042.253.084-.253.127-.169.084-.21.126-.211-.168.168-.127.211m-14.655-.21h-.043v.042l.043.042h.126v-.042l-.084-.043h-.042m.168-.084l-.084-.042-.169-.042.042.084.043.042h.084l.084.042v-.084m0-.126l-.253-.127-.315-.111-.316-.032-.296.017.253.042.222.005.233.042.093.037.084.084.295.085v-.042m.677-.675l-.043.084-.042.042-.084.043-.086-.043.17.085.211.042.042-.042v-.042h-.084l-.042-.043v-.084l.042-.126v-.127l.21.295.212.253.126-.592v-.042l.042-.042.085.042.042-.042v-.042H4.29l-.169-.043v.043l.042.042h.127l-.042.212-.042.169-.127-.169-.084-.212-.169-.169-.084-.042h-.085l.043.126.042.085-.042.17v.169m1.602.169h-.042l-.085-.043-.084-.084-.084.295.126-.084h.127l.17-.042h.042l.085-.085.042-.084v-.084l-.085-.085-.168-.084-.086-.044-.042-.084v-.042l.042-.043.086-.042.084.042v.085l.084-.042.043-.043-.085-.084H5.39l-.17.042-.043.042-.084.043v.212l.127.085.128.084.084.084-.042.085h-.086m-1.941-.846l-.127-.042H3.11l-.127.042-.084.085-.127.168v.127l.042.126.085.17.126.041.085.043h.126l.127-.043.084-.042.042-.126.042-.253-.042-.169-.126-.127m-.027.338l-.088.253-.044.042-.088.042-.044-.042-.087-.042.044-.042h-.044l-.044-.085v-.126l.088-.211.043-.084h.088l.132.042.044.126v.127zm2.729-.338h-.169l-.169.085-.084.126v.253l.042.169.042.042.043.042.126.043.169-.043.084-.042.084-.169.043-.21v-.085l-.043-.084-.168-.127m.042.432v.13l-.044.086h-.086l-.086-.044-.086-.044v-.431l.086-.086h.086l.086.13.044.13v.13zm-4.094-.305v.126l-.042.127v.042l-.084.044v.042l.253.085.042-.043v-.042h-.042l-.042-.042h-.043v-.086l.043-.127v-.084l.042-.042.126.253.169.255.169-.635v-.042h.084v-.042l-.295-.084v.042h.042l.084.042-.042.211-.042.169-.295-.464h-.253v.084h.042l.084.042v.169m4.642-.337l-.21.042-.212.084.043.042h.084v.042l.084.253.085.213-.127.042-.042.042v.043l.295-.127.337-.128.085-.295-.042.084-.043.042-.126.127-.084.042h-.085l-.126-.464.042-.042.042-.042m1.435.253l-.126.126-.084.127.084-.043.126.043.085.042h.084l.084-.042.085-.085.042-.084v-.084l-.084-.127-.127-.126-.126-.169.084-.042H8.3l.042.042.043.084.042.085.084-.085v-.084l-.084-.042-.085-.042h-.21l-.085.084-.042.126.084.127.211.21.042.127-.042.042h-.084l-.127-.084v-.126m-.76-.38h.042v-.042l-.253.042-.211.042v.042h.127l.084.17.084.336.086.043.127.042.126-.042.127-.085.084-.126v-.127l-.042-.337.042-.042h.042l.042-.042h-.168l-.127.042v.042h.127l.042.464-.084.126-.085.042H7.5l-.128-.126-.042-.127-.085-.295.044-.042h.04m11.693-.548l-.042.126v.127l.084.295.042.253.042.042.127-.21.084-.211v-.506l.169.253.126.295.085.168-.042.17v.252l.084.084.084-.168v-.295l-.042-.127-.169-.295-.168-.253v-.084l.168.126.17.084h.379v-.042l-.17-.168-.21-.127-.253-.042h-.295l-.169-.127-.126-.126.084.084.042.085.042.042-.084.126-.042.169m.558-.2l.218.062.163.06.11.183-.164-.061-.217-.06-.326-.183h.216zm-.482.197l.054-.194.133.189.027.247-.054.243-.106.194-.054-.437v-.242zm-8.265.48h-.08l-.234-.064.235.127v.251l.079-.125h.078l.079.063-.08-.127-.077-.125m10.046-.14l.169-.337.084-.38.084-.337-.084.127-.127.126-.168.127-.127.126-.126.169-.042.21v.254l.084.21.253-.295m-.255-.042l.042-.21.043-.17.126-.126.21-.126v.084l-.21.38-.21.379v-.21zm-16.88.169l-.085.126h.38l.169-.042.168-.084.295-.211.253-.253v-.042h-.21l-.211.042-.338.084-.253.169.085-.253.042-.295-.042-.253-.085-.253-.084.042-.042.042v.084l-.042.085-.042.168v.127l.042.337.042.127v.126l-.042.127m.222-.147l.238-.143.285-.095.285-.047v.047l-.19.144-.238.143-.282.113-.29.078.192-.24zm-.197-.764l.09-.23.089.367v.229l-.073.278-.06-.278-.044-.182v-.184h-.002zm14.408-.019l.084.17.042.21.085-.169.042-.21-.042-.211-.127-.17-.084-.083h-.042v-.043l-.211-.084-.084-.042h-.296l-.168.084-.169.127-.169.084h.211l.042.042.549-.042h.084l.042-.042.084-.042.043.042v.21l.084.17m.042-.338l.09.103.055.126.007.14-.042.218-.027-.123-.149-.297V9.23l.066.057zm-.2-.126l-.338.084h-.38l.127-.127.21-.042h.17l.21.042v.043zm-.39.421l-.211.127-.085.084-.042.127.295-.085.127-.042.127-.126.126-.17.042-.126v-.084l-.168.169-.211.126m.23-.006l-.136.148-.169.064-.178.022.548-.37-.064.136zm2.893.048l.085-.042.126-.042.085-.084.084-.085v-.21l-.084-.211-.127.337-.169.337m.316-.295l-.068.123-.135.061.205-.428v.244h-.002zm-.57.085l-.042.126.253-.21.126-.127.084-.127.043-.126v-.085l-.085-.126-.084-.169-.042-.126-.042.084v.084l-.043.085-.042.042-.464.084h-.21l-.211.042.168.127.127.084h.38l.21-.126-.084.295-.042.169m.03-.491l-.126.064-.201.022-.159-.01-.116-.095.612-.084-.01.103zm.167.084l.056-.386.113.194v.194l-.113.194-.169.194.113-.39zm-10.832.111l-.126-.042.126.169.084.084.043.127-.043-.253-.084-.085M7.118 8.57l-.337.169h.042l.38.21.21.085.21.042h.17l.168.042-.126-.126-.085-.127-.253-.253-.21-.042h-.17m.394.166l.162.113.045.045.046.091-.235.009-.232-.078-.4-.175.137-.076h.182l.157.023.138.048zm4.755.34h.092l-.092-.047h-.14l.14.047m-1.43-.452l.122-.096.085-.169L11 8.19l-.085-.211-.042-.169v-.084l.042-.042.085-.169v-.169l-.043-.126-.084-.084-.126-.085-.253-.168-.085-.127-.042-.126h-.042l.126.295.043.295.042.169.042.126.126.127.127.084-.084.042-.085.084-.084.17-.042.379-.042.168-.04.203.137-.063.117-.01.126-.076m-.145-1.1l-.08-.178-.114-.412.257.19.163.15.037.178-.079.206-.184-.133zm-.128 1.11l.032-.126.042-.086-.001-.251.033-.242.086-.086.086-.086v.172l.043.215.047.153-.017.115-.04.086-.16.076-.15.06zm1.714.28l.047-.047h-.142l.048.047h.047m-.056-.26h-.047l-.047.048h.047l.047-.047m3.341-.103l.098.103.046.047.118.027-.057-.029-.12-.189-.085.04m-6.205-.824l.253.169h.084l.085.042.21-.042.17-.085.168-.042-.169-.084-.168-.085-.17-.126-.21-.042-.126-.042-.127.042-.169.042-.084.084.253.169M9.35 7.51h.088l.272.027.426.19-.13.044-.087.044-.262-.013-.219-.117-.218-.13.13-.045zm-.796-.587l.211.169.21.168.17.17-.085-.212-.084-.421-.084-.17-.085-.126-.126-.084-.253-.126v.421l.042.127.084.084m.147-.401l.15.155.1.258.05.207-.2-.103-.25-.264-.063-.176.012-.18.201.103zm12.304-.655l-.168.127.295.168.337.085h.338l.168-.042.169-.043-.253-.168-.127-.085-.126-.042-.21-.042h-.212l-.21.042m.484.063l.263.087.219.088-.263.044h-.263l-.263-.088-.22-.088.263-.043h.264zM1.073 5.024l.084.253.169.253-.295-.042H.735L.61 5.53l-.127.084-.126.127-.042.126.21.042.254-.042.295-.042.084-.042.127-.084.168-.085-.042-.084v-.211l.042-.169v-.126l-.084-.295-.127-.211-.168-.211-.042.042v.042l.042.127-.042.253.042.253m.01.717l-.211.042-.422.042.127-.169.21-.084h.296l.21.042-.21.127zm.049-1.191l.141.202.092.201v.202l-.043.252-.162-.324-.062-.263.034-.27zm-.218.39l-.253-.254-.337-.126-.253-.21.126.336.169.338.084.126.127.085.21.126.212.042h.168l-.084-.126-.042-.169-.127-.169m0 .38L.74 5.241l-.2-.146-.138-.19-.121-.259.253.084.204.145.179.201.123.246H.914V5.32zm17.684-2.405l.21.084-.084-.084-.084-.127-.042-.126-.085-.085-.084-.084-.127-.042-.21-.042-.211-.042h-.253l.042.126.126.127.253.168.38.085.169.042m-.72-.306l-.18-.133h.269l.224.046.224.135.09.045.09.135-.493-.135-.225-.093zm1.016.812l-.21-.211-.296-.169-.126-.084h-.127l-.084-.042v-.127l-.126.085-.085.084-.084.042-.084.084-.043.17-.084.42-.042.127-.042.085v.084l.126-.084.085-.085.126.127.127.126.084.127.126.126.211.085.211.042.21.042.085.042.085.084-.043.043h-.042l-.295-.127-.337-.084-.295.084-.17.084-.126.127.296.084.506.127.168-.042.169-.085.126-.084.085-.042h.084l.084.042.043.042.084.042h.21l.127-.042.253-.169.211-.126.127-.042h.126l.042-.042v-.085l.042-.042h.043l.084-.126.084-.169v-.337l-.084-.338-.084-.295-.043.169-.084.168-.126.338-.043.337-.168-.169-.211-.084-.084-.042h-.085l-.042-.042-.042-.042.126-.043.127-.042.253-.042.126-.084.043-.127.084-.126v-.169l-.042-.126V2.45l-.169.295-.21.295-.254.338-.168.295.253.38.126.168.169.169h-.59l-.043.042-.042-.042.084-.211.043-.211v-.21l-.043-.254h-.042l-.084.21-.169.17-.126.21-.085.211-.042-.126v-.127l-.084-.168-.084-.127-.127-.084-.126-.085-.085-.042-.084-.084-.084-.042-.085-.085.085.253.084.253-.548-.042v-.042l.126-.042.085-.084.084-.17v-.21l.042-.253.127.127.253.337.126.169.127.084h.379l.127-.169.084-.084.042-.127.042-.21-.042-.253-.042-.211-.084-.211h-.085l-.168.632-.043.338M18.7 4.813h-.42l-.28-.057-.28-.058.234-.114.235-.058h.234l.233.17h.14l-.096.117zm.919-1.353l.315-.35.211-.264h.044v.263l-.044.088-.042.133-.159.095-.337.094.012-.059zm.666.233l.179-.538.064.327.01.253-.01.253-.076.172-.093.093-.074-.148-.032-.17.032-.242zm-.5.358l-.092-.184-.138-.093.184.046.23.138.323.37-.039.018-.104.01-.117-.063-.108-.104-.138-.138zm-.287.388h.482l-.145.052-.096.106-.145.106-.154.034h-.147l-.116-.042-.115-.044.194-.106.242-.106zm-.523-.07l.13-.329.253-.327.021.243-.094.295-.116.201-.193.14v-.223h-.001zm-.756-.78l.169.042.126.084.221.24.074.274.044.247-.084-.169-.127-.21-.126-.127-.211-.085-.042-.168-.044-.129zm-.1.325l.289.105.192.156.192.26-.096-.052-.143-.052-.192-.053-.193-.104-.337-.312.288.052zm-.212-.83v.243l-.052.194-.053.098-.052.049-.209.146.105-.242.052-.243.104-.243.157-.194-.052.192zm.995.547h-.088l-.173-.044-.13-.088-.088-.13-.088-.131-.043-.13.173.044.174.131.305.305-.042.043zm.154-.525l.043-.218.044-.261.088.218v.261l-.044.261-.13.218-.044-.218.043-.26zM5.769 2.914l-.127.042-.21.126-.127.127-.127.126-.042.17v.168l-.127-.211-.126-.127-.38-.295H4.46l.084.422.126.169.127.084.169.126.126.127.042-.042v-.169l.169-.042.126-.084.127-.085.084-.126.127-.295.126-.253h-.042l-.082.042m-1.028.685l-.143-.203-.056-.214.2.148.168.162.113.162.056.162L4.74 3.6zm.943-.432l-.098.253-.38.295-.045.03.06-.281.084-.127.126-.126.127-.127.126-.042.085-.084-.085.209zm-2.618-.169l.085.253.126.127.127.168.168.085h.17v-.085l-.043-.126-.042-.127-.042-.084-.17-.21-.42-.254h-.043l.084.253m.299.02l.169.221.167.351-.242-.096-.188-.243-.075-.094-.086-.262.255.123zm.167-.189l.042.127.084.169.127.126.126.084.043-.042.042-.084V3.04l-.042-.253-.127-.253-.337-.421-.085-.043v.085l.043.337.084.337m.142-.349l.153.243.095.253.008.277-.251-.233-.162-.49-.05-.321.207.271zm.701.012l.085.295.126.169.169.126.337.211v-.126L5.05 3.04l-.127-.253-.126-.21-.169-.17-.21-.126-.254-.042.127.127.084.126m.253.042l.169.169.21.422-.21-.127-.21-.169-.085-.21-.127-.253.253.168zm4.855.295v.211l-.085.211.211-.084.169-.127.126-.168.085-.17.042-.21-.042-.126-.043-.043-.295.17-.084.168-.084.168m.253-.253l.084-.084.084-.042v.21l-.126.212-.127.168-.168.127.126-.38.127-.21zm-8.23-.337l.085.084.126.127.084.084.085.042.126.043.127.084h.126l.169-.042.084.168.169.211v.042l.042.043.084.084v-.633l-.042-.21-.126-.211-.085-.169-.042-.253h-.042l-.126.633.042.21-.169-.21-.21-.127-.254-.084-.295-.042.042.084v.042m.952.039l.042-.305.103.256.118.261.027.522-.154-.206-.138-.284v-.244h.002zm-.663-.05l.23.094.201.136.152.188-.265-.04-.232-.119-.317-.32.23.06zm.428.601l-.253-.084h-.295l.169.169.168.168.211.085h.38l.042-.042-.085-.127-.126-.084-.21-.085m.087.274l-.169-.032-.172-.125-.169-.117.289.03.263.095.169.137-.211.012zm17.3-.274l.085.085.042.042.084-.084.084-.085.043-.21V2.28l-.043-.295-.126-.253-.169-.21.042.168-.042.21-.084.38.042.38.042.168m.112-1.037l.1.098.051.147v.246l-.1.589-.051-.05-.102-.588.102-.442zm-12.435.066l.042.295.085.295.042.127.084.126.085.085.126.042.084.042.085.084.042-.084h.253l.21-.084.17-.17.295-.294-.38.044-.169.042-.168.042.21-.21.17-.212.126.042.126.085.085.084.168.042.123.026.137.01-.218.09-.21.085-.17.169-.056.098-.027.113.428-.145.246-.108.127-.043.084-.126.143-.186-.263-.263-.178-.052-.292-.046-.38.085.042-.253.127-.253-.127.084-.126.042-.224.152-.19.263-.09.26-.043.126.043.17.084-.085.08-.029-.122.197-.085.127v-.128l-.042-.295-.084-.253-.042-.127-.085-.084-.126-.085-.127-.084-.253-.126.085.126.04.125m2.098.612l-.183.12-.211.084-.221.085.025-.078.042-.042.085-.084.337-.127.295-.127-.169.17zm-.479-.502l.18.025.208.047.157.095.08.128-.201-.01-.253-.043-.147-.042-.243-.158.22-.042zm-.823.423l-.1.111.048-.244.148-.294.149-.195.248-.147-.046.133-.052.177-.094.197-.178.188-.123.074zm-.037.312l.123-.155.169-.063.37-.074-.316.295-.169.095-.217.028.04-.126zm-.607-.854l.204.176.113.217.064.31.047.28-.094-.094-.184-.072-.155-.351-.014-.246-.084-.274.103.054zm-1.46.18l.21.168.211.126-.042.043-.38-.043h-.21l-.17.085-.084.084-.084.127-.042.084-.042.126h.337l.169-.042.506-.337.126-.042.169-.042v-.043l-.042-.042-.042-.042-.085-.169-.084-.126-.21-.253-.17-.084-.168.042-.338.084.254.127.21.168m-.064.621l-.222.074-.226.009.148-.252.17-.098.36.006.113.03-.343.231zm-.054-.931l.206.003.07.037.117.124.118.16.193.27-.328-.16-.14-.164-.096-.078-.131-.067-.13-.083.121-.042zm7.926.605l.127.38.126.126.127-.421.042-.253-.042-.211-.043-.127-.084-.084-.21-.126v.126l-.043.295v.295m.125-.622l.14.187.047.187v.28l-.047.235-.047.047-.046-.096-.047-.093-.047-.233.047-.514zm3.505-.012h.042l.169.253.21.169.254.169h.126l.169.042.084-.042h.042l.042.042.296.464V2.66l-.237-.425-.059-.25-.042-.253v-.042l.253.253.071.123.052.169.046.256v.337l.084-.295v-.168l-.042-.17-.042-.126-.084-.168-.211-.211-.253-.21.042.252v.21l.042.17v.126l-.169-.337-.21-.169-.254-.084-.295-.042h-.21l.042.042.042.04m.347.024l.225.09.216.148.185.254-.27-.054-.22-.124-.223-.18-.18-.178.267.044zM5.092 2.28h.422l.295-.042.253-.042-.38-.21-.21-.085-.253-.042-.211.042-.253.084-.085.042.127.127.295.126m-.103-.319l.118-.018.252.013.276.095.186.094-.231.048-.231.042-.277-.024-.275-.162.182-.088zm12.428 9c.047.02.115.068.12.125");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Elsevier" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Elsevier extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5X, create_fragment$5X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Embarcadero.svelte generated by Svelte v3.23.2 */

        function create_fragment$5Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0a11.963 11.963 0 0 0-8.485 3.515A11.963 11.963 0 0 0 0 12.001c0 3.313 1.344 6.311 3.515 8.484A11.96 11.96 0 0 0 12 24a11.96 11.96 0 0 0 8.485-3.515A11.968 11.968 0 0 0 24 12.001c0-3.315-1.344-6.314-3.515-8.486A11.963 11.963 0 0 0 12 0zm.052 4.401c1.233 0 2.344.222 3.332.664.988.443 1.804 1.142 2.449 2.096.58.842.956 1.818 1.128 2.93.1.65.14 1.587.122 2.811H8.764c.058 1.421.552 2.418 1.482 2.99.565.355 1.246.533 2.042.533.844 0 1.53-.217 2.057-.65.288-.234.542-.56.762-.975h3.783c-.1.84-.558 1.694-1.374 2.56-1.269 1.378-3.045 2.067-5.33 2.067-1.886 0-3.549-.58-4.99-1.743-1.442-1.162-2.162-3.053-2.162-5.672 0-2.455.65-4.337 1.951-5.646C8.286 5.056 9.975 4.4 12.052 4.4zm.001 3.055c-.95 0-1.688.27-2.211.81-.524.54-.852 1.27-.987 2.192h6.382c-.067-.983-.396-1.73-.987-2.238-.59-.51-1.323-.764-2.197-.764Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Embarcadero" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Embarcadero extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5Y, create_fragment$5Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/EmberDotJs.svelte generated by Svelte v3.23.2 */

        function create_fragment$5Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v24h24V0H0zm12.29 4.38c1.66-.03 2.83.42 3.84 1.85 2.25 5.58-6 8.4-6 8.4s-.23 1.48 2.02 1.42c2.78 0 5.7-2.15 6.81-3.06a.66.66 0 01.9.05l.84.87a.66.66 0 01.01.9c-.72.8-2.42 2.46-4.97 3.53 0 0-4.26 1.97-7.13.1a4.95 4.95 0 01-2.38-3.83s-2.08-.11-3.42-.63c-1.33-.52.01-2.1.01-2.1s.42-.65 1.2 0 2.24.36 2.24.36c.13-1.03.35-2.38.98-3.81 1.34-3 3.38-4.01 5.05-4.05zm.33 2.8c-1.1.07-2.8 1.78-2.88 4.93 0 0 .75.23 2.41-.91 1.67-1.14 2-2.97 1.11-3.81a.82.82 0 00-.64-.21Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ember.js" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class EmberDotJs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5Z, create_fragment$5Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Emby.svelte generated by Svelte v3.23.2 */

        function create_fragment$5_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.041 0c-.007 0-1.456 1.43-3.219 3.176L4.615 6.352l.512.513.512.512-2.819 2.791L0 12.961l1.83 1.848c1.006 1.016 2.438 2.46 3.182 3.209l1.351 1.359.508-.496c.28-.273.515-.498.524-.498.008 0 1.266 1.264 2.794 2.808L12.97 24l.187-.182c.23-.225 5.007-4.95 5.717-5.656l.52-.516-.502-.513c-.276-.282-.5-.52-.496-.53.003-.009 1.264-1.26 2.802-2.783 1.538-1.522 2.8-2.776 2.803-2.785.005-.012-3.617-3.684-6.107-6.193L17.65 4.6l-.505.505c-.279.278-.517.501-.53.497-.013-.005-1.27-1.267-2.793-2.805A449.655 449.655 0 0011.041 0zM9.223 7.367c.091.038 7.951 4.608 7.957 4.627.003.013-1.781 1.056-3.965 2.32a999.898 999.898 0 01-3.996 2.307c-.019.006-.026-1.266-.026-4.629 0-3.7.007-4.634.03-4.625Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Emby" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Emby extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5_, create_fragment$5_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Emlakjet.svelte generated by Svelte v3.23.2 */

        function create_fragment$5$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.65 16.105v-.24a3.543 3.543 0 00-1.267-2.471c-.724-.663-1.69-.965-2.655-.904-1.87.12-3.378 1.747-3.378 3.615 0 .784.12 1.567.422 2.471H4.55V6.946l7.42-5.123 7.482 5.122v11.692h-4.223c.18-.663.422-1.688.422-2.532m5.068-10.244L12.452.136c-.301-.181-.663-.181-.905 0L3.222 5.86c-.242.12-.362.361-.362.663V19.48c0 .482.362.844.844.844H9.92a.824.824 0 00.844-.844c0-.06 0-.18-.06-.24l-.06-.182c-.302-.723-.664-1.627-.664-2.53v-.182c-.06-.542.12-1.084.482-1.446a2.095 2.095 0 011.388-.723c.543-.06 1.026.12 1.448.482.422.362.664.844.724 1.386v.18c.06 1.206-.724 2.954-.845 3.135l-1.146 2.17-.18-.362c-.122-.181-.302-.362-.483-.422-.182-.06-.423-.06-.604.06-.18.12-.362.301-.422.482s-.06.422.06.603l.905 1.687c.121.241.423.422.724.422.302 0 .604-.18.724-.422l1.81-3.375h5.732a.824.824 0 00.844-.843V6.524c-.06-.302-.18-.543-.422-.663");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$5$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Emlakjet" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Emlakjet extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$5$, create_fragment$5$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Empirekred.svelte generated by Svelte v3.23.2 */

        function create_fragment$60(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.996 4.685c0-2.08-1.674-3.774-3.727-3.774H3.72C1.665.91-.005 2.604-.005 4.69v7.536c0 .336.045.667.135.997.03.134.07.264.12.39.25.623.653 1.17 1.173 1.593.51.524 1.17 1.095 1.965 1.71l.105.074.435.33.52.397c1.19.912 3.205 2.453 6.165 4.71.483.366 1.038.676 1.383.676.343 0 .902-.31 1.383-.676 2.96-2.257 4.972-3.798 6.164-4.71l.972-.74h-.002l.11-.085c.798-.612 1.463-1.19 1.968-1.71.514-.418.908-.96 1.15-1.576.166-.44.252-.906.254-1.376v-7.15h-.003l.003-.003v-.39zm-4.14 6.242c-.093-.017-.188-.032-.283-.045-.105 0-.226-.015-.33-.015-.278-.006-.556.05-.81.164-.214.1-.4.248-.54.436-.135.196-.23.415-.286.646-.06.254-.09.524-.09.81v2.88H12.49L8.756 10.22 7.2 11.795v3.975H4.48V3.4h2.716V8.53l4.83-5.127h3.396l-4.83 4.885 5.166 7.293V9.402h1.662v1.182h.023c.084-.195.195-.38.33-.547.144-.168.3-.312.483-.43.18-.106.375-.21.58-.27.205-.06.42-.09.64-.09.114 0 .24.03.38.06v1.62z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$60($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Empire Kred" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Empirekred extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$60, create_fragment$60, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Envato.svelte generated by Svelte v3.23.2 */

        function create_fragment$61(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.4.197c-.74-.371-2.721-.247-5.195.62-4.207 2.968-7.674 7.175-8.044 14.109 0 .241-.493 0-.617-.126-1.114-2.104-1.61-4.455-.62-7.921.247-.247-.37-.617-.37-.494-.249.123-1.114 1.113-1.734 2.103-2.847 4.947-.99 11.511 3.961 14.231 4.947 2.721 11.382.988 14.231-4.086 3.342-5.814.369-17.322-1.612-18.436");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$61($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Envato" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Envato extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$61, create_fragment$61, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Epel.svelte generated by Svelte v3.23.2 */

        function create_fragment$62(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.702 2.361c-1.188.11-.88.154 1.98.286 5.677.242 9.043 1.144 11.353 2.993 1.232 1.012 2.187 3.146 2.187 3.146s-3.639.836-7.797 1.65c-4.159.814-7.46 1.54-7.327 1.584.352.11 5.214-.484 10.319-1.276l4.87-.734c.078-.012.036.394.036.514 0 1.1-1.122 2.948-2.794 4.599-2.75 2.684-6.623 4.686-11.573 5.962-1.364.352-2.2.638-1.892.638 1.188.044 5.742-1.298 7.81-2.266 2.685-1.276 4.401-2.508 6.491-4.664 1.48-1.842 2.994-2.796 3.056-5.017l3.06-.506c1.629-.264 3.103-.55 3.28-.616.241-.088.285-.352.197-1.012-.154-1.21-1.1-2.156-3.014-3.037-2.904-1.342-5.88-1.603-7.442-.68-.173.101-.376.417-.534.486a1079.7 1079.7 0 00-2.365-.862C7.567 2.515 3.848 2.075.702 2.361zm19.032 2.773c1.628.484 4.18 2.014 3.792 2.09l-3.066.601-3.386.772c-.644-1.435-1.491-2.232-2.628-3.305l.133-.327c.322-.796 2.536-.602 5.155.169z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$62($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "EPEL" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Epel extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$62, create_fragment$62, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Epicgames.svelte generated by Svelte v3.23.2 */

        function create_fragment$63(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.538 0C2.166 0 1.66.506 1.66 1.878v16.565c0 .155.007.299.019.431.034.302.037.593.317.922.026.038.31.246.31.246.151.076.257.128.43.2l8.334 3.492c.431.197.613.276.926.265H12c.317.011.499-.068.93-.265l8.333-3.492c.174-.072.276-.124.431-.2 0 0 .284-.212.31-.246.28-.329.283-.62.317-.922.012-.132.02-.276.02-.43V1.877C22.34.506 21.833 0 20.461 0zm13.356 3.11h.68c1.134 0 1.686.552 1.686 1.697v1.879h-1.372V4.883c0-.367-.17-.537-.525-.537h-.234c-.367 0-.537.17-.537.537v5.813c0 .366.17.536.537.536h.26c.352 0 .522-.17.522-.536v-2.08h1.376v2.144c0 1.145-.564 1.708-1.701 1.708h-.692c-1.141 0-1.7-.567-1.7-1.708V4.819c0-1.142.559-1.709 1.7-1.709zm-12.188.076H7.82v1.277H6.104v2.604h1.652v1.274H6.104v2.774h1.739v1.274H4.706zm3.817 0h2.196c1.137 0 1.7.567 1.7 1.712v2.445c0 1.145-.563 1.709-1.7 1.709h-.794v3.337H8.523zm4.528 0h1.398v9.203h-1.398zm-3.13 1.24v3.39h.579c.351 0 .521-.17.521-.54v-2.31c0-.37-.17-.54-.521-.54zM6.066 14.58h.208l.046.007h.075l.038.012h.038l.038.011.037.008.034.007.034.008.034.007.038.012.03.007.03.012.038.011.03.015.039.015.034.015.03.02.038.014.026.02.038.018.03.02.034.018.03.023.03.019.03.022.031.023.03.026.03.023-.022.03-.027.027-.022.03-.027.03-.022.027-.023.026-.027.03-.022.03-.023.027-.026.03-.023.03-.027.03-.022.027-.023.03-.026.03-.023.031-.026.026-.023.03-.03-.022-.03-.026-.03-.02-.035-.022-.026-.019-.034-.019-.03-.019-.035-.019-.03-.015-.03-.015-.03-.011-.034-.012-.038-.01-.03-.008-.038-.008-.038-.008-.038-.003h-.041l-.046-.008h-.075l-.038.004h-.038l-.038.011-.034.008-.034.011-.037.011-.03.015-.038.016-.027.018-.03.02-.03.018-.027.023-.026.023-.027.022-.022.027-.03.026-.02.03-.018.027-.023.03-.015.034-.02.03-.018.034-.011.034-.016.034-.01.038-.005.038-.011.034-.008.042v.037l-.007.038v.09l.004.039.003.034.004.037.008.038.011.03.004.038.011.03.012.03.015.039.019.037.015.03.019.03.022.031.023.03.019.027.03.026.023.027.026.022.03.023.03.023.031.019.03.018.034.016.038.015.03.015.038.011.038.012.038.007.037.008.038.004.046.003h.124l.046-.007h.037l.038-.012.038-.007.038-.012.034-.007.034-.015.03-.015.038-.016.023-.015.03-.019v-.347h-.552v-.56h1.247v1.248l-.026.022-.03.023-.027.019-.03.023-.03.018-.03.023-.03.019-.031.019-.038.019-.034.019-.03.019-.038.015-.03.019-.038.015-.038.015-.038.015-.034.015-.034.011-.034.012-.037.011-.034.011-.038.012-.034.007-.038.008-.038.008-.038.007-.037.004-.038.004-.038.004-.045.003-.038.004-.042.004h-.196l-.042-.008h-.038l-.037-.007h-.038l-.038-.012-.038-.007-.038-.008-.037-.007-.03-.012-.038-.007-.038-.012-.034-.015-.034-.011-.038-.015-.034-.015-.038-.015-.03-.016-.038-.018-.026-.02-.038-.018-.027-.02-.03-.018-.03-.023-.03-.023-.034-.022-.023-.023-.03-.023-.027-.026-.026-.023-.027-.026-.022-.027-.027-.026-.022-.03-.023-.027-.019-.03-.023-.03-.019-.03-.018-.03-.02-.035-.018-.03-.015-.034-.015-.034-.016-.034-.015-.034-.011-.03-.015-.034-.008-.034-.011-.034-.008-.038-.011-.034-.008-.038-.003-.034-.008-.038-.004-.034-.003-.038-.004-.037-.004-.038v-.208l.008-.038v-.041l.01-.038v-.038l.012-.038.012-.037.007-.038.011-.034.012-.038.011-.034.015-.038.015-.034.016-.034.015-.034.015-.034.019-.034.019-.03.018-.03.02-.03.018-.03.023-.031.023-.03.022-.03.027-.027.022-.026.023-.027.03-.026.023-.027.03-.023.027-.026.03-.023.03-.022.03-.02.03-.022.03-.019.031-.019.034-.019.038-.019.03-.018.038-.016.034-.015.038-.019.03-.01.038-.012.034-.015.034-.008.034-.011.038-.008.034-.011.037-.008h.038l.038-.011h.038l.038-.008h.037zm11.989.007h.207l.046.008h.075l.038.011h.045l.038.012.034.007.038.008.038.007.034.008.038.011.037.012.03.007.038.015.038.012.03.015.038.015.038.015.034.02.027.014.037.02.034.018.03.019.035.023.03.018.03.023.03.023.03.022-.022.03-.019.031-.023.03-.022.03-.023.034-.019.03-.023.03-.022.031-.02.03-.022.03-.023.03-.022.031-.02.034-.022.03-.026.03-.02.03-.022.031-.03-.023-.034-.019-.03-.018-.03-.023-.035-.015-.03-.02-.038-.014-.026-.015-.038-.016-.03-.015-.03-.011-.034-.015-.038-.011-.038-.012-.038-.011-.041-.008-.038-.007-.038-.008-.038-.004-.037-.004-.034-.003h-.084l-.041.007-.038.008-.038.007-.03.016-.026.015-.034.03-.023.034-.015.034v.094l.019.042.015.023.026.026.038.02.03.018.038.015.038.015.049.015.03.008.03.011.038.008.03.011.038.008.042.011.041.011.042.012.042.007.037.012.042.011.038.008.037.011.038.011.038.012.038.011.034.011.038.012.037.015.038.019.038.015.038.019.038.019.03.019.03.018.034.023.027.02.034.026.026.026.03.03.027.027.019.03.026.038.019.026.015.038.019.026.011.038.012.03.007.038.008.038.007.038.004.038.004.037v.095l-.004.041-.004.038-.003.042-.008.038-.011.037-.008.038-.011.038-.015.034-.015.03-.016.034-.018.03-.023.03-.02.03-.018.031-.026.027-.023.026-.027.023-.03.026-.026.023-.03.023-.03.018-.031.023-.038.019-.03.015-.038.02-.038.014-.037.015-.038.012-.038.011-.03.011-.038.008-.038.008-.03.007-.038.008h-.038l-.037.007h-.038l-.038.008h-.28l-.037-.004-.038-.004-.042-.003-.038-.008-.037-.004-.038-.007-.038-.008-.042-.011-.037-.008-.038-.011-.038-.008-.038-.011-.037-.012-.038-.015-.034-.011-.038-.011-.038-.016-.03-.015-.038-.015-.03-.019-.038-.015-.034-.019-.026-.019-.038-.019-.027-.018-.034-.02-.03-.022-.03-.023-.03-.022-.03-.023-.027-.023-.03-.026.022-.03.027-.027.023-.03.026-.03.023-.027.022-.03.027-.03.023-.027.026-.03.023-.026.026-.03.023-.03.022-.027.027-.03.023-.03.026-.027.027-.03.026.022.038.023.026.023.038.022.03.02.034.022.03.019.035.015.03.019.034.015.038.015.03.015.038.011.03.016.038.01.037.012.038.012.038.007.038.008.038.007h.041l.038.012h.208l.038-.008.037-.008.03-.007.03-.011.027-.016.034-.022.02-.027.018-.03.011-.038v-.087l-.015-.037-.022-.03-.023-.023-.034-.023-.027-.015-.037-.015-.038-.015-.045-.02-.027-.007-.03-.008-.038-.01-.03-.008-.038-.012-.038-.007-.041-.012-.038-.007-.042-.012-.037-.007-.038-.012-.038-.007-.038-.012-.038-.01-.037-.008-.034-.012-.034-.011-.034-.012-.038-.015-.042-.015-.038-.015-.037-.015-.038-.019-.038-.019-.026-.019-.038-.019-.027-.022-.034-.02-.022-.022-.027-.026-.03-.027-.023-.026-.022-.027-.02-.026-.018-.03-.02-.034-.014-.027-.012-.03-.011-.034-.011-.03-.008-.038-.007-.034v-.038l-.008-.038v-.162l.004-.038.004-.038.007-.03.008-.038.011-.03.008-.038.015-.03.015-.038.015-.03.019-.038.019-.03.026-.03.02-.03.03-.03.026-.027.023-.03.034-.027.022-.019.034-.023.03-.022.03-.02.038-.018.03-.015.039-.019.03-.015.038-.012.037-.015.038-.011.027-.008.037-.007.03-.008.038-.007.038-.008.038-.004.038-.004.038-.003zm-9.237.027h.707l.015.034.015.034.015.034.011.038.015.034.015.034.016.034.015.034.011.034.019.037.015.034.015.035.008.034.015.034.019.034.015.037.015.034.011.034.015.034.02.034.01.034.016.038.011.038.015.03.02.038.014.03.015.038.012.038.011.03.019.038.015.03.015.038.011.03.016.038.019.038.015.034.011.034.011.034.015.034.02.034.014.037.016.035.01.034.016.034.015.034.015.034.015.037.012.034.015.034.019.034.015.034.015.034.008.038.015.034.019.034.015.034.011.034.015.034.015.038.02.038.01.03.016.038.011.03.015.038.019.038.015.03.011.038.016.03.011.038.019.03.015.038.011.038.015.03.016.038.018.03.016.038.01.037.012.03.015.038.02.03h-.783l-.02-.033-.01-.034-.016-.034-.015-.038-.011-.034-.015-.034-.015-.034-.012-.034-.015-.034-.015-.034-.011-.034-.015-.038-.015-.034-.012-.034-.015-.034H8.617l-.015.038-.011.03-.015.038-.019.037-.008.03-.015.039-.015.03-.011.038-.015.03-.015.038-.012.03-.015.038-.015.037-.015.03-.011.038h-.775l.015-.037.015-.034.015-.034.012-.038.01-.034.02-.034.015-.034.015-.034.011-.034.015-.038.02-.034.014-.034.012-.034.011-.034.015-.034.02-.038.014-.034.015-.034.012-.034.015-.034.015-.034.015-.038.015-.038.012-.03.015-.038.019-.03.015-.038.011-.037.011-.03.015-.038.02-.03.014-.038.016-.03.01-.038.016-.038.019-.03.011-.038.015-.03.012-.038.015-.038.019-.03.015-.038.011-.03.015-.038.012-.03.019-.038.015-.038.015-.034.011-.034.015-.034.02-.034.014-.034.008-.038.015-.034.015-.034.019-.034.015-.034.011-.034.016-.038.015-.037.015-.03.015-.038.011-.03.015-.038.015-.038.02-.03.014-.038.012-.03.011-.038.015-.03.02-.038.014-.038.012-.03.015-.038.015-.03.019-.038.011-.038.011-.03.016-.038zm2.192.019h.775l.022.03.02.034.022.03.019.034.019.03.019.034.018.03.023.035.019.03.019.03.019.034.019.03.026.034.015.03.02.035.022.03.023.03.015.034.022.03.02.034.014.03.027.035.019.03.019.034.019.03.018.03.023.034.019.03.019.035.019.03.019.034.022.03.02.034.018.03.023-.03.015-.038.023-.026.022-.038.02-.026.014-.038.027-.027.019-.037.015-.027.023-.03.022-.038.02-.026.018-.038.019-.027.023-.037.018-.027.02-.038.018-.026.02-.03.022-.038.019-.027.019-.037.022-.027.02-.038.018-.026.023-.03.019-.038.022-.027.02-.037.018-.027.02-.038.022-.026.019-.038.019-.026h.782v2.789h-.734v-1.64l-.018.026-.023.038-.019.026-.023.03-.019.038-.022.027-.02.03-.022.038-.019.026-.019.03-.026.03-.019.039-.023.026-.019.03-.018.038-.023.026-.019.03-.023.038-.019.027-.022.03-.02.038-.018.026-.023.03-.019.038-.022.027-.023.03-.019.03-.019.038-.023.027-.022.03-.015.038-.027.026-.019.03-.022.038-.02.027h-.014l-.023-.034-.019-.03-.023-.035-.019-.03-.022-.034-.02-.03-.022-.034-.019-.03-.022-.034-.02-.03-.026-.035-.015-.03-.023-.034-.022-.03-.02-.034-.022-.03-.019-.038-.022-.03-.02-.034-.022-.03-.019-.035-.023-.03-.018-.034-.023-.03-.019-.034-.023-.03-.019-.034-.022-.03-.02-.035-.022-.03-.019-.034-.026-.03-.015-.034-.023-.03v1.644h-.725v-2.76zm3.47 0h2.199v.63h-1.47v.447h1.322v.593H15.21v.48h1.489v.631h-2.215v-2.759zm-5.318.854l-.015.038-.012.03-.015.038-.015.037-.011.034-.015.034-.016.038-.015.038-.011.03-.015.038-.015.03-.012.038-.015.038-.015.03-.011.038-.015.03-.015.038-.016.038-.01.03-.016.038-.015.038-.011.03-.016.038h.643l-.015-.038-.012-.034-.015-.038-.015-.034-.011-.034-.015-.034-.015-.038-.012-.034-.015-.034-.015-.034-.011-.034-.015-.038-.012-.034-.015-.034-.015-.034-.011-.034-.015-.037-.015-.038-.012-.03-.015-.038-.015-.038-.011-.034zm-1.15 5.223h8.013l-4.09 1.35z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$63($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Epic Games" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Epicgames extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$63, create_fragment$63, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Epson.svelte generated by Svelte v3.23.2 */

        function create_fragment$64(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.616 13.915c-1.029 0-1.428-.952-1.428-1.915 0-.975.398-1.927 1.428-1.927 1.03 0 1.429.952 1.429 1.927 0 .963-.399 1.915-1.429 1.915m0-4.805c-1.627 0-2.567 1.218-2.567 2.89s.94 2.89 2.567 2.89c1.628 0 2.568-1.218 2.568-2.89s-.94-2.89-2.568-2.89zM0 9.266h4.085v.974H1.141v1.207h2.745v.952H1.141v1.351h2.944v.975H0V9.266zM6.73 12.11H5.701v-1.871H6.73c.709 0 1.185.311 1.185.941 0 .621-.476.93-1.185.93m-2.168 2.614h1.14v-1.639H6.73c1.384 0 2.314-.687 2.314-1.904 0-1.229-.931-1.915-2.314-1.915H4.562v5.458zM20.768 9.266h-1.162v5.458h1.118v-2.215c0-.598-.022-1.14-.044-1.605.133.267.531 1.085.708 1.396l1.45 2.425H24V9.266h-1.106v2.158c0 .599.022 1.196.044 1.672-.133-.276-.531-1.096-.72-1.406l-1.45-2.424zM10.34 12.919c0 .73.608 1.019 1.251 1.019.421 0 1.118-.122 1.118-.687 0-.598-.842-.709-1.649-.919-.853-.232-1.672-.543-1.672-1.561 0-1.13 1.063-1.661 2.059-1.661 1.152 0 2.204.498 2.204 1.771h-1.13c-.044-.664-.554-.83-1.129-.83-.388 0-.875.154-.875.619 0 .421.277.487 1.661.842.398.11 1.66.354 1.66 1.595 0 1.018-.797 1.771-2.292 1.771-1.217 0-2.357-.598-2.347-1.959h1.141z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$64($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Epson" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Epson extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$64, create_fragment$64, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Erlang.svelte generated by Svelte v3.23.2 */

        function create_fragment$65(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.859 7.889c.154-1.863 1.623-3.115 3.344-3.119 1.734.004 2.986 1.256 3.029 3.119zm12.11 11.707c.802-.86 1.52-1.872 2.172-3.03l-3.616-1.807c-1.27 2.064-3.127 3.965-5.694 3.977-3.738-.012-5.206-3.208-5.198-7.322h13.966c.019-.464.019-.68 0-.904.091-2.447-.558-4.504-1.737-6.106l-.007.005H24v15.186h-3.039zm-17.206-.001C1.901 17.62.811 14.894.813 11.64c-.002-2.877.902-5.35 2.456-7.232H0v15.187h3.761Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$65($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Erlang" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Erlang extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$65, create_fragment$65, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Esea.svelte generated by Svelte v3.23.2 */

        function create_fragment$66(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.054 3L8.95 9.746 0 9.883l5.832 4.47-4.79 6.879 8.491-4.088 5.711 4.323v-7.114L24 10.029 6.745 14.05a12.575 12.575 0 0 0 1.589-1.955 5.475 5.475 0 0 0 .617-1.786l5.593-.151z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$66($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ESEA" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Esea extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$66, create_fragment$66, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Eslgaming.svelte generated by Svelte v3.23.2 */

        function create_fragment$67(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.373 0 0 5.373 0 12c0 6.628 5.373 12 12 12s12-5.372 12-12c0-6.627-5.373-12-12-12zm.455 2.163a9.8 9.8 0 0 1 5.789 2.222L4.384 18.244a9.862 9.862 0 0 1-1.06-1.582zm7.191 3.632a9.802 9.802 0 0 1 2.192 5.806l-14.45 9.1a9.834 9.834 0 0 1-1.592-1.055zm1.979 8.292c-.888 4.45-5.619 8.892-11.9 7.494Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$67($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ESLGaming" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Eslgaming extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$67, create_fragment$67, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Eslint.svelte generated by Svelte v3.23.2 */

        function create_fragment$68(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.257 9.132L11.816 6.5a.369.369 0 0 1 .368 0l4.559 2.632a.369.369 0 0 1 .184.32v5.263a.37.37 0 0 1-.184.319l-4.559 2.632a.369.369 0 0 1-.368 0l-4.559-2.632a.369.369 0 0 1-.184-.32V9.452a.37.37 0 0 1 .184-.32M23.852 11.53l-5.446-9.475c-.198-.343-.564-.596-.96-.596H6.555c-.396 0-.762.253-.96.596L.149 11.509a1.127 1.127 0 0 0 0 1.117l5.447 9.398c.197.342.563.517.959.517h10.893c.395 0 .76-.17.959-.512l5.446-9.413a1.069 1.069 0 0 0 0-1.086m-4.51 4.556a.4.4 0 0 1-.204.338L12.2 20.426a.395.395 0 0 1-.392 0l-6.943-4.002a.4.4 0 0 1-.205-.338V8.08c0-.14.083-.269.204-.338L11.8 3.74c.12-.07.272-.07.392 0l6.943 4.003a.4.4 0 0 1 .206.338z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$68($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ESLint" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Eslint extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$68, create_fragment$68, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ethereum.svelte generated by Svelte v3.23.2 */

        function create_fragment$69(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.944 17.97L4.58 13.62 11.943 24l7.37-10.38-7.372 4.35h.003zM12.056 0L4.69 12.223l7.365 4.354 7.365-4.35L12.056 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$69($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ethereum" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ethereum extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$69, create_fragment$69, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Etsy.svelte generated by Svelte v3.23.2 */

        function create_fragment$6a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.564 2.445c0-.325.033-.52.59-.52h7.465c1.3 0 2.02 1.11 2.54 3.193l.42 1.666h1.27c.23-4.728.43-6.784.43-6.784s-3.196.36-5.09.36H6.64L1.526.196v1.37l1.725.326c1.21.24 1.5.496 1.6 1.606 0 0 .11 3.27.11 8.64 0 5.385-.09 8.61-.09 8.61 0 .973-.39 1.333-1.59 1.573l-1.722.33V24l5.13-.165h8.55c1.935 0 6.39.165 6.39.165.105-1.17.75-6.48.855-7.064h-1.2L20 19.846c-1.005 2.28-2.476 2.445-4.11 2.445h-4.906c-1.63 0-2.415-.64-2.415-2.05V12.8s3.62 0 4.79.096c.912.064 1.463.325 1.76 1.598l.39 1.695h1.41l-.09-4.278.192-4.305H15.63l-.45 1.89c-.283 1.244-.48 1.47-1.754 1.6-1.666.17-4.815.14-4.815.14V2.45h-.05z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Etsy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Etsy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6a, create_fragment$6a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Eventstore.svelte generated by Svelte v3.23.2 */

        function create_fragment$6b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.785 3.414c.428-.251.874-.473 1.339-.666.981-.421 1.995-.659 3.036-.765l1.127 1.274-.525 1.319c-1.02.195-1.979.57-2.879 1.11l-.195.12-.178-1.737-1.725-.66v.005zM5.295 3.724l1.789.69.188 1.71c-.969.713-1.725 1.623-2.264 2.73-.051.099-.096.198-.139.3l-1.26-1.529-2.054.434c.511-1.104 1.201-2.091 2.063-2.96.515-.522 1.07-.979 1.667-1.376l.01.001zm11.782 12.052c.195-.324.354-.652.48-.99l1.938 2.35 3.255-.701c-.187.513-.407 1.015-.662 1.507-.671 1.291-1.553 2.409-2.648 3.36-1.112.962-2.369 1.665-3.771 2.107-.027.009-.056.016-.083.026l-2.411-2.039.629-2.775.051-.021c1.379-.6 2.457-1.529 3.224-2.835v.011zM21.153 4.805c.199.273.384.56.563.854.741 1.248 1.254 2.582 1.539 4.004.271 1.41.315 2.829.12 4.252-.105.684-.255 1.35-.464 2.002l-3.255.699-1.95-2.357c.226-.867.255-1.77.06-2.709-.225-1.114-.72-2.065-1.454-2.85l3.509-.42 1.306-3.476h.026zM1.338 8.584l2.1-.444 1.236 1.509c-.391 1.084-.48 2.21-.285 3.38.045.334.119.656.21.969l-2.22-.505-1.59 1.881c-.193-.833-.283-1.685-.283-2.554.003-1.451.27-2.85.807-4.199l.016-.039.009.002zM4.78 14.518c.319.844.788 1.614 1.409 2.316.465.539.99.975 1.563 1.319l-2.2 1.261.12 2.864c-.726-.451-1.395-.99-2-1.605-1.021-1.05-1.8-2.249-2.34-3.6-.149-.375-.27-.75-.375-1.125l1.635-1.919 2.22.509-.032-.02zM8.232 18.415c.473.236.979.416 1.518.54 1.207.28 2.385.233 3.529-.141l-.625 2.757 2.387 2.02c-1.193.313-2.414.445-3.659.401-1.455-.046-2.853-.354-4.19-.925-.36-.153-.705-.322-1.041-.51l-.119-2.882 2.2-1.26zM20.815 4.364L19.502 7.85l-3.614.435c-.105-.091-.213-.181-.327-.255-1.185-.9-2.52-1.426-4.004-1.575-.346-.029-.675-.029-.99-.029l1.26-3.226L9.1.095c.827-.09 1.637-.104 2.459-.09.49.015.975.051 1.459.113.68.089 1.351.239 2.015.42 1.405.4 2.685 1.034 3.842 1.93.729.559 1.376 1.191 1.94 1.896z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Event Store" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Eventstore extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6b, create_fragment$6b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Eventbrite.svelte generated by Svelte v3.23.2 */

        function create_fragment$6c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.5 5.8c2.7-.6 5.3.5 6.8 2.5L5.6 11c.4-2.5 2.3-4.6 4.9-5.2zm6.9 9.8c-.9 1.3-2.3 2.3-3.9 2.6-2.7.6-5.3-.5-6.8-2.6L18.4 13l1.9-.4 3.7-.8c0-.8-.1-1.6-.3-2.3C22.2 3 15.8-.9 9.3.6S-1.2 8.4.3 14.7 8.2 25 14.7 23.5c3.8-.9 6.8-3.4 8.2-6.6.1-.1-5.5-1.3-5.5-1.3z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Eventbrite" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Eventbrite extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6c, create_fragment$6c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Evernote.svelte generated by Svelte v3.23.2 */

        function create_fragment$6d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.692 5.445c0 .239-.02.637-.256.895-.257.24-.652.259-.888.259H4.022c-.73 0-1.165 0-1.46.04-.159.02-.356.1-.455.14-.04.019-.04 0-.02-.02L7.85.848c.02-.02.04-.02.02.02-.04.099-.118.298-.138.457-.04.298-.04.736-.04 1.472v2.647zm5.348 17.869c-.67-.438-1.026-1.015-1.164-1.373a2.924 2.924 0 0 1-.217-1.095 3.007 3.007 0 0 1 3-3.004c.493 0 .888.398.888.895a.88.88 0 0 1-.454.776c-.099.06-.237.1-.336.12-.098.02-.473.06-.65.218-.198.16-.356.418-.356.697 0 .298.118.577.316.776.355.358.829.557 1.342.557a2.436 2.436 0 0 0 2.427-2.447c0-1.214-.809-2.289-1.875-2.766-.158-.08-.414-.14-.651-.2a8.04 8.04 0 0 0-.592-.099c-.829-.1-2.901-.756-3.04-2.606 0 0-.611 2.785-1.835 3.541-.118.06-.276.12-.454.16-.177.04-.374.06-.434.06-1.993.119-4.105-.518-5.565-2.03 0 0-.987-.816-1.5-3.104-.118-.558-.355-1.553-.493-2.488-.06-.338-.08-.597-.099-.836 0-.975.592-1.631 1.342-1.73h4.026c.69 0 1.086-.18 1.342-.419.336-.318.415-.776.415-1.313v-4.08-.118C8.52.669 9.173.052 10.139.052h.474c.197 0 .434.02.651.04.158.02.296.06.533.12 1.204.298 1.46 1.532 1.46 1.532s2.27.398 3.415.597c1.085.199 3.77.378 4.282 3.104 1.204 6.487.474 12.775.415 12.775-.849 6.129-5.901 5.83-5.901 5.83a4.1 4.1 0 0 1-2.428-.736zm4.54-13.034c-.652-.06-1.204.2-1.402.697-.04.1-.079.219-.059.278.02.06.06.08.099.1.237.12.631.179 1.204.239.572.06.967.1 1.223.06.04 0 .08-.02.119-.08.04-.06.02-.18.02-.279-.06-.537-.553-.935-1.204-1.015z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Evernote" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Evernote extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6d, create_fragment$6d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Everplaces.svelte generated by Svelte v3.23.2 */

        function create_fragment$6e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.839 23.972C4.76 23.388 0 18.257 0 12.028c0-6.623 5.377-12 12-12s12 5.377 12 12c0 6.23-4.76 11.359-10.839 11.943v-7.046c2.22-.525 3.87-2.521 3.87-4.897 0-2.778-2.253-5.033-5.031-5.033S6.968 9.25 6.968 12.028c0 2.377 1.653 4.372 3.87 4.897l.001 7.047zm-.388-14.655c.642 0 1.162.521 1.162 1.162 0 .641-.521 1.162-1.162 1.162-.641 0-1.16-.521-1.16-1.162 0-.641.52-1.161 1.16-1.162z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Everplaces" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Everplaces extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6e, create_fragment$6e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Evry.svelte generated by Svelte v3.23.2 */

        function create_fragment$6f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.443 12.919c.102.255.113.426.072.692-.031.202-.068.404-.108.605-.035.174-.117.55.003.694.117.139.35.131.622.098.302-.037 1.81-.342 3.397-.997.215-.093.435-.205.622-.345.431-.324.5-1.005.5-1.005.011-.13.009-.316-.164-.413-.126-.07-.301-.026-.562.043-.433.116-1.502.519-1.873.628-.15.044-.447.114-.561-.027-.19-.234.082-.969.245-1.378.163-.409.419-.738 1.205-.96.289-.082.762-.229.954-.293.211-.071.489-.207.607-.675.135-.534-.278-.616-.655-.718-.539-.147-.878-.165-.641-.679.097-.21.187-.303.397-.358.214-.056 2.029-.338 2.751-.467.405-.072.542-.286.711-.631.365-.746-.093-.794-.462-.761-.836.076-2.178.315-2.753.397-.306.044-.102-.47-.46-.494-.704-.049-1.302.243-1.541.425-.226.172-.334.703-.334.703l-.697 2.368c-.06.273-.146.543-.343.659-.479.283-1.457.302-1.37 1.34 0 0 .019.51.437 1.551zm6.318-4.424c.279-.047.654-.115.756.586.031.212.032 2.661.032 2.661s.269-.252 1.094-1.526c.626-.965 1.317-2.211 1.577-2.648.152-.256.433-.522.918-.165.541.398.553.685.315 1.093-.244.419-.9 1.486-1.827 2.772-.842 1.168-1.245 1.631-1.599 2.016-.354.385-.826.83-1.319.762-.654-.091-.604-1.198-.63-1.515-.026-.317-.154-2.832-.066-3.419.034-.228.025-.496.749-.618zm8.845.065c.302.161-.045.855-.626 1.277-.374.272-1.014.679-1.672.679a6.206 6.206 0 0 1 1.017-1.298c.47-.461 1.018-.799 1.281-.658zm8.17-.153c.291-.373.349-.596-.133-1.061-.433-.417-.723-.171-.934.045-.035.042-1.016 1.001-2.049 2.17-.804.91-1.499 1.756-1.499 1.756s-.025-.57.062-1.286c.049-.408.186-1.201.226-1.453.204-1.274-.593-1.325-.89-1.343-.312-.019-.461.145-.554.533-.085.356-.55 2.311-.365 4.325.033.363.105.737.112.761l-.188.257c-1.749-.485-2.946-1.664-2.946-1.664s.574-.165 1.204-.543c.501-.3 1.465-1.043 1.363-2.353-.087-1.112-1.271-1.62-1.707-1.529-.397.083-1.091.558-1.747 1.14-.044-.304-.052-.639-.368-.676-.232-.027-.501.082-.696.182a1.116 1.116 0 0 0-.501.473l-.736 1.665c-.024.059-.072.072-.11.08-.394.09-.521.371-.549.449 0 0-.165.347.126.661-.146.385-.533 1.282-.533 1.282-.48 1.101-.449 1.483-.277 1.717.087.119.393.291.762.351.278.046.491-.119.723-.482.343-.537 1.032-1.953 1.032-1.953s1.37 1.474 4.121 2.443c0 0-1.455 1.973-1.665 3.064 0 0-.108.715.872.713.246 0 .617-.058.886-.221a.475.475 0 0 0 .223-.281.216.216 0 0 0-.021-.153c-.027-.047-.069-.073-.101-.104-.05-.049-.043-.113-.016-.187.539-1.544 2.732-4.169 3.197-4.738 1.233-1.507 3.512-3.854 3.673-4.041z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "EVRY" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Evry extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6f, create_fragment$6f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Exercism.svelte generated by Svelte v3.23.2 */

        function create_fragment$6g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.35 1.66c-.959 0-1.686.298-2.181.893-.496.595-.744 1.464-.744 2.605v3.474c0 .805-.086 1.424-.259 1.858-.173.434-.493.84-.96 1.218-.138.113-.206.206-.206.278 0 .072.068.165.205.277.476.386.798.794.967 1.225.17.43.253 1.047.253 1.851v3.462c0 1.15.25 2.023.75 2.618.5.595 1.224.892 2.174.892h.882c.379 0 .618-.018.72-.054.1-.036.15-.127.15-.271 0-.201-.133-.334-.399-.398l-.483-.109c-1.063-.241-1.595-1.29-1.595-3.148v-3.293c0-1.247-.302-2.127-.906-2.642l-.23-.193c-.112-.096-.168-.169-.168-.217 0-.056.056-.129.169-.217l.23-.193c.603-.515.905-1.395.905-2.642V5.641c0-1.11.135-1.88.405-2.31.27-.43.832-.762 1.685-.995.258-.073.387-.19.387-.35 0-.217-.29-.326-.87-.326zm14.419.029c-.58 0-.87.108-.87.325 0 .161.128.278.386.35.854.233 1.416.565 1.686.995.27.43.405 1.2.405 2.31v3.294c0 1.246.302 2.126.906 2.641l.229.193c.113.089.17.161.17.217 0 .049-.057.121-.17.217l-.23.193c-.603.515-.905 1.396-.905 2.642v3.293c0 1.858-.532 2.907-1.595 3.149l-.484.108c-.266.064-.398.197-.398.398 0 .145.05.235.15.272.102.036.341.054.72.054h.882c.95 0 1.675-.298 2.174-.893.5-.595.75-1.467.75-2.617v-3.462c0-.805.084-1.422.253-1.852.17-.43.491-.838.967-1.224.137-.113.205-.205.205-.278 0-.072-.068-.165-.205-.277-.468-.378-.788-.784-.961-1.218-.173-.435-.26-1.054-.26-1.858V5.187c0-1.142-.247-2.01-.743-2.606-.495-.595-1.222-.892-2.18-.892zM7.683 9.735c-1.456 0-2.64 1.111-2.64 2.478h1.02c0-.838.727-1.52 1.62-1.52.892 0 1.619.682 1.619 1.52h1.02c0-1.367-1.183-2.478-2.64-2.478zm8.406 0c-1.456 0-2.639 1.111-2.639 2.478h1.02c0-.838.727-1.52 1.62-1.52.892 0 1.62.682 1.62 1.52h1.02c0-1.367-1.185-2.478-2.64-2.478zM9.71 14.36v.561c0 1.277 1.062 2.316 2.366 2.316 1.305 0 2.367-1.039 2.367-2.316v-.56h-.934v.56c0 .877-.76 1.426-1.433 1.426s-1.48-.273-1.48-1.426v-.56z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Exercism" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Exercism extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6g, create_fragment$6g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Expertsexchange.svelte generated by Svelte v3.23.2 */

        function create_fragment$6h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.28.9H0L8.36 12 0 23.1h7.28L15.64 12zM24 .9h-7.28l-2.3 3.06 3.64 4.82zM14.42 20.05l2.3 3.05H24l-5.94-7.88z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Experts Exchange" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Expertsexchange extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6h, create_fragment$6h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Expo.svelte generated by Svelte v3.23.2 */

        function create_fragment$6i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 20.084c.043.53.23 1.063.718 1.778.58.849 1.576 1.315 2.303.567.49-.505 5.794-9.776 8.35-13.29a.761.761 0 011.248 0c2.556 3.514 7.86 12.785 8.35 13.29.727.748 1.723.282 2.303-.567.57-.835.728-1.42.728-2.046 0-.426-8.26-15.798-9.092-17.078-.8-1.23-1.044-1.498-2.397-1.542h-1.032c-1.353.044-1.597.311-2.398 1.542C8.267 3.991.33 18.758 0 19.77Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Expo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Expo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6i, create_fragment$6i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Eyeem.svelte generated by Svelte v3.23.2 */

        function create_fragment$6j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.673 9.181v-1.04H0v5.723h3.68v-1.048H1.186v-1.378h2.158v-1.017H1.186V9.18zm2.162 6.634l2.532-5.907h-1.24l-.902 2.357-.91-2.357H4.081l1.546 3.604-1.01 2.303zm6.625-3.573v-.444c0-1.232-.75-1.966-1.89-1.966-1.179 0-2.013.78-2.013 2.058 0 1.27.834 2.058 2.043 2.058.926 0 1.684-.536 1.821-1.285l-1.124-.054c-.085.275-.337.436-.727.436-.505 0-.804-.314-.827-.803zm-1.898-1.538c.505 0 .75.314.773.796H9.743c.031-.505.345-.796.82-.796zM17.04 9.18v-1.04h-3.672v5.723h3.68v-1.048h-2.495v-1.378h2.158v-1.017h-2.158V9.18zm5.46.65c-.597 0-.987.268-1.216.628-.26-.406-.697-.627-1.24-.627s-.864.206-1.04.482v-.406h-1.056v3.956h1.117v-2.196c0-.474.268-.796.711-.796.406 0 .643.283.643.788v2.204h1.117V11.53c.046-.398.291-.658.689-.658.428 0 .658.283.658.788v2.204H24v-2.426c0-1.002-.597-1.606-1.5-1.606z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "EyeEm" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Eyeem extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6j, create_fragment$6j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/FDroid.svelte generated by Svelte v3.23.2 */

        function create_fragment$6k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.472,10.081H3.528c-0.877,0-1.589,0.711-1.589,1.589v10.59c0,0.877,0.711,1.589,1.589,1.589h16.944 c0.877,0,1.589-0.711,1.589-1.589V11.67C22.061,10.792,21.349,10.081,20.472,10.081z M12,22.525c-3.066,0-5.56-2.494-5.56-5.56 s2.494-5.56,5.56-5.56c3.066,0,5.56,2.494,5.56,5.56S15.066,22.525,12,22.525z M12,12.411c-2.511,0-4.554,2.043-4.554,4.554 S9.489,21.519,12,21.519s4.554-2.043,4.554-4.554S14.511,12.411,12,12.411z M12,20.274c-1.563,0-2.881-1.103-3.221-2.568h1.67 c0.275,0.581,0.859,0.979,1.551,0.979c0.96,0,1.721-0.761,1.721-1.721c0-0.96-0.761-1.721-1.721-1.721 c-0.649,0-1.2,0.352-1.493,0.874H8.805c0.378-1.412,1.669-2.462,3.195-2.462c1.818,0,3.309,1.491,3.309,3.309 C15.309,18.783,13.818,20.274,12,20.274z M23.849,0.396c-0.001,0.001-0.002,0.002-0.002,0.003 c-0.002-0.002-0.004-0.003-0.006-0.005c0.001-0.001,0.002-0.003,0.004-0.004c-0.116-0.137-0.279-0.231-0.519-0.238 c-0.202,0.005-0.391,0.097-0.512,0.259l-1.818,2.353c-0.164-0.058-0.339-0.095-0.523-0.095H3.528c-0.184,0-0.358,0.038-0.523,0.095 L1.187,0.41c-0.121-0.162-0.31-0.253-0.512-0.259c-0.24,0.006-0.403,0.1-0.519,0.238c0.001,0.001,0.002,0.003,0.004,0.004 C0.157,0.395,0.155,0.397,0.153,0.399C0.153,0.398,0.152,0.397,0.151,0.396C0.085,0.474-0.146,0.822,0.139,1.22l1.909,2.471 C1.981,3.867,1.94,4.057,1.94,4.257v3.707c0,0.877,0.711,1.589,1.589,1.589h16.944c0.877,0,1.589-0.711,1.589-1.589V4.257 c0-0.2-0.041-0.39-0.109-0.566l1.909-2.471C24.146,0.822,23.915,0.474,23.849,0.396z M6.904,8.228c-0.987,0-1.787-0.8-1.787-1.787 s0.8-1.787,1.787-1.787s1.787,0.8,1.787,1.787S7.891,8.228,6.904,8.228z M17.229,8.228c-0.987,0-1.787-0.8-1.787-1.787 s0.8-1.787,1.787-1.787c0.987,0,1.787,0.8,1.787,1.787S18.216,8.228,17.229,8.228z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "F-Droid" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class FDroid extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6k, create_fragment$6k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/FSecure.svelte generated by Svelte v3.23.2 */

        function create_fragment$6l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.93 2.94a35.94 35.94 0 0 0-22.24-.6A2.22 2.22 0 0 0 .07 5.09c.4 1.6.98 3.44 1.68 5.11.01.04.03.02.03-.02-.1-.78.5-1.77 1.68-2.13a27.56 27.56 0 0 1 17.39.23c.86.3 1.82-.17 2.1-1.06.7-2.25.98-3.78 1.05-4.16.01-.07-.05-.1-.07-.12zM6.65 7.89c-.86.18-2.05.46-2.94.76-1.78.61-1.7 2.78-.75 3.47.07-.4.5-.95.98-1.13 1.78-.7 3.69-1.12 5.62-1.29-.98-.4-1.94-.97-2.9-1.81M20.83 12.23a21.16 21.16 0 0 0-16.45-.65c-.85.32-1.38 1.35-.85 2.33a38.16 38.16 0 0 0 3.15 4.8c-.17-.58.13-1.66 1.27-2.01 3.15-.97 6.46-.56 8.66.33.62.25 1.5.1 1.99-.64a38.62 38.62 0 0 0 2.29-4.02c.03-.06 0-.11-.06-.14M15.72 20a9.92 9.92 0 0 1-2.5-1.8c-.34-.34-.84-.83-1.37-1.41-1.2 0-2.37.12-3.62.52-1.16.36-1.27 1.7-.76 2.4.86 1.07 1.46 1.65 2.42 2.64a2.74 2.74 0 0 0 3.82.02c.75-.75 1.21-1.25 2.06-2.21.05-.05.03-.14-.05-.16");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "F-Secure" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class FSecure extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6l, create_fragment$6l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Facebook.svelte generated by Svelte v3.23.2 */

        function create_fragment$6m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Facebook" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Facebook extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6m, create_fragment$6m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Facebookgaming.svelte generated by Svelte v3.23.2 */

        function create_fragment$6n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v24h15.67v-7.35H7.35v-9.3H24V0zm8.33 15.68h8.32V24H24V8.32H8.33Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Facebook Gaming" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Facebookgaming extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6n, create_fragment$6n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Facebooklive.svelte generated by Svelte v3.23.2 */

        function create_fragment$6o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.4777 7.8108a.4611.4611 0 0 0-.462.462v7.452a.461.461 0 0 0 .462.462H23.538v.0024a.4611.4611 0 0 0 .462-.462V8.2728a.4611.4611 0 0 0-.462-.462zm-5.2862.0072C1.879 7.818 0 9.6922 0 12.007c0 2.0922 1.533 3.8267 3.5376 4.1394V13.218h-1.071v-1.211h1.071v-.924c0-1.0497.6208-1.6326 1.578-1.6326.4573 0 .9336.0877.9336.0877v1.0236h-.5237c-.5213 0-.6871.327-.6871.6563v.7866h1.1634l-.1872 1.2108H4.836v2.9286c2.0093-.3104 3.5447-2.0448 3.5447-4.137 0-2.315-1.8766-4.1891-4.1892-4.1891zm7.1676 2.4073h.635v2.9926h1.6278v.5544H11.359zm2.9452 0h.635v3.547h-.635zm1.2439 0h.7014l.8932 2.8078h.0427l.8862-2.8078h.6752l-1.2273 3.547h-.7322zm3.81.0024h2.296v.5473h-1.6609v.9407h1.5709v.5165h-1.5709v.9928h1.661v.5497h-2.296Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Facebook Live" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Facebooklive extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6o, create_fragment$6o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Faceit.svelte generated by Svelte v3.23.2 */

        function create_fragment$6p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 2.7c0-.1-.1-.2-.1-.2-.1 0-.1 0-.2.1-2 3.1-4.1 6.2-6.1 9.4H.2c-.2 0-.3.3-.1.4 7.2 2.7 17.7 6.8 23.5 9.1.2.1.4-.1.4-.2V2.7z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "FACEIT" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Faceit extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6p, create_fragment$6p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fandango.svelte generated by Svelte v3.23.2 */

        function create_fragment$6q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.664 6.956L8.05 8.496 9.19 12.72l5.615-1.54L15.95 15.4l-5.615 1.49 1.093 4.224-5.615 1.49L4.42 17.54c.846-.995 1.194-2.386.846-3.728-.398-1.342-1.392-2.385-2.584-2.832L1.29 5.763 12.57 2.78zm7.106-.198L18.932.05 0 5.068l1.838 6.758c1.093.2 2.087 1.043 2.385 2.236.348 1.193-.1 2.385-.944 3.18l1.788 6.708L24 18.882l-1.79-6.708c-1.142-.2-2.086-1.043-2.434-2.236-.298-1.193.1-2.435.994-3.18z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fandango" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fandango extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6q, create_fragment$6q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fandom.svelte generated by Svelte v3.23.2 */

        function create_fragment$6r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.604.012a.603.603 0 00-.416.175l-4.493 4.485a.9.9 0 01-1.263.002L6.939.236a.603.603 0 00-.841-.002L.31 5.871c-.2.194-.311.457-.311.733v5.34c0 .271.11.533.305.726l11.277 11.144a.603.603 0 00.846 0L23.695 12.67c.194-.193.305-.454.305-.727V6.605c0-.27-.107-.528-.299-.72L18.04.189a.603.603 0 00-.435-.177zM6.615 2.5a.292.292 0 01.2.084l8.138 8.047a2.19 2.19 0 010 3.119l-2.43 2.4a.293.293 0 01-.408 0l-8.14-8.046a2.172 2.172 0 01-.65-1.561c0-.59.23-1.143.648-1.557l2.431-2.402a.292.292 0 01.211-.084zm11.15.707a2.241 2.241 0 01.278.022c.5.067.955.327 1.312.68l2.57 2.542a.284.284 0 010 .404l-3.91 3.868a.29.29 0 01-.41 0l-4-3.955a.285.285 0 010-.407l2.54-2.51a2.241 2.241 0 011.62-.644zm4.087 6.123a.29.29 0 01.341.283v1.705h-.002c0 .2-.08.39-.222.532l-9.28 9.306a.686.686 0 01-.511.225.743.743 0 01-.533-.227l-.655-.613a.284.284 0 01-.008-.41L21.697 9.412a.287.287 0 01.155-.082zm-19.424.106c.1.016.197.062.281.144l7.5 7.322c.13.13.35.396.35.717 0 .205-.047.495-.27.717l-.002-.002-.531.477a.445.445 0 01-.604-.014l-7.064-6.899a.917.917 0 01-.277-.658V9.951c0-.348.317-.566.617-.515Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fandom" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fandom extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6r, create_fragment$6r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Farfetch.svelte generated by Svelte v3.23.2 */

        function create_fragment$6s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.635 0L4.883 4.811V24h4.752v-9.593h7.119V9.6H9.635V4.811h9.482V0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Farfetch" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Farfetch extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6s, create_fragment$6s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fastapi.svelte generated by Svelte v3.23.2 */

        function create_fragment$6t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.375 0 0 5.375 0 12c0 6.627 5.375 12 12 12 6.626 0 12-5.373 12-12 0-6.625-5.373-12-12-12zm-.624 21.62v-7.528H7.19L13.203 2.38v7.528h4.029L11.376 21.62z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "FastAPI" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fastapi extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6t, create_fragment$6t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fastify.svelte generated by Svelte v3.23.2 */

        function create_fragment$6u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.245 6.49L24 4.533l-.031-.121-7.473 1.967c.797-1.153.523-2.078.523-2.078s-2.387 1.524-4.193 1.485c-1.804-.04-2.387-.52-5.155.362-2.768.882-3.551 3.59-4.351 4.173-.804.583-3.32 2.477-3.32 2.477l.006.034 2.27-.724s-.622.585-1.945 2.37l-.062-.057.002.011s1.064 1.626 2.107 1.324a2.14 2.14 0 0 0 .353-.147c.419.234.967.463 1.572.525 0 0-.41-.475-.752-1.017l.238-.154.865.318-.096-.812c.003-.003.006-.003.008-.006l.849.311-.105-.738a5.65 5.65 0 0 1 .322-.158l.885-3.345 3.662-2.497-.291.733c-.741 1.826-2.135 2.256-2.135 2.256l-.582.22c-.433.512-.614.637-.764 2.353.348-.088.682-.107.984-.028 1.564.421 2.107 2.307 1.685 2.827-.104.13-.356.354-.673.617H7.77l-.008.514-.065.051h-.645l-.009.504-.17.127c-.607.011-1.373-.518-1.373-.518 0 .481.401 1.225.401 1.225l.07-.034-.061.045s1.625 1.083 2.646.681c.91-.356 3.263-2.213 5.296-3.093l6.15-1.62.811-2.1-4.688 1.235v-1.889l5.5-1.448.811-2.1-6.31 1.662V8.367zm-11.163 4l1.459-.384.02.074-.455 1.179-1.513.398zm.503 2.526l-1.512.398.489-1.266 1.459-.385.02.074zm1.971-.424l-1.513.398.49-1.266 1.459-.385.02.073Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fastify" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fastify extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6u, create_fragment$6u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fastly.svelte generated by Svelte v3.23.2 */

        function create_fragment$6v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.919 3.036V1.3h.632V0H9.377v1.3h.631v1.749a10.572 10.572 0 00-8.575 10.384C1.433 19.275 6.17 24 12 24c5.842 0 10.567-4.737 10.567-10.567 0-5.186-3.729-9.486-8.648-10.397zm-1.628 15.826v-.607h-.619v.607c-2.757-.158-4.955-2.38-5.101-5.137h.607v-.62h-.607a5.436 5.436 0 015.101-5.089v.607h.62v-.607a5.435 5.435 0 015.137 5.114h-.607v.619h.607a5.444 5.444 0 01-5.138 5.113zm2.26-7.712l-.39-.389-1.979 1.725a.912.912 0 00-.316-.06c-.534 0-.971.448-.971.995 0 .547.437.996.971.996.535 0 .972-.45.972-.996a.839.839 0 00-.049-.304Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fastly" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fastly extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6v, create_fragment$6v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Favro.svelte generated by Svelte v3.23.2 */

        function create_fragment$6w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.586 1.655a6.623 6.623 0 0 0-6.621 6.621v.772a7.503 7.503 0 0 1 3.31 3.269V8.276a3.302 3.302 0 0 1 3.31-3.31c.91 0 1.655-.745 1.655-1.655s-.745-1.655-1.655-1.655zM1.655 9.103C.745 9.103 0 9.848 0 10.758s.745 1.655 1.655 1.655a3.302 3.302 0 0 1 3.31 3.31v4.966c0 .91.745 1.655 1.655 1.655s1.655-.745 1.655-1.655v-4.966a6.623 6.623 0 0 0-6.621-6.621zm15.724 0c-3.655 0-6.621 2.966-6.621 6.621s2.966 6.621 6.621 6.621a6.583 6.583 0 0 0 3.462-.979c.262.579.841.979 1.503.979a1.66 1.66 0 0 0 1.655-1.655v-9.931a1.66 1.66 0 0 0-1.655-1.655c-.676 0-1.241.4-1.503.979a6.574 6.574 0 0 0-3.462-.979zm0 3.311c1.834 0 3.31 1.476 3.31 3.31s-1.476 3.31-3.31 3.31c-1.835 0-3.31-1.476-3.31-3.31s1.476-3.31 3.31-3.31z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Favro" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Favro extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6w, create_fragment$6w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Feathub.svelte generated by Svelte v3.23.2 */

        function create_fragment$6x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.73.01h6.54v6.867H8.73V.01zm0 17.113h6.54v6.867H8.73v-6.867zM.01 8.73h23.98v6.54H.01V8.73z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "FeatHub" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Feathub extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6x, create_fragment$6x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fedora.svelte generated by Svelte v3.23.2 */

        function create_fragment$6y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.005.001C7.29-.064 2.744 2.962.957 7.317c-.885 1.953-1 4.116-.946 6.225.01 2.666-.02 5.335.015 7.999.113 1.542 1.654 2.614 3.134 2.44 3.257-.02 6.514.044 9.77-.034 4.79-.303 9.155-3.796 10.527-8.39 1.4-4.345.03-9.413-3.39-12.443A11.968 11.967 0 0012.005.001zm3.52 2.842c.406-.01.807.032 1.197.117.557.286.945.826.902 1.383-.058.75-.587 1.247-1.38 1.246a2.95 2.95 0 00-.72-.09c-1.725-.053-3.167 1.61-2.97 3.305.024.796-.044 1.601.033 2.392.333.457.987.18 1.475.256.276 0 .562.007.85.008a.134.134 0 00.042.008 1.29 1.29 0 011.29 1.295 1.29 1.29 0 01-1.298 1.295.14.14 0 00-.06.013c-.777.003-1.553 0-2.33.002-.066 1.616.197 3.276-.31 4.84-.865 2.706-3.97 4.337-6.685 3.62-.537-.284-.91-.79-.868-1.334.062-.796.656-1.308 1.532-1.24.075.006.113.012.168.02.716.14 1.477.034 2.107-.391 1.127-.645 1.502-1.977 1.396-3.193-.02-.687.043-1.384-.033-2.066-.333-.456-.984-.18-1.472-.256h-.8a.137.137 0 00-.066-.015 1.29 1.29 0 01-1.298-1.295c0-.72.574-1.29 1.29-1.295a.136.136 0 00.063-.016h2.316c.06-1.507-.159-3.046.213-4.523.648-2.376 2.952-4.12 5.415-4.086zm.705.052l.13.024zm1.224.28c1.444.543 2.636 1.706 3.25 3.12a81.141 81.136 0 01-2.903-2.592 1.762 1.762 0 00-.346-.527zm.45.935a86.96 86.954 0 002.966 2.596c-.014-.044-.033-.087-.049-.13.166.448.265.918.301 1.402a77.847 77.842 0 01-3.39-2.975l.015-.033c.088-.182.143-.386.16-.606a1.393 1.393 0 000-.197c0-.019-.002-.038-.004-.057zm.02.196c-.058.516-.058.516 0 0zm-.314.894a85.347 85.341 0 003.53 3.06c0 .071.015.14.013.21a4.94 4.94 0 01-.06.814A78.528 78.523 0 0117.011 5.7a1.56 1.56 0 00.6-.5zm.526 1.83c.898.8 1.856 1.623 2.918 2.485a5.215 5.215 0 01-.242.863 74.032 74.027 0 01-2.307-1.963l.002.055c0 .076-.004.152-.01.226.703.612 1.44 1.237 2.24 1.885-.109.26-.234.512-.38.752a73.605 73.6 0 01-2.06-1.752 3.13 3.13 0 00-.16-2.55zm.068 2.758c.644.56 1.32 1.131 2.043 1.72a5.868 5.867 0 01-.5.651 74.24 74.235 0 01-1.99-1.705c.185-.2.332-.425.447-.666zm-.603.816a82.545 82.54 0 002.005 1.71c-.19.2-.392.385-.607.556a75.858 75.853 0 01-2.043-1.77c.203-.108.396-.247.572-.425.027-.022.047-.047.073-.07zm-.86.594a84.37 84.365 0 002.088 1.8c-.23.17-.48.311-.734.444a79.06 79.054 0 01-2.256-2.005c-.024.002-.05.001-.074.003l-.026-.015a3.506 3.506 0 001.002-.227zm-10.046.248l-.02.014h-.013l.004.004a1.573 1.573 0 00-.51.55l-.45-.427a5.38 5.38 0 01.99-.14zm-.994.14l-.127.032.127-.03zm-.27.075l.622.592a1.55 1.55 0 00.008 1.045c-.468-.444-.94-.893-1.432-1.348.26-.118.529-.21.803-.289zm-1.03.4c.72.674 1.425 1.347 2.134 2.03a2.68 2.68 0 00-.826.242c-.64-.61-1.3-1.23-1.998-1.865a5.98 5.98 0 01.69-.406zm12.022.204c.473.42.958.846 1.474 1.285a5.37 5.37 0 01-.908.342l-.617-.498a1.55 1.55 0 00.05-1.13zm-12.901.345a140.01 140.01 0 011.958 1.844 3.158 3.158 0 00-1.527 2.332A98.329 98.323 0 001.777 14.8a5.574 5.573 0 00-.091.22c.777.698 1.522 1.391 2.252 2.087.002.284.042.57.14.848.053.19.13.366.22.533a107.243 107.236 0 00-2.86-2.635c.027-.108.04-.217.074-.323.137-.518.366-.998.65-1.44.69.621 1.35 1.241 2.002 1.86a2.98 2.98 0 01.107-.232 99.457 99.45 0 00-1.986-1.819c.15-.214.31-.42.49-.613A109.76 109.76 0 014.7 15.088c.054-.06.11-.122.168-.178a98.104 98.104 0 00-1.94-1.79 5.82 5.82 0 01.592-.509zm12.719.153l-.027.265zm1.733.754l-.05.023.05-.023zm-1.72.091l.44.354c-.287.06-.582.096-.88.103h-.016a1.56 1.56 0 00.457-.457zM1.386 16.101c1.32 1.189 2.532 2.357 3.78 3.559l.175.166c-.237.107-.44.266-.594.465A125.942 125.935 0 001.3 17.076a5.176 5.176 0 01.086-.976zm-.07 1.29A154.286 154.276 0 014.61 20.5c-.11.2-.18.428-.2.677a1.406 1.406 0 000 .166c-.92-.884-1.856-1.78-2.88-2.71a5.65 5.65 0 01-.215-1.243zm.378 1.714c.943.876 1.852 1.748 2.778 2.64l.02.02c.07.195.186.372.327.532-1.445-.56-2.562-1.767-3.125-3.192zm3.352.264c.179.14.374.26.58.358l-.025.005-.018-.015a3.014 3.014 0 01-.537-.348zm1.047 3.252l.15.025zm.228.04s.09.007.274.025a33.671 33.669 0 00-.274-.026z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fedora" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fedora extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6y, create_fragment$6y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fedramp.svelte generated by Svelte v3.23.2 */

        function create_fragment$6z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.886 3.412A1.85 1.85 0 000 5.27v15.319h3.922v-6.094h4.934V10.66H3.922V7.336h14.595a1.67 1.67 0 010 3.324h-6.844a1.431 1.431 0 00-1.298 1.325v8.601h3.919V14.54h2.168l3.138 6.047h4.378l-3.46-6.657a5.442 5.442 0 00-2.001-10.517z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "FedRAMP" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fedramp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6z, create_fragment$6z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Feedly.svelte generated by Svelte v3.23.2 */

        function create_fragment$6A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.86 1.989a2.609 2.609 0 0 0-3.726 0L.768 11.527a2.729 2.729 0 0 0 0 3.795l6.684 6.808a2.618 2.618 0 0 0 1.74.664h5.613a2.616 2.616 0 0 0 1.872-.791l6.554-6.675a2.726 2.726 0 0 0 0-3.795l-9.37-9.544zm-.26 17.422l-.935.95a.372.372 0 0 1-.268.114h-.8a.376.376 0 0 1-.247-.096l-.954-.97a.39.39 0 0 1 0-.542l1.337-1.36a.37.37 0 0 1 .531 0l1.337 1.361a.389.389 0 0 1 0 .543zm0-5.711l-3.737 3.808a.374.374 0 0 1-.268.111h-.799a.376.376 0 0 1-.25-.093l-.951-.97a.391.391 0 0 1 0-.544l4.139-4.214a.372.372 0 0 1 .531 0l1.337 1.362a.386.386 0 0 1 0 .54zm0-5.707l-6.54 6.66a.372.372 0 0 1-.268.113h-.8a.373.373 0 0 1-.249-.094L4.79 13.7a.388.388 0 0 1 0-.54l6.943-7.07a.372.372 0 0 1 .531 0l1.337 1.36a.389.389 0 0 1 0 .543z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Feedly" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Feedly extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6A, create_fragment$6A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ferrari.svelte generated by Svelte v3.23.2 */

        function create_fragment$6B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.51 9.773c-.096.13-.139.387-.278.602-.194.3-.473.665-.613.665-.075 0-.096-.171-.096-.171s-.097-.29.064-.655c.118-.258.183-.333.333-.527.14-.182.226-.279.322-.472.086-.172.108-.204.161-.473.011-.064-.01-.204-.075-.193-.086 0-.322.515-.569.805-.236.269-.677.613-.677.613s-.043.032-.043-.054c-.01-.075-.021-.3.022-.505.043-.204.107-.408.29-.72.204-.354.462-.6.59-.73.054-.053.215-.15.13-.204-.076-.043-.301.15-.473.28-.215.16-.29.204-.505.461a2.338 2.338 0 00-.268.365s-.204.333-.258.656c-.054.322-.054.504-.054.504s0 .29.032.462c.022.183.097.462.097.462s.108.311.15.505c.043.193.119.762.119.762s.053.408.021.795c-.032.386-.064.612-.107.73s-.161.43-.355.644c-.182.204-.225.237-.225.237s-.194.16-.355.247a3.727 3.727 0 01-.504.225 2.301 2.301 0 01-.269.032h-.14l-.042-.032-.022-.086s-.107-.419-.236-.687c-.108-.226-.333-.537-.333-.537s-.387-.526-.687-.816c-.344-.344-.73-.602-.967-.784a5.056 5.056 0 00-.28-.183s-.783-.784-1.062-1.407c-.194-.43-.322-.74-.269-1.213.011-.107.054-.312.075-.312l.14.043c.01.011.14.13.258.172a1.769 1.769 0 00.333.065c.053.021.15.053.214.086.065.032.162.096.162.096l.182.14.193.15s.108.075.14.086c.032.01.054.022.064.022h.043s.043-.011.054-.054c.01-.054-.054-.01-.15-.118a.697.697 0 01-.15-.183s-.022-.086-.108-.182c-.086-.097-.193-.183-.193-.183s-.075-.054-.183-.086c-.107-.032-.14-.032-.15-.075-.01-.043.129-.021.129-.021s.16.021.29.085c.129.065.204.14.204.14l.086.075.053.054.054.032s.054.054.064-.021c.011-.065-.01-.118-.021-.13l-.054-.053-.215-.182c-.064-.065-.107-.108-.171-.15a1.305 1.305 0 00-.28-.151c-.107-.043-.171-.032-.279-.086-.075-.032-.14-.054-.182-.118-.011-.01-.065-.054.032-.032.097.021.161.053.268.075.172.043.28.043.44.096.065.022.151.065.151.065l.204.086s.28.15.473.16a.933.933 0 00.418-.064.812.812 0 00.215-.128.476.476 0 00.054-.065l.021-.054v-.043c-.053-.064-.16.108-.333.14-.182.032-.171.054-.29.032a.477.477 0 01-.3-.15c-.172-.161-.236-.312-.462-.408a2.134 2.134 0 00-.268-.086s-.237-.075-.366-.15c-.096-.054-.3-.086-.236-.172.032-.043.29.107.483.129.14.021.237.01.344.01.107 0 .258-.032.28-.032.02-.01.107 0 .182.022.075.021.118.053.193.086.075.032.161.085.183.085l.043.011.021-.021.01-.022-.01-.021-.032-.022-.065-.043s-.096-.053-.182-.14c-.086-.085-.161-.182-.29-.225-.129-.043-.28-.064-.28-.064l-.15-.011-.064-.01s-.107-.033-.022-.054a.939.939 0 01.15-.033.494.494 0 01.248.011c.086.032.225.107.236.107.01.011.14.108.28.14.139.032.321.043.321.043l.086-.021.043-.011.033-.022-.011-.053s0-.043-.065-.054a.71.71 0 01-.311-.118c-.118-.086-.204-.172-.204-.172s-.086-.075-.258-.118c-.16-.043-.215-.043-.215-.043l-.053-.022-.118-.053s-.054-.032-.097-.086c-.043-.054-.107-.15.075-.097a.86.86 0 01.226.086s.096.097.182.107c.054.011.097.022.13-.021.053-.054-.098-.118-.205-.193-.086-.054-.172-.194-.172-.194s-.064-.053.032-.032c.097.022.269.13.269.13s.086.042.129.053c.032.01.118.064.16.086.033.01.13.032.194.064.086.054.129.14.172.172.043.032.075.086.129.097.054.01.064.032.096.01.033-.021.043-.032.043-.032s.011-.021-.043-.054a.57.57 0 01-.118-.118l-.021-.043-.01-.043-.055-.086-.096-.14s-.15-.203-.29-.278c-.129-.076-.226-.119-.226-.119s-.064-.032-.096-.053c-.054-.043-.076-.075-.118-.13-.054-.064-.076-.106-.14-.17-.118-.119-.483-.183-.344-.27.075-.042.172-.02.215-.01.043.01.14.054.236.086.065.021.108.021.172.043.065.021.14.032.172.053.032.022.064.065.086.076.01.01.097.15.247.225.15.075.225.129.376.14.118.01.311-.032.311-.032s.054-.022.01-.076c-.053-.053-.053-.064-.096-.075-.172-.064-.311-.043-.44-.172-.054-.053-.075-.064-.118-.15s-.022-.107-.054-.161c-.021-.054-.075-.129-.075-.129s-.161-.193-.333-.29a1.93 1.93 0 01-.333-.215c-.032-.021-.097-.107-.097-.107l-.053-.086-.032-.064c-.022-.119.193.032.311.075.193.064.29.15.483.215.108.032.172.032.28.075.182.075.236.257.43.279.106.01.321.054.278-.043-.043-.107-.257-.107-.365-.236-.054-.054-.054-.108-.107-.161-.086-.108-.29-.204-.29-.204s-.065-.054-.14-.204c-.064-.15-.225-.258-.515-.398-.194-.096-.58-.118-.43-.215.086-.064.161-.053.28-.021.117.043.16.097.257.14.097.043.14.053.161.064.022.01.097.043.13.043.02.01.182.032.225.043l.214.054.172.064s.086.032.14.032c.053 0 .14-.021.14-.021l.064-.043.01-.022s.033-.053-.053-.064c-.075-.01-.118-.01-.129-.01l-.075-.022-.032-.011s-.15-.118-.28-.172c-.14-.054-.16-.064-.16-.064l-.054-.011-.065-.01s-.054 0-.14-.076c-.085-.075-.118-.118-.193-.193l-.096-.097s-.086-.064-.086-.118c.01-.086.193.097.193.097l.129.086s.107.075.3.085c.194.011.43-.053.43-.053s.032-.022.14.01a.696.696 0 01.193.097l.086.075.129.14.021-.01c.011-.012.065-.065-.032-.183-.097-.119-.258-.226-.258-.226s-.214-.129-.43-.172c-.214-.043-.31-.043-.31-.043s-.162 0-.258-.107c-.097-.107-.161-.215-.161-.215l-.033-.15s-.053-.065-.16-.108c-.097-.043-.205-.107-.205-.107s-.16-.054-.172-.129c-.032-.14.269 0 .43.032.15.033.215.086.365.118a.915.915 0 00.344.033c.075 0 .118-.011.193-.022.075 0 .129-.01.204 0 .107.022.15.075.258.118.064.033.096.065.172.076.064.01.193.053.171-.011l-.032-.043c-.053-.075-.118-.075-.182-.13-.14-.106-.204-.192-.365-.268a.923.923 0 00-.29-.096c-.086-.01-.15.01-.237-.01-.096-.033-.129-.076-.225-.13-.15-.086-.236-.16-.398-.225-.107-.043-.29-.086-.29-.086l-.075-.011-.032-.01c-.15-.054.269-.173.462-.226.097-.022.14-.043.236-.032.086.01.183.128.28.075.139-.075-.162-.28-.258-.312-.13-.053-.355-.01-.355-.01l-.494-.011-.14-.022s-.085 0-.15-.075c-.064-.075-.311-.376-.59-.419-.29-.043-.376 0-.398-.021-.247-.387-.504-.473-.698-.655-.053-.054-.14-.172-.16-.161-.022.01-.055.172-.108.311-.065.161-.022.236.01.3.043.065.097.108-.01.173-.108.064-.247.043-.247.043s-.118-.022-.215-.076c-.097-.043-.3-.128-.3-.128S11.156.57 11.027.58c-.129.01-.14.021-.236.032-.054 0-.075 0-.129.01-.043.011-.097-.02-.097.033 0 .053.108.053.183.086.075.032.247.032.215.075-.043.043-.204.054-.215.043-.01 0-.118-.022-.204-.022-.14.011-.15.011-.355.108-.032.01-.021.086.043.064a1.12 1.12 0 01.301-.043c.129 0 .204.043.333.075.107.033.118.054.28.076.031 0 .096-.022.096.021 0 .022-.043.054-.043.054s-.097.021-.086.053c.021.043.107 0 .15 0s.108.011.097.054l-.021.032a2.294 2.294 0 00-.29.097c-.269.107-.376.236-.634.365-.247.118-.644.269-.644.269s-.119.064-.29.107c-.172.043-.183.032-.301.054a.567.567 0 00-.268.086.522.522 0 00-.15.118l-.151.225-.086.13c-.022.042-.043.064-.054.107-.021.053-.032.075-.043.128-.032.13 0 .204.022.333.01.033.01.054.021.086.01.032.054.065.054.065l.043.01s.15-.01.247-.032c.097-.021.236-.054.236-.054l.183-.053.118-.043s.075 0 .086.043c.01.032-.022.086-.022.086s-.064.032-.118.053c-.054.022-.182.054-.193.065l-.14.043-.118.01s-.021.011-.043.043c-.021.033-.021.033-.021.054.021.022.032.043.053.065.043.032.065.053.118.064.076.032.119.022.194.022a.582.582 0 00.268-.065c.086-.054.118-.054.236-.097a.554.554 0 01.119-.021c.204-.022.322.01.526.043.204.032.3.097.505.129.214.032.343.096.569.043.107-.022.172-.075.225.032.054.097.043.15.043.15s0 .065-.075.269c-.075.204-.311.709-.311.709l-.161.322s-.13.257-.43.59c-.3.333-.322.355-.322.355s-.161.118-.322.322c-.161.204-.161.28-.312.43a1.36 1.36 0 01-.268.225c-.118.075-.258.054-.634.311-.322.226-.494.409-.515.398-.022-.01-.13-.097-.172-.118l-.655-.44-.258-.172-.118-.076-.022-.043-.064-.086s-.097-.118-.215-.214a.916.916 0 00-.44-.237c-.183-.053-.3-.085-.483-.021a.642.642 0 00-.269.172c-.107.107-.129.193-.215.322s-.171.247-.214.311a3.36 3.36 0 00-.13.237s-.214.343-.332.569c-.14.247-.194.397-.322.633-.204.376-.494.763-.57.935a7.631 7.631 0 01-.085.193s-.022.097-.033.161c-.01.065-.01.172-.021.215a.303.303 0 01-.054.118c-.01.01-.129.258-.172.419-.043.161-.14.666-.021.73.118.065.988-.311 1.106-.676.075-.237-.236-.355-.15-.57.032-.075.053-.086.107-.16.086-.14.054-.43.215-.699.118-.193.354-.44.676-.805a3.51 3.51 0 00.398-.59s.043-.13.129-.108c.096.021.182.01.182.01l.043.033.086.086.129.193s.215.311.29.397c.075.086.15.15.258.237.118.107.16.16.311.279.215.172.14.236-.14.086a1.84 1.84 0 00-.365-.14c-.129-.032-.612-.161-.859-.193-.236-.032-.28-.022-.28-.022s-.117-.01-.257.075c-.14.086-.215.15-.215.15s-.16.183-.171.216c-.011.032-.086.16-.086.16s-.043.065-.054.14c-.022.075-.01.15-.01.15l.01.162.01.15s.033.376.108.752c.022.107.043.28.043.28l.054.386s.032.408.064.547c.032.13.054.14.075.226.043.161-.032.236.043.43.075.193.14.171.215.29.054.085.075.107.118.214.043.108.183.462.344.72.172.268.397.601.548.569.15-.032.257-.269.257-.269s.172-.461.065-.912c-.108-.462-.602-.247-.666-.58-.01-.076 0-.194 0-.194s-.01-.14-.032-.182c-.022-.043-.194-.365-.258-.634-.054-.204-.043-.859-.086-1.042-.118-.472-.129-.43-.064-.515.075-.086.14-.064.14-.064l.096.01.075.033.14.085.193.15.365.237s.204.118.29.161c.086.043.161.097.161.097l.097.064.16.118.033.033.022.043s.075.171.397.354c.258.15.483.107.58.225.021.022.204.269.29.42.107.171.236.375.279.44.043.064.311.397.311.397l.355.387.462.43.418.353.269.215s.236.226.505.408c.257.172.268.194.44.312.129.086.3.204.472.333.172.14.366.397.29.483-.053.032-.15-.107-.333-.269-.15-.128-.225-.193-.375-.3-.194-.15-.29-.226-.505-.355-.108-.064-.3-.182-.312-.16-.075.225-.064.44-.053.719.01.193.043.386.107.633.054.237.108.366.193.591.086.226.247.58.247.58l.247.494.226.376.118.193.043.065s.054.128 0 .214-.118.269-.215.28c-.096.021-.322.032-.322.032l-1.278-.022-.666-.053s-.075-.043-.461-.043c-.226 0-.409.096-.537.107-.108.01-.634-.032-.988.107-.333.14-.484.172-.602.387-.086.161.419.419.838.516.676.15.483-.14.74-.323.033-.021.044-.043.076-.053.172-.054.269.086.44.086.194 0 .301-.065.494-.097.978-.129 2.503.333 2.503.333s.375.118.547.086c.204-.043.161-.118.226-.236.053-.097.032-.119.043-.226 0-.064-.011-.097-.022-.161-.043-.183-.16-.44-.16-.44s-.087-.194-.119-.29c-.043-.14-.086-.226-.107-.376-.065-.398-.054-.365-.054-.59 0-.409.043-.634.15-1.032.161-.58.462-.827.688-1.385.064-.15.064-.365.14-.387.085-.01.074.269.031.43-.14.558-.483.794-.644 1.364-.118.44-.183.698-.15 1.149.01.247.107.633.107.633s.129.43.193.591c.065.161.194.43.194.43l.29.515.15.247s.107.097.054.258c-.054.16-.161.258-.29.397-.365.43-1.214 1.063-1.429 1.214-.3.225-.29.29-.311.354-.118.344-.462.354-.838.763-.086.085-.311.322-.268.526.021.075.945.236 1.482.01.419-.182.054-.386.172-.59.086-.15.3-.15.397-.28.161-.214.054-.203.193-.375.462-.559.763-.88 1.59-1.386.075-.043.215-.107.215-.107s.118-.054.16-.118c.054-.086.044-.161.044-.258 0-.064-.011-.097-.011-.161 0-.075.01-.118-.01-.193-.022-.118-.098-.215-.14-.28a.769.769 0 01-.162-.354.9.9 0 01.033-.601c.086-.226.279-.408.279-.408l.483-.323s.419-.3.548-.418c.14-.118.408-.365.601-.645.226-.311.344-.504.44-.88.033-.14.065-.355.065-.355s0-.15.086-.16c.086-.012.107.02.107.02s.075.044.097.258c.01.215-.054.462-.054.462s-.064.247-.086.398c-.01.096-.01.15-.01.257 0 .183.075.333.075.333s.043.032.043-.043c0-.086.021-.215.053-.343.033-.108.054-.086.118-.269.086-.236.011-.215.054-.354.022-.065.075-.13.14-.13.064 0 .075.087.075.087s.064.279.01.537c-.053.257-.246.612-.246.612l-.15.258s-.108.182-.151.3a.495.495 0 00-.032.301c.032.129.129.3.182.268.043-.032-.064-.14.065-.397.129-.258.3-.419.3-.419s.237-.279.344-.494c.097-.193.193-.504.193-.504s.076-.28.054-.516c-.01-.225-.054-.344-.054-.344l-.096-.171-.054-.13.022-.074c.021-.011.096.043.16.128a.854.854 0 01.162.344c.032.107.043.204.043.3 0 .087-.033.441.096.667.054.107.183.354.194.247.021-.247-.086-.366-.076-.591.011-.258.076-.193.097-.322.022-.14.054-.172.032-.355-.021-.171-.096-.397-.096-.397l-.075-.172-.033-.064s.022-.032.054-.032l.258-.086s.333-.15.462-.258c.14-.097.3-.269.3-.269s.215-.268.322-.461c.258-.484.258-1.096.247-1.375a4.55 4.55 0 00-.086-.623s-.085-.43-.064-.709c.022-.279.043-.408.043-.408s-.01-.279.226-.58c.236-.3.343-.494.386-.72.043-.192-.021-.504-.107-.386zM13.402 7.84c-.032 0-.075-.043-.075-.043s-.01-.01.022-.032c.032-.021.075-.01.075-.01l.032.01.054.075c-.01.032-.075.011-.108 0zm.13-.354c-.033-.01-.087-.043-.087-.043s-.01-.022.022-.043c.032-.022.086-.01.086-.01l.032.02c.01.011.064.065.064.087 0 .032-.075 0-.118-.011zm.117-.365c-.043-.011-.107-.054-.107-.054s-.01-.021.032-.043c.043-.021.108-.01.108-.01l.043.02c.021.022.075.076.075.108-.01.032-.108-.01-.15-.021zm.097-.333c-.043-.01-.107-.054-.107-.054s-.011-.021.032-.043c.043-.021.107-.01.107-.01l.043.02c.022.022.075.076.075.108-.01.022-.107-.021-.15-.021zm.097-.398c-.054-.01-.118-.064-.118-.064s-.011-.021.032-.054c.043-.032.118-.01.118-.01l.043.021c.021.022.086.086.086.118 0 .043-.118-.01-.161-.01zm.064-.43c-.064-.01-.15-.074-.15-.074s-.022-.033.043-.065c.053-.032.14-.021.14-.021l.053.032a.54.54 0 01.107.15c0 .043-.128-.01-.193-.021zm.043-.429a.522.522 0 01-.182-.096s-.022-.033.043-.076c.064-.042.171-.021.171-.021s.033.01.065.032c.032.032.118.13.129.183.01.053-.15-.01-.226-.022zm.065-.494c-.086-.01-.204-.107-.204-.107s-.022-.043.053-.086c.075-.054.194-.021.194-.021s.042.01.075.043c.032.032.14.15.15.204 0 .064-.183-.022-.268-.033zM13.97 3.04c-.065-.01-.15-.075-.15-.075s-.022-.022.042-.054c.065-.032.15-.01.15-.01s.033.01.054.031c.022.022.108.097.108.14 0 .032-.14-.021-.204-.032zm.236.483c.01.043-.14-.01-.215-.021a.503.503 0 01-.161-.086s-.021-.032.043-.065c.064-.043.15-.021.15-.021s.033.01.065.032a.566.566 0 01.118.161zm-.312.795c.065-.043.172-.022.172-.022s.032.011.065.033c.032.032.118.128.129.182.01.054-.15-.01-.226-.032-.075-.01-.183-.097-.183-.097s-.021-.021.043-.064zm.14-.365c-.075-.011-.183-.097-.183-.097s-.021-.032.043-.075c.065-.043.172-.022.172-.022s.032.011.065.033c.032.032.118.128.129.182.01.065-.15 0-.226-.021zm.14-1.611c.086.021.107.075.064.075-.043.01-.064.01-.097.01-.096 0-.085-.042-.214.022-.13.065-.033.032-.215.097-.172.064-.129-.108-.129-.108s.01-.032.032-.118.13 0 .204 0c.14 0 .258 0 .355.022zm-.484-.666l.054.032a.54.54 0 01.107.15c.011.044-.128-.01-.182-.02a.456.456 0 01-.15-.076s-.022-.032.043-.065c.053-.042.128-.021.128-.021zm-.386-.515c.053-.033.14-.022.14-.022l.053.032a.54.54 0 01.107.15c.011.044-.128-.01-.182-.02-.065-.012-.15-.076-.15-.076s-.022-.032.032-.064zm-.108 6.958c.033-.021.076-.01.076-.01l.032.01.053.076c0 .021-.064-.011-.096-.011s-.075-.043-.075-.043-.022-.01.01-.022zM8.891 3.008c-.032.021-.054.032-.097.064-.053.043-.107.15-.14.118-.042-.032-.02-.15-.02-.15s.032-.086.074-.172c.054-.086.119-.086.119-.086.064 0 .182.043.182.14.01.096-.064.053-.118.086zm.88.333s-.042.01-.053-.065c-.01-.075.054-.086.054-.086s.128-.064.128.022c.011.075-.128.129-.128.129zm1.15-1.461s-.14.226-.333.311c-.194.086-.322.13-.688.162-.053 0-.032-.033-.032-.033s.42-.118.655-.247a2.33 2.33 0 00.323-.214c.15-.13.075.021.075.021zm-7.217 9.3c0 .054-.064.15-.086.15-.021 0-.064-.096-.054-.15.011-.054.022-.204.108-.182.064.01.032.128.032.182zm.28-1.213s-.097.204-.13.118c-.032-.075.033-.215.033-.215.086-.075.118-.183.16-.14.033.043-.064.237-.064.237zm1.33-2.095c-.096.108-.396.677-.46.58-.065-.075.29-.612.364-.72.075-.117.14-.096.14-.096l.021.022c-.01 0 .033.107-.064.214zm.806-.848s-.214.043-.182-.032c.043-.075.193-.108.193-.108.118.022.14.033.129.086.01.054-.14.054-.14.054zm.87 1.504c-.096.096-.129-.033-.268-.194-.14-.15-.108-.279-.108-.279h.022l.021.01.054.022.032.032.108.108c.043.064.16.28.14.3zm-1.664 3.21c-.033 0-.065-.064-.065-.064s-.086-.129-.118-.225c-.032-.086-.043-.226-.043-.226s-.021-.183-.021-.247c.01-.086.01-.161.021-.204.01-.043.054-.032.054-.032.064 0 .064.053.064.053v.033s0 .193.011.343c0 .043.118.527.118.527s.022.043-.021.043zm-.022-2.255c-.075.118-.129.118-.129.118 0-.01-.021-.053.043-.182.065-.129.13-.118.13-.118l.02.021s.011.043-.064.161zm.763 4.5c.021-.043.16.064.16.064.054.011.108.108.108.108s.022.075-.043.096c-.064.033-.107-.032-.107-.032s-.14-.193-.118-.236zm1.01-3.286c-.151-.032-.473-.28-.602-.344-.13-.064-.344-.086-.247-.172.01-.01.021-.032.043-.032.021 0 .118.032.118.032l.236.097c.01 0 .129.054.226.107l.236.15.064.054c0 .022.075.14-.075.108zm1.31-2.137s-.183.247-.29.397c-.14.204-.312.516-.344.483-.033-.032.15-.376.247-.558.107-.226.268-.344.333-.365.14-.065.053.043.053.043zm-.58 10.75s0 .043-.076.096c-.075.054-.107.022-.118.022-.01 0-.086-.043-.086-.086.01-.043.129-.075.129-.075.204-.011.15.043.15.043zm1.664-.065c-.075-.01-.086-.032-.075-.043 0-.01.021-.032.107-.032s.086.043.086.043c0 .032-.032.043-.118.032zm1.911.108c-.16.043-.225.021-.365.032-.118.01-.171.021-.29.021-.204 0-.225.011-.515-.075-.054-.021-.118-.086-.097-.107.022-.033.065-.022.065-.022s.365.065.601.075c.172.011.258.022.43.011.096 0 .043-.01.193-.01.054-.011.021.064-.022.075zm1.02-.301a.433.433 0 01-.128.043c-.065.01-.032-.043-.032-.043s.043-.065.096-.097c.065-.032.097 0 .097 0 .021.043-.022.086-.032.097zm.795-2.062c-.075.161-.096.215-.107.365-.021.161.075.612-.075.44-.054-.075-.108-.43-.065-.601.076-.387.387-.494.247-.204zm-2.169 6.562c-.064.043.065.171-.14.16-.118-.01-.053-.117-.042-.128l.075-.108c.053-.075.086-.086.14-.118.053-.032.096.054.096.054s.021.032.021.075c0 .032-.096.022-.15.065zm1.128-1.085l-.097.075c-.01 0-.075.054-.097.022-.021-.033.011-.076.011-.086 0-.011.065-.086.118-.108.054-.032.086 0 .086 0 .032.075-.021.097-.021.097zm.504-18.815s-.043.14-.128.172c-.108.032-.516.043-.527.01-.01-.032.473-.075.655-.257.043-.043 0 .075 0 .075zm-.15-.354c.032-.054.01.086.01.086s-.031.14-.107.182c-.096.054-.332.118-.354.086 0-.021.311-.118.451-.354zm-.666-1.611s.043 0 .108.032c.064.043.107.172.107.172s.01.021-.043.021c-.032 0-.032-.053-.064-.075-.043-.032-.076-.043-.13-.064-.053-.022-.128.01-.139-.043 0-.065.161-.043.161-.043zm-.494.354s.022-.064.118-.118c.086-.054.204-.054.204-.054s.065 0 .14.054c.075.054.14.236.14.236s.021.118-.033.161c-.053.043-.14-.032-.182-.096a.271.271 0 00-.161-.108c-.086-.032-.215.065-.236 0 0-.021.01-.075.01-.075zm-.032 1.482c-.064.01-.021-.054-.021-.054s.182-.075.3-.14c.194-.096.559-.482.462-.3-.043.086-.172.193-.172.193s-.15.215-.182.247c-.14.108-.312.043-.387.054zM9.804 7.69l.01-.022s.323-.214.827-.15c.301.043.591.311.548.344-.043.032-.107 0-.129 0l-.107-.054-.161-.043s-.29-.064-.505-.054c-.215.011-.408.086-.408.086s-.086.043-.107-.01c-.011-.065.032-.097.032-.097zm.795 6.046c-.741-.57-1.644-1.729-1.536-1.836.097-.086.462.45 1.01 1.041.58.623 1.256 1.214 1.277 1.289.043.129-.472-.28-.751-.494zm1.686-8.022c-.312.537-.741.945-.741.945-.15.107-.054-.086-.054-.086s.419-.58.612-.988c.14-.29.226-.677.29-.752.15-.182.075.559-.107.88zm.859 5.885c-.322-.387-.559-.806-.634-1.332-.021-.118-.021-.29.086-.268.097.01.086.193.086.236.032.311.161.623.397.999.333.526.87.934.849.966-.054.054-.591-.365-.784-.601zm.096 10.041a7.728 7.728 0 01-.494.408h-.043v-.054l.011-.021.022-.032.021-.033.022-.032.064-.075.15-.14.15-.14.237-.235s.086-.097.118-.119c.032-.021.054-.042.086-.064.043-.021.097-.054.118-.032v.043c.01.032-.268.343-.462.526zm.666-7.947c-.14.097-.193.086-.279.183-.097.118-.129.515-.226.354-.096-.161-.032-.387.13-.558.193-.226.611-.15.375.021zm.505 7.066c.064-.021.097-.01.097-.01l.021.043c0 .01-.086.128-.129.128-.054-.01-.032-.075-.032-.075s-.022-.064.043-.086zm1.836-4.37c-.096-.065.054-.258.054-.42 0-.128-.021-.225-.021-.332 0-.108.107-.14.107-.14.021 0 .064.022.118.13.054.106-.086.869-.258.762zm3.286-3.072c-.021.451-.042.773-.311 1.117-.322.419-.88.848-.762.505.075-.204.569-.462.762-1.031.107-.344.129-.666.129-.666l-.022-.655s-.01-.054-.01-.129c.032-.086.075-.021.075-.021l.021.032c0 .021.13.526.118.848zm-8-12.747c.086.043.118.075.204.097.075.021.182.075.204.01.032-.064-.01-.15-.065-.225-.085-.14-.128-.172-.247-.365C11.608.044 11.587 0 11.544 0c0 0-.011.14-.054.225-.032.075-.118.13-.108.183.011.053.065.118.15.16Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ferrari" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ferrari extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6B, create_fragment$6B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/FerrarinDotVDot.svelte generated by Svelte v3.23.2 */

        function create_fragment$6C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.297,13.597v-0.314v-1.745c0-0.541-0.297-0.646-1.135-0.646c-0.908,0-1.222,0.122-1.222,0.751v0.279h0.768v-0.227 c0-0.314,0.017-0.367,0.419-0.367c0.332,0,0.349,0.035,0.349,0.367v0.628h-0.803c-0.628,0-0.82,0.297-0.82,0.646v0.436 c0,0.367,0.279,0.663,0.716,0.663h2.042v-0.471H17.297z M16.495,13.353c0,0.244-0.122,0.297-0.297,0.297h-0.297 c-0.192,0-0.262-0.122-0.262-0.297v-0.401c0-0.157,0.105-0.297,0.262-0.297h0.593V13.353z M23.686,13.615v-2.653h-1.169v0.436h0.332 v2.217h-0.332v0.454H24v-0.454C24,13.615,23.686,13.615,23.686,13.615z M20.736,10.892c-0.436,0-0.716,0.541-0.908,0.768v-0.716 h-1.152v0.436h0.314v2.217h-0.314v0.471h1.431v-0.471h-0.297V12.41c0-0.105,0.681-0.96,0.681-0.873v1.187h0.803v-1.327 C21.295,11.084,21.103,10.892,20.736,10.892 M6.179,12.689V11.52c0-0.436-0.332-0.628-1.204-0.628H4.852 c-0.943,0-1.187,0.209-1.187,0.751v1.745c0,0.593,0.349,0.698,1.204,0.716h0.087c0.925-0.017,1.204-0.087,1.204-0.646v-0.454H5.359 v0.227c0,0.314-0.052,0.332-0.436,0.332c-0.38,0-0.419-0.027-0.419-0.332c0-0.135,0-0.541,0-0.541H6.179z M4.503,11.555 c0-0.157,0.052-0.244,0.244-0.244h0.349c0.14,0,0.227,0.07,0.227,0.175v0.908h-0.82V11.555z M22.865,10.403h0.855V9.844h-0.855 V10.403z M0.122,10.403h0.489v3.299H0v0.454h2.269v-0.454H1.501v-1.466h0.436v0.419h0.524v-1.309H1.937v0.384H1.501v-1.327h20.701 V9.844H0.122V10.403z M9.391,10.892c-0.436,0-0.716,0.541-0.908,0.768v-0.716H7.331v0.436h0.314v2.217H7.331v0.471h1.431v-0.471 H8.465V12.41c0-0.105,0.681-0.96,0.681-0.873v1.187h0.803v-1.327C9.949,11.084,9.757,10.892,9.391,10.892 M13.056,10.892 c-0.436,0-0.716,0.541-0.908,0.768v-0.716h-1.152v0.436h0.314v2.217h-0.314v0.471h1.431v-0.471h-0.297V12.41 c0-0.105,0.681-0.96,0.681-0.873v1.187h0.803v-1.327C13.615,11.084,13.423,10.892,13.056,10.892");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ferrari N.V." } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class FerrarinDotVDot extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6C, create_fragment$6C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fiat.svelte generated by Svelte v3.23.2 */

        function create_fragment$6D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.572 11.348l.027-5.957h1.34c.608 1.327.998 3.081 1.304 5.957zm-2.141 9.42h2.222l.025-7.252h2.663c.209 1.28.26 5.231.273 7.252h2.155c.204-8.953-.428-14.014-2.174-17.537h-5.367zm8.873 0h2.322l.493-15.327H24l-.014-2.21h-6.524v2.213h1.896zM8.952 3.233H6.21l.294 17.537h2.4zm-6.2 10.264h1.95V11.23h-1.95l.007-5.706h2.545L5.29 3.232H0l.478 17.537h2.325Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fiat" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fiat extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6D, create_fragment$6D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fidoalliance.svelte generated by Svelte v3.23.2 */

        function create_fragment$6E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.849 7.513a1.085 1.085 0 1 0 1.085 1.086v-.001c0-.599-.486-1.085-1.085-1.085zM4.942 10.553v1.418H6.89v4.793h.704V14.04h.509v2.724h.71v-6.211H4.941zM14.122 11.089H14.1c-.287-.416-.862-.702-1.639-.702-1.489 0-2.797 1.224-2.786 3.319 0 1.936 1.181 3.201 2.659 3.201.797 0 1.56-.361 1.935-1.04l.117.893h1.669V7.651h-1.934zm0 2.904c0 .158-.012.313-.034.465l.002-.017c-.11.532-.574.925-1.13.925h-.014.001c-.797 0-1.318-.659-1.318-1.723 0-.978.446-1.767 1.329-1.767.606 0 1.022.437 1.138.947.014.09.023.194.023.3l-.001.054v-.003zM4.802 8.89l.475-1.6a2.914 2.914 0 0 0-.384-.101l-.019-.003a3.654 3.654 0 0 0-.829-.092 3.73 3.73 0 0 0-1.084.159l.027-.007a2.022 2.022 0 0 0-.38.153l.011-.005a2.624 2.624 0 0 0-.663.475c-.5.49-.754 1.155-.754 1.975v.708H-.001v1.418h1.199v4.793h1.921V11.97h1.199v-1.416H3.119v-.75a1.019 1.019 0 0 1 .23-.713l-.001.002a.736.736 0 0 1 .063-.062l.001-.001s.414-.41 1.389-.14zM20.306 10.388c-2.01 0-3.327 1.286-3.327 3.307s1.393 3.212 3.213 3.212c1.664 0 3.276-1.04 3.276-3.327-.002-1.874-1.267-3.192-3.162-3.192zm-.063 5.126c-.832 0-1.276-.797-1.276-1.871 0-.915.361-1.861 1.276-1.861.871 0 1.234.936 1.234 1.851 0 1.137-.482 1.882-1.234 1.882zM22.493 9.761h.232v.589h.14v-.589h.231v-.117h-.603v.117zM23.799 9.644l-.182.505-.181-.505h-.203v.707h.13V9.78l.198.571h.113l.195-.571v.571h.13v-.707h-.201z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fido Alliance" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fidoalliance extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6E, create_fragment$6E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fifa.svelte generated by Svelte v3.23.2 */

        function create_fragment$6F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 8.064v7.872h2.486v-2.843h1.728l.671-1.72H2.486V9.775h2.92l.637-1.711zm6.804 0L6.8 15.936h2.457V8.064zm4.15 0v7.872h2.484v-2.843h1.726l.677-1.72h-2.403V9.775h2.922L17 8.064zm7.658 0l-2.83 7.872h2.375l.306-1.058h2.769l.32 1.058H24l-2.837-7.872zm1.235 2.023l.981 3.277h-1.927z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "FIFA" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fifa extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6F, create_fragment$6F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Figma.svelte generated by Svelte v3.23.2 */

        function create_fragment$6G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 12a4 4 0 1 1 8 0 4 4 0 0 1-8 0zM4 20a4 4 0 0 1 4-4h4v4a4 4 0 1 1-8 0zM12 0v8h4a4 4 0 1 0 0-8h-4zM4 4a4 4 0 0 0 4 4h4V0H8a4 4 0 0 0-4 4zM4 12a4 4 0 0 0 4 4h4V8H8a4 4 0 0 0-4 4z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Figma" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Figma extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6G, create_fragment$6G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Figshare.svelte generated by Svelte v3.23.2 */

        function create_fragment$6H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0a1.0073 1.0073 0 00-1.0078 1.0078c0 .5566.4506 1.0098 1.0078 1.0098.5578 0 1.0078-.4532 1.0078-1.0098C13.0078.451 12.5578 0 12 0zM8.6895.541A1.0069 1.0069 0 008.291.588c-.528.1706-.8194.7408-.6465 1.2695.1719.5304.7419.8213 1.2696.6485.5302-.1724.8208-.7423.6484-1.2715-.128-.3986-.481-.6607-.873-.6934zm6.621 0c-.3917.0331-.7451.2948-.873.6934-.1724.5292.118 1.0991.6484 1.2715.5297.1728 1.0984-.1181 1.2715-.6485.171-.5287-.1205-1.0966-.6504-1.2695a.9976.9976 0 00-.3965-.0469zM10.588 1.9902A.8517.8517 0 0010.416 2c-.4648.0743-.7815.508-.707.9727a.85.85 0 00.9746.707c.4638-.073.7794-.5099.707-.9727a.8537.8537 0 00-.8027-.7168zm2.8242 0a.8498.8498 0 00-.8008.7168c-.0745.464.242.8998.7051.9727.4635.0734.8998-.2415.9746-.705.0717-.466-.2428-.9004-.707-.9747a.8536.8536 0 00-.1719-.0098zm-7.9082.1094a1.0023 1.0023 0 00-.5566.1914c-.4495.327-.5522.9586-.2246 1.4102.3278.4502.96.5508 1.4101.2226.4506-.326.5508-.959.2227-1.4101-.2047-.2816-.5278-.4251-.8516-.414zm12.9922 0c-.3237-.011-.6472.1325-.8516.414-.3284.4508-.2278 1.0832.2227 1.4102.4505.327 1.0817.2281 1.4101-.2226.327-.4516.2273-1.0831-.2226-1.4102a1.0095 1.0095 0 00-.5586-.1914zm-10.7676.7871a.8428.8428 0 00-.3242.0918c-.4186.2126-.5855.7256-.3711 1.1445a.8463.8463 0 001.1426.3711c.4167-.213.5856-.725.373-1.1445a.8538.8538 0 00-.8203-.4629zm8.543 0a.8538.8538 0 00-.8203.463.8513.8513 0 00.373 1.1444c.4194.2145.9317.0487 1.1426-.371.2137-.419.0495-.932-.3691-1.1446a.8521.8521 0 00-.3262-.0918zM12 3.5625a.7086.7086 0 00-.709.709c0 .3927.3168.709.709.709a.7081.7081 0 00.709-.709.7088.7088 0 00-.709-.709zm-2.3281.3809a.7062.7062 0 00-.2793.0332c-.3724.1203-.5755.5197-.4551.8925a.7088.7088 0 00.8926.4551c.3711-.121.5781-.5208.457-.8926a.7123.7123 0 00-.6152-.4882zm4.6562 0c-.2754.0236-.5246.209-.6152.4882-.1209.3718.0847.7717.457.8926.3726.1207.7724-.0833.8926-.455a.7081.7081 0 00-.455-.8926.7053.7053 0 00-.2794-.0332zm-11.1836.5878a1.0132 1.0132 0 00-.8535.416c-.3265.4494-.2245 1.0812.2246 1.4083.4506.3279 1.0804.228 1.4063-.2227.3292-.4505.2311-1.082-.2207-1.4101a.9945.9945 0 00-.5567-.1914zm17.713 0a1.0028 1.0028 0 00-.5587.1915c-.4513.3281-.5491.9596-.2226 1.4101.327.4508.9577.5494 1.4082.2227.4516-.3282.552-.96.2226-1.4102-.2039-.281-.526-.4248-.8496-.414zm-15.4141.0586a.8494.8494 0 00-.6016.25c-.3328.3324-.334.8725-.002 1.2051a.8547.8547 0 001.2051 0c.3306-.3326.332-.873 0-1.205a.847.847 0 00-.6015-.25zm13.1152 0a.8523.8523 0 00-.6035.25c-.3321.3318-.3321.8725 0 1.2051.3332.3315.8724.3321 1.205 0 .3335-.332.3335-.8724 0-1.205a.8474.8474 0 00-.6015-.25zm-11.125.4493a.709.709 0 00-.3926.1347c-.3156.231-.3868.6735-.1562.9903.2304.3178.6733.3855.9902.1562a.7065.7065 0 00.1563-.9883.7073.7073 0 00-.5977-.293zm9.1328 0a.7074.7074 0 00-.5977.293c-.2297.3172-.16.7595.1563.9882a.707.707 0 00.9902-.1562.7081.7081 0 00-.5488-1.125zm-5.5469.0097a.5897.5897 0 00-.1191.0078c-.3213.0512-.5435.3521-.4922.6739.051.322.3557.5427.6777.4922.3222-.0509.5407-.3532.4903-.6758a.5906.5906 0 00-.5567-.498zm1.961 0a.5882.5882 0 00-.5547.498c-.0515.3215.1675.625.4883.6759.3221.051.6259-.1702.6757-.4922.0524-.3229-.168-.6233-.4902-.6739a.5904.5904 0 00-.1191-.0078zm-3.9453.623a.6048.6048 0 00-.2286.0645.5902.5902 0 00-.2578.793.592.592 0 00.795.2598c.2898-.1497.4077-.5062.2597-.797a.589.589 0 00-.5683-.3202zm5.9316 0c-.2294-.0165-.4582.102-.5684.3204-.1503.2918-.034.648.2559.795a.5923.5923 0 00.7969-.2579.5898.5898 0 00-.2598-.793.5863.5863 0 00-.2246-.0644zM12 6.1876a.4885.4885 0 00-.4883.4883c0 .2703.2186.4883.4883.4883.2704 0 .4902-.218.4902-.4883 0-.2693-.2198-.4883-.4902-.4883zm-1.6035.2617a.4835.4835 0 00-.1914.0235c-.2574.0832-.3985.3588-.3145.6152.0827.2564.3594.396.6153.3125a.4884.4884 0 00.3144-.6152.4917.4917 0 00-.4238-.336zm3.207 0a.4865.4865 0 00-.4219.336.488.488 0 00.3125.6152c.2566.0824.5322-.0561.6153-.3125.0826-.2564-.0561-.5326-.3125-.6152a.4897.4897 0 00-.1934-.0235zm-7.83.2988a.705.705 0 00-.5977.293c-.2308.3153-.1596.7587.1562.9883.317.2307.7605.16.9903-.1563.2296-.3165.159-.759-.1582-.9902a.702.702 0 00-.3907-.1348zm12.455 0a.7098.7098 0 00-.3926.1348.707.707 0 00-.1582.9902c.231.3163.675.3879.9903.1582.3175-.2314.3883-.6749.1582-.9902a.705.705 0 00-.5977-.293zm-10.7832.1075a.592.592 0 00-.418.1738c-.2312.2296-.2301.6047 0 .834a.5895.5895 0 00.836 0 .591.591 0 00.002-.836.5924.5924 0 00-.42-.1718zm9.1094 0a.5885.5885 0 00-.418.1738.5867.5867 0 000 .834.5887.5887 0 00.834 0c.2301-.2302.2315-.6033.002-.834a.5884.5884 0 00-.418-.1738zm-12.7559.084a.856.856 0 00-.8203.4648.849.849 0 00.373 1.1426c.419.2149.9316.046 1.1446-.3711.2136-.4186.0454-.9303-.373-1.1446a.843.843 0 00-.3243-.0917zm16.4043 0a.8529.8529 0 00-.3261.0918c-.4193.2128-.5854.725-.373 1.1445.213.4182.7269.5845 1.1444.371.4195-.2143.5867-.725.373-1.1425a.8538.8538 0 00-.8183-.4648zM8.8535 7.205a.483.483 0 00-.2695.0918c-.2182.158-.2662.4657-.1074.6836.1584.217.4635.2664.6816.1074a.489.489 0 00.1074-.6816.4844.4844 0 00-.412-.2012zm6.293 0a.4847.4847 0 00-.4121.2012c-.16.2184-.1088.5237.1093.6816a.4876.4876 0 00.6817-.1074c.1598-.2179.1088-.5261-.1094-.6836a.4831.4831 0 00-.2695-.0918zm-3.8125.0683a.3879.3879 0 00-.08.004c-.2205.0349-.3718.2414-.336.4609.0338.2193.24.3675.461.334.2194-.035.3678-.2412.3339-.461-.03-.1906-.192-.3296-.379-.3379zm1.332 0a.4009.4009 0 00-.3789.338c-.0324.2176.117.4244.334.4609.2216.0335.4267-.115.461-.336.034-.2178-.1164-.4232-.334-.459a.4094.4094 0 00-.082-.0039zm-11.205.3243c-.3915.0344-.744.2965-.8731.6933-.172.5306.118 1.0999.6484 1.2715.5291.173 1.0974-.1166 1.2696-.6465.1715-.5304-.119-1.0994-.6485-1.2734a1.0013 1.0013 0 00-.3965-.045zm21.078 0a1.0009 1.0009 0 00-.3964.0449c-.5304.1734-.8208.743-.6485 1.2734.1738.53.7409.8195 1.2696.6465.5315-.1716.821-.741.6484-1.2715-.1292-.3968-.482-.6589-.873-.6933zm-12.5546.0996a.409.409 0 00-.1563.043c-.196.1004-.2756.342-.1758.539a.4005.4005 0 00.541.1758c.1973-.101.277-.342.1758-.539a.397.397 0 00-.3847-.2188zm4.0312 0a.3988.3988 0 00-.3847.2168.4012.4012 0 00.1757.541c.1975.1009.4374.022.5391-.1758a.4005.4005 0 00-.1758-.541.3983.3983 0 00-.1543-.041zm-6.3047.6855c-.1568-.0054-.3144.0641-.412.2012-.159.217-.1098.523.1074.6816.2181.1596.5225.1084.6816-.1093.1592-.2186.1093-.523-.1074-.6817a.4847.4847 0 00-.2696-.0918zm8.5801 0a.4904.4904 0 00-.2715.0918.4873.4873 0 00-.1074.6816c.1598.2178.464.268.6816.1094.2187-.1597.2672-.4645.1075-.6816a.481.481 0 00-.4102-.2012zm-9.9863.1035a.594.594 0 00-.5703.3223.5913.5913 0 00.2597.793.5867.5867 0 00.793-.2559c.1484-.292.0326-.649-.2578-.7969a.5837.5837 0 00-.2246-.0625zm11.3926 0a.59.59 0 00-.2266.0625c-.2913.1472-.4053.5048-.2578.7969a.5895.5895 0 00.793.2578.5898.5898 0 00.2578-.795.5867.5867 0 00-.5664-.3222zM8.9043 8.5a.4096.4096 0 00-.2871.1191.4023.4023 0 00.002.5684.4024.4024 0 00.5683 0 .4023.4023 0 000-.5684.4.4 0 00-.2832-.1191zm6.1934.002a.4004.4004 0 00-.2852.1171.3993.3993 0 00.002.5684.3998.3998 0 00.5664 0c.1577-.158.1568-.4129 0-.5684a.3991.3991 0 00-.2832-.1171zm-10.5079.4042c-.2752.0234-.5233.2071-.6132.4864-.1217.3721.0827.7708.455.8926a.7074.7074 0 00.8926-.4532c.12-.373-.0814-.7734-.455-.8925a.7026.7026 0 00-.2794-.0333zm14.8204 0a.703.703 0 00-.2793.0333c-.3729.1191-.5758.5195-.4551.8925.12.3718.5203.5743.8926.4532.3717-.1218.578-.5205.457-.8926a.7113.7113 0 00-.6152-.4863zM8.127 9.6113a.4015.4015 0 00-.3868.2188.4.4 0 00.1758.539.3974.3974 0 00.539-.1738.401.401 0 00-.1757-.541.3936.3936 0 00-.1523-.043zm7.746 0a.3923.3923 0 00-.1523.043.4008.4008 0 00-.1758.541.4031.4031 0 00.539.1738.3989.3989 0 00.1759-.541.4033.4033 0 00-.3868-.2168zm-13.0722.088a.8528.8528 0 00-.8028.7167.8519.8519 0 00.709.9727.8477.8477 0 00.9727-.7051c.0735-.4642-.2409-.9007-.705-.9746a.8745.8745 0 00-.174-.0098zm18.3984 0a.854.854 0 00-.1719.0097.8498.8498 0 00-.707.9746.8477.8477 0 00.9727.705.8494.8494 0 00.707-.9726c-.0643-.4055-.4057-.6986-.8008-.7168zm-14.3047.1679a.4876.4876 0 00-.4218.336.4873.4873 0 00.3144.6152c.2558.084.5329-.0558.6152-.3125.0838-.2558-.0578-.5337-.3144-.6172a.4888.4888 0 00-.1934-.0215zm10.211 0a.489.489 0 00-.1934.0215c-.2555.0835-.3971.3614-.3144.6172a.4896.4896 0 00.6171.3125c.2564-.0827.3947-.3593.3106-.6153-.0601-.192-.2299-.3192-.42-.336zm-11.4942.5332a.5899.5899 0 00-.5547.498c-.0511.323.1676.6266.4883.6778.3235.0518.6274-.1689.6778-.4903a.5926.5926 0 00-.4922-.6777.5862.5862 0 00-.1192-.0078zm12.7774 0a.593.593 0 00-.1192.0078.5923.5923 0 00-.4922.6777.5897.5897 0 00.6758.4903c.322-.0512.5414-.3548.4903-.6778a.5905.5905 0 00-.5547-.498zm-10.7325.5137c-.1853.0095-.3472.145-.3789.3359a.4024.4024 0 00.336.461.4009.4009 0 00.457-.332.4025.4025 0 00-.334-.463.3937.3937 0 00-.08-.002zm8.6875 0a.4169.4169 0 00-.082.0039.4023.4023 0 00-.332.461c.0341.2184.2406.3656.459.332a.4019.4019 0 00.334-.459c-.0301-.1928-.1917-.3291-.379-.338zm-15.3359.078C.4508 10.9922 0 11.4437 0 12c0 .5575.4503 1.0078 1.0078 1.0078A1.0069 1.0069 0 002.0156 12c0-.5564-.4506-1.0078-1.0078-1.0078zm21.9844 0c-.558 0-1.0098.4509-1.0098 1.0079 0 .5569.4518 1.0078 1.0098 1.0078C23.5466 13.0078 24 12.5575 24 12c0-.5564-.4534-1.0078-1.0078-1.0078zm-18.7207.299a.7086.7086 0 00-.709.7089c.001.3924.317.709.709.709a.7086.7086 0 00.709-.709.709.709 0 00-.709-.709zm15.457 0c-.3904 0-.709.3171-.709.7089 0 .3924.3186.709.709.709a.7062.7062 0 00.707-.709c0-.3918-.3146-.709-.707-.709zm-13.0527.2187c-.27 0-.4883.2213-.4883.4902 0 .269.2183.4879.4883.4863.269 0 .4883-.2174.4883-.4863 0-.269-.2194-.4902-.4883-.4902zm10.6484 0c-.2698 0-.4883.2213-.4883.4902a.486.486 0 00.4883.4863.4867.4867 0 00.4883-.4863c0-.269-.218-.4902-.4883-.4902zm-1.0176.7734c-.1861.0074-.3464.147-.377.3379-.0348.2202.1128.426.3321.461.2187.0331.4252-.1146.461-.334a.3976.3976 0 00-.334-.459.4076.4076 0 00-.082-.0059zm-8.6132.002a.4168.4168 0 00-.082.0039c-.2181.0347-.37.239-.334.459.035.2198.2407.3674.4609.334a.404.404 0 00.334-.461c-.0306-.192-.192-.3278-.379-.336zm-2.0274.1328a.6064.6064 0 00-.121.0058c-.3208.0504-.5395.3529-.4884.6758a.5894.5894 0 00.6739.4922.5917.5917 0 00.4922-.6777c-.0441-.2816-.2813-.4838-.5567-.4961zm12.668 0a.5905.5905 0 00-.5567.498c-.0513.3214.168.625.4903.6758.3231.0514.6244-.1701.6758-.4922.051-.323-.1671-.6254-.4903-.6758a.585.585 0 00-.1191-.0058zm-15.455.1816a.8538.8538 0 00-.172.0098c-.4638.0735-.7817.5105-.709.9746.074.4642.511.7812.9747.707.466-.0732.7808-.5105.707-.9746a.8497.8497 0 00-.8008-.7168zm18.242 0c-.396.0179-.7384.3103-.8026.7168-.0727.4641.2442.901.709.9746.4636.0739.8983-.243.9726-.707.0726-.4648-.2409-.9011-.705-.9746a.8735.8735 0 00-.174-.0098zm-14.1405.5586a.4917.4917 0 00-.1934.0215.4892.4892 0 00-.3144.6172c.082.2566.3585.3958.6152.3125.2566-.0827.397-.3606.3144-.6153a.4879.4879 0 00-.4218-.3359zm10.041 0a.4896.4896 0 00-.4238.336c-.0822.2546.0589.5325.3144.6152.2564.0833.532-.056.6133-.3125.084-.2572-.0542-.5337-.3106-.6172a.4916.4916 0 00-.1933-.0215zm-8.9512.4277a.3959.3959 0 00-.1523.043.3983.3983 0 00-.1758.541.399.399 0 00.5371.1758.3994.3994 0 00.1758-.539c-.0759-.1482-.2297-.2314-.3848-.2208zm7.8613 0a.4052.4052 0 00-.3886.2188.4037.4037 0 00.1758.541c.1983.101.4418.0231.543-.1758.1005-.196.0196-.4391-.1778-.541a.3905.3905 0 00-.1524-.043zm-11.2207.0938a.7048.7048 0 00-.2793.0332c-.3723.1218-.5767.5213-.455.8945a.7072.7072 0 00.8925.4531c.3737-.12.575-.5195.4551-.8925a.7111.7111 0 00-.6133-.4883zm14.5782 0a.7118.7118 0 00-.6133.4902c-.1196.372.0822.7705.455.8906a.7071.7071 0 00.8926-.453c.1226-.3733-.0833-.7728-.455-.8946a.7042.7042 0 00-.2793-.0332zm-13.0704.6543a.5803.5803 0 00-.2246.0625c-.2907.148-.4083.5042-.2597.795a.59.59 0 00.7949.2577.5864.5864 0 00.2578-.793.5911.5911 0 00-.5683-.3222zm11.5625 0a.5917.5917 0 00-.5683.3203.5902.5902 0 00.2578.795c.2907.1473.6475.0327.795-.2579.1488-.2907.0317-.6469-.2598-.795a.5784.5784 0 00-.2247-.0624zm-16.1484.0566a.992.992 0 00-.3965.0469c-.5303.1712-.8205.741-.6484 1.2715.172.5289.741.8182 1.2695.6465.53-.173.8197-.741.6485-1.2715a1.009 1.009 0 00-.873-.6934zm20.7344 0a1.0107 1.0107 0 00-.873.6934c-.1707.5305.118 1.0985.6484 1.2715.5292.1717 1.0972-.1176 1.2695-.6465.1726-.5306-.117-1.1003-.6484-1.2715a.992.992 0 00-.3965-.0469zm-14.6914.25a.4847.4847 0 00-.2695.0938c-.2175.159-.2663.4639-.1094.6816a.4893.4893 0 00.6836.1094c.2167-.1586.2683-.4658.1093-.6836a.494.494 0 00-.414-.2012zm8.6484 0a.4911.4911 0 00-.412.2012.4897.4897 0 00.1073.6836c.2185.1585.525.11.6817-.1094a.4875.4875 0 00-.1075-.6816.4844.4844 0 00-.2695-.0938zm-7.4199.0547c-.1028 0-.2064.037-.2852.1152a.4016.4016 0 000 .5684c.1582.1572.4118.1574.5684.002a.403.403 0 000-.5704.3973.3973 0 00-.2832-.1152zm6.1914 0a.3975.3975 0 00-.2832.1172c-.1579.1565-.1568.4122 0 .5684.1589.1565.4117.1565.5684 0a.4016.4016 0 000-.5684.4026.4026 0 00-.2852-.1172zm-11.42.666a.8422.8422 0 00-.3241.0899c-.4186.2135-.5862.7252-.373 1.1445.2132.4186.7252.5859 1.1444.373.4185-.2139.5867-.7263.373-1.1445-.1596-.3135-.4891-.4857-.8202-.4629zm16.6485 0a.8553.8553 0 00-.8203.463c-.2134.4181-.0462.9305.373 1.1445.4187.2128.9304.0455 1.1446-.3731.214-.4193.0459-.931-.373-1.1445a.8397.8397 0 00-.3243-.0899zM13.959 15.5a.4037.4037 0 00-.1543.043c-.195.1015-.2742.3435-.1738.541a.3988.3988 0 00.539.1758c.1964-.1017.277-.3433.1758-.541a.4006.4006 0 00-.3867-.2188zm-3.918.002c-.1569-.0107-.3114.0691-.3867.2167a.4012.4012 0 00.1758.541c.1978.1.4387.0222.539-.1757.1023-.198.0228-.4393-.1738-.541a.402.402 0 00-.1543-.041zm-1.1523.3164a.487.487 0 00-.4121.2011.4874.4874 0 10.789.5723c.158-.217.1098-.5226-.1074-.6816a.4826.4826 0 00-.2695-.0918zm6.2246 0a.4833.4833 0 00-.2696.0918c-.2181.159-.2675.4646-.1093.6816.1573.2192.4643.2671.6816.1094.2182-.159.2692-.4645.1094-.6817a.4863.4863 0 00-.4121-.2011zm-9.3906.0156a.6996.6996 0 00-.3907.1328c-.3158.2309-.3867.6757-.1562.9922a.7044.7044 0 00.9883.1562c.3172-.2307.3884-.6724.1582-.9882a.711.711 0 00-.5996-.293zm12.5546 0a.7134.7134 0 00-.5996.293.7052.7052 0 00.1582.9882c.3173.2312.761.162.9903-.1562.2301-.3165.1593-.7613-.1582-.9922a.699.699 0 00-.3907-.1328zm-6.9804.0879c-.188.008-.3496.1486-.3809.3418-.0333.2182.1183.4223.338.459.2195.0349.4232-.116.4589-.336.0335-.2184-.1165-.4225-.334-.459a.4123.4123 0 00-.082-.0058zm1.4062.002a.4108.4108 0 00-.082.0038c-.2196.035-.3667.2411-.332.461a.4013.4013 0 00.459.334.3987.3987 0 00.332-.459.3996.3996 0 00-.377-.3399zm-5.2578.039a.59.59 0 00-.418.1738.5905.5905 0 00.836.834c.2313-.2306.2324-.6037.002-.834a.5958.5958 0 00-.42-.1738zm9.1094 0a.5891.5891 0 00-.418.1738.5867.5867 0 000 .834.5875.5875 0 00.834 0 .5893.5893 0 000-.834.5849.5849 0 00-.416-.1738zm-6.2422.6133a.4878.4878 0 00-.4219.336.4857.4857 0 00.3145.6151.489.489 0 00.6152-.3125c.0834-.2569-.0579-.5344-.3144-.6171a.4904.4904 0 00-.1934-.0215zm3.375 0a.4907.4907 0 00-.1934.0215c-.255.0827-.3961.3602-.3125.6171.0824.2559.3589.3944.6153.3125a.4885.4885 0 00.3125-.6152.4877.4877 0 00-.4219-.336zM12 16.8359a.4878.4878 0 00-.4883.4883c0 .2698.2186.4883.4883.4883.2704 0 .4902-.2185.4902-.4883 0-.2703-.2198-.4883-.4902-.4883zm-2.8828.3125a.5908.5908 0 00-.5684.3204c-.1467.2916-.0318.6463.2578.7949a.5923.5923 0 00.797-.2578c.1469-.2902.0316-.6464-.2579-.795a.6008.6008 0 00-.2285-.0625zm5.7656 0a.59.59 0 00-.2265.0625c-.2917.1479-.4058.504-.2598.795.1494.291.5061.4064.7969.2578a.59.59 0 00.2558-.795.5864.5864 0 00-.5664-.3203zm-11.8105.3028a1.0037 1.0037 0 00-.5567.1933c-.4502.3271-.5514.9589-.2226 1.4102.327.4491.9581.549 1.4082.2207.4518-.3276.5497-.9583.2226-1.4082a1.0092 1.0092 0 00-.8515-.416zm17.8554.002c-.3235-.011-.6468.133-.8515.414-.3285.4499-.2287 1.0811.2226 1.4082.452.3284 1.082.2284 1.4082-.2207.3293-.4513.2284-1.083-.2226-1.4102a1.0005 1.0005 0 00-.5567-.1914zm-13.4453.0898a.7077.7077 0 00-.5976.293c-.2306.3159-.1594.7591.1562.9902.3175.23.7595.1583.9902-.1582.23-.317.1605-.7607-.1562-.9903a.704.704 0 00-.3926-.1347zm9.0352 0a.7037.7037 0 00-.3926.1347c-.316.2296-.386.6733-.1563.9903a.7096.7096 0 00.9903.1582c.317-.2302.387-.6743.1562-.9903a.707.707 0 00-.5976-.293zm-11.0742.162a.8466.8466 0 00-.6016.25c-.3328.3325-.3328.8713 0 1.2032.3322.3323.8696.3323 1.2031 0a.8518.8518 0 00-.6015-1.4531zm13.1152.002a.8552.8552 0 00-.6035.248.85.85 0 000 1.2032c.3332.3323.8707.3314 1.205 0a.85.85 0 000-1.2031.8443.8443 0 00-.6015-.248zm-7.5918.0625c-.2745.0126-.514.2163-.5586.498-.0513.322.1692.625.4922.6759a.5907.5907 0 00.6758-.4922c.0527-.3215-.168-.6227-.4903-.6739a.5935.5935 0 00-.1191-.0078zm2.0664 0a.5911.5911 0 00-.1191.0078c-.3208.0503-.5398.3524-.4883.6739.0505.3222.3509.5441.6738.4922a.5893.5893 0 00.4902-.6758c-.0436-.2818-.282-.486-.5566-.498zm-3.4824.873a.7095.7095 0 00-.6133.4884.708.708 0 00.455.8925c.3734.1214.7732-.0839.8946-.455.1211-.3726-.0859-.772-.457-.8926a.7066.7066 0 00-.2793-.0332zm4.8984 0a.7056.7056 0 00-.2793.0313c-.3723.1212-.5779.522-.457.8946.1208.3711.5218.5764.8945.455.3717-.1217.5762-.5197.4551-.8925a.7086.7086 0 00-.6133-.4883zM12 19.0196a.7086.7086 0 00-.709.709c0 .3916.3168.709.709.709a.7088.7088 0 00.709-.709.7089.7089 0 00-.709-.709zm-4.1504.3946a.8518.8518 0 00-.8183.4629c-.2126.4187-.0453.9295.373 1.1425.419.2138.9304.0484 1.1426-.3691.213-.419.0486-.9328-.3711-1.1465a.8503.8503 0 00-.3262-.0898zm8.3008 0a.8595.8595 0 00-.3281.0898c-.4181.2137-.5848.7261-.3711 1.1465.2138.4186.7278.5829 1.1465.3691.4175-.2125.5833-.7238.3691-1.1425a.8465.8465 0 00-.8164-.463zm-10.5762.4687a1.0087 1.0087 0 00-.8515.416c-.3276.4503-.225 1.0812.2246 1.4082a1.0076 1.0076 0 001.4082-.2226c.3281-.4506.2279-1.0811-.2227-1.4082a1.0096 1.0096 0 00-.5586-.1934zm12.8516 0a1.0122 1.0122 0 00-.5586.1934c-.4505.327-.5511.9576-.2227 1.4082.328.4513.9583.5508 1.4102.2226.45-.3265.5497-.958.2226-1.4082a1.0083 1.0083 0 00-.8515-.416zm-7.914.4258c-.3956.0179-.7384.3119-.8028.7187-.0739.4623.2422.8998.707.9727.4626.0743.9001-.244.9727-.709.0745-.4639-.242-.8983-.7051-.9726a.8516.8516 0 00-.1719-.0098zm2.9784 0a.8513.8513 0 00-.879.9844c.0734.4642.5083.7813.9728.707.4642-.0729.7806-.509.707-.9727-.0638-.4068-.4067-.7008-.8008-.7187zm-4.9726 1.1406c-.391.0338-.7442.2962-.873.6934-.173.5292.117 1.0971.6464 1.2695.5306.1726 1.1008-.1183 1.2715-.6484.1724-.5296-.1182-1.097-.6484-1.2696a.9986.9986 0 00-.3965-.0449zm6.9648 0a.9988.9988 0 00-.3965.045c-.529.1725-.8218.74-.6504 1.2695.1714.53.743.821 1.2715.6484.5299-.1724.8213-.7403.6504-1.2695-.1298-.3972-.4834-.6596-.875-.6934zM12 21.9824c-.5572 0-1.0078.4532-1.0078 1.0098S11.4428 24 12 24a1.007 1.007 0 001.0078-1.0078c0-.5566-.45-1.0098-1.0078-1.0098Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "figshare" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Figshare extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6H, create_fragment$6H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fila.svelte generated by Svelte v3.23.2 */

        function create_fragment$6I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.736 8.048c-.582 0-1.035.471-1.035 1.054l.023 5.795c0 .582.445 1.054 1.029 1.054h.12c.583 0 1.054-.472 1.054-1.054l-.023-5.795c0-.583-.472-1.054-1.055-1.054zm3.071.007c-.574 0-1.04.468-1.04 1.044v5.24c0 .785.773 1.542 1.541 1.542h4.058c.577 0 .965-.42 1.292-.995l2.112-3.622c.018-.04.053-.09.093-.09.044 0 .07.05.092.088l1.381 2.216c.058.094.068.141.032.225-.032.077-.109.093-.23.093h-1.939c-.578 0-1.044.467-1.044 1.044v.065c0 .577.466.976 1.044.976h3.163c.77 0 1.638-.732 1.638-1.69 0-.607-.118-.822-.624-1.645l-2.342-3.814c-.275-.442-.65-.656-1.123-.656-.49 0-.904.229-1.163.656l-2.712 4.496c-.185.308-.398.434-.75.434h-2.018a.275.275 0 0 1-.285-.283l.002-4.28c0-.576-.468-1.044-1.044-1.044zm-10.752.143C.473 8.198 0 8.644 0 9.226V9.3c0 .584.473 1.055 1.055 1.055H5.99c.581 0 1.055-.471 1.055-1.055v-.066A1.04 1.04 0 0 0 5.99 8.198zm.187 2.819c-.724 0-1.241.568-1.241 1.241L0 14.91c0 .577.467 1.042 1.042 1.042h.134a1.04 1.04 0 0 0 1.042-1.042v-1.458c0-.157.126-.284.283-.284H5.48c.575 0 1.043-.465 1.043-1.042v-.066c0-.576-.468-1.043-1.043-1.043z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fila" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fila extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6I, create_fragment$6I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Filezilla.svelte generated by Svelte v3.23.2 */

        function create_fragment$6J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24.002,1.86V0.801c-0.212,0-0.419-0.087-0.568-0.236c-0.148-0.148-0.234-0.356-0.234-0.567h-1.061 c-0.021,0.444-0.4,0.786-0.844,0.765c-0.413-0.021-0.743-0.352-0.764-0.765h-1.061c-0.027,0.444-0.408,0.782-0.853,0.755 c-0.405-0.025-0.729-0.35-0.755-0.755h-1.059c-0.023,0.444-0.4,0.786-0.845,0.765c-0.413-0.021-0.743-0.352-0.765-0.765h-1.06 c-0.022,0.444-0.399,0.786-0.844,0.765c-0.413-0.021-0.743-0.352-0.765-0.765h-1.059c-0.027,0.444-0.408,0.782-0.853,0.755 c-0.405-0.025-0.729-0.35-0.755-0.755h-1.06C8.786,0.442,8.414,0.789,7.971,0.772C7.549,0.758,7.21,0.419,7.195-0.002H6.135 c-0.021,0.444-0.4,0.786-0.844,0.765C4.878,0.741,4.547,0.411,4.527-0.002H3.467C3.451,0.442,3.078,0.789,2.635,0.772 c-0.422-0.014-0.76-0.353-0.775-0.774H0.8c0,0.211-0.086,0.419-0.235,0.567C0.416,0.714,0.209,0.801-0.003,0.801V1.86 c0.444,0.017,0.79,0.389,0.774,0.832C0.758,3.114,0.419,3.453-0.003,3.467v1.061c0.444,0.016,0.79,0.388,0.774,0.832 C0.758,5.782,0.419,6.12-0.003,6.135v1.059c0.444,0,0.804,0.361,0.804,0.805S0.441,8.803-0.003,8.803v1.059 c0.444,0,0.804,0.359,0.804,0.804s-0.359,0.804-0.804,0.804v1.06c0.444,0.016,0.79,0.389,0.774,0.832 c-0.014,0.422-0.353,0.76-0.774,0.775v1.061c0.444,0,0.804,0.359,0.804,0.803c0,0.445-0.359,0.805-0.804,0.805v1.061 c0.444,0.016,0.79,0.387,0.774,0.83c-0.014,0.422-0.353,0.762-0.774,0.775v1.061c0.444,0,0.804,0.359,0.804,0.805 c0,0.443-0.359,0.803-0.804,0.803v1.061c0.442,0.002,0.802,0.359,0.803,0.803h1.06c0.027-0.443,0.41-0.781,0.854-0.754 c0.406,0.025,0.729,0.348,0.754,0.754h1.061c0.021-0.443,0.4-0.785,0.844-0.764c0.413,0.021,0.743,0.352,0.764,0.764h1.059 c0.023-0.443,0.4-0.785,0.845-0.764c0.413,0.021,0.743,0.352,0.764,0.764h1.06c0.017-0.443,0.389-0.791,0.832-0.775 c0.422,0.016,0.761,0.354,0.775,0.775h1.061c0.021-0.443,0.4-0.785,0.844-0.764c0.413,0.021,0.743,0.352,0.764,0.764h1.059 c0.023-0.443,0.4-0.785,0.845-0.764c0.413,0.021,0.743,0.352,0.765,0.764h1.059c0.023-0.443,0.4-0.785,0.845-0.764 c0.413,0.021,0.743,0.352,0.765,0.764h1.06c0.016-0.443,0.388-0.791,0.831-0.775c0.422,0.016,0.761,0.354,0.775,0.775H23.2 c0-0.211,0.086-0.418,0.235-0.568c0.148-0.148,0.355-0.234,0.567-0.234v-1.061c-0.444-0.027-0.781-0.408-0.755-0.852 c0.025-0.406,0.35-0.73,0.755-0.754v-1.061c-0.444-0.023-0.786-0.4-0.764-0.844c0.021-0.414,0.351-0.744,0.764-0.764v-1.061 c-0.444-0.027-0.781-0.41-0.755-0.854c0.025-0.406,0.35-0.729,0.755-0.754v-1.061c-0.444-0.021-0.786-0.4-0.764-0.844 c0.021-0.412,0.351-0.742,0.764-0.764v-1.058c-0.444-0.027-0.781-0.41-0.755-0.854c0.025-0.406,0.35-0.729,0.755-0.754V8.803 c-0.444-0.021-0.786-0.4-0.764-0.844c0.021-0.413,0.351-0.743,0.764-0.764V6.135c-0.444-0.027-0.781-0.408-0.755-0.853 c0.025-0.405,0.35-0.729,0.755-0.754v-1.06c-0.444-0.022-0.786-0.4-0.765-0.844C23.258,2.211,23.588,1.881,24.002,1.86L24.002,1.86z M19.934,11.698l-6.404,6.226c0.58,0.09,1.14,0.225,1.742,0.225c1.465,0,3.148-0.445,4.287-0.916l-0.584,2.746 c-1.676,0.805-2.701,0.871-3.703,0.871c-1.095,0-2.144-0.357-3.215-0.357c-0.603,0-1.474,0.045-2.009,0.4L8.887,18.84l6.607-6.541 H7.891l-1.451,6.808H3.27l3.305-15.58h10.49l-0.67,3.146H9.096L8.471,9.598h11.977L19.934,11.698L19.934,11.698z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "FileZilla" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Filezilla extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6J, create_fragment$6J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Firebase.svelte generated by Svelte v3.23.2 */

        function create_fragment$6K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.89 15.672L6.255.461A.542.542 0 017.27.288l2.543 4.771zm16.794 3.692l-2.25-14a.54.54 0 00-.919-.295L3.316 19.365l7.856 4.427a1.621 1.621 0 001.588 0zM14.3 7.147l-1.82-3.482a.542.542 0 00-.96 0L3.53 17.984z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Firebase" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Firebase extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6K, create_fragment$6K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Firefox.svelte generated by Svelte v3.23.2 */

        function create_fragment$6L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.977 11.297a2.956 2.956 0 0 1-.012-.226v-.006l-.017-.226v-.006a11.91 11.91 0 0 0-.354-1.991c0-.006 0-.006-.006-.012l-.052-.192c-.006-.011-.006-.023-.012-.029-.018-.058-.035-.122-.052-.18-.006-.011-.006-.029-.012-.04l-.052-.169-.018-.046a1.927 1.927 0 0 0-.058-.169l-.017-.052-.058-.162a.391.391 0 0 0-.018-.047c-.023-.052-.04-.11-.063-.162-.006-.012-.012-.03-.018-.041-.023-.058-.046-.11-.07-.168 0-.006-.005-.012-.005-.018a9.351 9.351 0 0 0-.244-.551l-.018-.035c-.023-.047-.04-.087-.063-.128-.012-.023-.024-.052-.035-.075-.018-.041-.041-.076-.058-.117-.018-.029-.03-.058-.047-.087-.017-.034-.04-.07-.058-.11l-.052-.093c-.018-.035-.04-.07-.058-.104a.874.874 0 0 0-.058-.099c-.018-.035-.04-.064-.058-.099-.018-.035-.041-.064-.058-.098l-.058-.093c-.024-.035-.041-.07-.064-.105-.018-.029-.035-.058-.058-.087a9480.074 9480.074 0 0 1-.128-.192l-.076-.11c-.017-.023-.034-.052-.052-.075l-.087-.122-.046-.064c-.047-.064-.087-.122-.134-.18a12.04 12.04 0 0 0-1.138-1.289 8.983 8.983 0 0 0-.888-.807 8.062 8.062 0 0 0-.604-.476 7.862 7.862 0 0 0-1.19-.732 12.284 12.284 0 0 0-3.03-1.126c-.094-.017-.187-.04-.274-.058h-.006c-.046-.006-.087-.018-.133-.023-.604-.11-1.22-.18-1.84-.192h-.512c-.754.012-1.498.093-2.2.244C8.132.614 6.698 1.3 5.746 2.159c-.052.046-.093.081-.116.104l-.023.024h.005l-.005.005.005-.005s.006 0 .006-.006l-.006.006s.006-.006.012-.006c.708-.424 1.69-.772 2.392-.947.093-.023.192-.046.285-.07.017-.005.04-.005.058-.01.081-.018.162-.036.25-.053.011 0 .028-.006.04-.006 3.106-.569 6.416.36 8.72 2.56a8.304 8.304 0 0 1 1.301 1.586c1.469 2.38 1.33 5.376.186 7.14-1.666 2.567-5.388 3.45-7.693 1.203a4.073 4.073 0 0 1-1.237-2.857 3.583 3.583 0 0 1 .302-1.498c.082-.186.633-1.242.883-1.19-.633-.134-1.818.128-2.648 1.364-.743 1.11-.702 2.816-.244 4.03a6.428 6.428 0 0 1-.586-1.899c-.592-3.994 2.096-7.402 4.563-8.25-1.33-1.161-4.668-1.08-7.147.743C3.604 5.19 2.57 6.7 2.024 8.5c.082-1.01.465-2.52 1.249-4.058-.83.43-1.887 1.788-2.41 3.042-.755 1.81-1.016 3.976-.778 6.037l.052.465c.964 5.666 5.905 9.986 11.845 9.986C18.618 23.972 24 18.59 24 11.954c-.006-.221-.012-.442-.023-.657Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Firefox" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Firefox extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6L, create_fragment$6L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Firefoxbrowser.svelte generated by Svelte v3.23.2 */

        function create_fragment$6M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.824 7.287c.008 0 .004 0 0 0zm-2.8-1.4c.006 0 .003 0 0 0zm16.754 2.161c-.505-1.215-1.53-2.528-2.333-2.943.654 1.283 1.033 2.57 1.177 3.53l.002.02c-1.314-3.278-3.544-4.6-5.366-7.477-.091-.147-.184-.292-.273-.446a3.545 3.545 0 01-.13-.24 2.118 2.118 0 01-.172-.46.03.03 0 00-.027-.03.038.038 0 00-.021 0l-.006.001a.037.037 0 00-.01.005L15.624 0c-2.585 1.515-3.657 4.168-3.932 5.856a6.197 6.197 0 00-2.305.587.297.297 0 00-.147.37c.057.162.24.24.396.17a5.622 5.622 0 012.008-.523l.067-.005a5.847 5.847 0 011.957.222l.095.03a5.816 5.816 0 01.616.228c.08.036.16.073.238.112l.107.055a5.835 5.835 0 01.368.211 5.953 5.953 0 012.034 2.104c-.62-.437-1.733-.868-2.803-.681 4.183 2.09 3.06 9.292-2.737 9.02a5.164 5.164 0 01-1.513-.292 4.42 4.42 0 01-.538-.232c-1.42-.735-2.593-2.121-2.74-3.806 0 0 .537-2 3.845-2 .357 0 1.38-.998 1.398-1.287-.005-.095-2.029-.9-2.817-1.677-.422-.416-.622-.616-.8-.767a3.47 3.47 0 00-.301-.227 5.388 5.388 0 01-.032-2.842c-1.195.544-2.124 1.403-2.8 2.163h-.006c-.46-.584-.428-2.51-.402-2.913-.006-.025-.343.176-.389.206-.406.29-.787.616-1.136.974-.397.403-.76.839-1.085 1.303a9.816 9.816 0 00-1.562 3.52c-.003.013-.11.487-.19 1.073-.013.09-.026.181-.037.272a7.8 7.8 0 00-.069.667l-.002.034-.023.387-.001.06C.386 18.795 5.593 24 12.016 24c5.752 0 10.527-4.176 11.463-9.661.02-.149.035-.298.052-.448.232-1.994-.025-4.09-.753-5.844z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Firefox Browser" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Firefoxbrowser extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6M, create_fragment$6M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/First.svelte generated by Svelte v3.23.2 */

        function create_fragment$6N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M 17.51401,18.08466 16.131,16.75662 C 16.67474,16.38449 17.13479,15.94781 17.48911,15.46172 17.49409,15.4554 17.49849,15.44774 17.50328,15.44104 L 20.86723,11.94819 20.9672,11.84056 21.40618,11.38358 17.29816,7.4395 16.37481,8.40058 15.35628,9.46182 14.66277,10.18463 13.35447,11.54695 13.35523,11.54772 13.24204,11.6655 13.62356,12.03093 15.39363,13.75696 C 15.00618,14.12354 14.51396,14.43783 13.95834,14.669 13.95815,14.66919 13.95758,14.66919 13.95739,14.66938 L 12.78889,13.548 11.64223,12.44635 10.86177,11.70668 12.71611,9.77515 13.6475,8.80469 14.6599,7.75073 17.18899,5.1165 23.84736,11.4893 Z M 18.37223,12.486 C 18.4023,12.28892 18.41934,12.09375 18.41934,11.90663 18.41934,10.80249 17.91927,9.63859 17.07944,8.7706 L 17.29816,8.5425 20.70117,11.8101 17.88346,14.74427 C 18.18262,14.04846 18.37606,13.19023 18.37606,12.57467 18.37606,12.54862 18.37472,12.51836 18.37223,12.486 M 15.5434,13.60757 13.93689,12.043 15.29749,10.62591 C 15.78147,11.02945 16.13962,11.51152 16.32885,12.04128 16.31717,12.12784 16.30242,12.2148 16.28116,12.30194 16.16663,12.77118 15.91764,13.20977 15.5434,13.60757 M 15.27642,15.94628 C 15.0282,16.07249 14.76505,16.18683 14.49366,16.28719 13.5615,16.63136 12.55638,16.80584 11.50644,16.80584 10.0181,16.80584 8.60905,16.4519 7.43232,15.78214 6.7819,15.41173 6.23529,14.96299 5.80838,14.44779 5.64501,14.25033 5.50079,14.04482 5.37936,13.83682 5.12846,13.40895 4.96299,12.95811 4.88772,12.4971 4.85344,12.29141 4.83696,12.09816 4.83696,11.90663 4.83696,11.19359 5.04151,10.50735 5.44506,9.8644 L 6.52775,10.96012 C 6.4542,11.2114 6.41705,11.46689 6.41705,11.72085 6.41705,11.93211 6.44329,12.147 6.495,12.35959 6.56873,12.66028 6.69571,12.95447 6.87192,13.23448 7.01135,13.45588 7.18123,13.66713 7.37659,13.86191 7.91381,14.39857 8.64276,14.82069 9.48489,15.08308 10.12363,15.28226 10.80393,15.38319 11.50644,15.38319 12.07374,15.38319 12.63433,15.31597 13.1729,15.18248 13.47953,15.10587 13.77525,15.00857 14.05181,14.89385 14.68901,14.62859 15.2498,14.25913 15.67383,13.82495 16.10457,13.3831 16.38822,12.89011 16.5175,12.35959 16.56979,12.14546 16.59641,11.93057 16.59641,11.72085 16.59641,11.11793 16.36907,10.43534 15.99885,9.91362 L 16.92009,8.95427 C 17.7084,9.77592 18.17553,10.87067 18.17553,11.90663 18.17553,12.09682 18.15868,12.29562 18.12554,12.4971 17.98324,13.36586 17.52224,14.19344 16.79215,14.8904 16.36447,15.29912 15.85444,15.65439 15.27642,15.94628 M 4.64716,12.53675 C 4.6485,12.5446 4.6508,12.55188 4.65214,12.55993 4.64927,12.59076 4.64716,12.61949 4.64716,12.64228 4.64716,12.96768 4.84654,13.73991 4.92717,14.04807 4.92717,14.04846 4.92756,14.04884 4.92756,14.04922 L 3.86976,14.50141 4.87833,9.24463 5.29279,9.6543 C 4.83007,10.35949 4.59373,11.11659 4.59373,11.90663 4.59373,12.11137 4.61135,12.31765 4.64716,12.53675 M 7.11573,13.15787 C 7.10405,13.13986 7.08911,13.12282 7.07781,13.10462 6.91539,12.84702 6.79914,12.57659 6.73153,12.30194 6.72444,12.27302 6.72157,12.2441 6.71582,12.21499 6.79416,11.93843 6.91846,11.67374 7.08202,11.42456 L 8.36792,12.69648 Z M 11.99483,13.88834 13.09993,14.94939 C 12.58492,15.07542 12.04903,15.13977 11.50644,15.13977 10.82844,15.13977 10.17247,15.04247 9.5571,14.85056 9.47493,14.82509 9.39488,14.79675 9.3152,14.76821 L 11.76404,13.66675 Z M 1.19914,18.26699 3.57309,5.04238 6.96193,8.25406 8.02356,9.25995 8.83486,10.02911 10.76083,11.86526 V 12.7028 L 11.5796,13.4894 9.02198,14.65368 C 8.44415,14.40891 7.9412,14.0814 7.54877,13.68954 7.53977,13.68073 7.53249,13.67058 7.52368,13.66177 L 9.48623,12.74513 4.87067,8.44731 4.7797,8.35576 4.66957,8.95083 3.5796,14.63184 3.41087,15.51477 3.69988,15.39086 3.70103,15.38396 5.18362,14.74848 C 5.41537,15.23706 5.74747,15.69117 6.16136,16.0972 Z M 12.70481,9.4938 10.72444,11.55652 8.98501,9.90769 C 9.73215,9.58286 10.60972,9.39459 11.54934,9.39459 11.94752,9.39459 12.33402,9.42983 12.70481,9.4938 M 11.27872,6.80651 C 12.35279,6.80651 13.78904,7.08231 14.70089,7.41499 L 14.6599,7.4577 13.6475,8.51166 13.64405,8.51511 C 13.00761,8.30232 12.2982,8.18243 11.54934,8.18243 10.24199,8.18243 9.05473,8.54575 8.17199,9.13699 L 8.15877,9.12454 7.09715,8.11846 7.00235,8.02864 C 8.16299,7.32804 9.66857,6.80651 11.27872,6.80651 M 23.99943,11.3334 V 11.33072 L 23.99809,11.33225 17.18899,4.82346 14.89854,7.2091 C 13.95241,6.8429 12.46426,6.54872 11.3333,6.54872 9.68791,6.54872 7.99157,7.11066 6.80699,7.84381 L 3.61331,4.81714 3.61388,4.81389 3.61025,4.81408 3.60814,4.81216 3.60756,4.81446 2.4655,4.93416 0,18.43457 1.14762,18.55408 1.14819,18.55006 6.35078,16.27455 C 6.3592,16.28183 6.36706,16.28968 6.37549,16.29734 7.61312,17.38923 9.47129,18.08466 11.54934,18.08466 12.99114,18.08466 14.32607,17.7491 15.42255,17.17932 L 17.51401,19.18784 23.99943,12.43371 V 11.33493 L 24,11.33416 Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "FIRST" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class First extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6N, create_fragment$6N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fitbit.svelte generated by Svelte v3.23.2 */

        function create_fragment$6O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.298 1.825c0 .976-.81 1.785-1.786 1.785-.972 0-1.784-.81-1.784-1.785 0-.973.813-1.785 1.784-1.785.976 0 1.786.813 1.786 1.785zm-1.786 3.243c-1.052 0-1.863.81-1.863 1.866 0 1.053.81 1.865 1.865 1.865 1.053 0 1.865-.811 1.865-1.865s-.825-1.866-1.875-1.866h.008zm0 5.029c-1.052 0-1.945.891-1.945 1.945s.894 1.945 1.947 1.945 1.946-.891 1.946-1.945-.894-1.945-1.946-1.945h-.002zm0 5.107c-1.052 0-1.863.81-1.863 1.864s.81 1.866 1.865 1.866c1.053 0 1.865-.811 1.865-1.866 0-.972-.825-1.864-1.875-1.864h.008zm0 5.191c-.972 0-1.784.809-1.784 1.784 0 .97.813 1.781 1.784 1.781.977 0 1.786-.809 1.786-1.784 0-.973-.81-1.781-1.786-1.781zM16.46 4.823c-1.136 0-2.108.977-2.108 2.111 0 1.134.973 2.107 2.108 2.107 1.135 0 2.106-.975 2.106-2.107 0-1.135-.972-2.109-2.106-2.109v-.002zm0 5.03c-1.216 0-2.19.973-2.19 2.19 0 1.216.975 2.187 2.19 2.187 1.215 0 2.189-.971 2.189-2.189 0-1.216-.974-2.188-2.189-2.188zm0 5.108c-1.136 0-2.108.976-2.108 2.107 0 1.135.973 2.109 2.108 2.109 1.135 0 2.106-.976 2.106-2.109s-.971-2.107-2.106-2.107zm5.106-5.353c-1.296 0-2.43 1.055-2.43 2.434 0 1.297 1.051 2.433 2.43 2.433 1.381 0 2.434-1.065 2.434-2.444-.082-1.382-1.135-2.431-2.434-2.431v.008zM6.486 5.312c-.892 0-1.62.73-1.62 1.623 0 .891.729 1.62 1.62 1.62.893 0 1.619-.729 1.619-1.62 0-.893-.727-1.62-1.619-1.62v-.003zm0 5.027c-.973 0-1.703.729-1.703 1.703 0 .975.721 1.703 1.695 1.703s1.695-.73 1.695-1.703c0-.975-.735-1.703-1.71-1.703h.023zm0 5.107c-.892 0-1.62.731-1.62 1.62 0 .895.729 1.623 1.62 1.623.893 0 1.619-.735 1.619-1.635s-.727-1.62-1.619-1.62v.012zm-5.025-4.863c-.813 0-1.461.646-1.461 1.459 0 .81.648 1.459 1.46 1.459.81 0 1.459-.648 1.459-1.459s-.648-1.459-1.458-1.459z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fitbit" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fitbit extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6O, create_fragment$6O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fite.svelte generated by Svelte v3.23.2 */

        function create_fragment$6P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.52 8.254c-.347 0-.667.08-1.014.213-.427.186-.666.454-.746.8L0 15.748h2.533l.801-3.015h3.28l.4-1.464H3.732l.375-1.362c.027-.133.133-.185.346-.185h3.014l.346-1.467H3.52zm4.826 0l-2 7.492H8.88l2-7.492H8.346zm2.8 0l-.373 1.467h1.84c.16 0 .24.053.24.16v.025l-1.574 5.84h2.534l1.574-5.84c.026-.133.132-.185.345-.185h1.842l.319-1.467h-6.747zm8.534 0c-.347 0-.667.08-1.014.213-.427.186-.666.453-.746.773l-1.467 5.492c0 .027-.027.081-.027.108v.107c0 .267.162.48.455.614.24.106.505.185.799.185H22l.4-1.467h-3.013c-.16 0-.24-.053-.24-.16v-.025l.373-1.387h3.28l.4-1.467h-3.28l.348-1.334c.053-.133.159-.185.345-.185h3.014L24 8.254h-4.32Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "FITE" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fite extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6P, create_fragment$6P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fiverr.svelte generated by Svelte v3.23.2 */

        function create_fragment$6Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.639,11.928h-0.954c0.06-0.258,0.216-0.492,0.534-0.492C13.465,11.436,13.639,11.664,13.639,11.928z M24.001,12 c0,6.627-5.373,12-12,12s-12-5.373-12-12s5.373-12,12-12S24.001,5.373,24.001,12z M6.217,9.78c0,0.298,0.242,0.54,0.54,0.54 c0.298,0,0.54-0.242,0.54-0.54s-0.242-0.54-0.54-0.54C6.459,9.24,6.217,9.482,6.217,9.78z M7.735,13.2h-0.42v-2.526H4.849v-0.162 c0-0.318,0.318-0.324,0.48-0.324c0.186,0,0.27,0.018,0.27,0.018V9.33c0,0-0.168-0.024-0.396-0.024c-0.516,0-1.47,0.144-1.47,1.236 v0.138h-0.45v0.81h0.45v1.71h-0.42v0.81h2.028V13.2H4.849v-1.71h1.35v1.71h-0.42v0.81h1.956V13.2z M11.149,11.484h0.372v-0.81 h-1.77v0.81h0.3l-0.384,1.2c-0.072,0.198-0.09,0.438-0.09,0.438H9.553c0,0-0.018-0.24-0.09-0.438l-0.384-1.2h0.3v-0.81h-1.77v0.81 h0.372l0.924,2.52h1.32L11.149,11.484z M14.797,12.204c0-0.924-0.558-1.608-1.548-1.608c-1.074,0-1.734,0.762-1.734,1.74 c0,0.888,0.642,1.746,1.83,1.746c0.9,0,1.434-0.468,1.434-0.468l-0.408-0.774c0,0-0.444,0.318-0.936,0.318 c-0.354,0-0.69-0.186-0.774-0.612h2.112C14.767,12.54,14.797,12.312,14.797,12.204L14.797,12.204z M17.773,10.632 c0,0-0.066-0.012-0.132-0.012c-0.51-0.006-0.93,0.366-1.068,0.822v0h-0.012c0,0,0.012-0.066,0.012-0.168V11.1 c0-0.306-0.168-0.426-0.474-0.426h-1.05v0.81h0.312c0.09,0,0.144,0.054,0.144,0.144V13.2h-0.45v0.81h2.022V13.2h-0.45v-0.486 c0-0.606,0.3-1.002,0.918-1.002c0.138,0,0.228,0.018,0.228,0.018V10.632z M20.731,11.73v-1.098c0,0-0.066-0.012-0.132-0.012 c-0.504-0.006-0.924,0.366-1.068,0.822v0h-0.012c0,0,0.012-0.066,0.012-0.168V11.1c0-0.306-0.168-0.426-0.474-0.426h-1.05v0.81 h0.312c0.09,0,0.144,0.054,0.144,0.144V13.2h-0.45v0.81h2.022V13.2h-0.45v-0.486c0-0.606,0.3-1.002,0.918-1.002 C20.641,11.712,20.731,11.73,20.731,11.73z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fiverr" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fiverr extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6Q, create_fragment$6Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Flask.svelte generated by Svelte v3.23.2 */

        function create_fragment$6R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.172 20.36c-.914-.72-1.89-1.41-2.556-2.38-1.402-1.712-2.482-3.694-3.22-5.777-.446-1.355-.6-2.808-1.174-4.11-.602-.944.103-1.978 1.138-2.28.46-.087 1.272-.522.293-.211-.878.644-.963-.585-.063-.662.615-.082.84-.585.63-1.037-.66-.43 1.6-.903.463-1.544C1.5 1.08 4.34.835 3.64 2.285 3.473 3.4 5.624 2.08 5.125 3.368c.507.619 1.9.14 1.865 1.009.74.05.993.672 1.687.72.72.325 2.022.58 2.266 1.39-.713.566-2.364-1.165-2.443.398.215 2.31.16 4.689 1.004 6.888.4 1.332 1.37 2.38 2.244 3.418.837 1.016 1.971 1.73 3.127 2.333 1.014.478 2.107.795 3.213.994.448-.343 1.24-1.617 1.938-1.08.033.604-1.388 1.263-.067 1.196.776-.234 1.314.6 1.953-.152.588.697 2.446-.446 2.027.98-.566.364-1.392.144-1.959.646-.935-.467-1.68.418-2.715.306a19.86 19.86 0 01-3.484.29c-1.912-.15-3.865-.214-5.684-.88-1.024-.297-2.023-.881-2.924-1.464zm1.615.7c1 .432 1.978.888 3.074 1.026 1.74.24 3.537.614 5.283.274-.79-.357-1.608.14-2.395-.255-.944.203-1.957-.052-2.917-.177-1.092-.486-2.27-.82-3.291-1.452-1.277-.466.66.598 1.005.685.798.453-.877-.233-1.114-.421-.668-.375-.754-.297-.066.084.139.08.276.166.42.235zm-1.904-1.346c.97.359-.004-.682-.45-.622-.196-.341-.751-.557-.36-.74-.704.244-.737-.93-1.07-.763-.744-.235-.29-1.07-1.176-1.58-.081-.54-.882-1.008-1.138-1.822-.113-.416-.905-1.613-.418-.5.414 1.072 1.143 1.99 1.75 2.907.47.873 1.027 1.786 1.885 2.33.29.278.568.703.977.79zM4.09 16.647c.033-.146.177.317 0 0zm3.954 3.497c.215-.096-.31-.12 0 0zm.526.192c-.054-.265-.24.148 0 0zm.66.275c.312-.3-.484-.188 0 0zm1.127.63c.191-.282-.61-.107 0 0zM8.19 19.728c.487-.315-.63-.004 0 0zm.494.246c-.014-.166-.176.075 0 0zm2.47 1.542c.397.25 2.32.55 1.115.103-.2.042-2.23-.574-1.116-.103zm-3.921-3.054c-.04-.167-.616-.185 0 0zm1.15.67c.3-.21-.621-.16 0 0zm.966.593c.43-.162-.696-.163 0 0zm-2.584-1.773c.466.358 1.88.046.714-.213-.53-.283-1.727-.476-.912.17zm3.24 1.978c.193-.33-.815-.19 0 0zm-.984-.783c1.14.323-.958-.72-.281-.118l.15.068.13.05zm1.973 1.14c1.08.01-.975-.147 0 0zm-4.644-2.96c-.042-.2-.266.018 0 0zm6.47 3.985c.028-.363-.353.27 0 0zm-4.63-2.856c-.064-.191-.336-.008 0 0zm-1.738-1.254c.62-.037-.848-.273 0 0zm-2.06-1.332c-.077-.297-.674-.534 0 0zm5.407 3.435c-.114-.13-.054.028 0 0zm3.366 2.065c-.01-.197-.183.075 0 0zm-3.664-2.373c.06-.255-.528-.077 0 0zm-2.506-1.592c.46-.05-.74-.311 0 0zm4.241 2.637c.718-.285-.7-.14 0 0zM9.03 18.545c.827.106-.985-.563-.181-.06zm2.876 1.768c.773-.462.518 1.082 1.311.13.782-.57-.675.707.29.103.696-.467 1.726.22 2.376.445.468-.023.923.405 1.403.145.923-.25-1.806-.37-1.09-.81-.845.245-1.47-.294-1.885-.835-.948-.22-2.044-.703-2.517-1.542-.192-.315.28.044-.166-.47-.57-.508-.856-1.085-1.24-1.702-.457-.244-.51-.963-.557-.024.004-.593-.553-.992-.688-.826-.002-.571.595-.285.176-.707-.09-.592-.386-1.21-.475-1.877-.138-.322-.02-1.011-.473-.282-.165.77-.055-.947.202-.38.337-.58-.12-.51-.14-.43.22-.488.14-1.18-.057-.916.117-.517.185-1.902-.175-1.656.218-.54.414-2.473-.534-1.736-.384.005-1.048.14-1.363.296.986.543-.1.196-.5.11-.052.502-.45.285-.946.29.793.098-.386.81-.841.534-.59.282.51.987.012 1.205.06.328-.905-.12-.83.64-.573-.241-.078.9.209.514.975.264.686.866.71 1.437-.158.333-.784-.783-.14-.731-.507-.827-.561-.3-.984.085-.1.028 1.079.547.34.803.65.1.668.67.8 1.03.39.407.31-.45.779.04-.296-.436-1.567-1.228-.544-.974-.005-.44-.185-.793.129-.784.31-.562-.325 1.387.375.672.193-.085.24-.563.59.045.505.498.182.858-.531.403.127.433.954.587.799 1.265.165.595.395.376.596.342.158.578.247.153.255-.123.72.155.552.58.778.88.497.224-.712-1.522.142-.526.898.81.337 1.15-.47 1.02.51-.041.675.69 1.313.664.582.277.975 1.34-.027.897-.348-.313-1.58-.7-.573-.104.929.43 1.665.688 2.561 1.227.64.458.918.982 1.16 1.086-.538.257-1.623-.206-.817-.348-.503-.091-1.068-.345-.587.28.41.343 1.45.306 1.637.345-.159.348-.43.376.006.403-.486.26.156.3.201.448zm-.994-2.808c-.296-.31-.373-.89-.053-.385.164.066.525.947.053.385zm3.238 2.057c.185-.011.006.14 0 0zm-3.706-2.816c-.01-.468.107.36 0 0zm-.322-.433c-.372-.72.47.204 0 0zm-3.9-2.692c.219-.06.108.374 0 0zm3.104 1.682c.134-.504.158.424 0 0zm-2.192-1.525c-.155-.278.323.26 0 0zm1.882.604c-.352-.79.25-.432.078.13zM5.77 12.217c-.158-.26-.418-1.02-.334-1.252.076.378.804 1.627.357.518-.494-.93.59.302.702.534.05.23-.305-.063-.064.478-.44-.617-.26.34-.661-.278zm-1.003-.691c.04-.603.23.413 0 0zm.45.155c.216-.455.366.634 0 0zm-1.084-.84c-.374-.37-.644-.713.017-.23.255.01-.566-.778.06-.25.66.12.327 1.082-.077.48zm.57-.015c.217-.215.115.212 0 0zm.35.113c-.328-.617.4.258 0 0zm-.697-.667c-1.086-.966 1.365.506.177.18zm3.11 1.808c-.47-.282-.123-1.984.037-.82.457-.148-.025.6.315.594-.053.473-.206.643-.35.226zm1.15.68c.048-.513.099.35 0 0zm-.2-.198c.054-.22.007.258 0 0zM4.57 9.955c-.697-.963 2.027.973.447.244-.165-.043-.364-.06-.447-.244zm2.216 1.175c-.066-.81.147.134 0 0zm1.682 1.079c.13-.462.01.305 0 0zM4.676 9.587c.415-.088 1.718.729.52.234-.132-.148-.416-.08-.52-.234zm3.56 1.775c.044-.83.248-.495.002.118zM4.985 9.299c.169-.248-.45-1.12.089-.313.232.185.672.31.283.387.61.539-.15.146-.372-.074zm3.075 1.804c.117-.944.103.553 0 0zM4.632 8.427c.129-.055.068.172 0 0zm.802.478c.206-.434.38.483 0 0zm2.263 1.259c-.002-.167.043.242 0 0zm-.131-.29c-.314-.776.292.41 0 0zm-.193-.51c-.053-.32.18.404 0 0zm.314-.51c-.216-.38.272-1.673.326-.87-.227.625-.065.975.093.136.293-.66-.063 1.303-.42.735zm.322-1.923c.094-.115.02.139 0 0zM7.47 17.544c-.128-.111.016.07 0 0zm1.11.56c.615.16.612-.095.055-.17-.3-.28-1.246-.575-.4-.035.057.142.235.139.344.206zM6.389 16.65c.34.253 1.28.719.484.096.269-.312-.514-.478-.254-.686-.66-.404-.52-.368-.058-.356-.794-.354.114-.328.07-.51-.305-.06-1.52-.54-.804.04-.726-.37-.173.138-.392.084-.743-.202.66.565-.118.375.425.337 1.146.864.18.357-.128.183.69.46.892.6zm1.16.667c1.41.454-.691-.556 0 0zm5.94 3.598c.02-.28-.193.24 0 0zm.611.257c.325-.315.013.503.54-.077.005-.415-.017-.66-.606-.156-.162.09-.234.473.066.233zm-9.692-6.087c-.1-.393-.7-.39 0 0zm.652.428c-.242-.402-.864-.364 0 0zm3.71 2.237c.362.32 1.662.236.44.04-.182-.27-1.151-.204-.44-.04zm5.097 3.149c.558-.468-.54.208 0 0zm1.16.796c.003-.15-.24.066 0 0zm.001-.21c.617-.654-.598.039 0 0zM2.805 13.743c-.526-.75-.327-1.088-.835-1.7-.096-.47-.87-1.533-.4-.406.43.659.558 1.679 1.235 2.106zm12.03 7.534c1.135-.734-.466-.32 0 0zm.866.34c.57-.488-.36-.102 0 0zM4.215 14.255c.163-.242-.42-.031 0 0zm11.305 7.129c.551-.355-.126-.3-.1.032zm-7.47-4.71c-.02-.24-.291.02 0 0zm.46.267c-.145-.297-.224.047 0 0zm7.894 4.684c.705-.51-.428-.098-.148.096zm-.27-.13c.574-.482-.607.213 0 0zm1.38.918c.386-.258-.469-.083 0 0zM4.57 14.08c.517.116 2.066 1.274 1.152.08-.468-.138-.187-1.283-.665-1.08.32.535.264.763-.41.426-.845-.413-.474.204-.31.374-.224.052.299.196.233.2zm-2.356-1.86c.092-.383-.853-2.107-.446-.864.146.26.13.754.446.864zm4.324 2.666c-.266-.223-.013-.032 0 0zm.656.152c0-.405-.725-.164 0 0zm5.681 3.583c-.108-.278-.428-.006 0 0zm.273.199c-.04-.155-.157.03 0 0zM15.4 20.24c.216-.16-.27-.02 0 0zM3.39 12.52c.62-.24-.664-.17 0 0zm8.984 5.662c-.007-.401-.395.1 0 0zm-9.23-6.231c.399-.135-.367-.09 0 0zm1.156.56c-.007-.133-.122.05 0 0zm14.09 8.64c.512-.104 1.678.26 1.866-.136-.62-.015-2.15-.438-2.222.1l.136.023.22.013zM4.667 12.603c.009-.407-.317-.015 0 0zM1.63 10.495c-.138-.775-.525-.118 0 0zm.724.182c.009-.25-.663-.224 0 0zm.414.203c-.12-.097-.094.122 0 0zm2.605 1.67c.122-.112-.29-.083 0 0zm-2.88-2.128c-.07-.585-.84-.088 0 0zm-1.486-.964c-.02-.27-.144.102 0 0zm.22-.167c-.035-.32-.19.04 0 0zm1.22.729c.518-.203-.94-.42-.104-.04zm16.334 10.089c.33-.303-.42-.094 0 0zm1.974 1.023c.132-.392-.334.05 0 0zM2.573 9.38c.055-.38-.41.075 0 0zM.837 8.218c-.093-.535-.08-1.474.812-1.156-1.191.236.824 1.48.57.498.5.024.98-.296.716.19.987-.11 1.67-.964 2.624-.845.742-.098 1.554-.172 2.354-.471.658-.048 1.29-.756.93-1.175-.896-.076-1.835.036-2.827.233-1.098.228-2.096.662-3.205.849-1.08.145.217.4-.092.456-.564.196.672.328-.073.534-.46-.088-.94-.246-.743-.73-1.035.133-1.945.563-1.127 1.616h.06zm2.494-1.27c.243-.894 1.3.735.398.118-.108-.08-.285-.146-.398-.12zm.047-.434c.35-.26.186.146 0 0zm.445.008c.032-.411 1.018.218.163.148zm.608-.245c.222-.26.064.23 0 0zm.156-.104c.37-.444 2.095-.283.832-.043-.338-.255-.598.15-.832.043zm2.25-.347c-.055-1.214 1.119.432 0 0zm.64-.004c.233-.612.906-.245.108-.123.017.065-.024.316-.108.123zM2.322 9.067c.697-.427-.741-.37 0 0zm.515.144c.245-.26-.531-.106 0 0zm-1.52-1.08c.399-.305-.471-.116 0 0zm20.602 12.89c.012-.355-.304.16 0 0zm-2.093-1.43c.06-.408-.27.037 0 0zm2.67 1.568c.557 0 1.688-.173.475-.173-.19.03-1.109.024-.476.173zM3.29 8.959c.45-.03.706-.497-.087-.47-1.23-.127 1.084.42-.158.264-.167.11.236.237.245.207zm.398.202c-.048-.29-.14.154 0 0zm.47-1.257c.197-.243-.27-.065 0 0zm-1.5-2.508c.806-.274 1.907-.581 2.287.135-.387-.466-.156-.924.21-.243.516.689.775-.313.438-.545.383.476.819.7.257.03.61-.734-1.223.097-1.64.088-.2.09-2.071.477-1.551.535zm.472-.903c.46-.347 1.588.206.864-.345-.07-.062-1.586.418-.864.345zm1.674.069c.538.013-.231-.722.409-.39-.105-.343-.746-.407-1.06-.544-.176.314.36.938.65.934zm-1.38-1.52c.186-.252-.326.128 0 0zm.684.164c.866-.115-.22-.373-.174-.01zm-1.277-1c-.61-.796 1.146.134.527-.7-.522-.415-1.023.468-.527.7zm7.824 4.215c.28-.496-1.155-.668-.188-.175.09.03.07.21.188.175z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Flask" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Flask extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6R, create_fragment$6R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Flathub.svelte generated by Svelte v3.23.2 */

        function create_fragment$6S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 2.604l-.43.283L0 10.459v6.752l6.393 4.184L12 17.725l5.607 3.671L24 17.211v-6.752L12 2.604zm0 .828l5.434 3.556-2.717 1.778L12 10.545l-2.717-1.78-2.717-1.777L12 3.432zM6.39 7.104l5.434 3.556-5.408 3.54-5.434-3.557 5.409-3.54zm11.22 0l5.431 3.554-5.434 3.557-5.433-3.555 5.435-3.556zM.925 10.867l5.379 3.52a.123.08 0 00.027.013v5.647l-5.406-3.54v-5.64zm11.213.115l5.408 3.54v5.664l-5.408-3.54v-5.664z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Flathub" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Flathub extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6S, create_fragment$6S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Flattr.svelte generated by Svelte v3.23.2 */

        function create_fragment$6T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.906 12C1.906 6.432 6.432 1.906 12 1.906c.048 0 4.003 0 5.455.002L14.53 4.834l1.344 1.344L21.903 0H12C5.373 0 0 5.373 0 12v9.331l1.91-1.759v-.096c-.002-.244-.004-7.404-.004-7.476zM24 2.668l-1.91 1.76v.096L22.093 12c0 5.568-4.528 10.094-10.093 10.094-.048 0-4.003 0-5.455-.002l2.925-2.926-1.344-1.344L2.097 24H12c6.627 0 12-5.373 12-12V2.668z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Flattr" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Flattr extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6T, create_fragment$6T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Flickr.svelte generated by Svelte v3.23.2 */

        function create_fragment$6U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 12c0 3.074 2.494 5.564 5.565 5.564 3.075 0 5.569-2.49 5.569-5.564S8.641 6.436 5.565 6.436C2.495 6.436 0 8.926 0 12zm12.866 0c0 3.074 2.493 5.564 5.567 5.564C21.496 17.564 24 15.074 24 12s-2.492-5.564-5.564-5.564c-3.075 0-5.57 2.49-5.57 5.564z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Flickr" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Flickr extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6U, create_fragment$6U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Flipboard.svelte generated by Svelte v3.23.2 */

        function create_fragment$6V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v24h24V0H0zm19.2 9.6h-4.8v4.8H9.6v4.8H4.8V4.8h14.4v4.8z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Flipboard" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Flipboard extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6V, create_fragment$6V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Floatplane.svelte generated by Svelte v3.23.2 */

        function create_fragment$6W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.948,20.162c-1.81,1.527-4.078,2.366-6.466,2.366c-2.682,0-5.19-1.047-7.088-2.933c-1.897-1.897-2.933-4.416-2.933-7.088 c0-2.399,0.84-4.667,2.366-6.466L2.911,4.874C1.101,6.902,0,9.585,0,12.518C0,18.864,5.136,24,11.482,24 c2.933,0,5.616-1.101,7.644-2.911L17.948,20.162z M8.331,2.988c1.003-0.327,2.061-0.502,3.151-0.502c2.682,0,5.19,1.047,7.088,2.933 c1.897,1.897,2.933,4.416,2.933,7.088c0,1.09-0.174,2.148-0.502,3.151l1.134,1.134c0.534-1.319,0.829-2.77,0.829-4.285 c0-6.346-5.136-11.482-11.482-11.482c-1.516,0-2.966,0.294-4.285,0.829L8.331,2.988z M9.683,6.444L3.446,0l-0.97,1.516 C2.388,1.657,2.399,1.843,2.508,1.974L7.916,8.92L9.683,6.444z M7.655,14.96l-2.508-1.886l-0.458,0.774 c-0.055,0.087-0.044,0.196,0.033,0.273l2.115,2.29L7.655,14.96z M12.158,9.007l-0.578-0.6l0.153-0.611 c0.065-0.273,0.087-0.491,0.065-0.622c-0.087-0.393-0.273-0.687-0.273-0.687l-5.474,5.866c0,0,0.371,0.36,0.905-0.055 c0.24-0.185,1.189-0.96,2.203-1.799l0.927,1.189L12.158,9.007z M17.501,14.263l0.153-0.611c0.055-0.207,0.087-0.382,0.065-0.502 c-0.065-0.393-0.218-0.687-0.218-0.687l-5.866,5.474c0,0,0.36,0.371,0.916,0c0.273-0.185,1.428-0.992,2.584-1.821l6.891,5.365 c0.131,0.109,0.316,0.12,0.458,0.033L24,20.543L17.501,14.263z M9.061,16.389c0.883-0.676,2.115-1.625,3.217-2.475l1.243,0.97 l2.039-2.475l-0.676-0.654l0.218-0.774c0.109-0.393,0.153-0.698,0.12-0.883c-0.109-0.567-0.36-0.981-0.36-0.981l-8.069,8.069 c0,0,0.251,0.207,0.774,0l2.279,2.104c0.076,0.065,0.185,0.076,0.273,0.033l0.774-0.458L9.061,16.389z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Floatplane" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Floatplane extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6W, create_fragment$6W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Flood.svelte generated by Svelte v3.23.2 */

        function create_fragment$6X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.683 16.283c-1.233-.066-1.85-1.533-2.15-2.433-.266-.767-.666-2.117-.966-2.933-.35-.95-.45-1.017-.65-1.017-.417 0-.734 1.183-1.05 2.067-.667 1.833-1.167 3.85-2.934 3.85-1.533 0-2.216-1.184-2.7-1.884-.45-.666-.716-.816-1.133-.816-.533 0-.783.466-1.267 1.283-.283.467-.6.95-.966 1.267-.1.083-.934.733-1.717.633-.45-.067-.767-.333-.767-.783 0-.617.684-.734 1.067-.884.333-.116.733-.716.933-1.05.534-.916 1.217-2.116 2.75-2.116 1.35 0 2 .866 2.5 1.55.45.616.717 1.116 1.234 1.133.433.017 1.033-1.617 1.383-2.75.533-1.733 1.233-3.333 2.633-3.333 1.884 0 2.434 2.633 3.017 4.65.083.3.283.933.333 1.016.267.567.484.934.717 1.05.267.15.7.434.567.934-.084.383-.434.583-.834.566zm-15.366-1.6c.016 0 .016 0 0 0 .016 0 .016 0 0 0zM12 0C5.367 0 0 5.367 0 12s5.367 12 12 12 12-5.367 12-12S18.633 0 12 0zm0 22.017A10.015 10.015 0 011.983 12 10.015 10.015 0 0112 1.983 10.015 10.015 0 0122.017 12 10.015 10.015 0 0112 22.017Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Flood" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Flood extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6X, create_fragment$6X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fluentd.svelte generated by Svelte v3.23.2 */

        function create_fragment$6Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.83 2.195C1.279 2.191.8 2.377.425 2.82-.429 3.823.03 6.135 1.787 8.917l.02.028a10.177 10.177 0 0 0 .197.297c1.733 2.579 4.249 4.677 3.743 7.586a4.28 4.28 0 0 1-.599 1.564C3.615 20.797.003 21.047.003 21.047l.042.001-.045.005s4.355 1.344 8.533.438c.598-.13 1.192-.305 1.769-.537a12.331 12.331 0 0 0 .023-.01c.343-.138.667-.284.975-.437a12.331 12.331 0 0 0 .282-.145c.285-.15.556-.306.814-.467a12.331 12.331 0 0 0 .152-.095c.316-.204.61-.416.888-.635a12.331 12.331 0 0 0 .146-.116c.164-.134.323-.27.476-.407a12.331 12.331 0 0 0 .123-.105l.036-.04c.008-.008.015-.016.024-.023a12.842 12.842 0 0 0 .86-.888c.05-.056.1-.112.148-.169.059-.068.118-.135.175-.203l.1-.123c.127-.154.25-.31.372-.465l.032-.042c.679-.88 1.28-1.779 1.933-2.639l.216-.278c.294-.374.6-.74.932-1.091l.03-.031c.108-.114.22-.226.334-.337l.07-.067a10.997 10.997 0 0 1 .264-.243c.036-.032.072-.065.109-.096a5.003 5.003 0 0 1 .374-.293c.012-.01.025-.018.038-.027a5.003 5.003 0 0 1 .85-.48l-.065.03.022-.01.06-.027a5.623 5.623 0 0 1 1.63-.412h.001a5.623 5.623 0 0 1 .533-.026h.07a5.623 5.623 0 0 1 .115.002l.428-.003a.204.204 0 0 0 .088-.016c.062-.03.047-.102-.012-.186a1.38 1.38 0 0 0-.39-.343 3.688 3.688 0 0 1-.098-.052 3.871 3.871 0 0 1-.036-.022 3.688 3.688 0 0 1-.256-.161 3.871 3.871 0 0 1-.129-.096 3.688 3.688 0 0 1-.193-.15c-.205-.2-.432-.733-.523-.888a2.05 2.05 0 0 0-.24-.33c-.272-.306-.665-.533-1.302-.615-.891-.115-1.727.072-2.565.333l.1-.035c-1.168.354-2.334.87-3.655.94h-.04a5.553 5.553 0 0 1-.668-.01l-.06-.004a5.473 5.473 0 0 1-1.16-.233c-1.312-.412-3.154-1.88-5.047-3.316a113.017 113.017 0 0 0-.651-.49 51.56 51.56 0 0 0-.789-.58l-.222-.155-.236-.166-.086-.06a17.622 17.622 0 0 0-1.612-.997l-.019-.01a10.036 10.036 0 0 0-.367-.186c-.039-.019-.078-.035-.117-.053a7.732 7.732 0 0 0-.548-.23l-.05-.017a5.023 5.023 0 0 0-.316-.101l-.026-.007a3.055 3.055 0 0 0-.816-.125zM20.6 8.641a.504.5 0 0 1 .505.5.504.5 0 0 1-.505.5.504.5 0 0 1-.504-.5.504.5 0 0 1 .504-.5z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fluentd" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fluentd extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6Y, create_fragment$6Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Flutter.svelte generated by Svelte v3.23.2 */

        function create_fragment$6Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.314 0L2.3 12 6 15.7 21.684.013h-7.357zm.014 11.072L7.857 17.53l6.47 6.47H21.7l-6.46-6.468 6.46-6.46h-7.37z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Flutter" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Flutter extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6Z, create_fragment$6Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fnac.svelte generated by Svelte v3.23.2 */

        function create_fragment$6_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.282 15.742h1.427v-4.177h2.508v4.173h1.428v-2.926c.072-.495.384-1.191 1.502-1.282 0 0 1.628-.292 1.83 1.282v2.93h1.427v-3.535c-.329-2.507-3.589-1.74-3.589-1.74-.768.221-1.061.551-1.189.732v-.713H2.689c-.109-1.373 1.19-1.353 1.19-1.353 1.283-.038 1.338.859 1.338.859h1.428c0-1.611-2.051-1.813-2.051-1.813-2.014-.165-2.709.568-2.709.568-.641.587-.623 1.521-.604 1.74H0v1.063h1.281v4.191l.001.001zm14.625-1.412c-.365.477-.786.623-1.299.641-.44.018-1.392.111-1.411-.676-.018-.752 1.154-.715 1.924-.771 0 0 .785 0 .933-.236 0 0 .019-.018.019 0 .017.017.146.62-.166 1.042zm-.018-3.826c-1.574-.292-2.49 0-2.506 0-1.539.385-1.558 1.723-1.558 1.723h1.465s.019-1.045 1.573-.916c0 0 1.136.054 1.19.604 0 0 .366.658-1.19.75-1.573.092-3.441.074-3.239 1.666 0 0-.038 1.52 2.526 1.484 0 0 1.373.035 1.939-.715v.018l.057.586h1.427l-.036-3.148c.109-1.776-1.648-2.052-1.648-2.052zm6.646 3.535c-.221.492-.661.768-1.448.768 0 0-1.775.129-1.829-1.631v-.053c.054-1.739 1.829-1.63 1.829-1.63.809 0 1.228.275 1.448.771h1.445c-.015-.217-.07-.429-.165-.624-.348-.604-1.171-1.299-3.093-1.172-.532.037-.934.092-1.282.239-.641.257-1.685.97-1.666 2.362v.164c-.019 1.391 1.026 2.105 1.666 2.361.347.146.771.201 1.282.238 1.28.072 2.069-.201 2.562-.568.696-.549.716-1.227.716-1.227h-1.465v.002z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fnac" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fnac extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6_, create_fragment$6_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fontawesome.svelte generated by Svelte v3.23.2 */

        function create_fragment$6$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.571 0A2.572 2.572 0 000 2.571V21.43A2.572 2.572 0 002.571 24H21.43A2.572 2.572 0 0024 21.429V2.57A2.572 2.572 0 0021.429 0zm4.324 4c.993 0 1.793.8 1.793 1.791A1.7 1.7 0 017.984 7.2v.993c.128-.043 1.836-.897 3.584-.897 2.04 0 3.053.865 3.968.865 1.217 0 2.56-.865 2.88-.865.257 0 .48.192.48.416v7.521c0 .224-.191.32-.415.416-.896.384-1.857.736-2.88.736-1.44 0-2.113-.896-3.841-.896-1.248 0-2.56.448-3.616.929-.064.032-.129.032-.193.064v2.432c0 .669-.503 1.088-1.056 1.088a1.08 1.08 0 01-1.088-1.088V7.199a1.789 1.789 0 01-.704-1.408C5.103 4.8 5.903 4 6.895 4Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$6$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Font Awesome" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fontawesome extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$6$, create_fragment$6$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ford.svelte generated by Svelte v3.23.2 */

        function create_fragment$70(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.996 7.825C5.376 7.825 0 9.696 0 12c0 2.313 5.375 4.175 12.004 4.175C18.634 16.175 24 14.313 24 12c0-2.304-5.367-4.175-12.004-4.175zm.008.362c6.391 0 11.581 1.712 11.581 3.813 0 2.11-5.19 3.813-11.58 3.813C5.604 15.813.423 14.11.423 12c0-2.1 5.181-3.813 11.58-3.813zm-3.14.684c-.17 0-.342.008-.514.022-1.139.097-2.233.741-2.233 1.721 0 .495.353.9.9.883.645-.018 1.174-.539 1.448-1.183.097-.238-.097-.344-.185-.203-.16.256-.398.45-.645.574-.3.141-.626.106-.724-.141-.132-.353.15-.865.804-1.113.944-.344 1.924-.114 2.877.062.009 0 .062.027.018.053-.168.088-.336.168-.6.389-.186.167-.433.38-.618.609-.186.23-.318.432-.495.662-.026.035-.052.035-.052.035-.433.07-.848.124-1.236.388-.08.053-.106.16-.062.23s.141.08.212.026c.238-.185.485-.265.768-.273.008 0 .017 0 .017.008.01 0 .01.01 0 .018-.423.592-.53.724-.847 1.086a9.206 9.206 0 0 1-.503.512c-.724.67-1.5.662-1.783.238-.168-.256-.141-.52-.035-.741.14-.274.405-.468.635-.583.088-.044.115-.15.027-.247-.053-.07-.186-.08-.283-.062a1.515 1.515 0 0 0-1.165 1.624c.07.742.68 1.174 1.377 1.165.547-.008 1.068-.176 1.686-.803.582-.6 1.12-1.483 1.615-2.304.018-.026.027-.044.106-.053.31-.035.777-.079 1.068-.097.062-.008.08-.009.106.027.07.097.194.176.283.23.053.026.07.035.105.035.045 0 .08-.018.097-.045.036-.035.045-.079.027-.105-.018-.036-.22-.15-.23-.195-.008-.026.027-.035.027-.035a.656.656 0 0 0 .406-.327c.097-.185.106-.423-.062-.556-.15-.123-.37-.097-.556.062a.677.677 0 0 0-.212.592c.01.035 0 .053-.044.053-.273.017-.538.026-.83.044-.026 0-.026-.01-.017-.027.335-.582.838-.997 1.394-1.412.036-.027.027-.08.027-.124 1.006.22 1.977.627 3.019.618.423 0 .838-.062 1.235-.282.345-.194.486-.362.495-.547.008-.124-.08-.203-.203-.177-1.05.247-2.057.238-3.107.115-1.198-.147-2.347-.45-3.539-.446zm6.83.384c0 .009.009.009.009.017 0-.008-.009-.017-.009-.017zm-4.72 1.308c.025 0 .048.008.068.025.053.044.027.167-.026.247a.416.416 0 0 1-.256.185c-.018.01-.035 0-.044-.044a.419.419 0 0 1 .132-.362.194.194 0 0 1 .126-.051zm7.818.016c-.044 0-.07.009-.097.053-.07.141-.97 1.483-1.139 1.748-.026.044-.061.035-.07-.01-.018-.158-.15-.335-.362-.414a.913.913 0 0 0-.486-.053c-.29.035-.556.194-.785.37-.353.265-.653.61-1.042.866-.211.14-.503.256-.697.08-.177-.16-.159-.522.115-.804.026-.027.062-.009.053.018a.36.36 0 0 0 .106.344c.114.106.282.115.432.044a.571.571 0 0 0 .3-.433.49.49 0 0 0-.45-.556c-.22-.017-.441.062-.644.239a1.14 1.14 0 0 0-.256.282c-.018.035-.053.035-.053-.009.009-.362-.141-.573-.442-.582-.238-.01-.485.123-.68.273a5.704 5.704 0 0 0-.6.618c-.026.027-.043.027-.052-.026a1.343 1.343 0 0 0-.177-.645c-.044-.061-.124-.088-.194-.044-.035.018-.141.07-.23.133-.044.035-.053.08-.035.14.106.363.088.778-.062 1.122-.132.318-.397.609-.706.706-.203.062-.415.035-.547-.15-.177-.247-.106-.68.159-1.042.238-.317.574-.52.918-.644.044-.018.044-.044.035-.08a1.737 1.737 0 0 0-.062-.167c-.035-.08-.114-.097-.23-.088a1.923 1.923 0 0 0-.688.23c-.573.308-.865.908-.997 1.226-.062.15-.115.247-.177.335-.088.115-.203.221-.414.406-.018.018-.036.053-.018.089a.995.995 0 0 0 .159.212c.035.017.07-.01.088-.018a2.07 2.07 0 0 0 .406-.362c.027-.035.062-.018.08.035a.91.91 0 0 0 .573.618c.53.177 1.077-.08 1.492-.53.265-.282.362-.467.459-.59.168-.213.512-.69.91-.99.15-.114.317-.194.405-.14.07.044.097.15-.018.352-.406.75-1.015 1.625-1.12 1.845-.018.036 0 .062.035.062h.618c.035 0 .044-.018.061-.035.318-.495.61-.962.927-1.448.018-.026.036-.009.036.009a.925.925 0 0 0 .097.37.551.551 0 0 0 .476.265.9.9 0 0 0 .389-.079c.132-.053.238-.115.317-.168.045-.035.053.027.053.027-.07.388.018.856.406 1.041.468.23.98-.097 1.271-.38.027-.026.062-.026.062.036a.509.509 0 0 0 .15.335c.247.248.742.15 1.245-.238.318-.247.653-.6.953-.962.009-.018.018-.035 0-.062-.044-.044-.115-.106-.159-.15-.017-.017-.053-.009-.07 0-.31.291-.592.636-.989.91-.132.097-.353.167-.45.044-.035-.053-.035-.124 0-.212.132-.31 1.995-3.151 2.092-3.32.017-.026 0-.052-.035-.052zm-1.962 1.78c.048 0 .094.01.135.03.23.105.159.37.053.582-.009.018-.009.026-.009.044s.036.044.062.053c.009 0 .018.009 0 .035-.08.168-.15.265-.247.415a1.674 1.674 0 0 1-.318.344c-.185.16-.45.327-.662.212-.097-.053-.141-.185-.132-.291.008-.309.14-.618.388-.927.251-.308.52-.494.73-.496z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$70($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ford" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ford extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$70, create_fragment$70, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Formstack.svelte generated by Svelte v3.23.2 */

        function create_fragment$71(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19,4.035h1.4c0.331,0,0.6,0.269,0.6,0.6v14.73c0,0.331-0.269,0.6-0.6,0.6H19V4.035z M22,6.026h1.4 c0.331,0,0.6,0.269,0.6,0.6v10.747c0,0.331-0.269,0.6-0.6,0.6H22V6.026z M0.6,2.044h16.8c0.331,0,0.6,0.269,0.6,0.6v18.712 c0,0.331-0.269,0.6-0.6,0.6H0.6c-0.331,0-0.6-0.269-0.6-0.6V2.644C0,2.313,0.269,2.044,0.6,2.044z M4.2,5.23 c-0.11,0-0.2,0.09-0.2,0.2v7.35c0,0.045,0.015,0.089,0.044,0.125c0.069,0.086,0.195,0.101,0.281,0.032l9.228-7.35 c0.048-0.038,0.075-0.096,0.075-0.156c0-0.11-0.09-0.2-0.2-0.2L4.2,5.23z M4,17.185c0,0.04,0.012,0.08,0.035,0.113 c0.062,0.091,0.187,0.114,0.278,0.052l7.576-5.184c0.054-0.037,0.087-0.099,0.087-0.165c0-0.11-0.09-0.2-0.2-0.2H6.89 c-0.045,0-0.088,0.015-0.123,0.042l-2.69,2.102C4.028,13.983,4,14.041,4,14.103L4,17.185z M4.086,18.342 C4.032,18.379,4,18.441,4,18.506v0.087c0,0.106,0.086,0.192,0.192,0.192H7c0.11,0,0.2-0.09,0.2-0.2v-2.022 c0-0.041-0.012-0.081-0.036-0.114c-0.063-0.091-0.188-0.113-0.278-0.05L4.086,18.342z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$71($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Formstack" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Formstack extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$71, create_fragment$71, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fortinet.svelte generated by Svelte v3.23.2 */

        function create_fragment$72(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 9.785h6.788v4.454H0zm8.666-6.33h6.668v4.453H8.666zm0 12.637h6.668v4.454H8.666zm8.522-6.307H24v4.454h-6.812zM2.792 3.455C1.372 3.814.265 5.404 0 7.425v.506h6.788V3.454zM0 16.091v.554c.24 1.926 1.276 3.466 2.624 3.9h4.188v-4.454zm24-8.184v-.506c-.265-1.998-1.372-3.587-2.792-3.972h-4.02v4.454H24zM21.376 20.57c1.324-.458 2.36-1.974 2.624-3.9v-.554h-6.812v4.454Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$72($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fortinet" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fortinet extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$72, create_fragment$72, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fossa.svelte generated by Svelte v3.23.2 */

        function create_fragment$73(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.744,12.816c0,0-0.033-0.092,0.059-0.164c0.118-0.085,0.269-0.17,0.354-0.072 l0.007,0.007l0,0l0.007,0.007l0,0l0,0c0.066,0.072,0.144,0.098,0.223,0.098c0.17,0,0.347-0.118,0.426-0.17 c0.19-0.131,0.321-0.242,0.347-0.583v-0.013c0-0.007,0-0.105,0.085-0.124c0.033-0.007,0.066,0.013,0.092,0.033 c0.066,0.059,0.144,0.203,0.131,0.413c-0.026,0.308-0.177,0.583-0.446,0.819c-0.02,0.02-0.039,0.033-0.059,0.052 c-0.164,0.131-0.321,0.249-0.465,0.347c-0.203,0.111-0.387-0.059-0.478-0.17c-0.039-0.052-0.072-0.098-0.124-0.177l-0.013-0.026 C3.836,12.999,3.784,12.907,3.744,12.816L3.744,12.816L3.744,12.816L3.744,12.816z M3.089,14.801 c0.02,0.013,0.039,0.026,0.059,0.039c0.026,0.02,0.052,0.033,0.085,0.046c0.072,0.033,0.144,0.02,0.269-0.013 c0.033-0.007,0.066-0.013,0.098-0.02c-0.157-0.144-0.275-0.314-0.36-0.505C3.233,14.5,3.194,14.657,3.089,14.801L3.089,14.801 L3.089,14.801z M4.95,3.197C4.95,3.191,4.943,3.191,4.95,3.197C4.871,3.099,4.806,3.001,4.753,2.903 c0.02,0.177,0.052,0.354,0.085,0.511c0.013,0.059,0.02,0.111,0.033,0.164c0.059-0.066,0.118-0.124,0.17-0.183 C5.009,3.263,4.95,3.197,4.95,3.197L4.95,3.197L4.95,3.197z M2.113,13.327c0.007-0.013,0.007-0.033,0.007-0.059v-0.02 c-0.007-0.072,0-0.144,0.007-0.229c0.007-0.105,0.026-0.203,0.052-0.308l0,0c0-0.007,0-0.013,0.007-0.02 c0.007-0.02,0.013-0.066,0.007-0.079l0,0c-0.079-0.059-0.17-0.111-0.236-0.144c0.013,0.151,0.007,0.314,0,0.406v0.026v0.013v0.007 c-0.007,0.098-0.013,0.21,0.138,0.373C2.093,13.307,2.106,13.314,2.113,13.327L2.113,13.327L2.113,13.327z M16.691,6.532 c0.079,0,0.157-0.007,0.236-0.02c0.124-0.039,0.21-0.059,0.223-0.066c0.688-0.203,1.258-0.642,1.52-1.173 c0.183-0.478,0.164-0.845,0.144-1.107c-0.007-0.059-0.007-0.118-0.007-0.177c-0.007-0.459,0.563-1.258,0.681-1.422 c0.413-0.681,0.55-1.265,0.413-1.684c-0.124-0.373-0.432-0.498-0.439-0.505l0,0h-0.007c-0.118-0.052-0.236-0.098-0.36-0.131 C18.899,0.197,18.69,0.17,18.473,0.17c-0.858,0-1.795,0.439-2.496,1.179c0,0.007-0.007,0.013-0.013,0.02 c-0.256,0.334-0.662,1.016-0.485,1.821c0.124,0.55,0.426,0.983,0.924,1.33c0.066,0.046,0.098,0.118,0.085,0.197 s-0.059,0.138-0.131,0.164c-0.007,0-0.629,0.236-0.76,0.636c-0.052,0.157-0.02,0.328,0.105,0.518 C15.722,6.041,16.082,6.532,16.691,6.532L16.691,6.532L16.691,6.532L16.691,6.532z M3.03,11.283c0.092,0,0.216-0.052,0.419-0.177 c0.282-0.17,0.563-0.282,0.845-0.328h0.013c0.092-0.02,0.157-0.098,0.157-0.197v-0.007v-0.013 c-0.007-0.072-0.052-0.138-0.124-0.164c-0.007,0-0.013-0.007-0.02-0.007c-0.072-0.026-0.151-0.039-0.236-0.039H4.079 c-0.111,0-0.177,0.02-0.249,0.046c-0.059,0.02-0.111,0.033-0.177,0.033H3.613c-0.059-0.007-0.118-0.026-0.157-0.046 c-0.046-0.02-0.085-0.033-0.131-0.033c-0.02,0-0.033,0-0.052,0.007c-0.124,0.026-0.256,0.138-0.301,0.183 c0,0-0.007,0.007-0.013,0.007H2.952c-0.079,0.066-0.164,0.138-0.249,0.203l-0.039,0.039c0,0-0.007,0.007-0.007,0.013l-0.013,0.02 c-0.013,0.026-0.02,0.059-0.02,0.085c0,0.052,0.02,0.105,0.059,0.144c0.007,0.007,0.013,0.013,0.02,0.02l0,0 c0.007,0.007,0.013,0.013,0.02,0.02C2.867,11.224,2.932,11.283,3.03,11.283L3.03,11.283L3.03,11.283L3.03,11.283z M12.675,23.174 c0.007,0,0.013-0.007,0.02-0.007c0.983-0.393,1.946-0.891,2.863-1.487l0.039-0.026c0.052-0.039,0.092-0.098,0.092-0.164l0,0v-0.007 v-0.013c0-0.013,0-0.02-0.007-0.033c0-0.007-0.007-0.013-0.007-0.02l-0.007-0.013c-0.21-0.583-0.505-1.854-0.131-3.774 c0.098-0.491,0.151-0.963,0.157-1.402v-0.007v-0.02v-0.007v-0.013C15.682,16.079,15.597,16,15.499,16 c-0.066,0-0.124,0.033-0.157,0.079l-0.007,0.013v0.007l-0.013,0.013c-0.105,0.197-0.236,0.4-0.387,0.616 c-1.566,2.247-2.745,4.134-2.523,6.283c0.013,0.105,0.098,0.177,0.197,0.177C12.629,23.188,12.655,23.181,12.675,23.174 L12.675,23.174L12.675,23.174z M9.753,23.987l0.033-0.007c0.367-0.052,1.114-0.19,2.07-0.505l0,0l0.013-0.007h0.007 c0.007,0,0.013-0.007,0.02-0.007l0,0c0.072-0.033,0.118-0.105,0.118-0.183l0,0v-0.013l-0.007-0.026 c-0.321-2.359,0.924-4.364,2.575-6.735c1.055-1.514,0.773-2.247,0.465-2.667c-0.301-0.36-0.688-0.537-1.16-0.537 c-0.216,0-0.452,0.039-0.701,0.118c-0.216,0.072-0.439,0.138-0.668,0.197c-0.229,0.052-0.472,0.098-0.721,0.138 c-0.164,0.026-0.328,0.046-0.485,0.066c-0.812,0.105-1.586,0.203-2.49,0.675l-0.013,0.013H8.796 c-0.072,0.033-0.138,0.072-0.21,0.105l0,0H8.58c-0.007,0.007-0.02,0.007-0.026,0.013H8.547c-0.02,0.013-0.033,0.026-0.046,0.046 c0,0-0.007,0.007-0.007,0.013v0.007l-0.013,0.013c-0.013,0.026-0.02,0.059-0.02,0.085c0,0.059,0.026,0.118,0.072,0.157H8.58v0.033 c0.609,0.38,1.048,1.317,1.114,2.385c0.085,1.369-0.039,2.634-0.151,3.741v0.013c-0.118,1.153-0.21,2.057-0.033,2.706v0.007v0.007 c0,0.013,0.007,0.033,0.013,0.046C9.556,23.954,9.628,24,9.707,24C9.74,23.987,9.746,23.987,9.753,23.987L9.753,23.987 L9.753,23.987z M4.223,4.226c0.007-0.007,0.007-0.007,0.013-0.013l0,0V4.206C4.328,4.095,4.413,3.99,4.498,3.898 c0.007-0.007,0.007-0.007,0.013-0.013c0.026-0.033,0.046-0.079,0.046-0.124V3.754V3.741v-0.02C4.544,3.643,4.531,3.558,4.511,3.486 c-0.085-0.426-0.183-0.95,0-1.382c0-0.229,0.039-0.465,0.066-0.675V1.415c0.02-0.124,0.039-0.249,0.052-0.373 c0.039-0.393-0.033-0.721-0.197-0.898C4.341,0.046,4.229,0,4.092,0h-0.02C4.007,0,3.915,0,3.817,0.092 C3.751,0.17,3.699,0.321,3.659,0.511C3.607,0.786,3.607,1.094,3.62,1.271c0.066,0.662,0.052,0.747,0,0.891 C3.594,2.228,3.561,2.319,3.548,2.693C3.535,2.975,3.653,3.368,3.771,3.741v0.007C3.81,3.872,3.849,4.003,3.882,4.134l0,0 c0,0.007,0.007,0.02,0.007,0.026v0.007c0.033,0.079,0.105,0.131,0.19,0.131C4.131,4.292,4.183,4.265,4.223,4.226L4.223,4.226 L4.223,4.226z M4.465,6.565c0-0.007,0.007-0.02,0.007-0.026l0,0V6.532C4.505,6.296,4.531,5.982,4.55,5.51 c0.007-0.138,0.026-0.288,0.052-0.439l0,0l0.02-0.085c0-0.013,0.007-0.026,0.007-0.039V4.94V4.927 C4.616,4.822,4.531,4.744,4.432,4.744c-0.059,0-0.118,0.026-0.151,0.072c0,0-0.007,0.007-0.007,0.013v0.007 C4.203,4.927,4.157,4.986,4.144,4.999L4.138,5.006C4.072,5.078,4.013,5.17,3.961,5.274c-0.124,0.242-0.183,0.485-0.19,0.505v0.007 C3.744,5.89,3.718,6.002,3.692,6.12c0,0.072,0.02,0.138,0.059,0.203C3.823,6.454,3.961,6.572,4.17,6.69l0.007,0.007 c0.007,0.007,0.013,0.007,0.02,0.013c0.026,0.013,0.052,0.02,0.085,0.02C4.36,6.716,4.446,6.657,4.465,6.565L4.465,6.565 L4.465,6.565z M5.428,2.922L5.428,2.922l0.013-0.013C5.625,2.752,5.828,2.614,6.057,2.49h0.007 c0.066-0.033,0.098-0.105,0.098-0.177V2.306V2.293c-0.007-0.039-0.02-0.079-0.046-0.111C5.9,1.926,5.73,1.579,5.586,1.271 L5.572,1.245C5.527,1.153,5.481,1.061,5.441,0.976l0,0l0,0l-0.02-0.039C5.389,0.871,5.317,0.826,5.245,0.826 c-0.066,0-0.124,0.033-0.157,0.079c0,0-0.007,0.007-0.007,0.013v0.007L5.068,0.937c-0.013,0.026-0.02,0.046-0.02,0.072L5.042,1.075 C5.029,1.212,5.009,1.343,4.989,1.468C4.957,1.697,4.924,1.913,4.924,2.123C4.93,2.405,4.996,2.634,5.14,2.85v0.007 c0,0.007,0.007,0.007,0.013,0.013c0.039,0.052,0.098,0.079,0.164,0.079C5.35,2.968,5.396,2.948,5.428,2.922L5.428,2.922 L5.428,2.922z M5.487,10.49L5.487,10.49c0.249-0.675,0.727-1.343,1.114-1.887C6.758,8.38,6.916,8.17,7.02,7.993 c0.839-1.363,1.297-2.64,1.304-2.654c0-0.007,0.007-0.013,0.007-0.02c0.387-0.865,0.865-1.468,1.461-1.848 c0.524-0.334,1.133-0.511,1.972-0.57h0.013c0.301-0.02,0.544-0.098,0.721-0.242V2.654h0.007l0.013-0.013h0.007 c0.013-0.013,0.033-0.026,0.039-0.039c0.026-0.033,0.046-0.079,0.046-0.124V2.47V2.457c-0.007-0.092-0.085-0.17-0.177-0.177 l-0.059-0.007c-0.242-0.026-0.505-0.039-0.786-0.039c-0.577,0-1.225,0.059-1.867,0.17C9.517,2.437,9.301,2.457,9.052,2.457 c-0.197,0-0.387-0.013-0.577-0.02c-0.183-0.007-0.373-0.02-0.557-0.02c-0.079,0-0.144,0-0.21,0.007 C7.512,2.431,7.315,2.464,7.112,2.516l0,0L7.06,2.529H7.053C6.306,2.745,5.658,3.407,5.265,4.331c0,0,0,0.007-0.007,0.007 c-0.17,0.4-0.269,0.819-0.288,1.179c-0.046,0.917-0.098,1.317-0.242,1.69V7.22L4.714,7.233C4.649,7.397,4.57,7.554,4.472,7.758 l-0.02,0.046C4.314,8.072,4.131,8.387,3.948,8.695L3.895,8.78C3.869,8.819,3.849,8.858,3.823,8.898 C3.666,9.166,3.509,9.441,3.41,9.651v0.013L3.397,9.677c0,0.007-0.007,0.013-0.007,0.013l0,0C3.384,9.71,3.378,9.736,3.378,9.756 c0,0.085,0.052,0.157,0.124,0.183c0.007,0,0.013,0.007,0.02,0.007l0.013,0.007c0.026,0.013,0.052,0.02,0.079,0.033 c0.013,0.007,0.033,0.013,0.039,0.013c0.013,0,0.033-0.007,0.046-0.013h0.007c0.079-0.026,0.197-0.059,0.38-0.059h0.007 c0.216,0,0.413,0.059,0.583,0.164c0.131,0.085,0.308,0.249,0.478,0.446c0.039,0.046,0.092,0.072,0.157,0.072 C5.382,10.621,5.455,10.568,5.487,10.49L5.487,10.49L5.487,10.49z M6.057,12.593L6.057,12.593c0.013,0,0.02-0.007,0.026-0.007H6.09 c0.432-0.105,0.786-0.229,1.009-0.753c0.242-0.563,0.406-1.245,0.563-1.907l0.052-0.21c0.262-1.081,0.524-2.025,1.088-2.673 l0.007-0.007c0.02-0.026,0.046-0.052,0.066-0.072l0,0c0.007-0.007,0.007-0.007,0.013-0.013c0.007-0.007,0.007-0.007,0.013-0.013 C9.156,6.696,9.53,6.565,9.956,6.565c0.21,0,0.426,0.033,0.649,0.092l0,0h0.007c0.039,0.013,0.079,0.02,0.118,0.033 c0.203,0.059,0.439,0.131,0.688,0.131l0,0c0.223,0,0.426-0.052,0.629-0.17l0,0h0.007c0.013-0.007,1.533-0.839,2.346-3.355V3.289 c0.007-0.013,0.007-0.033,0.013-0.046l0,0l0.013-0.033V3.204l0.007-0.013c0.007-0.02,0.013-0.033,0.02-0.052l0.013-0.033 c0.007-0.02,0.007-0.033,0.007-0.052V3.047V3.034c-0.013-0.105-0.098-0.177-0.197-0.177c-0.039,0-0.072,0.013-0.105,0.033 l-0.013,0.007c-0.544,0.36-1.094,0.393-1.704,0.4c-0.229,0-0.432,0.007-0.622,0.02h-0.013c-1.304,0.092-2.333,0.491-3.086,2.169 C8.698,5.569,8.233,6.847,7.394,8.21c-0.111,0.183-0.269,0.4-0.426,0.622L6.935,8.845c-0.59,0.819-1.389,1.946-1.173,2.804v0.013 c0.059,0.21,0.079,0.413,0.066,0.603l0,0v0.007v0.007c0,0.033-0.007,0.059-0.013,0.092l0,0v0.007v0.02 c0,0.111,0.092,0.203,0.203,0.203C6.031,12.593,6.044,12.593,6.057,12.593L6.057,12.593L6.057,12.593z M15.066,7.338L15.066,7.338 l0.013-0.007h0.007h0.007c0.183-0.118,0.387-0.229,0.616-0.341l0,0c0.007,0,0.013-0.007,0.026-0.013 c0.066-0.033,0.098-0.105,0.098-0.177V6.794V6.781c-0.007-0.052-0.033-0.105-0.079-0.138l0,0c-0.229-0.164-0.36-0.341-0.387-0.38 c-0.197-0.301-0.249-0.596-0.157-0.878c0.072-0.216,0.229-0.419,0.472-0.596h0.007c0.007,0,0.007-0.007,0.013-0.007l0,0 c0.046-0.039,0.072-0.092,0.072-0.151V4.626V4.613c-0.007-0.052-0.026-0.092-0.066-0.131l-0.052-0.046l0.007-0.007 c-0.229-0.249-0.393-0.518-0.498-0.812l0,0l-0.02-0.079c-0.026-0.085-0.105-0.144-0.19-0.144c-0.066,0-0.124,0.033-0.157,0.079 c-0.007,0.007-0.013,0.02-0.02,0.033c-0.007,0.007-0.007,0.02-0.013,0.026c0,0.007,0,0.007-0.007,0.013v0.007v0.007 c-0.17,0.668-0.105,1.409-0.046,2.195v0.007c0.039,0.459,0.079,0.937,0.066,1.402v0.007v0.013v0.007 c0,0.111,0.092,0.197,0.203,0.197C15.001,7.364,15.04,7.351,15.066,7.338L15.066,7.338L15.066,7.338z M5.075,16.164 c0.727,0,1.101-0.308,1.664-0.767l0.026-0.02c0.079-0.066,0.157-0.131,0.242-0.197h0.007c0.033-0.026,0.059-0.046,0.092-0.072 l0.007-0.007h0.007c0.341-0.269,0.832-0.622,1.546-0.976c0.439-0.229,0.871-0.393,1.363-0.511c0.426-0.105,0.826-0.157,1.258-0.21 l0.026-0.007c0.151-0.02,0.308-0.039,0.465-0.066c0.465-0.066,0.911-0.17,1.317-0.314c1.638-0.57,2.68-1.723,2.929-3.25 C16.219,8.557,16.534,8,17.012,7.437c0.039-0.046,0.085-0.098,0.144-0.164c0.033-0.039,0.052-0.085,0.052-0.138V7.129V7.115 c-0.013-0.105-0.098-0.183-0.197-0.183c-0.026,0-0.046,0.007-0.072,0.013l-0.092,0.033V6.971c-0.649,0.216-1.972,0.74-2.28,1.474 c-0.007,0.026-0.02,0.046-0.026,0.072c-0.138,0.347-0.328,0.655-0.583,0.93c-0.812,0.878-1.612,1.088-2.391,1.291 c-0.747,0.197-1.448,0.38-2.143,1.179l-0.007,0.007c-0.007,0.007-0.426,0.446-1.147,1.704c-0.406,0.714-1.094,1.271-1.946,1.566 c-0.4,0.144-0.826,0.216-1.232,0.216c-0.36,0-0.708-0.059-0.989-0.177l0,0H4.098H4.085L4.072,15.22 c-0.079-0.033-0.157-0.052-0.236-0.052c-0.085,0-0.164,0.02-0.236,0.033c-0.072,0.02-0.157,0.039-0.242,0.039H3.332H3.325h-0.02 H3.292c-0.059,0.007-0.111,0.033-0.144,0.079c0,0-0.007,0.007-0.007,0.013v0.007l-0.013,0.013c-0.013,0.026-0.02,0.059-0.02,0.085 c0,0.059,0.026,0.118,0.072,0.157L3.188,15.6c0.046,0.039,0.098,0.072,0.151,0.105C3.797,16,4.38,16.144,5.055,16.151h0.02V16.164 L5.075,16.164z M13.559,2.516c-0.111-0.052-0.236-0.105-0.373-0.144c-0.02-0.007-0.039-0.013-0.066-0.02 c-0.013,0.046-0.059,0.144-0.059,0.144c-0.013,0.033-0.026,0.072-0.026,0.111c0,0.151,0.118,0.269,0.269,0.269 c0.02,0,0.033,0,0.052-0.007c0.013,0,0.02-0.007,0.033-0.007c0.151-0.039,0.295-0.098,0.439-0.177 C13.749,2.627,13.664,2.568,13.559,2.516L13.559,2.516L13.559,2.516z M16.285,21.183L16.285,21.183 c0.007-0.007,0.013-0.013,0.02-0.013l0.013-0.007c0.334-0.242,0.668-0.505,0.983-0.773c1.324-1.12,2.464-2.418,3.394-3.859v-0.007 c0.007-0.007,0.013-0.02,0.02-0.026c0.013-0.026,0.026-0.059,0.026-0.092V16.4v-0.013c-0.007-0.066-0.046-0.124-0.105-0.157h-0.007 l0,0c-0.197-0.098-0.387-0.229-0.557-0.4c-0.701-0.688-1.14-1.894-1.297-3.577l-0.013-0.111c-0.052-0.59-0.164-1.815-0.747-2.732 l0,0c-0.256-0.373-0.505-0.767-0.727-1.173l-0.007-0.013c-0.039-0.059-0.098-0.092-0.17-0.092c-0.066,0-0.124,0.033-0.157,0.079 l0,0c0,0.007-0.007,0.007-0.007,0.013l-0.013,0.02c-0.236,0.413-0.393,0.904-0.511,1.592c-0.19,1.166-0.806,2.149-1.769,2.844 c-0.007,0-0.007,0.007-0.013,0.007l-0.007,0.007c-0.013,0.013-0.026,0.02-0.039,0.039c0,0-0.007,0.007-0.007,0.013v0.007 l-0.013,0.013c-0.013,0.026-0.02,0.059-0.02,0.085c0,0.079,0.046,0.151,0.124,0.183l0.039,0.02 c0.256,0.118,0.485,0.288,0.675,0.518c0.708,0.839,0.911,2.352,0.557,4.147c-0.256,1.297-0.177,2.274-0.066,2.863 c0.033,0.17,0.072,0.334,0.118,0.485c0,0.007,0,0.007,0.007,0.013c0.026,0.085,0.105,0.138,0.19,0.138 C16.219,21.209,16.252,21.202,16.285,21.183L16.285,21.183L16.285,21.183z M21.127,15.817l0.007-0.013l0.007-0.013 c0.609-1.068,0.95-1.946,1.101-2.378c0-0.007,0.007-0.013,0.007-0.013c0.007-0.02,0.007-0.039,0.007-0.059v-0.007V13.32 c-0.007-0.066-0.046-0.124-0.105-0.157c-0.963-0.459-1.88-1.14-2.726-2.011c0,0-0.02-0.02-0.026-0.026 c-0.033-0.033-0.085-0.046-0.131-0.046c-0.066,0-0.124,0.033-0.157,0.079c0,0-0.007,0.007-0.007,0.013v0.007l-0.013,0.013 c-0.013,0.026-0.02,0.059-0.02,0.085v0.02v0.007l0.007,0.02c0.046,0.308,0.072,0.583,0.092,0.78l0.013,0.111 c0.098,1.081,0.38,2.529,1.153,3.302c0.157,0.157,0.328,0.282,0.498,0.36l0.059,0.026c0.026,0.013,0.052,0.013,0.079,0.013 C21.029,15.902,21.088,15.869,21.127,15.817L21.127,15.817L21.127,15.817z M2.965,14.264L2.965,14.264v-0.007v-0.007v-0.013l0,0 c-0.013-0.105-0.085-0.197-0.19-0.229c-0.007,0-0.013,0-0.02-0.007c-0.072-0.02-0.151-0.046-0.236-0.085H2.513 c-0.098-0.046-0.203-0.105-0.308-0.17c-0.046-0.026-0.098-0.066-0.157-0.111l-0.007-0.007c-0.033-0.02-0.072-0.039-0.111-0.039 c-0.059,0-0.118,0.033-0.151,0.079l0,0c-0.007,0.007-0.007,0.013-0.013,0.02l0,0c-0.013,0.026-0.02,0.059-0.02,0.092 c0,0.02,0,0.033,0.007,0.046c0,0.007,0,0.007,0.007,0.013c0.007,0.02,0.013,0.046,0.02,0.066c0.098,0.275,0.256,0.511,0.446,0.668 l0,0c0.151,0.124,0.308,0.19,0.439,0.183c0.013,0,0.026-0.007,0.039-0.007c0.059-0.013,0.111-0.039,0.151-0.092 C2.952,14.539,2.971,14.395,2.965,14.264L2.965,14.264L2.965,14.264z M5.088,11.387v-0.013c-0.007-0.079-0.059-0.144-0.138-0.17 H4.943c-0.098-0.026-0.21-0.039-0.334-0.039c-0.039,0-0.085,0-0.124,0.007c-0.262,0.02-0.537,0.118-0.819,0.288 c-0.262,0.164-0.472,0.236-0.649,0.236c-0.236,0-0.393-0.138-0.577-0.314c-0.079-0.079-0.164-0.118-0.262-0.118 c-0.066,0-0.131,0.02-0.203,0.052c-0.013,0.007-0.052,0.039-0.085,0.066c-0.013,0.013-0.02,0.026-0.033,0.039l0,0l-0.007,0.007 c0,0-0.007,0.007-0.007,0.013v0.007l-0.013,0.013c-0.013,0.026-0.02,0.059-0.02,0.085c0,0.105,0.079,0.19,0.177,0.197h0.013 c0.098,0.007,0.197,0.052,0.295,0.124c0.393,0.295,0.314,0.544,0.249,0.793c-0.013,0.039-0.02,0.079-0.033,0.124l-0.007,0.02 c-0.02,0.085-0.033,0.164-0.039,0.242C2.46,13.117,2.46,13.183,2.46,13.242c0.013,0.236,0.118,0.308,0.21,0.36 c0.013,0.007,0.026,0.013,0.039,0.02s0.033,0.013,0.052,0.013c0.052,0,0.098-0.033,0.118-0.079c0-0.007,0.007-0.013,0.007-0.02 c0-0.007,0.007-0.013,0.013-0.02V13.51c0-0.007,0.007-0.007,0.007-0.013l0.013-0.013c0.007-0.007,0.013-0.013,0.02-0.013 c0.007-0.007,0.013-0.007,0.02-0.013c0.007,0,0.007-0.007,0.013-0.007c0.007,0,0.007-0.007,0.013-0.007h0.007 c0.007,0,0.007-0.007,0.013-0.007l0,0h0.007h0.007H3.03h0.02h0.02h0.02h0.02c0.007,0,0.013,0,0.02,0.007h0.007l0.013,0.007 c0.007,0,0.013,0.007,0.026,0.013c0.007,0,0.007,0.007,0.013,0.007c0.007,0.007,0.013,0.007,0.02,0.013l0.013,0.013l0.013,0.013 c0.007,0.007,0.013,0.013,0.013,0.02l0,0c0,0.007,0.007,0.007,0.007,0.013v0.007c0,0.007,0.007,0.007,0.007,0.013l0.007,0.007 c0,0.007,0.007,0.007,0.007,0.013c0.02,0.059,0.052,0.098,0.105,0.131c0.059,0.033,0.131,0.052,0.223,0.052 c0.052,0,0.111-0.007,0.17-0.02c0.066-0.02,0.098-0.052,0.098-0.072c0.007-0.026-0.013-0.072-0.046-0.111l-0.007-0.007 c-0.013-0.013-0.02-0.026-0.033-0.046c-0.039-0.059-0.079-0.105-0.131-0.183l-0.02-0.033c-0.072-0.105-0.131-0.21-0.177-0.321 l-0.02-0.046c-0.131-0.328-0.124-0.642,0.02-0.865c0.111-0.17,0.288-0.262,0.505-0.269h0.007c0.262,0,0.36,0.223,0.406,0.373l0,0 c0.02,0.072,0.085,0.118,0.164,0.118c0.033,0,0.059-0.007,0.079-0.02c0.007-0.007,0.013-0.007,0.02-0.013s0.013-0.007,0.02-0.013 c0.144-0.098,0.183-0.124,0.197-0.321c0-0.111,0.046-0.262,0.164-0.36c0.007-0.007,0.013-0.007,0.02-0.013 c0.046-0.039,0.072-0.092,0.072-0.151C5.088,11.394,5.088,11.394,5.088,11.387L5.088,11.387L5.088,11.387z M14.293,5.772 c-0.007-0.118-0.02-0.236-0.026-0.354V5.405c-0.013-0.105-0.098-0.183-0.197-0.183c-0.066,0-0.124,0.033-0.157,0.079 c0,0-0.007,0.007-0.007,0.013V5.32l-0.013,0.013c-0.649,1.002-1.33,1.474-1.559,1.618c-0.059,0.269-0.288,1.029-1.133,1.586 c-0.02,0.013-0.039,0.026-0.059,0.039c-0.013,0.007-0.026,0.013-0.039,0.026c-0.871,0.531-1.789,0.426-1.789,0.426l0,0 c-0.865-0.124-1.107,0.432-1.199,0.78l-0.052,0.21c-0.164,0.681-0.328,1.382-0.59,1.979c-0.328,0.76-0.904,0.898-1.409,1.016 c-0.295,0.072-0.57,0.138-0.793,0.314c-0.02,0.02-0.039,0.039-0.066,0.052c-0.164,0.131-0.321,0.249-0.472,0.347l-0.046,0.033 c-0.295,0.19-0.57,0.314-0.812,0.367l-0.033,0.007c-0.007,0-0.013,0-0.02,0.007H3.81c-0.092,0.02-0.151,0.105-0.151,0.197 c0,0.039,0.013,0.079,0.033,0.111l0,0c0.007,0.007,0.013,0.013,0.02,0.026c0,0,0,0.007,0.007,0.007 c0.124,0.157,0.295,0.282,0.511,0.373l0.013,0.007c0.242,0.098,0.531,0.151,0.839,0.151c0.924,0,2.201-0.491,2.824-1.579 c0.727-1.265,1.16-1.736,1.206-1.782c0.773-0.891,1.572-1.101,2.346-1.304c0.753-0.197,1.461-0.38,2.195-1.173 c0.223-0.236,0.387-0.498,0.498-0.799c0.007-0.026,0.02-0.052,0.026-0.072C14.437,7.535,14.365,6.637,14.293,5.772L14.293,5.772 L14.293,5.772z M3.469,8.799c0-0.007,0-0.02-0.007-0.026V8.767C3.417,8.675,3.364,8.55,3.325,8.393V8.38 c-0.02-0.052-0.072-0.098-0.131-0.098c-0.046,0-0.085,0.02-0.111,0.052l0,0c0,0.007-0.007,0.013-0.007,0.013l0,0 c0,0,0,0.007-0.007,0.007C3.063,8.36,3.063,8.373,3.063,8.38C2.998,8.577,2.932,8.753,2.86,8.911 C2.814,9.009,2.768,9.094,2.722,9.179l0,0l0,0c0,0,0,0.007-0.007,0.007l0,0c0,0,0,0,0,0.007l0,0c0,0.007-0.007,0.013-0.007,0.026 c0,0.013,0,0.02,0.007,0.033c0,0,0,0.007,0.007,0.007c0.013,0.013,0.02,0.026,0.033,0.046l0,0C2.801,9.382,2.88,9.461,2.971,9.461 c0.098,0,0.197-0.085,0.242-0.17c0-0.007,0.007-0.007,0.007-0.013C3.292,9.14,3.378,8.989,3.463,8.845 c0-0.007,0.007-0.013,0.007-0.013l0,0c0.007-0.013,0.007-0.02,0.007-0.033C3.469,8.806,3.469,8.806,3.469,8.799L3.469,8.799 L3.469,8.799L3.469,8.799z M2.624,9.651c0-0.007-0.007-0.007-0.007-0.013c0,0,0-0.007-0.007-0.007 c-0.02-0.026-0.052-0.046-0.085-0.046c-0.033,0-0.066,0.013-0.085,0.039l0,0c0,0,0,0.007-0.007,0.007c0,0,0,0,0,0.007l0,0 c0,0,0,0.007-0.007,0.007l0,0c-0.164,0.328-0.197,0.603-0.21,0.819v0.013l0,0c0,0.059,0.046,0.105,0.105,0.105 c0.02,0,0.039-0.007,0.059-0.02l0.007-0.007c0.026-0.02,0.052-0.039,0.072-0.059l0.007-0.007c0.033-0.026,0.105-0.085,0.183-0.17 c0,0,0,0,0.007-0.007l0,0l0.007-0.007l0,0C2.834,10.149,2.762,9.907,2.624,9.651L2.624,9.651L2.624,9.651z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$73($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fossa" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fossa extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$73, create_fragment$73, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fossilscm.svelte generated by Svelte v3.23.2 */

        function create_fragment$74(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.571 0c-.699.022-2.041.555-3.458 1.419C7.464 2.42 6.258 3.538 6.16 4.108c-.008.009-.019.014-.026.023-.563.746.203 2.277 1.711 3.414 1.408 1.063 2.958 1.397 3.617.832.518-.09 1.227-1.776 1.627-3.94.383-2.054.35-3.812-.045-4.214-.006-.02.001-.048-.01-.066-.069-.113-.23-.163-.463-.156zm-2.277 2.936c-.164.193-.329.383-.492.605-.217.296-.403.587-.568.866a5.705 5.705 0 00-.908-.432 14.052 14.052 0 001.785-.914c.067-.04.118-.084.183-.125zm.912 1.084c-.004.024-.01.043-.015.066a16.33 16.33 0 00-.227 1.78 6.106 6.106 0 00-.654-.674c.215-.241.436-.507.652-.801.093-.127.16-.246.244-.371zm-3.14 4.002c-.41-.075-.968 1.14-1.246 2.706-.276 1.566-.164 2.897.246 2.969.41.072.972-1.141 1.248-2.707.276-1.566.164-2.896-.248-2.968zm-5.56 2.708c-.072.032-.026.314.103.625.132.312.297.539.37.51.074-.031.025-.311-.104-.623-.13-.312-.295-.54-.37-.512zm-.602.506c-.035-.005-.061 0-.076.018-.062.067.083.298.322.512.24.215.483.332.545.265.06-.07-.084-.298-.324-.513-.18-.16-.361-.267-.467-.282zm-.224.684c-.118 0-.197.02-.205.058-.017.077.247.205.587.282.343.078.636.078.653.002.017-.08-.248-.204-.588-.284a2.163 2.163 0 00-.447-.058zm1.296.144c-.251.067-.235.954.036 1.98.27 1.03.695 1.81.945 1.745.25-.067.234-.954-.037-1.98-.271-1.03-.694-1.812-.944-1.745zm10.394.186c-.072-.031-.237.198-.369.51-.13.311-.178.59-.103.62.072.032.24-.197.369-.51.13-.31.178-.591.103-.62zm.61.504c-.105.015-.285.12-.463.281-.238.213-.382.445-.323.512.058.064.304-.057.541-.27.238-.213.38-.443.32-.508-.014-.016-.04-.02-.075-.015zm-7.625.593c-.34.035-.86.369-1.326.883-.621.686-.914 1.437-.652 1.672.261.237.978-.125 1.601-.81.621-.689.912-1.437.65-1.674-.065-.059-.16-.082-.273-.07zm7.85.092c-.119 0-.276.018-.446.057-.343.077-.607.202-.59.281.017.077.31.077.652 0 .34-.077.607-.202.588-.28-.008-.037-.087-.057-.205-.058zm-6.13.168a.15.15 0 00-.099.028c-.21.163.143.978.793 1.82.647.841 1.346 1.393 1.557 1.23.21-.16-.148-.977-.795-1.818-.567-.737-1.172-1.251-1.455-1.26zm4.557.043c-.267-.03-.843.36-1.387.96-.62.685-.966 1.386-.767 1.563.196.18.861-.232 1.482-.917.621-.686.964-1.385.768-1.565a.17.17 0 00-.096-.04zm-5.603.133c-.386.082-.48 1.2-.205 2.492.273 1.292.815 2.275 1.2 2.193.387-.081.481-1.2.208-2.49-.276-1.292-.815-2.279-1.203-2.195zm15.448 2.459c-.13-.055-.48.471-.78 1.174-.297.705-.432 1.323-.3 1.378.13.056.48-.47.777-1.173.297-.705.433-1.324.303-1.38zm-9.503.412c-.07.031-.024.31.105.621.132.312.298.542.367.514.072-.031.027-.31-.105-.621-.13-.312-.295-.543-.367-.514zm-.6.506c-.035-.005-.062 0-.078.017-.06.07.087.297.324.51.238.213.481.33.541.264.06-.067-.083-.297-.32-.51-.178-.158-.36-.266-.467-.281zm-.224.681c-.118 0-.195.019-.203.057-.017.079.245.204.585.283.343.077.636.077.653 0 .016-.077-.246-.204-.586-.281a2.133 2.133 0 00-.45-.059zm1.37.21c-.26 0-.476.75-.476 1.675s.215 1.676.477 1.676c.26 0 .478-.75.478-1.676 0-.926-.217-1.676-.478-1.676zm-5.175.333a.235.235 0 00-.133.045c-.294.216.04 1.17.744 2.13.703.962 1.514 1.564 1.807 1.35.295-.215-.035-1.171-.74-2.13-.617-.842-1.315-1.41-1.678-1.395zm13.02.522c-.105-.094-.601.297-1.105.873-.503.575-.824 1.119-.718 1.213.108.093.603-.298 1.107-.873.504-.576.825-1.12.717-1.213zm-11.014.443c-.113-.005-.194.019-.23.074-.144.223.46.875 1.353 1.453.89.58 1.73.872 1.875.649.146-.223-.46-.877-1.35-1.457-.667-.434-1.308-.704-1.648-.719zM8.73 20.451c-.266 0-.48.75-.48 1.675 0 .926.214 1.676.48 1.676s.482-.75.482-1.676c0-.925-.216-1.675-.482-1.675zm-3.644.06c-.072.031-.026.313.103.625.132.312.297.539.37.51.074-.031.025-.312-.104-.623-.13-.312-.295-.54-.37-.512zm14.296.477c-.368-.04-1.127.127-1.96.453-1.107.434-1.929.984-1.833 1.228.096.242 1.074.093 2.181-.342 1.11-.434 1.932-.985 1.836-1.23-.024-.06-.102-.096-.224-.11zm-14.898.029c-.035-.005-.061 0-.076.018-.062.067.082.298.322.511.24.216.483.333.545.266.06-.07-.084-.298-.324-.514-.18-.16-.362-.267-.467-.281zm-.223.685c-.118 0-.196.019-.205.057-.016.08.248.204.588.283.343.077.636.077.653 0 .016-.077-.248-.204-.588-.281a2.116 2.116 0 00-.448-.059zm1.29.047c-.114-.005-.194.019-.231.075-.144.223.461.875 1.353 1.453.89.58 1.731.871 1.875.648.147-.223-.46-.877-1.35-1.457-.666-.433-1.307-.704-1.648-.719zm6.628.09c-.865-.036-1.493.081-1.527.32-.046.317.98.73 2.289.92 1.311.19 2.415.087 2.46-.232.046-.317-.98-.73-2.292-.92a9.203 9.203 0 00-.93-.088z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$74($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fossil SCM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fossilscm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$74, create_fragment$74, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Foursquare.svelte generated by Svelte v3.23.2 */

        function create_fragment$75(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.727 3.465l-.535 2.799c-.064.303-.445.623-.801.623H11.41c-.562 0-.963.391-.963.945v.614c0 .569.405.96.966.96h4.23c.395 0 .785.436.697.855l-.535 2.76c-.051.24-.314.63-.785.63h-3.457c-.63 0-.818.091-1.239.601-.42.524-4.206 5.069-4.206 5.069-.037.045-.074.029-.074-.015V3.42c0-.359.311-.78.776-.78h10.274c.375 0 .73.356.633.821v.004zm.451 10.98c.145-.578 1.746-8.784 2.281-11.385M18.486 0H5.683C3.918 0 3.4 1.328 3.4 2.164v20.34c0 .94.504 1.291.789 1.405.284.117 1.069.214 1.541-.328 0 0 6.044-7.014 6.146-7.117.165-.157.165-.157.315-.157h3.914c1.65 0 1.906-1.17 2.086-1.86.15-.569 1.754-8.774 2.279-11.385C20.875 1.08 20.365 0 18.49 0h-.004z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$75($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Foursquare" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Foursquare extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$75, create_fragment$75, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Framer.svelte generated by Svelte v3.23.2 */

        function create_fragment$76(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4 0h16v8h-8zM4 8h8l8 8H4zM4 16h8v8z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$76($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Framer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Framer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$76, create_fragment$76, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Freebsd.svelte generated by Svelte v3.23.2 */

        function create_fragment$77(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.725.588c1.273 1.272-2.254 6.862-2.85 7.458-.597.596-2.111.048-3.383-1.224-1.272-1.272-1.82-2.787-1.224-3.383.596-.596 6.186-4.123 7.457-2.85zM5.885 1.934C3.943.832 1.18-.394.3.485c-.89.89.38 3.717 1.494 5.663.99-1.723 2.4-3.174 4.091-4.214zm15.9 5.674c.179.606.147 1.107-.143 1.397-.678.678-2.508-.044-4.157-1.614a8.323 8.323 0 0 1-.342-.323c-.597-.597-1.06-1.232-1.358-1.817-.578-1.036-.722-1.952-.285-2.388.238-.238.618-.303 1.083-.22.303-.191.66-.405 1.052-.623a11.492 11.492 0 0 0-5.33-1.301C5.927.719.757 5.889.757 12.267c0 6.377 5.17 11.548 11.548 11.548s11.549-5.17 11.549-11.548c0-2.06-.54-3.991-1.485-5.666a22.27 22.27 0 0 1-.584 1.007z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$77($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "FreeBSD" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Freebsd extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$77, create_fragment$77, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Freecodecamp.svelte generated by Svelte v3.23.2 */

        function create_fragment$78(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.885 3.906a.621.621 0 00-.354.12c-.08.08-.161.196-.161.313 0 .2.236.474.673.923 1.822 1.754 2.738 3.903 2.732 6.494-.007 2.867-.97 5.17-2.844 6.954-.394.353-.556.63-.557.867 0 .116.08.237.16.353.076.08.237.162.353.162.434 0 1.04-.512 1.833-1.509 1.542-1.89 2.24-3.978 2.279-6.824.036-2.847-.857-4.777-2.603-6.77-.63-.712-1.153-1.082-1.511-1.083zm-15.769.002c-.358 0-.882.37-1.51 1.083C.858 6.984-.035 8.914.001 11.761c.04 2.846.737 4.933 2.28 6.824.791.997 1.398 1.51 1.832 1.509a.573.573 0 00.352-.162c.08-.116.16-.237.16-.353 0-.237-.162-.514-.556-.866-1.873-1.785-2.837-4.087-2.844-6.955-.006-2.591.91-4.74 2.732-6.494.437-.449.674-.722.673-.923 0-.117-.08-.233-.161-.313a.621.621 0 00-.354-.12zm7.056.895s.655 2.081-2.649 6.727c-3.156 4.433 1.045 7.15 1.432 7.386-.281-.18-2.001-1.5.402-5.423.466-.77 1.076-1.47 1.834-3.041 0 0 .67.946.32 2.998-.523 3.101 2.271 2.214 2.314 2.257.976 1.15-.808 3.17-.917 3.233-.108.061 5.096-3.13 1.399-7.935-.253.253-.582 1.442-1.267 1.266-.684-.174 2.125-3.494-2.868-7.468zM9.955 18.916c.023.016.038.024.038.024l-.038-.024z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$78($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "freeCodeCamp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Freecodecamp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$78, create_fragment$78, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/FreedesktopDotOrg.svelte generated by Svelte v3.23.2 */

        function create_fragment$79(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.702 1.934a4.375 4.375 0 0 0-1.264.14L3.3 5.502a4.418 4.418 0 0 0-3.156 5.384L2.2 18.77a4.418 4.418 0 0 0 5.384 3.157l13.139-3.429c2.212-.577 3.573-2.745 3.222-4.958h.045l-.111-.425-2.057-7.884a4.421 4.421 0 0 0-4.12-3.296zm-.02.677a3.73 3.73 0 0 1 3.483 2.791l1.946 7.458.11.425c.523 2-.67 4.034-2.67 4.555L7.412 21.268a3.729 3.729 0 0 1-4.555-2.67L.8 10.715a3.729 3.729 0 0 1 2.671-4.556L16.61 2.731a3.77 3.77 0 0 1 1.072-.12zm-.392 1.024a5.386 5.386 0 0 0-1.197.139L4.431 6.817c-2.428.706-3.107 2.016-2.624 4.265l1.75 6.704c.482 2.114 2.282 3.102 4.372 2.44l11.662-3.043c2.123-.504 3.107-2.096 2.624-4.265l-1.749-6.704c-.392-1.677-1.55-2.572-3.176-2.579zm1.25 3.554a.46.46 0 0 1 .472.345l.623 2.388.01.042a.457.457 0 0 1-.33.564l-3.405.888a.457.457 0 0 1-.564-.33l-.633-2.43a.457.457 0 0 1 .33-.565l3.405-.888a.468.468 0 0 1 .093-.014zm-10.216.658a.64.64 0 0 1 .655.48l.777 2.978a.638.638 0 0 1-.46.784l-4.172 1.089a.638.638 0 0 1-.784-.46L3.563 9.74a.638.638 0 0 1 .46-.785l4.172-1.088a.646.646 0 0 1 .13-.02zm5.859 1.466l.173.663-4.12.476-.174-.663zm.898 2.542c.183.147.41.237.648.252l-1.57 2.362a.892.892 0 0 0-.642-.26zm-5.626.894l2.032 1.96-.52.136a.867.867 0 0 0-.22.095l-2.062-1.99zm4.064 2.137a.209.209 0 0 1 .215.157l.435 1.669a.206.206 0 0 1-.15.258l-2.338.61a.206.206 0 0 1-.257-.152l-.436-1.668a.206.206 0 0 1 .151-.258l2.338-.61a.207.207 0 0 1 .042-.006Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$79($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "freedesktop.org" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class FreedesktopDotOrg extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$79, create_fragment$79, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Freelancer.svelte generated by Svelte v3.23.2 */

        function create_fragment$7a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.096 3.076l1.634 2.292L24 3.076M5.503 20.924l4.474-4.374-2.692-2.89m6.133-10.584L11.027 5.23l4.022.15M4.124 3.077l.857 1.76 4.734.294m-3.058 7.072l3.497-6.522L0 5.13m7.064 7.485l3.303 3.548 3.643-3.57 1.13-6.652-4.439-.228Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Freelancer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Freelancer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7a, create_fragment$7a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fujifilm.svelte generated by Svelte v3.23.2 */

        function create_fragment$7b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.484 10.003c-.483 0-.484.238-.484.533v3.329h.786c.165.003.24-.057.243-.207v-1.556h1.444c.034 0 .055-.018.055-.052v-.39H1.03v-.98c0-.173.086-.255.258-.255H2.56c.037 0 .049-.024.049-.05v-.372zm7.997 0c-.111 0-.197.052-.197.21v2.654c0 .377-.143.632-.573.693-.29.041-.678.03-.847.024v.324c0 .03.014.052.049.06.025.006.208.029.62.029.722 0 1.054-.156 1.245-.292.365-.263.495-.575.495-1.192v-2.51zm-5.13 0c-.148 0-.194.07-.194.199v2.658c0 .538.26.866.814 1.033.463.14 1.21.137 1.701.003.37-.1.787-.373.787-1.037v-2.856h-.77c-.172 0-.219.073-.219.196v2.748c0 .294-.063.443-.229.536-.242.135-.645.133-.883-.004-.177-.103-.213-.28-.213-.533v-2.943zm9.308 0c-.483 0-.483.239-.483.533v.995c0 .02-.01.029-.018.038l-.677.533h.695v1.763h.786c.164.003.24-.057.242-.207v-1.556h1.444c.034 0 .055-.018.055-.052v-.39h-1.499v-.98c0-.173.087-.255.258-.255h1.274c.036 0 .05-.024.05-.05v-.372zm3.701 0h-.768c-.175 0-.222.082-.222.203v3.66h.783c.138 0 .207-.042.207-.204zm1.922 0h-.76c-.173-.003-.229.066-.229.213v3.108c0 .258.076.541.591.541h1.668c.044 0 .065-.027.065-.066v-.351h-1.03c-.205-.01-.305-.115-.305-.318zm5.718 0h-1.144c-.195 0-.306.092-.35.266l-.63 2.663h-.018l-.65-2.928h-.89c-.172 0-.226.088-.226.224v3.637h.376c.06 0 .086-.03.086-.092v-3.049h.059l.804 3.141h.527c.199 0 .273-.081.322-.278l.722-2.863h.058v3.141h.703c.172 0 .251-.067.251-.237zm-13.608.001c-.173 0-.22.084-.22.205v1.87l.93-.73c.036-.028.056-.05.058-.11v-1.235zm-.22 2.098v1.763h.781c.138 0 .208-.04.208-.203v-1.56z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fujifilm" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fujifilm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7b, create_fragment$7b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Fujitsu.svelte generated by Svelte v3.23.2 */

        function create_fragment$7c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.56 3C14.15 3 12.04 4.24 10.68 5.97L10.68 9.76C12.5 4.71 16.56 5.08 16.56 5.08C19.5 5.08 21.84 7.38 21.84 10.2C21.84 13.04 19.5 15.33 16.56 15.33A5.32 5.32 0 0 1 12.84 13.83L10.28 11.03A6.06 6.06 0 0 0 6.03 9.32C2.7 9.32 0 11.93 0 15.16C0 18.4 2.7 21 6.03 21C7.9 21 9.58 20.19 10.68 18.89L10.68 15.86C8.88 19.29 6.03 18.92 6.03 18.92C3.9 18.92 2.17 17.24 2.17 15.16C2.17 13.1 3.9 11.42 6.03 11.42C7.09 11.42 8.05 11.84 8.75 12.5L11.31 15.31A7.5 7.5 0 0 0 16.56 17.43C20.67 17.43 24 14.19 24 10.2C24 6.21 20.67 3 16.56 3Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fujitsu" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Fujitsu extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7c, create_fragment$7c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Furaffinity.svelte generated by Svelte v3.23.2 */

        function create_fragment$7d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.7 22.086c-.43-.11-1.068-.505-1.193-.74-.113-.21-.02-1.356.116-1.44.113-.07.113-.265 0-.444-.069-.109-.235-.081-.801.132-.89.335-1.195.336-1.839.01C1.348 19.282.7 18.557.273 17.69c-.45-.914-.388-1.097.518-1.538.392-.19.932-.485 1.2-.655l.485-.31-.049-.724-.05-.725.492-.525.492-.526-.185-.285-.438-.671c-.212-.323-.234-.424-.132-.615.158-.295.095-.347-.256-.213-.157.06-.33.108-.384.108-.133 0-.124-.387.016-.648.158-.296.036-.373-.221-.14-.157.141-.245.162-.331.076-.299-.299.627-2.522 1.193-2.867l.351-.214h-.447c-.247 0-.448-.04-.448-.09 0-.302 1.386-.99 2.37-1.175l.678-.128 1.169-1.878c.643-1.033 1.235-1.932 1.316-2 .313-.26.532-.028 1.471 1.548.524.879.982 1.628 1.018 1.664.037.037.371-.164.743-.446.83-.627 3.339-2.091 4.391-2.562.588-.262.817-.32.949-.237.142.09.206.518.355 2.364.1 1.24.18 2.61.177 3.045-.007 1.202.004 1.37.09 1.367.043 0 .265-.262.493-.58.702-.981.523-.945 2.491-.508l1.731.384 1.197 1.007c1.127.949 1.378 1.217 1.253 1.342-.03.029-.758.063-1.62.076-1.845.028-2.937.289-3.567.852-.328.294-.366.386-.377.907-.007.319-.009.612-.004.65.005.04.445-.114.977-.342.532-.227 1.042-.413 1.135-.413.092 0 .582.416 1.089.926l.921.925-.55 1.06-.552 1.06.5.57c.274.313.485.622.47.686-.044.179-1.023.99-1.195.99-.083 0-.151-.036-.152-.079 0-.043-.09-.228-.202-.41l-.201-.33-.718.199c-.956.265-1.105.253-1.456-.114-.358-.373-.478-.33-.478.173 0 .512-.368 1.125-.83 1.381-.409.227-2.396.944-3.438 1.24a7.784 7.784 0 0 0-1.13.43c-1.05.528-1.072.256-.089-1.108.608-.842.946-1.18 2.002-2.007.698-.547 1.29-1.068 1.316-1.16.025-.09.153-.944.284-1.896l.238-1.732-.52-.983c-.518-.978-.52-.984-.34-1.298.098-.173.16-.315.137-.315-.038 0-.784.414-.887.492-.023.018.085.132.24.255.323.253.724.99.904 1.659.137.507.04 2.034-.113 1.792-.057-.09-.09.025-.09.314-.003.465-.376 1.495-.542 1.495-.051 0-.093-.095-.093-.21 0-.117-.048-.212-.106-.212-.065 0-.081.16-.042.41l.066.41-.685-.015c-.502-.01-.738.032-.881.159-.287.253-2.584 1.447-3.396 1.766-1.069.419-1.14.494-1.498 1.602-.176.545-.389 1.096-.473 1.226-.34.521-1.547.87-2.326.67zm1.11-.594c.18-.204.327-.309.327-.231a.447.447 0 0 1-.125.265c-.068.069-.092.158-.051.198.1.1.344-.254.502-.734.153-.463.299-.61.226-.228-.027.143-.025.26.005.26.148 0 .537-.872.724-1.622.28-1.122.361-1.259 1.283-2.13.63-.596.816-.842.91-1.212.192-.748.233-.814.32-.516.044.145.055.382.025.527-.08.403.11.163.607-.763.543-1.011.668-1.105.617-.467l-.038.484.351-.338c.465-.447 1.386-1.672 1.387-1.845 0-.075-.13-.257-.289-.405-.276-.255-.231-.269.25-.075.139.056.156.023.091-.184-.424-1.372-.948-2.169-2.166-3.296-1-.925-1.51-1.273-2.411-1.645l-.727-.299-.658.386c-.614.36-3.89 3.406-3.89 3.617 0 .558 2.683-1.523 3.953-3.064.326-.397.607-.64.74-.64.392-.002 1.555.78 2.428 1.632 1.001.978 1.359 1.584 1.28 2.171-.06.442-.456 1.3-.691 1.495-.13.107-.146.075-.103-.215.027-.189.034-.343.014-.343-.02 0-.181.155-.36.343-.285.303-.317.315-.271.105.063-.289.046-.29-.729-.022a25.67 25.67 0 0 1-1.628.47c-1.125.287-1.701.505-2.13.81-.346.246-.372.402-.065.402.124 0 .388.172.586.383l.362.383.165-.236c.155-.221.728-.53.983-.53.063 0-.006.158-.153.35-.24.315-.267.443-.258 1.239.009.824-.03.993-.543 2.363-.303.811-.665 1.628-.804 1.815-.339.455-1.1.887-1.678.952-.444.05-.462.064-.303.24.284.314.759.464 1.05.331.209-.095.243-.088.194.038-.117.306.364.154.69-.219zm-1.664-.97a4.035 4.035 0 0 0-.251-.386c-.144-.192-.154-.188-.225.095-.08.317.047.47.39.473.147.001.166-.038.086-.183zm1.443-.68c.194-.194.152-.355-.127-.482-.326-.15-.387-.078-.255.3.118.338.191.372.382.182zm-3.1-.35c.21-.087.381-.178.381-.201 0-.175-1.24-.886-2.034-1.165a38.388 38.388 0 0 1-1.158-.421c-.306-.131.179.609.8 1.22.714.703 1.294.867 2.01.567zm-1.279-.127c-.158-.056-.177-.345-.023-.345.11 0 .269.295.195.359-.022.018-.1.012-.172-.014zm-.734-.688c-.2-.26-.242-.381-.149-.439.128-.08.664.352.588.474-.085.138-.32.12-.44-.035zm3.975.296c.813-.147.928-.198 1.245-.557.563-.638.986-1.455.948-1.834-.052-.525-.448-.75-1.425-.805-.451-.026-1.02.006-1.262.072-.582.157-1.206.863-1.45 1.64l-.184.583.276.47c.296.506.547.706.798.637.087-.024.561-.116 1.054-.206zm.1-.96c-.11-.134-.106-.192.03-.328.21-.21.397-.099.397.234 0 .293-.22.342-.426.094zm-.953-.638c-.27-.326.26-.736.594-.459.224.186.19.288-.152.465-.273.141-.32.14-.442-.006zm1.226-.526c-.161-.161-.162-.193-.013-.343.183-.182.338-.09.395.237.047.268-.162.326-.382.106zm4.412 1.437c.425-.182.99-.798.855-.932-.1-.1-1.189.63-1.3.873-.145.319-.157.317.445.06zm-8.732-.641c-.46-.23-.879-.458-.929-.508-.05-.05.19-.122.546-.163.7-.079 1.748-.36 1.662-.447-.03-.03-.426.017-.88.105-1.457.28-1.653.294-1.5.109.074-.089.363-.277.642-.418.544-.276.68-.42.236-.251-.602.229-1.204.657-1.204.857 0 .136.77.61 1.44.885.932.383.926.298-.013-.169zm10.603-.325c.972-.547.98-.556.391-.48-.636.084-1.04.274-1.04.49a.49.49 0 0 1-.127.299c-.218.218-.023.14.776-.309zm8.076-1.603c.037-.565-.019-.588-.69-.283-.496.225-.491.213-.34.761l.11.39.444-.189c.422-.179.446-.212.476-.679zm-5.436-.145c.046-.392-.033-.972-.179-1.32-.045-.107-.031-.185.032-.185.117 0 .546 1.053.546 1.342 0 .14.026.149.13.044.247-.246.077-1.808-.293-2.703-.169-.407.257.05.481.515l.208.433-.035-.527c-.062-.934-.38-1.46-1.203-1.993-1.042-.673-1.089-.759-.417-.753.563.004 1.724-.433 1.985-.747.099-.12.085-.133-.077-.071-.12.046-.042-.085.196-.33.518-.533.535-.822.026-.433-.445.338-.466.277-.08-.229.267-.349.293-.47.327-1.494.036-1.091.033-1.11-.165-.932-.123.111-.24.145-.3.086-.23-.227-.43.18-.615 1.258-.105.609-.253 1.258-.33 1.442-.143.347-.665.751-1.323 1.025l-.38.157-.58-.933-.582-.932.32-.064c.297-.06.306-.075.128-.205-.18-.131-.171-.146.113-.209.309-.068.85-.456.761-.545-.026-.026-.2-.005-.384.048-.39.112-.44-.006-.098-.234.13-.087.397-.453.593-.813.327-.603.338-.65.132-.585-.178.056-.246.014-.33-.206a1.805 1.805 0 0 1-.105-.53c0-.182-.045-.237-.157-.194-.222.085-.298-.192-.175-.637.057-.208.082-.378.055-.378-.118 0-1.311.811-1.962 1.334-.79.634-.854.828-.55 1.67.083.231.152.428.153.438 0 .01-.07.006-.158-.007-.088-.013-.337-.196-.553-.407-.573-.557-1.494-.93-2.448-.992-.83-.053-.883.098-.083.233.863.146.47.26-.896.26-1.059 0-1.615.052-2.222.207-.99.253-1.374.438-.732.353.554-.074 1.637.055 1.556.185-.033.054-.2.098-.373.098-.573 0-1.49.4-1.95.853-.402.394-1.07 1.528-.963 1.634.025.025.254-.07.509-.213.66-.366 1.57-.708 1.57-.59 0 .055-.102.154-.226.22-.53.285-1.46 1.31-1.46 1.611 0 .027.25-.018.553-.099.305-.08.673-.147.82-.148.248-.001.264.029.232.447l-.034.447.237-.316c.395-.528 2.1-2.244 2.853-2.872.39-.325.697-.604.682-.619-.015-.015-.204.013-.42.061-.609.138-.461-.06.214-.285l.606-.202-.395-.075c-.676-.127-.433-.245.304-.146 1.468.197 2.966 1.002 4.336 2.33 1.051 1.02 1.635 1.917 2.014 3.097l.311.972-.5.766c-.659 1.007-.906 1.438-.848 1.48.051.037 1.375.473 1.485.489.037.005.088-.167.113-.382zm-9.664-.727l1.053-1.013-.422.068-.421.068.263-.211c.312-.251.258-.269-.224-.072-.195.08-.474.182-.619.225-.262.08-.262.079-.063-.145.438-.49.006-.183-.76.54-.446.42-1 .92-1.232 1.108-.366.298-.387.336-.158.289.145-.03.5-.012.79.039.29.05.575.098.634.105.058.007.58-.444 1.159-1zm-1.747-.388c.327-.297.423-.452.375-.606-.068-.212-.262-.287-.262-.1a.106.106 0 0 1-.106.105c-.058 0-.105-.118-.105-.263 0-.34-.14-.335-.414.014-.276.351-.28.5-.008.355.249-.134.273-.017.056.27-.167.221-.22.718-.068.66.05-.019.29-.215.532-.435zm15.769-.113c.443-.196.754-.388.69-.427-.135-.084-1.518.504-1.573.669-.055.163-.008.15.883-.242zm-15.231-1.64c-.06-.112-.11-.35-.11-.527 0-.344-.173-.437-.283-.151-.07.183.254.882.41.882.05 0 .043-.092-.017-.204zm.38-.272c.063-.164-.127-.473-.291-.473-.108 0-.126.459-.023.562.117.117.25.08.314-.089zm4.212-.492l.347-.262c.023-.018-.078-.126-.225-.242-.319-.25-.641-.998-.552-1.28.087-.272-.09-.25-.445.056-.252.216-.295.33-.289.768.009.626.309 1.19.634 1.19.124 0 .363-.104.53-.23zm-4.962-1.33c-.078-.078-.396.107-.447.26-.02.058.072.155.204.214.211.095.244.077.275-.15.018-.142.004-.288-.032-.324zm5.232.016c.106-.096.192-.231.192-.3 0-.208-.378-.484-.564-.413-.203.078-.234.574-.047.76.163.164.189.161.419-.047zm5.653-1.38c.377-.361.427-.476.583-1.344.094-.521.244-1.517.334-2.213a87.1 87.1 0 0 1 .262-1.89c.055-.345.082-.644.06-.666-.021-.021-.261.616-.533 1.417-.272.8-.52 1.527-.552 1.614-.033.089.062.047.22-.098.152-.14.277-.216.277-.167 0 .271-.39 1.314-.599 1.601-.28.385-.317.542-.083.347.433-.36.226.322-.27.887-.304.345-.318.554-.017.254.238-.239.14.15-.103.41-.378.402-.023.274.421-.152zm-4.133-2.467c-.191-.273-.227-.183-.055.138.063.117.139.188.17.158.03-.03-.022-.163-.115-.296zm-.64-1.149c.16-.31.156-.343-.125-.817-.208-.352-.303-.44-.33-.31-.047.23-.22.235-.532.016-.24-.167-.24-.166-.172.2.038.201.025.394-.028.427-.054.033-.339-.103-.634-.302l-.537-.362-.069.314c-.038.173-.11.314-.16.314-.137 0-.419-.442-.419-.656 0-.331-.148-.201-.599.525l-.44.71.322.034c.177.02.373-.016.435-.079.187-.186 1.744-.127 2.337.089.729.265.763.261.952-.103zm1.1 14.733l-.47-.237v-1.264l.79-.394c.435-.216.824-.394.865-.395.106-.002.61.881.61 1.07 0 .159-1.114 1.457-1.25 1.457-.042 0-.287-.106-.545-.237zm-1.154-.657c-.196-.202-.335-.386-.31-.41.025-.024.223-.117.44-.207l.395-.164v.574c0 .316-.038.574-.084.574-.047 0-.245-.165-.44-.367zm2.876-1.33c-.278-.42-.282-.448-.097-.558.107-.063.51-.316.894-.561.691-.441.962-.54.962-.354 0 .116-1.2 1.748-1.356 1.845-.061.038-.243-.13-.403-.373z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Fur Affinity" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Furaffinity extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7d, create_fragment$7d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Furrynetwork.svelte generated by Svelte v3.23.2 */

        function create_fragment$7e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.91 0C12.79 0 9.69 0 6.6.03c0 .05-.06.05-.09.08a10.5 10.5 0 0 0-3.66 2.57c-.84.87-1.52 1.9-2.06 3-.2.38-.38.79-.55 1.2-.02.08-.05.2-.13.25v6.22c.05.08.05.2.08.3a8.66 8.66 0 0 0 3.42 4.83c.03.03.05.09.11.06-.03-.03-.03-.06-.06-.08-.24-.36-.46-.69-.67-1.04a9.1 9.1 0 0 1-1.28-5.57 10.09 10.09 0 0 1 1.71-4.53 23.07 23.07 0 0 1 3.64-4.18A13.05 13.05 0 0 1 10.32.98 8.82 8.82 0 0 1 14.74.2c.7.06 1.39.17 2.07.27L17 .5c.08.03.13.03.21.03-.38-.16-.76-.33-1.14-.44-.05-.02-.1-.02-.16-.08zm-1.66.66c-.43.02-.84.05-1.27.13-.74.14-1.44.36-2.15.58a7.47 7.47 0 0 0-1.44.62c-.02 0-.08 0-.08.06h.05a28.12 28.12 0 0 1 3.05-.33c.51-.03 1.06 0 1.57.08.76.11 1.47.39 2.12.77a10.8 10.8 0 0 1 4.4 4.7 15.14 15.14 0 0 1 1.38 5.43c.06.65.06 1.34.03 2.02l-.08 1.14c-.03.33-.08.66-.14.99a6.1 6.1 0 0 1-.27 1.17 11.7 11.7 0 0 1-1.55 2.73c-.49.66-1.05 1.26-1.6 1.86-.08.08-.13.13-.19.22.06 0 .06-.03.08-.03a16.74 16.74 0 0 0 2.31-1.61 10.87 10.87 0 0 0 3.2-4.45l.17-.41h.03v5.87c0 .02 0-9.17.02-15 0 .02 0 .05-.02.07l-.03-.09a10.75 10.75 0 0 0-1.52-2.73 9.7 9.7 0 0 0-3.12-2.64A9.76 9.76 0 0 0 14.25.66zm9.63 6.54l.01-.02V1.75 7.2zm-13-3.33c-.4-.04-.8.09-1.19.42a2.33 2.33 0 0 0-.62.9c-.33.8-.38 1.58-.22 2.4.11.63.4 1.18.92 1.58.52.44 1.12.5 1.66.2.33-.2.57-.44.76-.77.33-.57.46-1.2.46-1.85 0-.3-.02-.58-.08-.88a2.8 2.8 0 0 0-.62-1.4 1.69 1.69 0 0 0-1.08-.6zM16 5.15a2.38 2.38 0 0 0-1.72.83c-.3.27-.46.63-.65.98a3.04 3.04 0 0 0-.38 1.53c0 .38.05.74.21 1.1.28.65.8 1 1.44 1 .47 0 .85-.16 1.2-.43a3.75 3.75 0 0 0 1.5-2.57c.05-.46 0-.93-.17-1.4-.16-.4-.4-.75-.82-.92a1.61 1.61 0 0 0-.6-.12zM6.38 7.56c-.44.03-.84.2-1.11.6-.36.5-.47 1.07-.5 1.64-.02.6.12 1.15.39 1.67.22.43.51.82.92 1.1.52.34 1.17.34 1.63.02.27-.2.46-.47.6-.77.27-.63.32-1.3.16-1.99a3.3 3.3 0 0 0-1.06-1.86c-.3-.24-.62-.4-1.03-.4zm11.86 2.64a1.84 1.84 0 0 0-.9.2 3.5 3.5 0 0 0-1.81 1.97 2.44 2.44 0 0 0-.11 1.58c.14.5.4.85.9.99.19.05.4.08.6.08.32 0 .54-.03.8-.17.53-.24.93-.6 1.28-1.03a2.9 2.9 0 0 0 .63-2.46 1.3 1.3 0 0 0-1.09-1.12 1.87 1.87 0 0 0-.3-.04zm-7.11 1.65c-.08 0-.22 0-.35.03a3.58 3.58 0 0 0-1.5.4c-.6.34-1.1.77-1.57 1.26a10.07 10.07 0 0 0-1.39 1.83c-.21.38-.35.8-.32 1.23.03.25.03.47.14.68.3.39.7.66 1.19.77.46.08.92.03 1.38-.03.52-.05 1-.1 1.5-.08.78.05 1.5.3 2.12.79.24.2.46.41.73.6.51.36 1.06.52 1.68.38.52-.1.87-.43.98-.95.1-.44.08-.85.02-1.29a9.46 9.46 0 0 0-.37-1.5 9.95 9.95 0 0 0-1-2.26c-.3-.5-.66-.93-1.15-1.26a3.68 3.68 0 0 0-2.09-.6zM.11 14.64v2.13c.1.13.16.3.22.46a12.8 12.8 0 0 0 2.41 4.18 9.6 9.6 0 0 0 3.83 2.56c.03 0 .05.03.08.03h8.01c.03-.03.03-.03.05-.03a8.68 8.68 0 0 0 1.99-.9 11.4 11.4 0 0 0 4.26-4.8c.43-1.01.65-2.08.7-3.2a.4.4 0 0 0 0-.24c-.02.02-.05.05-.05.08l-.22.7a8.29 8.29 0 0 1-1.87 3.2 8.08 8.08 0 0 1-2.85 1.91c-.95.39-1.95.55-2.99.6-.76.03-1.49 0-2.22-.05a24.34 24.34 0 0 1-3.1-.44 15.48 15.48 0 0 1-3.75-1.36 10.15 10.15 0 0 1-3.3-2.76 7.5 7.5 0 0 1-1.2-2.07z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Furry Network" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Furrynetwork extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7e, create_fragment$7e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/GTwoA.svelte generated by Svelte v3.23.2 */

        function create_fragment$7f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.841 9.4038c-.1146-.2186-.2734-.4214-.4674-.566-.2216-.165-.4891-.257-.7934-.257-.3036 0-.55.092-.7716.257-.1937.1446-.3528.3474-.4675.566-1.2735 2.4256-3.18 6.0153-3.18 6.0153h1.74l2.6791-5.1336 1.2595 2.4125H18.901l.6834 1.3053h1.9367l.7388 1.4158H24s-1.8855-3.5897-3.159-6.0153m.1177 5.1883l-.1803.4955-.1802-.4955H20.37l-.3065.8269h.1945l.226-.6348.2014.5533h.186l.2014-.5533.2258.6348h.1945l-.3062-.8269zm-2.9767.4134c0 .228.1855.4134.4132.4134h.4726v-.1728h-.4641a.241.241 0 0 1-.2406-.2406c0-.1325.108-.2403.2406-.2403h.4641v-.1731h-.4726a.4138.4138 0 0 0-.4132.4134m1.6399.2406h-.2179a.241.241 0 0 1-.2403-.2406.2408.2408 0 0 1 .2403-.2403h.2179a.2408.2408 0 0 1 .2405.2403.241.241 0 0 1-.2405.2406m.0082-.654h-.2343a.4139.4139 0 0 0-.4134.4134c0 .228.1854.4134.4134.4134h.2343a.4139.4139 0 0 0 .4134-.4134.4139.4139 0 0 0-.4134-.4134m-16.1414-.6336c-1.0707 0-1.939-.8682-1.939-1.939 0-1.071.8683-1.9392 1.939-1.9392l3.9364-.003V8.6206l-4.0289.0027C1.5206 8.6233 0 10.1437 0 12.0196c0 1.8756 1.5206 3.396 3.3962 3.396l4.0289.0032v-4.1276H3.0544v1.457h2.8462v1.2139zm7.0218-2.6672c-1.0726 0-1.9422.8697-1.9422 1.9423v2.1856h5.4506l.7731-1.457h-4.6993v-.5843c0-.3479.282-.6299.6301-.6302h3.0657c1.1399 0 2.064-.9242 2.064-2.064 0-1.1399-.9241-2.0638-2.064-2.0638l-3.648.0005c-.8047 0-1.457.6524-1.457 1.457l4.9988-.0003c.3314 0 .612.2598.6203.5912.0088.3424-.2656.623-.6054.623Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "G2A" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class GTwoA extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7f, create_fragment$7f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Garmin.svelte generated by Svelte v3.23.2 */

        function create_fragment$7g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.017 22.67H1.984c-.77 0-1.388-.383-1.694-1.002-.387-.61-.387-1.39 0-2.002L10.304 2.33c.385-.615 1.002-1 1.695-1 .77 0 1.386.385 1.69 1l10.02 17.336c.387.617.387 1.39 0 2.002-.31.695-.927 1.002-1.693 1.002z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Garmin" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Garmin extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7g, create_fragment$7g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gatling.svelte generated by Svelte v3.23.2 */

        function create_fragment$7h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.1361 17.306c.6633-.393 1.2406-.9211 1.6827-1.5598h.7738a.7129.7129 0 0 0 .7124-.7124.7129.7129 0 0 0-.7124-.7124h-.0614c.1474-.4545.2457-.9212.2702-1.4125h.7615a.7129.7129 0 0 0 .7124-.7124.7129.7129 0 0 0-.7124-.7124h-.786c-.0492-.4913-.172-.9703-.344-1.4125h.1474a.7129.7129 0 0 0 .7124-.7123.7129.7129 0 0 0-.7124-.7124h-.958c-.9826-1.2283-2.5302-2.0512-4.262-2.0512h-1.216c-.7615 0-1.4984.1597-2.1617.4545H14.26c2.9478 0 5.3674 2.4196 5.3674 5.3674 0 2.7267-2.0511 4.9867-4.6919 5.3306-.1597.0123-.3193.0246-.4913.0246H8.9171a6.5941 6.5941 0 0 0 2.2477-2.0266c.0368.0122.086.0122.1228.0122h4.8148a.7129.7129 0 0 0 .7123-.7123.7129.7129 0 0 0-.7123-.7124H11.914a6.8244 6.8244 0 0 0 .3685-1.4125h5.5148a.7129.7129 0 0 0 .7124-.7124.7129.7129 0 0 0-.7124-.7124H12.344c-.0368-.4913-.1351-.958-.2702-1.4125h4.0532a.7129.7129 0 0 0 .7124-.7124.7129.7129 0 0 0-.7124-.7123h-4.6796c-1.1423-1.9284-3.2549-3.2303-5.65-3.2303h-.4667C3.1443 5.4289 1.1914 6.522 0 8.18a5.8463 5.8463 0 0 1 4.434-2.0266c2.5302 0 4.6919 1.609 5.5025 3.8567H6.9642C6.3746 9.261 5.4534 8.782 4.434 8.782c-1.781.0246-3.218 1.4616-3.218 3.2426s1.4493 3.2303 3.2303 3.2303c1.0563 0 1.9897-.5036 2.5793-1.2897H3.955c0-1.4248 1.1545-2.567 2.567-2.567h3.7462c.0245.2088.0368.4176.0368.6264 0 3.2303-2.6284 5.8587-5.8587 5.8587-1.7073 0-3.2426-.737-4.3235-1.9038 1.2037 1.5722 3.0952 2.5916 5.22 2.5916h9.6296c4.9867 0 9.0276-.2947 9.0276-.6755 0-.2457-1.9775-.479-4.8639-.5896Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gatling" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gatling extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7h, create_fragment$7h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gatsby.svelte generated by Svelte v3.23.2 */

        function create_fragment$7i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.001.007C5.326.007.007 5.326.007 12S5.326 23.995 12 23.995s11.994-5.319 11.994-11.994S18.676.007 12.001.007zM2.614 12.105l9.283 9.283c-5.111 0-9.283-4.172-9.283-9.283zm11.473 9.074L2.823 9.915C3.76 5.743 7.516 2.614 12 2.614a9.476 9.476 0 0 1 7.614 3.86L18.259 7.62a7.657 7.657 0 0 0-6.362-3.337A7.555 7.555 0 0 0 4.7 9.393l9.804 9.805c2.4-.835 4.276-2.92 4.798-5.424h-4.068v-1.773h6.154c0 4.485-3.129 8.24-7.301 9.178z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gatsby" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gatsby extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7i, create_fragment$7i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gauges.svelte generated by Svelte v3.23.2 */

        function create_fragment$7j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.6 12.635l-1.125-.053c-.945-.033-1.197-.083-1.197-.435 0-.135.1-.318.303-.42.167.036.337.053.507.053 2.415 0 3.63-1.17 3.63-2.98 0-.3-.074-.57-.225-.735h.96v-2.01H12.6c-.472-.115-.892-.2-1.465-.2-2.543 0-3.804 1.474-3.804 3.18 0 1.07.506 1.84 1.26 2.242-.584.234-1.022.87-1.022 1.54 0 .586.322 1.054.81 1.287-.64.336-1.215 1.155-1.215 1.94 0 1.66 1.35 2.476 3.64 2.476 2.873 0 4.695-1.604 4.695-3.41h-.018c0-1.674-1.078-2.41-2.88-2.475zm-1.462-4.78c.895 0 1.342.48 1.342 1.193 0 .71-.5 1.14-1.325 1.14-.893 0-1.342-.445-1.342-1.173 0-.68.483-1.16 1.325-1.16zm2.008 7.554c0 .63-.612 1.113-1.82 1.113-.944 0-1.5-.405-1.5-1.002 0-.353.226-.708.6-.997.09.015.226 0 .33.015l1.35.032c.796.033 1.08.388 1.08.84h-.04zM17.637 10.854v.002c-.99 0-1.824.834-1.824 1.845 0 1.01.834 1.823 1.824 1.823 1.01 0 1.846-.814 1.846-1.824 0-1.01-.837-1.846-1.846-1.846zM12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm0 22.335C6.293 22.335 1.665 17.708 1.665 12 1.665 6.293 6.293 1.665 12 1.665c5.708 0 10.335 4.628 10.335 10.335 0 5.708-4.627 10.335-10.335 10.335z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gauges" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gauges extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7j, create_fragment$7j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Geeksforgeeks.svelte generated by Svelte v3.23.2 */

        function create_fragment$7k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.665 5.823c-.667 0-1.247.08-1.741.241-.495.161-.93.356-1.308.583l-.342-.566h-.666l-.075 4.132h.683a11.2 11.2 0 0 1 .433-1.341c.172-.445.394-.842.666-1.192a3.02 3.02 0 0 1 1-.833c.389-.21.855-.316 1.4-.316.594 0 1.124.122 1.59.366.467.24.873.597 1.217 1.075.339.461.6 1.036.783 1.724.184.69.275 1.458.275 2.308 0 .192-.006.38-.017.567H0v.608c.133.016.314.044.541.083.222.033.403.083.542.15a.748.748 0 0 1 .358.358c.067.15.1.328.1.534v.916c0 .666-.003 1.116-.008 1.35a22.14 22.14 0 0 1-.033.574 12.57 12.57 0 0 0 2.207.767 9.138 9.138 0 0 0 2.158.266c.755 0 1.483-.141 2.183-.425a5.46 5.46 0 0 0 1.832-1.208 5.815 5.815 0 0 0 1.258-1.924 6.09 6.09 0 0 0 .389-1.441h.946c.075.511.204.992.389 1.44.31.756.73 1.398 1.258 1.925a5.46 5.46 0 0 0 1.833 1.208c.7.284 1.427.425 2.182.425.705 0 1.425-.089 2.158-.266a12.57 12.57 0 0 0 2.208-.767c-.012-.15-.023-.341-.034-.575a66.751 66.751 0 0 1-.008-1.35v-.915c0-.206.033-.384.1-.534a.748.748 0 0 1 .358-.358c.14-.067.32-.117.542-.15.228-.039.408-.067.541-.083v-.608h-9.563a9.108 9.108 0 0 1-.017-.567c0-.85.092-1.619.275-2.308.183-.688.444-1.263.783-1.724.344-.478.75-.836 1.216-1.075.467-.244.997-.366 1.592-.366.544 0 1.01.105 1.399.316a3.02 3.02 0 0 1 1 .833c.272.35.494.747.666 1.192.172.439.317.886.433 1.341h.684l-.075-4.132h-.667l-.342.566a6.317 6.317 0 0 0-1.307-.583c-.495-.16-1.075-.241-1.742-.241a5.95 5.95 0 0 0-2.349.466 5.503 5.503 0 0 0-1.883 1.291 5.996 5.996 0 0 0-1.266 2.008 6.913 6.913 0 0 0-.442 2.5c0 .164.007.324.017.483h-.823c.01-.159.016-.32.016-.484 0-.9-.147-1.732-.441-2.499A5.996 5.996 0 0 0 9.897 7.58a5.503 5.503 0 0 0-1.882-1.29 5.953 5.953 0 0 0-2.35-.467zm-.483 7.356h4.32a7.714 7.714 0 0 1-.188.95 5.43 5.43 0 0 1-.792 1.716 3.76 3.76 0 0 1-1.291 1.166c-.517.283-1.103.425-1.758.425a3.77 3.77 0 0 1-1.333-.225c-.405-.15-.691-.308-.858-.475a5.749 5.749 0 0 1-.066-.875 36.8 36.8 0 0 1-.008-.75v-.65c0-.232.033-.438.1-.616a.648.648 0 0 1 .391-.4c.183-.083.433-.144.75-.183a9.87 9.87 0 0 1 .733-.083zm9.316 0h4.32c.178.01.422.039.733.083.317.039.567.1.75.183.2.084.33.217.392.4.066.178.1.384.1.617v.65c0 .205-.004.455-.009.75 0 .294-.022.585-.066.874-.167.167-.453.325-.858.475-.4.15-.845.225-1.333.225-.656 0-1.242-.142-1.758-.425a3.76 3.76 0 0 1-1.291-1.166 5.43 5.43 0 0 1-.792-1.717 7.712 7.712 0 0 1-.188-.95z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GeeksforGeeks" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Geeksforgeeks extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7k, create_fragment$7k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Generalmotors.svelte generated by Svelte v3.23.2 */

        function create_fragment$7l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 .002v23.996h24V.002zm8.254 5.836c2.293 0 2.293 1.788 2.293 2.412v.636H9.176V8.25c0-.345 0-1.177-.9-1.177-.89 0-.89.818-.89 1.177v4.415c0 .692.214 1.216.89 1.216.674 0 .9-.492.9-1.216v-1.427H8.39v-1.084h2.157v4.884l-1.326-.013v-.479c-.113.183-.647.662-1.414.661-1.296-.009-1.796-.905-1.796-2.272V8.25c0-.37 0-2.412 2.243-2.412zm3.703.186h2.028l.993 6.597 1.015-6.597h2.006v9.014h-1.337V8.25l-1.127 6.788H14.38L13.292 8.25v6.775h-1.335zM6.003 16.072H18.01v1.949H6.003Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "General Motors" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Generalmotors extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7l, create_fragment$7l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Genius.svelte generated by Svelte v3.23.2 */

        function create_fragment$7m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.897 1.235c-.36.001-.722.013-1.08.017-.218-.028-.371.225-.352.416-.035 1.012.023 2.025-.016 3.036-.037.841-.555 1.596-1.224 2.08-.5.345-1.118.435-1.671.663.121.78.434 1.556 1.057 2.07 1.189 1.053 3.224.86 4.17-.426.945-1.071.453-2.573.603-3.854.286-.48.937-.132 1.317-.49-.34-1.249-.81-2.529-1.725-3.472a11.125 11.125 0 00-1.08-.04zm-10.42.006C.53 2.992-.386 5.797.154 8.361c.384 2.052 1.682 3.893 3.45 4.997.134-.23.23-.476.09-.73-.95-2.814-.138-6.119 1.986-8.19.014-.986.043-1.976-.003-2.961l-.188-.214c-1.003-.051-2.008 0-3.01-.022zm17.88.055l-.205.356c.265.938.6 1.862.72 2.834.58 3.546-.402 7.313-2.614 10.14-1.816 2.353-4.441 4.074-7.334 4.773-2.66.66-5.514.45-8.064-.543-.068.079-.207.237-.275.318 2.664 2.629 6.543 3.969 10.259 3.498 3.075-.327 5.995-1.865 8.023-4.195 1.935-2.187 3.083-5.07 3.125-7.992.122-3.384-1.207-6.819-3.636-9.19z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Genius" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Genius extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7m, create_fragment$7m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gentoo.svelte generated by Svelte v3.23.2 */

        function create_fragment$7n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.956.097a7.252 7.252 0 0 0-1.25.115C4.397 1 1.365 4.73 1.107 7.186c-.125 1.205.525 2.108.883 2.506.969 1.076 2.9 1.898 4.141 2.58-1.795 1.53-2.618 2.277-3.429 3.128-1.214 1.274-2.067 2.676-2.07 3.68 0 .323-.053 1.355.368 2.17.158.306.608 1.327 1.964 2.092.867.49 2.102.67 3.31.497 3.742-.534 8.753-3.707 12.328-6.662 2.279-1.884 3.945-3.709 4.426-4.607.388-.725.431-2.026.206-2.843-.64-2.318-5.84-7.067-10.091-8.978A7.761 7.761 0 0 0 9.956.097zm-.007.067a7.341 7.341 0 0 1 3.317.749c3.433 1.687 9.233 6.43 9.661 8.814.53 2.948-9.852 10.929-16.167 12.174-2.45.481-4.539.613-5.492-1.975-.826-2.243.776-3.884 3.135-6.04.98-.895 1.76-1.564 2.935-2.556.065-.068-5.66-2.042-5.842-4.308C1.307 4.693 4.995.394 9.716.172c.078-.004.155-.007.233-.008zM9.838.68a5.602 5.602 0 0 0-.502.031c-2.319.244-2.763.543-4.864 2.132-.704.533-2 1.829-2.331 3.366-.127.586.023 1.091.444 1.446 1.35 1.135 3.61 2.056 5.465 2.947.543.26.184.733-.692 1.492-2.21 1.913-5.198 4.242-5.407 6.017-.098.836.188 1.972 1.203 2.554 1.186.679 3.647.236 5.291-.376 2.402-.895 5.557-2.869 8.062-4.809 2.604-2.018 5.026-4.58 5.146-4.998.147-.513.132-.988-.152-1.533-.445-.855-1.041-1.491-1.681-2.203-1.718-1.81-3.534-3.401-5.708-4.62-1.423-.798-2.69-1.47-4.274-1.446zm1.066 3.594c.542 0 1.167.171 1.838.496 1.675.81 3.395 2.937-.015 4.161-.927.333-3.869-.818-3.779-2.388.089-1.558.847-2.27 1.956-2.269zm.283 1.356c-.315-.002-.571.078-.689.26-.552.855-.3 1.461.211 1.848.19-.454 2.138.042 2.13.468.02-.01.04-.02.055-.032 1.69-1.272-.468-2.536-1.707-2.544z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gentoo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gentoo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7n, create_fragment$7n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Geocaching.svelte generated by Svelte v3.23.2 */

        function create_fragment$7o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.24.003v2.322c1.29.16 2.938.622 4.477 1.795l-1.186 1.608-.016-.015s-1.229-1.051-3.27-1.38v6.419h6.33c-.12-.914-.436-2.01-1.154-3.119l1.695-1.125s1.26 1.71 1.53 4.244H24V0H13.24v.003zm4.335 23.203l-.6.097-1.306-8.045.349-.056 6.555-.015-5.655 4.064.631 3.954h.026zm-4.337-9.967V24h10.758V13.241l-10.758-.004v.002zm-6.783 6.753l1.184-1.605h.019s1.163.987 3.103 1.342v-6.491H4.59c.109.933.42 2.076 1.174 3.235L4.08 17.592s-1.296-1.761-1.529-4.355H0v10.76h10.76v-2.231c-1.264-.179-2.835-.647-4.305-1.77v-.004zM4.977 1.968c-.169 0-.309.105-.309.234s.139.232.309.232.308-.104.31-.232c-.001-.129-.141-.234-.31-.234zM5.006 2.61c-.502 0-.906-.405-.906-.9s.404-.896.906-.896c.5 0 .905.404.905.899s-.405.897-.899.897h-.006zm-1.336.06l-1.037.524c-.094-.113-.165-.205-.24-.309l-1.31.489-.276-.434 2.063-.428.445-.094.729-.148-.619.231c.079.06.146.109.244.171l.001-.002zM1.676.765c.378.575.824 1.047 1.4 1.482l-1.005.18C1.695 1.89 1.365 1.368 1.064.728l.609.035.003.002zM0 0v10.759h2.407c-.102-.983-.21-3.805 1.481-6.146 0 0-.375-.359-.88-.951l-1.103.944-.477-.405 2.869-1.635-.338.286c.404.24.81.42 1.215.555 0 0 1.395-.78 2.774-2.655l.33.016c-.255.84-1.05 2.28-2.294 3.435 0 0 3.299 1.44 4.049 3.886-.21-.12-1.395-.375-1.979-.24-.105-.165-1.215-2.431-2.896-2.4 0 0-.375.45-.734 1.62-.314 1.035-.18 3.21-.136 3.72h6.45V0H0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Geocaching" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Geocaching extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7o, create_fragment$7o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gerrit.svelte generated by Svelte v3.23.2 */

        function create_fragment$7p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.648 2.678l-.245-.266c.004-.004.29-.268.413-.41.121-.146.342-.484.346-.486l.301.195c-.014.016-.234.359-.375.522-.137.165-.428.432-.44.445zm1.577 10.597c-.012-.004-.24-.154-.365-.221-.117-.059-.32-.146-.422-.191l.213-.612-.898-.444-.286.871c-.174.004-.713.053-1.51.389-.959.4-1.688 1.025-1.695 1.029l-.143.125.641.025.02-.016c.006-.006.721-.535 1.119-.705.088-.037.207-.074.33-.105-.209.105-.439.227-.6.32-.199.119-.57.381-.586.393l-.186.129.682.016.018-.01c.012-.008 1.164-.623 1.789-.76l.196-.047c.145-.037.246-.064.422-.064.156 0 .369.021.688.07.398.059.66.158.664.16l.24.094-.322-.436-.012-.008.003-.002zm-8.98-7.298h-.029l-1.006.916v.03c-.016.266.078.52.258.716.182.196.42.309.686.319h.043c.531 0 .965-.413.992-.94.023-.545-.399-1.01-.944-1.041zM5.2 7.808h-.041c-.117-.005-.23-.032-.33-.085.045.008.098.01.148.002.284-.035.481-.291.448-.575-.035-.279-.293-.48-.576-.442-.264.034-.457.267-.446.531-.031-.09-.045-.183-.045-.28l.912-.833c.446.042.79.431.768.882s-.391.8-.842.8H5.2zm9.329-3.725l-.293-.195-.41.265-.395-.285-.301.18.404.291-.416.27.297.18.4-.254.387.28.309-.169-.407-.296M24 19.525c-.213-.209-.418-.416-.629-.627-.48-.488-.957-.984-1.418-1.486-.547-.598-1.082-1.207-1.582-1.844-.225-.283-.441-.58-.646-.881-.254-.387-.469-.795-.668-1.215-.211-.445-.398-.9-.576-1.356.24.21.463.444.664.692.021-.215.041-.43.059-.648l.023-.322c0-.033.012-.066-.008-.096-.016-.029-.033-.051-.053-.075-.121-.149-.264-.282-.406-.413-.189-.181-.387-.36-.584-.533l-.18-.156c-.027-.027-.057-.051-.086-.074-.031-.03-.041-.096-.055-.136l-.154-.479c.607.285 1.109.741 1.578 1.215.004-.219.004-.436 0-.652 0-.114-.002-.229-.008-.346 0-.029.006-.1-.016-.127-.012-.02-.031-.036-.043-.055-.109-.117-.234-.217-.357-.314-.172-.143-.35-.277-.527-.408-.156-.117-.318-.232-.477-.345-.018-.016-.076-.039-.064-.06l.039-.08c.02-.035.014-.045.053-.029l.17.059c.406.156.779.368 1.143.608-.123-.45-.311-.885-.525-1.296-.389-.762-.893-1.468-1.463-2.105-.379-.426-.785-.824-1.219-1.193-.223-.19-.457-.369-.699-.533-.113-.074-.225-.149-.346-.217-.049-.03-.105-.056-.15-.094-.18-.144-.365-.284-.549-.429.238.098.469.21.689.338-.127-.194-.342-.331-.545-.436-.307-.159-.637-.276-.967-.378.113-.12.234-.228.346-.348.113-.12.223-.246.33-.372.127-.15.252-.3.375-.455l-1.156-.726-.48-.303c-.123.246-.277.476-.458.68-.18.203-.391.369-.6.539-.191.156-.379.316-.566.472-.047.04-.092.085-.145.12-.025.021-.096.004-.127.004H10.7c-.297.006-.596.029-.891.068-.058.007-.113.013-.175.008l-.178-.01c-.137-.008-.271-.016-.408-.016-.289-.004-.58 0-.871.025-.244.022-.489.055-.729.112-.238.056-.461.172-.66.312-.193.141-.387.32-.504.53s-.17.456-.213.689c-.135.013-.268.01-.4.016-.141.008-.277.021-.416.039-.27.037-.535.096-.795.18-.496.154-.945.405-1.336.75-.195.181-.377.38-.539.596-.02.025-.037.051-.063.068-.01.009-.027.016-.033.027-.015.027-.033.052-.051.076l-.134.212c-.168.285-.276.595-.383.906l-.045.123.033-.021c-.01.067-.02.135-.025.202l-.008.105v.053l-.066.013c-.135.026-.271.06-.4.101-.12.039-.233.086-.337.15-.105.066-.195.153-.285.239-.318.31-.562.698-.687 1.128-.1.348-.137.735-.059 1.092.021.09.049.188.107.262.074.09.199.126.313.095.131-.036.248-.124.371-.187l.314-.157c.455-.226.93-.446 1.438-.525.035-.005.1.067.131.091.049.037.1.074.148.104.109.069.221.129.334.181.262.114.541.174.818.231.502.105 1.014.171 1.529.18.207.004.416 0 .625-.018.225-.02.451-.049.678-.051.25-.005.496.025.74.055.254.031.51.068.764.105.518.079 1.031.169 1.543.279-.115.18-.227.362-.338.545-.008.013-.072 0-.088 0-.041-.002-.086-.002-.127 0-.074 0-.15.008-.225.019-.211.03-.416.083-.615.156-.49.181-.938.483-1.326.833-.221.195-.43.408-.609.641-.049.064-.094.129-.139.193.105-.023.211-.045.318-.07.061-.016.117-.027.176-.039.021-.008.029-.016.049-.027.219-.203.451-.393.695-.563.111-.08.225-.154.348-.215.166-.083.354-.131.533-.174-.33.18-.678.35-.977.584-.172.139-.328.291-.49.439l.654-.104c.01 0 .014-.004.023-.01l.17-.094c.113-.064.23-.125.346-.186.24-.123.482-.24.732-.34.236-.094.48-.178.732-.225.221-.046.428-.052.648 0 .342.074.67.232.969.414.021.014.035.033.055.014.016-.014.098-.074.09-.092l-.18-.334c-.016-.029-.023-.049-.051-.066l-.131-.077c-.176-.104-.348-.21-.51-.331-.037-.023-.078-.039-.082-.089-.004-.046.014-.093.029-.136.033-.09.08-.169.131-.248.033-.058.072-.111.109-.166.014-.018.01-.021.031-.014l.119.034c.236.077.469.159.711.22.27.068.545.123.82.176l.048.01c-.056-.03-.091-.09-.132-.136-.023-.03-.035-.05-.074-.06l-.105-.02c-.074-.016-.148-.03-.225-.049-.262-.057-.525-.119-.777-.209-.375-.13-.758-.232-1.145-.322-.486-.107-.977-.194-1.465-.275-.25-.041-.498-.074-.75-.109-.246-.034-.496-.07-.746-.087-.539-.034-1.074.087-1.615.081-.365-.004-.734-.055-1.096-.105l-.068-.009c.252-.093.5-.188.75-.285.236-.095.471-.192.705-.289.127-.052.25-.105.373-.157.113-.051.225-.1.328-.17.408-.279.676-.727.975-1.109.273-.361.586-.7.99-.908.129-.066.262-.117.4-.156-.283-.439-.549-.93-.623-1.455.029.012.061.025.094.037.035.012.064.016.072.045l.029.135c.026.091.053.176.086.262.072.191.16.375.26.551.219.396.484.766.766 1.12.539.686 1.145 1.305 1.736 1.941.145.158.275.324.41.492.15.187.303.375.457.561.121.141.234.285.356.426l.094.112c.016.018.037.026.061.036.604.3 1.213.6 1.822.895.434.209.869.42 1.309.623.236.109.471.219.711.32.029.014.066.029.098.039.016.01.029.016.047.023l.016.049c.027.072.051.145.076.217.049.141.098.279.148.416.33.912.695 1.814 1.145 2.676.346.656.715 1.301 1.09 1.939.4.68.811 1.354 1.225 2.025.332.535.666 1.072 1.008 1.605.146.227.289.459.439.688l.063.094.775-1.141.191-.283c.008-.006.082-.102.076-.109l-.156-.24c-.291-.451-.584-.898-.871-1.35l-.828-1.283-.105-.166.656.799 1.115 1.35c.121.146.236.289.354.438.219-.402.439-.801.662-1.201.086-.164.176-.33.266-.492M12.13 1.915c.309-.246.563-.563.757-.906l1.178.743.18.112c-.246.3-.496.604-.775.873-.035.034-.074.069-.107.104-.021.025-.047.051-.07.075l-.033.038c-.023-.007-.045-.016-.068-.02-.146-.041-.289-.08-.436-.111-.292-.066-.589-.117-.886-.152-.191-.021-.385-.04-.578-.058.275-.234.557-.467.838-.698m-1.754 1.37c.232-.096.482-.15.73-.191.49-.082.994-.094 1.489-.04.354.038.701.108 1.041.21l-.141.115-.225-.061c-.141-.029-.281-.06-.422-.082-.246-.037-.497-.06-.749-.065-.461-.008-.926.042-1.371.159-.301.078-.604.188-.879.332-.286.154-.555.346-.78.582-.134.137-.257.289-.359.455-.057.09-.105.18-.15.275-.024.047-.043.096-.061.144l-.029.075c-.004.015-.008.026-.012.038L8.39 5.22l-.082-.011c.234-.719.763-1.286 1.418-1.649.207-.114.426-.218.65-.279m-3.93.374c.266-.381.686-.649 1.139-.743.502-.101 1.016-.119 1.525-.107-.525.131-1.05.326-1.488.652-.34.075-.664.24-.934.459-.09.071-.17.15-.246.236-.035.037-.066.075-.097.116-.014.015-.027.03-.037.049h-.084c.023-.135.055-.27.098-.4.029-.09.064-.18.119-.26m.882.056c-.145.143-.27.303-.391.469-.047.069-.098.153-.18.191-.085.039-.194-.005-.28-.031.224-.279.521-.494.851-.629M2.308 6.585c.08-.16.182-.315.275-.465.016-.027.053-.046.074-.063.049-.034.096-.069.143-.106.309-.225.621-.446.939-.656.166-.107.33-.213.502-.307.182-.101.369-.18.565-.244.347-.112.707-.189 1.068-.244.174-.025.361-.057.531-.015-.33.188-.658.375-.99.558-.342.191-.689.367-1.035.552-.332.18-.66.375-.981.577-.336.206-.67.419-1.002.629-.08.051-.16.105-.24.155.045-.125.09-.251.151-.371m1.009 3.056c-.029.056-.134.042-.187.042-.094 0-.186 0-.279.006-.258.015-.51.06-.758.138-.475.147-.922.375-1.365.604-.1.055-.203.135-.316.162-.061.015-.131-.008-.166-.063-.035-.061-.053-.131-.064-.198-.027-.12-.035-.245-.033-.368 0-.33.076-.66.215-.96.096-.21.221-.401.371-.574.15-.175.326-.351.539-.45.355-.162.775-.213 1.164-.235.072-.005.145-.007.217-.007.1 0 .217-.016.311.019.074.027.121.105.15.173.045.105.074.225.1.336.061.26.123.525.145.791.01.119.016.239.004.359-.009.073-.014.156-.05.223m2.829-1.973c-.194.123-.403.218-.616.298-.215.077-.436.144-.66.181-.097.013-.195.025-.293.021-.101-.003-.193-.036-.293-.067-.195-.063-.393-.13-.57-.233-.064-.039-.135-.084-.174-.15-.029-.052-.029-.116-.023-.174.012-.231.094-.458.203-.66.187-.343.482-.612.84-.775.879-.396 1.865-.029 2.611.49l.08.061c-.154.165-.311.321-.473.477-.199.189-.404.381-.634.531M8.31 5.739c-.475-.203-.926-.458-1.356-.738.449.188.934.3 1.414.37.258.037.521.072.781.08.281.008.564-.021.84-.075.545-.103 1.068-.305 1.566-.551.494-.245.964-.537 1.413-.859.217-.155.43-.315.633-.487.021-.016.174-.161.184-.154l.041.031.537.416c.328.254.658.51.988.762-.906.326-1.826.629-2.752.904-.519.156-1.038.301-1.565.42-.412.098-.834.189-1.256.21-.507.022-1.006-.135-1.47-.33m8.85 3.942c.076.021.145.045.215.067l.094.033c.016.006.031.015.045.02l.021.06c.045.146.09.289.139.432-.15-.127-.301-.254-.451-.379l-.09-.074c-.021-.016-.045-.021-.029-.046l.059-.114m-.671 1.444l.035-.063.027-.046c.012-.018.008-.022.029-.012.129.054.258.111.385.17.24.11.475.23.703.364.107.065.217.135.322.205l.15.105.074.057c.033.027.041.063.057.102.104.282.219.564.338.844.078.189.162.379.248.566-.293-.371-.621-.715-.957-1.045-.346-.346-.705-.671-1.078-.981l-.323-.264m3.746 6.42l-.121.09.008.016.063.094.271.42.904 1.402c.311.48.621.963.932 1.445l.309.48.084.133c.004.004.029.041.029.045-.26.385-.523.77-.783 1.154-.027.037-.051.076-.074.111-.24-.373-.479-.744-.715-1.117-.4-.635-.795-1.277-1.184-1.916-.434-.709-.855-1.418-1.264-2.141-.383-.674-.75-1.361-1.059-2.076-.301-.697-.563-1.408-.811-2.121.486.193.98.367 1.48.521.145.045.289.09.436.127l.063.018c.008 0 .014-.039.018-.049.018-.064.031-.129.045-.195.031-.125.051-.254.074-.381.205.428.436.844.701 1.236.215.314.445.621.686.92.521.656 1.074 1.283 1.643 1.898.463.494.934.984 1.408 1.465l.389.389c.006.006.039.031.037.041l-.031.053-.148.275-.588 1.068c-.18-.219-.361-.436-.541-.658l-1.125-1.361c-.314-.387-.637-.773-.953-1.16l-.186-.225");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gerrit" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gerrit extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7p, create_fragment$7p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ghost.svelte generated by Svelte v3.23.2 */

        function create_fragment$7q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.604 19.199H.008V24h9.597v-4.801zm14.39 0h-9.591V24h9.591v-4.801zm.003-9.599H0v4.8h23.997V9.6zM24 0h-4.801v4.801H24V0zm-9.596 0H.008v4.801h14.396V0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ghost" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ghost extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7q, create_fragment$7q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ghostery.svelte generated by Svelte v3.23.2 */

        function create_fragment$7r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.058 19.93c-1.01-2.29-1.185-4.228-1.212-4.99V8.67C20.846 3.882 16.886 0 12 0S3.15 3.882 3.15 8.671v6.36c-.037.82-.236 2.7-1.207 4.899-1.306 2.955-.226 2.603.742 2.36.968-.242 3.13-1.192 3.805-.022.675 1.17 1.238 2.184 2.814 1.523 1.576-.663 2.318-.883 2.543-.883h.306c.225 0 .968.22 2.543.882 1.576.662 2.14-.353 2.814-1.522.676-1.17 2.837-.22 3.805.022.968.243 2.048.595.743-2.36M9.268 4.728c.953 0 1.725 1.198 1.725 2.676 0 1.478-.772 2.677-1.725 2.677-.953 0-1.726-1.198-1.726-2.677 0-1.478.773-2.676 1.726-2.676m2.73 10.697c-2.1 0-3.867-2.025-4.4-4.279 1.029 1.387 2.617 2.277 4.4 2.277 1.784 0 3.372-.89 4.401-2.277-.533 2.254-2.3 4.28-4.4 4.28m2.73-5.345c-.953 0-1.725-1.198-1.725-2.677 0-1.478.772-2.676 1.726-2.676.953 0 1.725 1.198 1.725 2.676 0 1.478-.772 2.677-1.725 2.677Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ghostery" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ghostery extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7r, create_fragment$7r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gimp.svelte generated by Svelte v3.23.2 */

        function create_fragment$7s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.58 2.4c-.963 1.206-2.55 6.476-11.46 6.71-4.253.112-6.36-4.731-6.36-4.731l-.334 7.771c-.831-1.042-1.945-1.705-3.014-1.74a2.23 2.23 0 00-1.441.441c-.663.502-.977 1.345-.97 2.28.006.934.33 1.965.97 2.896.64.931 1.476 1.587 2.324 1.89.456.164.916.214 1.35.157C10.674 22.882 26.797 26.557 23.58 2.4zM8.404 8.85c1.265 0 2.314.94 2.614 2.196.484-1.19 1.614-2.027 2.931-2.027 1.758 0 3.178 1.49 3.178 3.322 0 1.833-1.42 3.334-3.178 3.334-1.531 0-2.81-1.14-3.115-2.644-.437.978-1.353 1.666-2.43 1.666-.915 0-1.716-.497-2.203-1.246a5.726 5.726 0 00-.289-.567 3.118 3.118 0 01-.205-1.113c0-1.604 1.198-2.922 2.697-2.922zm0 .36c-1.284 0-2.33 1.138-2.33 2.561s1.046 2.559 2.33 2.559c.214 0 .417-.043.614-.102a1.676 1.759 0 01-1.614-1.756 1.676 1.759 0 011.676-1.758 1.676 1.759 0 011.635 1.373c.012-.105.029-.207.029-.316 0-1.423-1.056-2.56-2.34-2.56zm5.545.131c-1.576 0-2.86 1.334-2.86 3 0 1.667 1.284 3.008 2.86 3.008.591 0 1.14-.188 1.596-.512a2.146 2.252 0 01-.858.19 2.146 2.252 0 01-2.144-2.252 2.146 2.252 0 012.144-2.252 2.146 2.252 0 012.112 1.845l.003-.026c0-1.667-1.277-3-2.853-3zm-11.545 1.39c1.038.035 2.206.77 3.008 1.936.606.882.914 1.866.92 2.727.006.861-.282 1.589-.846 2.016-.564.426-1.31.48-2.082.205-.772-.277-1.564-.883-2.17-1.764-.605-.881-.911-1.867-.917-2.728-.007-.862.282-1.589.845-2.016a1.92 1.92 0 011.242-.375zm11.69.245a1.006 1.056 0 00-1.006 1.059 1.006 1.056 0 001.006 1.054 1.006 1.056 0 001.005-1.054 1.006 1.056 0 00-1.005-1.059zm-5.645.22a.662.695 0 00-.662.694.662.695 0 00.662.697.662.695 0 00.662-.697.662.695 0 00-.662-.693zm-6.414.223a1.118 1.408 0 00-1.119 1.407 1.118 1.408 0 001.12 1.408 1.118 1.408 0 001.116-1.408 1.118 1.408 0 00-1.117-1.407zm14.176 3.998s1.487.435 2.011 1.145c.523.708.194 1.145.057 2.05-.202-.528-.407-.942-.621-1.183-.81 1.259-3.104 1.858-6.18 1.559 1.38-.072 2.451-.288 3.301-.584-1.4.09-3.214-.27-5.365-1.067 4.262.895 6.433.063 7.703-.966-.335-.455-.906-.954-.906-.954z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GIMP" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gimp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7s, create_fragment$7s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Giphy.svelte generated by Svelte v3.23.2 */

        function create_fragment$7t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.666 0v24h18.666V8.668l-2.666 2.664v10H5.332V2.668H10L12.666 0h-10zm10.666 0v8h8V5.332h-2.666V2.668H16V0h-2.668z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GIPHY" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Giphy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7t, create_fragment$7t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Git.svelte generated by Svelte v3.23.2 */

        function create_fragment$7u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.546 10.93L13.067.452c-.604-.603-1.582-.603-2.188 0L8.708 2.627l2.76 2.76c.645-.215 1.379-.07 1.889.441.516.515.658 1.258.438 1.9l2.658 2.66c.645-.223 1.387-.078 1.9.435.721.72.721 1.884 0 2.604-.719.719-1.881.719-2.6 0-.539-.541-.674-1.337-.404-1.996L12.86 8.955v6.525c.176.086.342.203.488.348.713.721.713 1.883 0 2.6-.719.721-1.889.721-2.609 0-.719-.719-.719-1.879 0-2.598.182-.18.387-.316.605-.406V8.835c-.217-.091-.424-.222-.6-.401-.545-.545-.676-1.342-.396-2.009L7.636 3.7.45 10.881c-.6.605-.6 1.584 0 2.189l10.48 10.477c.604.604 1.582.604 2.186 0l10.43-10.43c.605-.603.605-1.582 0-2.187");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Git" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Git extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7u, create_fragment$7u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gitea.svelte generated by Svelte v3.23.2 */

        function create_fragment$7v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.186 5.421C2.341 5.417-.13 6.59.006 9.531c.213 4.594 4.92 5.02 6.801 5.057.206.862 2.42 3.834 4.059 3.99h7.18c4.306-.286 7.53-13.022 5.14-13.07-3.953.186-6.296.28-8.305.296v3.975l-.626-.277-.004-3.696c-2.306-.001-4.336-.108-8.189-.298-.482-.003-1.154-.085-1.876-.087zm.261 1.625h.22c.262 2.355.688 3.732 1.55 5.836-2.2-.26-4.072-.899-4.416-3.285-.178-1.235.422-2.524 2.646-2.552zm8.557 2.315c.15.002.303.03.447.096l.749.323-.537.979a.672.597 0 0 0-.241.038.672.597 0 0 0-.405.764.672.597 0 0 0 .112.174l-.926 1.686a.672.597 0 0 0-.222.038.672.597 0 0 0-.405.764.672.597 0 0 0 .86.36.672.597 0 0 0 .404-.765.672.597 0 0 0-.158-.22l.902-1.642a.672.597 0 0 0 .293-.03.672.597 0 0 0 .213-.112c.348.146.633.265.838.366.308.152.417.253.45.365.033.11-.003.322-.177.694-.13.277-.345.67-.599 1.133a.672.597 0 0 0-.251.038.672.597 0 0 0-.405.764.672.597 0 0 0 .86.36.672.597 0 0 0 .404-.764.672.597 0 0 0-.137-.202c.251-.458.467-.852.606-1.148.188-.402.286-.701.2-.99-.086-.289-.35-.477-.7-.65-.23-.113-.517-.233-.86-.377a.672.597 0 0 0-.038-.239.672.597 0 0 0-.145-.209l.528-.963 2.924 1.263c.528.229.746.79.49 1.26l-2.01 3.68c-.257.469-.888.663-1.416.435l-4.137-1.788c-.528-.228-.747-.79-.49-1.26l2.01-3.679c.176-.323.53-.515.905-.53h.064z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gitea" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gitea extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7v, create_fragment$7v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Github.svelte generated by Svelte v3.23.2 */

        function create_fragment$7w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GitHub" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Github extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7w, create_fragment$7w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Githubactions.svelte generated by Svelte v3.23.2 */

        function create_fragment$7x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.984 13.836a.5.5 0 0 1-.353-.146l-.745-.743a.5.5 0 1 1 .706-.708l.392.391 1.181-1.18a.5.5 0 0 1 .708.707l-1.535 1.533a.504.504 0 0 1-.354.146zm9.353-.147l1.534-1.532a.5.5 0 0 0-.707-.707l-1.181 1.18-.392-.391a.5.5 0 1 0-.706.708l.746.743a.497.497 0 0 0 .706-.001zM4.527 7.452l2.557-1.585A1 1 0 0 0 7.09 4.17L4.533 2.56A1 1 0 0 0 3 3.406v3.196a1.001 1.001 0 0 0 1.527.85zm2.03-2.436L4 6.602V3.406l2.557 1.61zM24 12.5c0 1.93-1.57 3.5-3.5 3.5a3.503 3.503 0 0 1-3.46-3h-2.08a3.503 3.503 0 0 1-3.46 3 3.502 3.502 0 0 1-3.46-3h-.558c-.972 0-1.85-.399-2.482-1.042V17c0 1.654 1.346 3 3 3h.04c.244-1.693 1.7-3 3.46-3 1.93 0 3.5 1.57 3.5 3.5S13.43 24 11.5 24a3.502 3.502 0 0 1-3.46-3H8c-2.206 0-4-1.794-4-4V9.899A5.008 5.008 0 0 1 0 5c0-2.757 2.243-5 5-5s5 2.243 5 5a5.005 5.005 0 0 1-4.952 4.998A2.482 2.482 0 0 0 7.482 12h.558c.244-1.693 1.7-3 3.46-3a3.502 3.502 0 0 1 3.46 3h2.08a3.503 3.503 0 0 1 3.46-3c1.93 0 3.5 1.57 3.5 3.5zm-15 8c0 1.378 1.122 2.5 2.5 2.5s2.5-1.122 2.5-2.5-1.122-2.5-2.5-2.5S9 19.122 9 20.5zM5 9c2.206 0 4-1.794 4-4S7.206 1 5 1 1 2.794 1 5s1.794 4 4 4zm9 3.5c0-1.378-1.122-2.5-2.5-2.5S9 11.122 9 12.5s1.122 2.5 2.5 2.5 2.5-1.122 2.5-2.5zm9 0c0-1.378-1.122-2.5-2.5-2.5S18 11.122 18 12.5s1.122 2.5 2.5 2.5 2.5-1.122 2.5-2.5zm-13 8a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0zm2 0a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0zm12 0c0 1.93-1.57 3.5-3.5 3.5a3.503 3.503 0 0 1-3.46-3.002c-.007.001-.013.005-.021.005l-.506.017h-.017a.5.5 0 0 1-.016-.999l.506-.017c.018-.002.035.006.052.007A3.503 3.503 0 0 1 20.5 17c1.93 0 3.5 1.57 3.5 3.5zm-1 0c0-1.378-1.122-2.5-2.5-2.5S18 19.122 18 20.5s1.122 2.5 2.5 2.5 2.5-1.122 2.5-2.5z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GitHub Actions" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Githubactions extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7x, create_fragment$7x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gitkraken.svelte generated by Svelte v3.23.2 */

        function create_fragment$7y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.225 6.252a.478.478 0 00-.923.171c0 .053.013.119.026.171 2.15 5.71-.751 12.077-6.46 14.226a10.9 10.9 0 01-2.426.607v-5.155c.33-.066.646-.158.962-.264v4.338c5.445-1.332 8.794-6.817 7.463-12.262a10.147 10.147 0 00-4.958-6.487.472.472 0 00-.646.185.472.472 0 00.185.646c4.443 2.452 6.051 8.056 3.6 12.499a9.13 9.13 0 01-4.681 4.1v-3.836a1.472 1.472 0 001.028-1.398c0-.527-.264-1.002-.725-1.266.343-3.309 1.859-2.439 1.859-3.493v-.62c0-1.582-3.665-6.737-5.38-6.856h-.316c-1.714.119-5.379 5.274-5.379 6.856v.62c0 1.054 1.503.184 1.859 3.493a1.461 1.461 0 00-.725 1.266c0 .646.422 1.2 1.028 1.398v3.836C3.91 17.168 1.59 11.83 3.448 7.11a9.24 9.24 0 014.1-4.68.479.479 0 00.185-.66.487.487 0 00-.422-.237.444.444 0 00-.224.065 10.142 10.142 0 00-3.982 13.791 10.147 10.147 0 006.487 4.958V16.02c.316.106.633.198.962.264v5.155C4.503 20.636.257 15.085 1.062 9.034a10.9 10.9 0 01.606-2.426.489.489 0 00-.277-.62.494.494 0 00-.62.277c-2.333 6.21.805 13.131 7.015 15.452 1.2.448 2.452.699 3.73.751v-6.09c.172.012.489.012.489.012s.316 0 .488-.013v6.078c6.631-.277 11.773-5.867 11.496-12.499a12.458 12.458 0 00-.764-3.704zm-9.019 6.842a.995.995 0 011.398 0 .995.995 0 010 1.398.995.995 0 01-1.398 0 .988.988 0 010-1.398zm-4.43 1.398a.979.979 0 01-1.384 0 .995.995 0 010-1.398.995.995 0 011.398 0 .983.983 0 01-.013 1.398z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GitKraken" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gitkraken extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7y, create_fragment$7y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gitlab.svelte generated by Svelte v3.23.2 */

        function create_fragment$7z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.845.904c-.435 0-.82.28-.955.692C2.639 5.449 1.246 9.728.07 13.335a1.437 1.437 0 00.522 1.607l11.071 8.045c.2.145.472.144.67-.004l11.073-8.04a1.436 1.436 0 00.522-1.61c-1.285-3.942-2.683-8.256-3.817-11.746a1.004 1.004 0 00-.957-.684.987.987 0 00-.949.69l-2.405 7.408H8.203l-2.41-7.408a.987.987 0 00-.942-.69h-.006zm-.006 1.42l2.173 6.678H2.675zm14.326 0l2.168 6.678h-4.341zm-10.593 7.81h6.862c-1.142 3.52-2.288 7.04-3.434 10.559L8.572 10.135zm-5.514.005h4.321l3.086 9.5zm13.567 0h4.325c-2.467 3.17-4.95 6.328-7.411 9.502 1.028-3.167 2.059-6.334 3.086-9.502zM2.1 10.762l6.977 8.947-7.817-5.682a.305.305 0 01-.112-.341zm19.798 0l.952 2.922a.305.305 0 01-.11.341v.002l-7.82 5.68.026-.035z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GitLab" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gitlab extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7z, create_fragment$7z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gitpod.svelte generated by Svelte v3.23.2 */

        function create_fragment$7A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.6 17V7.6L1.5 6.4v11.8L11.7 24v-2.4z M11.7 19.2v-6.9l-6-3.5v7zM12 2.4l8.1 4.7 2.1-1.2L12 0 1.8 5.9l2.1 1.2z M18 8.3l-6-3.5-6 3.5 6 3.5zM12.3 19.3l6-3.5v-2.4l-4.1 2.4v-2.4l6.2-3.6V17l-8.1 4.6V24l10.2-5.8V6.4l-10.2 5.9zM12 12.1z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gitpod" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gitpod extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7A, create_fragment$7A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gitter.svelte generated by Svelte v3.23.2 */

        function create_fragment$7B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.501 4.001H10.5V24H8.501V4.001zm6.999 0V24h-2V4.001h2zM3.5 0h2.001v15H3.5V0zm15 4.001h2V15h-2V4.001z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gitter" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gitter extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7B, create_fragment$7B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Glassdoor.svelte generated by Svelte v3.23.2 */

        function create_fragment$7C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.144 20.572H3.43C3.43 22.465 4.963 24 6.856 24h10.286c1.893 0 3.428-1.535 3.428-3.428V6.492c0-.07-.054-.125-.124-.125h-3.18c-.067 0-.123.056-.123.126v14.08zm0-20.572c1.892 0 3.427 1.535 3.427 3.43H6.858v14.078c0 .068-.056.125-.125.125H3.554c-.07 0-.125-.057-.125-.125V3.428C3.43 1.536 4.963 0 6.856 0h10.287");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Glassdoor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Glassdoor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7C, create_fragment$7C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Glitch.svelte generated by Svelte v3.23.2 */

        function create_fragment$7D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.8 12.57c-.29-.15-3.4 1.4-4.07 1.27-1.68-.3-1.37-.5-3.63-1.02-.9-.2-.77-.08-.97-.23-.13-.1-.26-.12-.45-.3 3-.54 4.52-1.27 5.05-1.38.57-.11 3.87 1.47 4.07 1.1.2-.37-.72-1.18-.3-2.27.44-1.1-.52-1.82.01-2.69.54-.87.43-2.2.3-2.27-.3-.15-3.4 1.4-4.08 1.27-1.68-.31-1.37-.51-3.63-1.02-.9-.2-.77-.09-.97-.24-.2-.15-.39-.1-.78-.73s-4.88-1.6-5.18-1.6c-.62 0-1.78 1.6-1.78 1.6s-.45 0-1.8.07-2.53.67-4.12 1.92C-.13 7.3.1 8.56.1 8.56s1.48.5 1.48.78c0 .27-1.3.6-1.3.6C1.12 11 3.72 12 4.38 12h.52c-1.08.21-2.12.8-3.44 1.83C-.13 15.1.1 16.36.1 16.36s1.48.5 1.48.77-1.3.6-1.3.6c.84 1.07 3.44 2.07 4.1 2.07.63 0 1.07.02 1.87-.13.06.13.68 1.45 1.95 1.72 1.34.29 2.08.06 2.08.06s.07-.59-.24-1.18c1.16.12 2.48.15 3.77-.05 3.57-.54 5.34-1.4 5.92-1.51.57-.12 3.87 1.46 4.07 1.1.2-.38-.72-1.19-.29-2.28.43-1.1-.53-1.81 0-2.69.54-.87.43-2.2.3-2.27zM3.46 8.87a.95.95 0 0 1-.22-.03H3.2a2.6 2.6 0 0 1-.06-.03L3.1 8.8l-.06-.03H3a.57.57 0 0 1-.05-.03L2.9 8.7l-.05-.03-.04-.03a1.1 1.1 0 0 1-.05-.04l-.03-.03a1 1 0 0 1-.05-.06l-.02-.02a1.95 1.95 0 0 1-.07-.08l-.02-.02a1.15 1.15 0 0 1-.04-.08l-.02-.03-.04-.06a.78.78 0 0 0-.02-.05l-.02-.06-.02-.04A1.66 1.66 0 0 1 2.4 8l-.01-.05a.75.75 0 0 1-.02-.06v-.05c.07.43.42.76.83.76.47 0 .86-.43.86-.97s-.38-.98-.86-.98c-.47 0-.85.43-.86.96 0-.7.5-1.27 1.12-1.27s1.11.56 1.11 1.26-.5 1.27-1.11 1.27zm-.75-.95c0-.15.1-.27.24-.27s.23.12.23.27-.1.26-.23.26-.24-.12-.24-.26zm.75 8.74a.95.95 0 0 1-.11 0l-.04-.01a.88.88 0 0 1-.07-.01l-.04-.01-.06-.02-.04-.02a.57.57 0 0 1-.06-.02L3 16.55a.73.73 0 0 1-.05-.03l-.04-.02-.05-.04-.04-.03a.73.73 0 0 1-.05-.04l-.03-.03a1 1 0 0 1-.07-.07 1.44 1.44 0 0 1-.07-.09l-.02-.02a1.13 1.13 0 0 1-.04-.07l-.02-.04a1.3 1.3 0 0 1-.04-.06l-.02-.04-.02-.07-.02-.04a5.06 5.06 0 0 1-.02-.07l-.01-.04a.75.75 0 0 1-.02-.07v-.05c.07.43.42.76.83.76.47 0 .86-.43.86-.97s-.38-.97-.86-.97c-.47 0-.85.42-.86.95 0-.7.5-1.27 1.12-1.27s1.11.57 1.11 1.26-.5 1.27-1.11 1.27zm-.75-.95c0-.14.1-.26.24-.26s.23.12.23.26-.1.26-.23.26-.24-.11-.24-.26zm5.08-5.5v-.03l.03-.06.06-.22a18.71 18.71 0 0 0 .36-1.33c.12-.53.17-.96.15-1.2a3.04 3.04 0 0 0-.04-.27 5.92 5.92 0 0 0-.2-.79 8.05 8.05 0 0 0-.19-.5l-.06-.13-.02-.05c-.09-.2.04-.43.24-.42h.14l.4.03 1.2.06.38.02.86.06a21.12 21.12 0 0 1 7.93 2.12l.67.3c.13.06.2.23.14.38-.05.14-.2.22-.33.16l-.67-.3a20.72 20.72 0 0 0-7.77-2.09l-.86-.05-.38-.02-1.2-.07h-.12a8.69 8.69 0 0 1 .34 1.17l.05.32c.03.34-.03.81-.17 1.41l-.15.62a21.23 21.23 0 0 1-.29.99l-.02.06a.16.16 0 0 0 0 .03c-.05.14-.2.22-.33.16-.13-.05-.2-.22-.15-.37zm-1.5-4.76a.23.23 0 0 1 .36.02 4.68 4.68 0 0 1 .42.62c.22.4.37.8.41 1.21.02.23 0 .49-.04.77a6.2 6.2 0 0 1-.2.83 8.29 8.29 0 0 1-.25.69c-.06.14-.21.2-.34.13-.13-.07-.18-.24-.12-.39l.02-.04.05-.13a7.76 7.76 0 0 0 .16-.45 5.43 5.43 0 0 0 .18-.75c.04-.23.05-.43.04-.6a2.6 2.6 0 0 0-.34-.97 4.1 4.1 0 0 0-.33-.5l-.03-.03a.32.32 0 0 1 .02-.4zm1.15 10.4a6.17 6.17 0 0 1-.2.85 8.29 8.29 0 0 1-.25.68c-.06.14-.21.2-.34.13-.13-.07-.18-.24-.12-.39l.02-.04.05-.13a7.76 7.76 0 0 0 .16-.45 5.43 5.43 0 0 0 .18-.75c.04-.23.05-.43.03-.6a2.6 2.6 0 0 0-.33-.96 4.1 4.1 0 0 0-.33-.5l-.03-.04a.32.32 0 0 1 .02-.4.23.23 0 0 1 .35 0 4.68 4.68 0 0 1 .42.63c.22.4.37.81.41 1.21.02.23 0 .49-.04.77zm12.4.12c-.05.14-.2.22-.33.16l-.67-.3a20.72 20.72 0 0 0-7.77-2.09l-.85-.05h-.05l-.34-.02a913.89 913.89 0 0 0-1.32-.07l.03.06a6.38 6.38 0 0 1 .36 1.43c.03.34-.03.81-.17 1.41l-.15.62a21.29 21.29 0 0 1-.29 1l-.02.05a.16.16 0 0 0 0 .03c-.05.15-.2.22-.33.17-.13-.06-.2-.23-.15-.38v-.02l.03-.06.06-.22a18.71 18.71 0 0 0 .36-1.33c.12-.53.17-.96.15-1.2a3.04 3.04 0 0 0-.04-.27 5.92 5.92 0 0 0-.2-.79 8.02 8.02 0 0 0-.19-.49l-.04-.09-.02-.05-.02-.05c-.09-.2.04-.43.24-.42h.14l.4.03 1.2.06.38.02h.01l.85.06a21.07 21.07 0 0 1 7.93 2.12l.67.3c.13.06.2.23.14.38z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Glitch" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Glitch extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7D, create_fragment$7D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gmail.svelte generated by Svelte v3.23.2 */

        function create_fragment$7E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 4.5v15c0 .85-.65 1.5-1.5 1.5H21V7.387l-9 6.463-9-6.463V21H1.5C.649 21 0 20.35 0 19.5v-15c0-.425.162-.8.431-1.068C.7 3.16 1.076 3 1.5 3H2l10 7.25L22 3h.5c.425 0 .8.162 1.069.432.27.268.431.643.431 1.068z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gmail" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gmail extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7E, create_fragment$7E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gnome.svelte generated by Svelte v3.23.2 */

        function create_fragment$7F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.865 0c-3.8 0-4.513 5.414-2.375 5.414S21.666 0 17.865 0zm-5.873.664c-.06 0-.124.003-.191.012-2.14.277-1.385 3.997-.246 4.066 1.103.068 2.308-4.071.437-4.078zm-3.705 1.47c-.113.003-.237.031-.371.087-1.72.71-.262 3.636.701 3.44.889-.182 1.004-3.556-.33-3.526zM5.547 4.43a.801.801 0 00-.483.164c-1.376.95.462 3.249 1.272 2.892.708-.312.257-3.021-.79-3.056zm7.637 1.758c-2.92.025-6.636 1.506-7.284 4.404-.718 3.217 2.96 7.68 6.797 7.68 1.888 0 4.066-1.706 4.473-3.866.311-1.647-3.662-.986-3.52.104.171 1.306-.958 1.95-2.064 1.107-3.52-2.68 5.83-4.016 5.213-7.678-.2-1.187-1.744-1.768-3.615-1.752zM5.268 20.19c-.536 0-.958.17-1.266.51-.308.34-.463.805-.463 1.397 0 .585.153 1.048.455 1.39.303.341.713.512 1.23.512.258 0 .873.004 1.288-.344v-1.765H5.264v.634h.644v.635c-.098.08-.282.154-.58.154-.293 0-.544-.106-.71-.318-.167-.211-.25-.51-.25-.898 0-.392.087-.693.259-.903.173-.211.419-.318.738-.318a1.602 1.602 0 01.817.225l.216-.637a2.245 2.245 0 00-.537-.205 2.507 2.507 0 00-.593-.069zm6.562 0c-.47.013-.842.182-1.115.506-.283.338-.426.806-.426 1.4 0 .594.143 1.06.426 1.397.284.338.675.506 1.174.506.5 0 .89-.168 1.174-.506.283-.338.423-.803.423-1.396 0-.595-.14-1.063-.424-1.4-.283-.338-.674-.507-1.173-.507h-.059zm-4.77.067v3.67h.682v-2.205l1.598 2.205h.506v-3.67h-.682v2.207l-1.598-2.207h-.505zm7.108 0l-.389 3.67h.76l.234-2.373.715 2.384h.508l.717-2.306.234 2.295h.758l-.39-3.67h-.862l-.713 2.29-.707-2.29h-.865zm4.084 0v3.67h2.209v-.715h-1.408v-.84H20.1v-.639h-1.047v-.761h1.361v-.715h-2.162zm-6.387.619h.024c.245 0 .435.107.57.32.135.213.201.514.201.9s-.066.684-.201.897a.639.639 0 01-.57.32.637.637 0 01-.569-.32c-.134-.213-.203-.511-.203-.896 0-.387.069-.688.203-.9a.635.635 0 01.545-.321Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GNOME" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gnome extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7F, create_fragment$7F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gnu.svelte generated by Svelte v3.23.2 */

        function create_fragment$7G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.072 13.932c-.221.012-.419.141-.519.338-.115.211-.389.242-.517.201-.21-.07-.481-.119-.744.068s-.546.045-.495-.297c.049-.34.172-.645.499-.83.714-.41.217-.695.608-1.109.394-.412.307-.537.293-1.099-1.326-.2-2.078-.582-2.916-1.631C.442 8.526.116 7.663.03 6.349-.058 5.032.019 4.18.587 3.088 1.155 2 1.755 1.475 2.789.93 3.824.382 4.84.253 5.778.269c.939.015 1.564.083 2.094.387.531.303 1.016.684 1.324.685.24.015.477-.053.673-.192.04 1.02-.878 1.108-1.698 1.13-.82.021-1.324-.317-2.08-.192-.754.128-1.992.471-2.595 1.52-.603 1.05-.624 1.42-.573 2.301.049.878.806 1.534 1.234 1.542.428.007.523-.117.898-.36.374-.246 2.284-2.61 2.934-3.14.653-.531 1.296-.696 1.99-.705.695-.008.871.015 1.433.246.56.229.904.652 1.356.91.23-.135.375-.339.584-.495.76-.552 1.152-.702 2.053-.615.518.052 1.169.347 1.56.686.693.604 1.266 1.441 1.728 2.079.36.497.785 1.091 1.392 1.277.659.201 1.157-.652 1.23-1.129.043-.27.097-.506.097-.801 0-.297-.03-.655-.115-.965-.09-.307-.222-.599-.392-.869-.258-.416-.68-.85-1.116-1.072-.246-.125-.826-.353-1.191-.361-.448-.01-.789.141-1.202.169-.5.034-1.396.146-1.786-.24-.251-.246-.283-.411-.324-.731.109.092.264.15.401.163.313.026.605-.229.859-.378.21-.123.504-.34.778-.45.704-.285 1.568-.278 2.31-.2.595.06 1.368.324 1.89.621.526.296 1.031.797 1.4 1.268.466.594.721 1.104.889 1.844.216.945.277 2.365.015 3.299-.205.734-.887 1.861-1.467 2.414-.573.547-1.235.811-1.986.955.03.149.033.291.071.416.056.178.163.375.38.313.086-.025.133-.047.246.053.115.1.056.485-.266.66-.164.086-.334.105-.595.112-.319.012-.639-.004-.953-.046-.283-.047-.451-.273-.765-.309-.485-.055-.855-.405-1.245-.654-.162-.104-.218-.104-.311-.158.051.154.118.314.151.465.034.146.02.285.037.404.019.119.052.211.07.309.077.068.103.173.233.207.13.035.334-.018.468-.037.135-.018.224-.09.328-.07.105.02.204.096.292.166s.164.08.234.254c.07.178.135.537.146.777.009.24-.018.455-.089.648-.07.189-.135.273-.327.463s-.506.465-.819.66c.058.084.083.162.173.254.09.094.277.197.359.295.085.098.128.168.128.277.012.131-.021.262-.093.373-.223.299-.483.352-.803.492.054.334.098.572.02.906-.03.137-.102.445-.27.525-.169.08-.492.041-.698.074-.205.031-.319.063-.479.094-.098.141-.242.297-.291.422-.049.127-.034.172.006.299.042.129.185.316.225.469.039.15.049.311.011.463-.038.15-.117.287-.23.396-.129.135-.382.24-.509.346-.125.111-.252.123-.217.303.047.248.409.646.67.744.185.055.382.039.557-.041-.014.209-.195.354-.315.494.322-.094.636-.27.854-.504-.067.203-.3.529-.645.816s-.343.229-.517.344c.314.061.606.045.85.002-.197.111-.416.182-.641.207-.289.031-.468.008-.729-.055-.261-.063-.499-.301-.814-.465.03.119.053.26.185.381.136.119.335.182.549.283-.272-.029-.558-.037-.824-.096-.199-.047-.332-.092-.478-.164-.144-.07-.255-.176-.384-.264.061.117.079.256.184.352.104.098.275.135.412.199-.143-.004-.281.029-.43-.01-.16-.037-.312-.109-.443-.209-.16-.119-.311-.25-.445-.396-.132-.145-.296-.332-.345-.463-.048-.133.03-.225.044-.338-.09.061-.201.094-.272.18-.07.088-.132.166-.101.318.03.15.172.338.271.506-.296-.242-.461-.336-.531-.625-.064-.273.104-.52.233-.725.064-.104.162-.199.221-.299-.135-.129-.285-.24-.4-.389-.113-.15-.162-.352-.277-.492-.117-.143-.274-.232-.41-.348.119.256.317.572.359.771.044.199-.048.322-.119.43-.07.107-.184.133-.292.197-.11.068-.277.016-.342.113s-.083.246-.021.344l.256.398c-.126-.072-.235-.168-.327-.281-.074-.096-.186-.188-.199-.316-.016-.131-.023-.246.063-.363.084-.117.318-.156.422-.246.105-.09.162-.148.156-.264-.006-.117-.119-.199-.217-.273-.299-.225-.68-.43-.934-.699-.109-.105-.191-.234-.239-.379-.03-.105.001-.188.071-.314.072-.131.315-.305.346-.443.029-.141-.095-.172-.205-.221-.111-.049-.322.025-.425-.061s.03-.266-.086-.365-.381-.045-.519-.15c-.121-.102-.205-.24-.24-.395-.046-.141-.053-.291-.021-.436.032-.113.128-.133.187-.191.059-.057.108-.104.03-.191-.074-.088-.33.004-.476-.105-.149-.113-.06-.381-.163-.494-.104-.109-.287-.066-.386-.104-.097-.035-.135.09-.194-.109-.061-.199-.063-.797-.143-1.02s-.238-.016-.311-.236c-.075-.221-.004-.574-.037-.908l-.15-.91c-.521.352-.867.463-1.428.561-.047 1.373-.176 2.182.291 3.705.465 1.521 1.408 2.42 2.68 3.707-1.68-1.256-2.479-2.279-2.981-3.588-.501-1.311-.406-2.407-.356-3.666zm8.919-.553c.129.006.285.039.376.098.091.061.188.107.27.189.206.211.36.463.428.752.044.186.05.422.064.639-.062-.199-.103-.408-.192-.588-.139-.285-.376-.561-.672-.688-.066-.031-.141-.041-.214-.027.023.041.063.076.065.133 0 .059-.012.174-.112.223-.16.078-.339.021-.464-.086-.127-.117-.166-.301-.102-.459.079-.194.375-.194.553-.186zm-1.621-.272c.017-.332.135-.609.433-.771.187-.107.392-.18.604-.215.207-.026.713-.008 1.018.131.232.105.391.271.597.394.205.121.351.201.546.338.3.211.475.439.682.576.101.066.24.057.374.098-.104.029-.239.064-.35.029-.159-.064-.308-.152-.438-.264-.154-.137-.32-.258-.497-.359-.124-.072-.329-.158-.466-.246-.135-.09-.371-.283-.502-.349-.207-.086-.428-.129-.65-.125-.256.008-.626.05-.822.228-.197.18-.271.336-.227.566.073-.084.123-.191.195-.254.154-.133.329-.139.521-.113.215.027.322.15.393.354-.047-.033-.135-.109-.204-.135-.144-.055-.306-.039-.438.043-.179.098-.13.24-.154.396-.013.076-.041.133-.061.199-.067-.016-.129-.049-.18-.098.001.076-.01.141.006.223.014.084.055.184.084.273-.126-.125-.256-.24-.335-.402-.086-.157-.131-.337-.129-.517zm.219-2.4c.091-.136.119-.345.174-.517-.021.217.021.453-.083.609-.105.158-.292.129-.443.176.118-.09.258-.131.352-.268zm-2.207 3.203c.119-.096.438-.02.676-.002l-.514.133c-.017.059-.01.123-.048.174-.04.051-.114.068-.171.104.006-.155-.062-.313.057-.409zm1.683-6.652c.143.075.321.178.449.18.124.004.158-.08.232-.131.115.38.25.797.448 1.142.083.146.136.079.2.224.063.145.09.439.15.626.059.187.137.321.207.483-.174-.25-.401-.566-.5-.773-.098-.207-.035-.225-.115-.421-.078-.198-.238-.504-.357-.756-.086.011-.19.026-.255.006-.065-.021-.054-.091-.112-.134-.059-.045-.158-.027-.24-.1-.081-.07-.1-.217-.107-.346zm-.767 1.875c.135-.012.299.023.425.017s.216-.039.325-.06c-.021-.189-.002-.537-.176-.664-.115-.08-.578-.02-.701.006-.279.061-.604.227-.873.33.258-.18.481-.346.791-.439.188-.055.621-.129.813-.076.089.023.105.061.159.135.183.255.183.475.229.773.047.071.096.119.135.194.038.093.062.19.068.289-.048-.069-.018-.155-.149-.206-.135-.053-.337-.005-.517.014.131.096.195.186.201.384.006.233-.191.401-.398.417-.285.022-.434-.041-.549-.285-.051-.107-.016-.236-.018-.341-.346.024-.34.013-.592.222.139.201.224.315.451.436.125.066.27.133.425.16.157.027.415.053.581.027.145-.018.278-.082.379-.187.123-.112.135-.274.182-.403-.004.127-.027.252-.07.371-.14.27-.38.352-.668.352-.275 0-.616-.063-.873-.169-.205-.085-.545-.325-.625-.534-.056-.143-.012-.318-.018-.477.285-.189.354-.143.689-.198.141-.025.239-.076.374-.088zM9.643 7.854c.007-.114.021-.111.03-.167-.259-.069-.361.099-.514.411-.057.115 0 .186-.062.263-.059.076-.159.065-.257.139s-.196.215-.289.292c-.189.156-.447.251-.667.358.15-.111.443-.279.538-.439.05-.086.042-.247.12-.325.078-.075.105-.13.205-.149.1-.019.061-.136.093-.229.032-.091.097-.158.165-.251s.156-.23.291-.282c.135-.049.347.005.45-.023.102-.029.043-.105.118-.15s.219-.023.32-.072c.176-.084.26-.227.367-.377.015.326.01.561-.107.869-.131.346-.266.55-.641.763-.128.072-.257.098-.365.137.062-.086.152-.123.188-.256.034-.136.009-.4.017-.512zm6.059 1.592c-.177.014-.219-.012-.363.091l.232.36c-.006-.237.018-.285.133-.451h-.002zm-.465-.172c.246-.104.461-.189.73-.207.107-.008.274.009.383.016.094-.137.211-.244.256-.4.028-.104.015-.584-.038-.709-.146-.361-.29-.377-.495-.585-.146-.149-.152-.38-.197-.638-.015-.094-.062-.213-.084-.31-.283-.046-.57-.062-.857-.045.148-.143.291-.271.334-.486.045-.229.004-.466-.113-.667-.121-.191-.315-.36-.494-.517-.178-.155-.436-.284-.604-.412.221-.077.444-.194.66-.235.561-.108 1.043.057 1.584.384.315.19.573.37.902.716.329.344.735.975 1.054 1.348.317.375.575.67.853.893.276.226.528.289.792.431l.412.438.335-.413.535.06.111-.601.49-.136-.079-.811.354-.252-.267-.504.27-.553-.352-.63.135-.607-.407-.348-.053-.646-.569-.217-.227-.561-.64-.007-.315-.417-.431.03-.479-.053-.27-.199-.396.26-.477-.248-.947.359.618-.537.64-.102.49-.126.663.218.582-.147.563.331.596-.031.293.525.591.067.32.581.372.205.1.746.333.315-.148.653.39.494-.363.529.39.332-.499.443.506.529-.613.2.398.566-.501.088.328.622-.563-.008.285.466-.621-.074.148.672-.468-.411-.159.814-.322-.585-.175.73-.397-.537.011.765-.439-.688c.091.391.073.817.329 1.185.794-.107 1.312-.307 1.921-.892.552-.533 1.214-1.644 1.394-2.35.204-.802.21-2.281.009-3.101-.194-.787-.446-1.163-.896-1.807-.43-.455-.853-.939-1.399-1.264-.803-.48-1.829-.608-2.742-.596-.393.001-.781.074-1.148.215-.527.191-.95.611-1.487.818-.175.067-.315.068-.454-.004.135.27.281.391.619.489.244.071.825.026 1.227-.011.43-.039.654-.167 1.239-.16.57.01 1.024.225 1.272.368.511.292.877.614 1.196 1.129.175.282.298.601.383.925.086.324.124.688.13 1.006s-.019.602-.097.888c-.182.669-.583 1.35-1.407 1.245-.504-.063-1.263-1.01-1.518-1.357-.515-.701-1.043-1.477-1.688-2.059-.407-.366-.92-.594-1.463-.65-.992-.09-1.287.098-2.033.715.151.047.299.074.455.145.346.156.662.357.938.615.29.27.42.442.43.829.007.259-.204.465-.399.649-.118.114-.275.218-.372.307-.127.117-.285.246-.124.432.06.07.165.123.252.189.141.103.075.488-.108.592-.226.136-.513.111-.713-.061.246-.035.402-.068.395-.27-.002-.115-.149-.213-.297-.279-.35-.16-.614-.135-.963-.387-.353-.254-.359-.393-.455-.79-.17.017-.327.021-.555.097-.226.074-.478.254-.684.299-.52.111-.623.078-.907.006-.501-.132-1.151.09-1.8.299-.107.033-.543 0-.836.102-.528.209-1.019.496-1.457.853-.556.469-1.286 1.869-1.698 3.477-.045.49.095.818-.213 1.057-.308.24-.3.851-.405 1.023-.103.17-.225.094-.45.336-.223.24-.337.201-.332.654.195-.125.477-.273.725-.285.221-.006.222.283.785-.273.301-.299.881-.309 1.283-.439s1.125-.402 1.851-1.212c.724-.81 1.071-1.664 1.212-2.896.02.215.06.463-.033 1.065-.095.604-.296 1.28.129 2.094l.265.504c-.157-.215-.465-.566-.56-.816l-.211-.578c-.48.753-.59.887-1.255 1.425-.026.334-.033.682.076 1.002.108.32-.064.688.02.9.082.209.273.09.336.303s-.032.635.064.842c.099.207.337.082.453.15.115.066.154.158.215.246.063.088-.023.297.103.365.126.066.32.01.453.074.13.066.149.223.119.361-.032.141-.172.205-.233.348-.062.119-.055.262.02.373.074.131.236.201.4.27.162.064.391.027.559.119.169.09.32.273.408.406.089.131.113.225.109.363-.014.154-.059.301-.137.434-.074.135-.236.299.02.555.254.254.246.145.393.313-.017-.289-.135-.521-.049-.738.088-.217.349-.256.484-.352.139-.1.219-.232.326-.348 0 .148.015.309-.002.42-.033.227-.102.432.237.467.153.016.299-.082.459-.141-.084.148-.23.27-.253.451-.028.195.018.395.13.559.124.18.341.313.499.416.158.105.244.115.365.174.006.176-.03.363-.009.531.019.168.073.314.169.453.098.141.252.219.398.32-.08-.188-.242-.365-.24-.561s.06-.334.252-.51c.191-.174.639-.324.85-.494.156-.109.279-.26.355-.436.075-.164.055-.43.069-.576.069.205.079.27.103.486.021.217-.127.521-.189.68.228-.105.409-.293.51-.525.057.035.028.125.049.301.094-.092.199-.162.293-.25s.195-.164.243-.287c.046-.121.027-.252-.007-.393-.035-.143-.193-.307-.279-.463-.084-.152.016-.305.01-.492-.17-.029-.314-.117-.512-.088-.195.029-.42.248-.621.252-.199 0-.314-.188-.478-.238-.165-.053-.33-.045-.495-.07.209-.199 1.021-.295 1.576-.385.486-.082.978-.125 1.47-.133.221-.006.506.068.661.025.152-.045.119-.15.164-.264.129-.318.066-.604-.004-.924-.444-.053-.908-.115-1.356-.082-.438.033-.956.242-1.409.256-.392.014-.976-.074-1.312-.281-.413-.25-.731-.789-.845-.965-.184-.281-.416-.836-.559-1.088-.141-.254-.173-.324-.29-.43-.118-.105-.278-.113-.419-.17.161.014.336-.035.482.047.221.127.465.648.602.877.145-.486.111-.676.529-.951-.336.379-.346.666-.428 1.111.281.459.67 1.193 1.18 1.396.186.074.502.119.701.145.621.076 1.22-.119 1.828-.27.445-.111.897-.066 1.438-.035.183.012.616-.1.707-.283.052-.107.042-.232-.024-.33-.07-.105-.255-.158-.355-.254-.099-.098-.156-.211-.235-.314-.35.068-.704.105-1.062.115.221-.09.433-.141.66-.23.237-.098.463-.219.676-.359.186-.123.303-.193.438-.334.134-.143.305-.289.404-.463.099-.174.114-.369.12-.584.004-.215-.005-.516-.088-.691-.084-.172-.243-.225-.372-.264-.127-.041-.216.063-.349.076-.134.014-.258.096-.452.006-.248-.129-.461-.318-.617-.549-.196-.274-.335-.723-.534-1.068-.343-.596-.771-1.149-1.179-1.702-.035-.135-.084-.324-.102-.508-.031-.322-.035-.656.065-.969.075-.24.188-.494.438-.592.1-.043.212-.051.317-.022.09.032.179.135.142.252-.039.129-.127.134-.188.198-.091.091-.153.205-.183.33.111-.004.262-.011.354.013.12.03.229.11.291.279-.143-.126-.213-.185-.39-.188-.083-.002-.182.026-.271.041-.034.108-.054.243-.101.329-.049.084-.141.063-.176.161-.033.128-.039.261-.02.391h.004zm1.242-.149c.056.021.075.027.146.08.069.052.165.104.22.229.044.129.058.266.04.4-.048-.015-.113-.005-.163-.047-.05-.043-.079-.14-.143-.18-.065-.043-.117-.034-.188-.043.038.096.05.199.036.301-.036.203-.156.307-.352.33-.084.012-.219-.016-.292-.029.034.075.091.143.126.219.164-.023.285-.02.375-.061.088-.041.183-.135.296-.173.113-.039.214-.039.338-.059-.098.084-.162.167-.259.253l.214.623c.152.096.294.146.485.263.191.116.42.327.67.44.249.113.396.177.657.225.259.05.467.262.722.296.255.032.735.041.932.021.225-.021.516-.136.542-.382-.188.045-.475.005-.619-.349-.064-.157-.034-.447-.132-.631-.099-.187-.236-.246-.4-.475s-.431-.589-.58-.895c-.15-.308-.188-.654-.313-.929-.128-.274-.319-.495-.469-.708-.324-.463-.585-.777-1.12-1.011-.258-.112-.551-.143-.824-.213-.113.05-.268.104-.295.237-.021.15.021.305.12.421.159.165.395.342.487.603.061.168.076.73.025.883-.054.16-.178.257-.282.361zm.052 1.331c-.049.043-.087.087-.167.122-.08.036-.189.045-.295.071.148.231.305.466.447.709.143.242.266.51.401.765-.007-.147.002-.302-.019-.438-.021-.136-.083-.254-.145-.461-.06-.206-.135-.484-.222-.768zm-3.999-5.087c-.021.226.019.581.064.806.058.267.111.404.328.564.396.295.648.245.955.416.145.081.328.217.382.359.053.146-.036.301-.146.363.192.029.408-.189.318-.41-.045-.109-.255-.16-.32-.271-.059-.102-.07-.224-.033-.335.053-.202.454-.388.597-.546.218-.248.3-.453.177-.77-.172-.445-.842-.804-1.242-.979-.183-.08-.287-.084-.429-.129.292.174.601.31.75.691.123.321.015.443.021.721.002.13.172.195.248.275.064.072.06.125.008.223-.004-.08-.045-.154-.111-.199-.112-.08-.234-.063-.294-.225-.09-.248.091-.484-.112-.762-.15-.208-.353-.441-.625-.447-.123-.001-.244.018-.36.058l-.183-.22-.005-.003c-.372-.339-.627-.619-1.147-.852-.522-.234-.78-.27-1.379-.256-.597.013-1.19.063-1.883.66-.694.6-2.481 2.888-2.915 3.177-.431.289-.527.389-1.068.389s-1.387-.766-1.42-1.723c-.032-.956-.045-1.297.619-2.449.666-1.152 1.869-1.506 2.764-1.625.895-.121 1.432.194 2.092.195.66.002 1.314-.111 1.508-.637-.095.056-.221.12-.577.101-.355-.019-.849-.431-1.402-.706C7.157.547 6.542.514 5.75.5c-.79-.015-1.777.045-2.755.574-.978.525-1.645 1.085-2.213 2.12C.214 4.227.13 5.069.222 6.321c.09 1.25.477 2.181 1.219 3.098.744.914 1.486 1.363 2.824 1.529l.283-1.242-.504.721.014-.803-.455.565-.202-.767-.367.615-.183-.855-.536.432.17-.705-.707.078.324-.491-.644.006.375-.653-.57-.091.454-.596-.698-.206.578-.555-.573-.467.448-.348-.42-.559.448-.52-.167-.685.379-.329.113-.786.426-.214.366-.611.677-.072.334-.553.68.035.642-.348.666.154.756-.228.562.13.731.108.705.564-1.081-.377-.544.26-.451-.273-.31.209-.55.057-.491-.03-.358.436-.732.007-.26.589-.65.228-.061.678-.467.366.155.637-.402.664.31.581-.305.529.404.264-.09.853.563.141.125.633.613-.063.381.434.47-.461c.858-.428 1.212-.668 1.882-1.391.759-.823 1.196-1.584 2.208-2.147.729-.405 1.321-.551 2.139-.408.766.132 1.024.593 1.59 1.077.061-.109.07-.139.169-.218-.03.142-.079.287-.093.423l-.002-.001z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GNU" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gnu extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7G, create_fragment$7G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gnubash.svelte generated by Svelte v3.23.2 */

        function create_fragment$7H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.038,4.9l-7.577-4.498C13.009,0.134,12.505,0,12,0c-0.505,0-1.009,0.134-1.462,0.403L2.961,4.9 C2.057,5.437,1.5,6.429,1.5,7.503v8.995c0,1.073,0.557,2.066,1.462,2.603l7.577,4.497C10.991,23.866,11.495,24,12,24 c0.505,0,1.009-0.134,1.461-0.402l7.577-4.497c0.904-0.537,1.462-1.529,1.462-2.603V7.503C22.5,6.429,21.943,5.437,21.038,4.9z M15.17,18.946l0.013,0.646c0.001,0.078-0.05,0.167-0.111,0.198l-0.383,0.22c-0.061,0.031-0.111-0.007-0.112-0.085L14.57,19.29 c-0.328,0.136-0.66,0.169-0.872,0.084c-0.04-0.016-0.057-0.075-0.041-0.142l0.139-0.584c0.011-0.046,0.036-0.092,0.069-0.121 c0.012-0.011,0.024-0.02,0.036-0.026c0.022-0.011,0.043-0.014,0.062-0.006c0.229,0.077,0.521,0.041,0.802-0.101 c0.357-0.181,0.596-0.545,0.592-0.907c-0.003-0.328-0.181-0.465-0.613-0.468c-0.55,0.001-1.064-0.107-1.072-0.917 c-0.007-0.667,0.34-1.361,0.889-1.8l-0.007-0.652c-0.001-0.08,0.048-0.168,0.111-0.2l0.37-0.236 c0.061-0.031,0.111,0.007,0.112,0.087l0.006,0.653c0.273-0.109,0.511-0.138,0.726-0.088c0.047,0.012,0.067,0.076,0.048,0.151 l-0.144,0.578c-0.011,0.044-0.036,0.088-0.065,0.116c-0.012,0.012-0.025,0.021-0.038,0.028c-0.019,0.01-0.038,0.013-0.057,0.009 c-0.098-0.022-0.332-0.073-0.699,0.113c-0.385,0.195-0.52,0.53-0.517,0.778c0.003,0.297,0.155,0.387,0.681,0.396 c0.7,0.012,1.003,0.318,1.01,1.023C16.105,17.747,15.736,18.491,15.17,18.946z M19.143,17.859c0,0.06-0.008,0.116-0.058,0.145 l-1.916,1.164c-0.05,0.029-0.09,0.004-0.09-0.056v-0.494c0-0.06,0.037-0.093,0.087-0.122l1.887-1.129 c0.05-0.029,0.09-0.004,0.09,0.056V17.859z M20.459,6.797l-7.168,4.427c-0.894,0.523-1.553,1.109-1.553,2.187v8.833 c0,0.645,0.26,1.063,0.66,1.184c-0.131,0.023-0.264,0.039-0.398,0.039c-0.42,0-0.833-0.114-1.197-0.33L3.226,18.64 c-0.741-0.44-1.201-1.261-1.201-2.142V7.503c0-0.881,0.46-1.702,1.201-2.142l7.577-4.498c0.363-0.216,0.777-0.33,1.197-0.33 c0.419,0,0.833,0.114,1.197,0.33l7.577,4.498c0.624,0.371,1.046,1.013,1.164,1.732C21.686,6.557,21.12,6.411,20.459,6.797z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GNU Bash" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gnubash extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7H, create_fragment$7H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gnuemacs.svelte generated by Svelte v3.23.2 */

        function create_fragment$7I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12,24C5.448,24,0.118,18.617,0.118,12S5.448,0,12,0c6.552,0,11.882,5.383,11.882,12S18.552,24,12,24z M12,0.661 C5.813,0.661,0.779,5.748,0.779,12S5.813,23.339,12,23.339c6.187,0,11.221-5.086,11.221-11.339S18.187,0.661,12,0.661z M8.03,20.197 c0,0,0.978,0.069,2.236-0.042c0.51-0.045,2.444-0.235,3.891-0.552c0,0,1.764-0.377,2.707-0.725c0.987-0.364,1.524-0.673,1.766-1.11 c-0.011-0.09,0.074-0.408-0.381-0.599c-1.164-0.488-2.514-0.4-5.185-0.457c-2.962-0.102-3.948-0.598-4.472-0.997 c-0.503-0.405-0.25-1.526,1.907-2.513c1.086-0.526,5.345-1.496,5.345-1.496c-1.434-0.709-4.109-1.955-4.659-2.224 c-0.482-0.236-1.254-0.591-1.421-1.021c-0.19-0.413,0.448-0.768,0.804-0.87c1.147-0.331,2.766-0.536,4.24-0.56 c0.741-0.012,0.861-0.059,0.861-0.059c1.022-0.17,1.695-0.869,1.414-1.976c-0.252-1.13-1.579-1.795-2.84-1.565 c-1.188,0.217-4.05,1.048-4.05,1.048c3.539-0.031,4.131,0.028,4.395,0.398c0.156,0.218-0.071,0.518-1.015,0.672 c-1.027,0.168-3.163,0.37-3.163,0.37c-2.049,0.122-3.492,0.13-3.925,1.046C6.202,7.564,6.787,8.094,7.043,8.425 c1.082,1.204,2.646,1.853,3.652,2.331c0.379,0.18,1.49,0.52,1.49,0.52c-3.265-0.18-5.619,0.823-7.001,1.977 c-1.562,1.445-0.871,3.168,2.33,4.228c1.891,0.626,2.828,0.921,5.648,0.667c1.661-0.09,1.923-0.036,1.939,0.1 c0.023,0.192-1.845,0.669-2.355,0.816C11.448,19.438,8.047,20.193,8.03,20.197z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GNU Emacs" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gnuemacs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7I, create_fragment$7I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gnuicecat.svelte generated by Svelte v3.23.2 */

        function create_fragment$7J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.436-0.055C10.07-0.049,9.692-0.025,9.297,0.02C4.501,0.562,1.685,4.556,1.522,9.399 c-1.123,2.201-1.453,4.791-0.724,7.324c1.396,4.853,6.216,7.785,11.169,7.204l0.909-0.107c4.956,0.327,6.013-1.024,7.199-4.318 c0.125-0.272,0.306-0.77,0.569-1.574c0.007-0.038,0.016-0.077,0.021-0.096c0.789-2.152,0.905-4.582,0.24-6.891 c-0.08-0.277-0.171-0.548-0.273-0.812c-0.03-0.19-0.024-0.42,0.009-0.6c0.29-0.475,0.65-0.833,1.079-1.1l0.273-1.876 c0.287-0.323,0.177-0.601,0.19-1.061c0.167-0.079,0.259-0.214,0.329-0.43c0.077-0.238,0.448-0.688,0.863-1.037 c0.064-0.189,0.224-0.574,0.222-0.895c-1.988,0.227-3.237,0.609-4.235-0.612L18.829,2.31c-0.24-0.372-0.672-0.585-0.981-0.951 l-0.35,1.213C17.067,2.305,14.749-0.124,10.436-0.055L10.436-0.055z M10.577,0.741c2.595,0.037,4.973,1.347,6.221,2.285 l-0.951,0.355l-0.599-0.382l-0.27,0.788v0.326L14.244,5.88l-0.08-0.027l0.379-1.577l0.572-1.52l-0.192-0.163l-0.842,0.922 c-0.179,0.981-0.09,2.364-0.542,2.937c0.141-1.152,0.341-2.159,0.353-3.506l-0.489-0.163c-0.113,0.596-0.265,1.278-0.382,1.657 l0.163-1.71L12.56,3.135v0.978l-0.163-0.542l-0.056-0.978l-0.216-0.029l-0.163,0.625c0.028,0.272-0.015,0.543,0.216,0.815 l0.056,2.066l0.134,0.246l-0.243,1.168l0.027-1.141l-0.08-0.08L11.908,4.25l-0.273-1.088L11.2,2.892L11.037,2.43l-0.462-0.029 l1.034,3.698l0.08,1.112c-0.118-0.527-0.113-1.102-0.569-1.494c0.045-0.553-0.036-1.095-0.708-1.577L9.434,2.131 C9.4,1.893,9.067,1.854,8.835,1.749c-0.07,0.32-0.131,0.643,0.083,1.034c0.489,0.777,0.978,1.559,1.467,1.983l0.027,0.951 C10.251,4.84,9.809,4.367,9.65,4.495C9.645,3.78,8.858,3.513,8.402,3.055L8.346,2.267l-0.27-0.056 c0.169,0.533-0.219,0.571,0.542,1.63l0.027,0.382c-0.29-0.197-0.579-0.565-0.868-0.978L7.424,2.62 c0.037,0.428-0.175,0.524,0.134,1.277c0.456,0.396,0.866,0.977,1.387,1.114c0,0,0.109,0.19,0,0.19 c-0.109,0-0.326-0.083-0.326-0.083c-0.3-0.137-0.586-0.26-1.168-0.679L6.853,2.673L6.58,2.62l0.056,0.951l0.243,0.107l0.027,0.625 c0.106,0.371,0.228,0.518,0.409,0.462C7.213,4.89,7.094,4.917,6.853,4.902C6.651,4.524,6.528,4.155,6.118,3.707l-0.27-0.788 L5.685,3.082c-0.059,0.296-0.085,0.61,0,0.978C5.42,3.903,5.027,3.467,4.56,3.24c1.534-1.78,3.904-2.462,5.766-2.496 C10.41,0.742,10.494,0.74,10.577,0.741L10.577,0.741z M18.147,2.935l0.518,0.171l1.518,0.866l2.151,0.019 c-0.617,0.242-1.377,0.526-1.862,0.673l-0.615-0.019c-0.486-0.414-0.876-0.613-1.312-0.876c-0.528,0.553-0.839,1.035-1.013,1.74 l0.152-1.192l0.521-1.173L18.147,2.935z M4.539,3.266l0.548,1.093l0.027,0.243L4.814,4.495L4.544,3.87L4.245,4.087L4.028,3.958 C4.184,3.712,4.356,3.481,4.539,3.266z M8.066,5.58c1.617-0.037,1.873,1.306,2.132,2.549v2.229 c0.186,0.018,0.568,1.138,0.489,1.494c-0.045,0.204,0.489,1.425,0.452,1.43c0.288,0.278,0.235,0.248,0.465,0.425 c0.317,0.244,0.604,1.136,0.428,1.267c-0.168,0.124,0.221,0.402,0.313,0.601c0.568,0.507,0.989,1.016,0.981,1.523l0.27,0.489 l0.516,0.08l0.136,0.192l0.652,0.08c0.375-0.081,0.32-0.486,0.436-0.762c0.022-0.279-0.058-0.6-0.462-0.951 c0.021-0.422,0.074-0.838-0.326-1.331c0.057-0.504-0.311-0.922-0.599-1.357c-0.035-0.374-0.197-0.885-0.321-1.381 c-0.061-0.245-0.09-0.498-0.139-0.74c-0.182-1.677,0.058-1.866,0.134-2.771c0.62-0.932,0.945-1.379,1.496-1.577l0.705,0.871 c0.348,0.633,0.199,1.444,1.061,1.603l0.021,0.021c0.44-0.397,1.023-0.384,1.497-0.396l-0.057,0.188 c-0.571-0.06-1.038-0.074-1.424,0.216l0.385,0.374c0.413-0.536,0.982-0.5,1.542-0.521l0.006,0.207 c-0.605-0.08-1.184,0.021-1.497,0.362l0.123,0.118h0.005c0.466-0.364,1.024-0.384,1.552-0.39l-0.104,0.184 c-0.53,0.043-0.895,0.007-1.274,0.23c0.293,0.031,0.588,0.057,0.882,0.086l0.11,0.243l0.679,0.056 c0.119,0.03,0.216,0.043,0.302,0.045c0.083,0.221,0.158,0.445,0.224,0.676c0.504,1.751,0.502,3.588,0.059,5.283 c-1.359,3.648-2.804,4.625-5.742,4.428c-3.067-0.206-5.543-3.614-7.725-8.283c-0.476-1.295-1.641-2.116-2.318-1.424 c-3.08,3.063,0.395,8.51,2.104,9.825c0.957,0.692,1.924,1.245,2.878,1.673c-3.388-0.564-6.284-2.92-7.263-6.322 C0.668,12.32,2.619,8.027,6.345,5.973c0.004-0.001,0.01-0.004,0.013-0.005C7.055,5.708,7.613,5.591,8.066,5.58L8.066,5.58z M18.31,7.625c0.294,0.045,0.84,0.366,1.139,0.665c0.09,0.244-0.136,0.354-0.12,0.497c0.008,0.024,0.004,0.032,0.003,0.032 c-0.001-0.011-0.002-0.021-0.003-0.032C19.305,8.715,18.908,8.227,18.31,7.625z M20.118,9.811 c-0.002,0.253-0.083,0.341-0.192,0.476c-0.111,0.009-0.39-0.075-0.513-0.251C19.598,9.823,19.882,9.825,20.118,9.811z M17.277,9.983c-0.059,0.071-0.086,0.157-0.156,0.306c0.091-0.14,0.146-0.201,0.207-0.245L17.277,9.983z M17.419,10.159 c-0.225,0.063-0.387,0.419-0.613,0.923c0.241-0.297,0.407-0.718,0.746-0.852L17.419,10.159z M5.551,13.076l0.053,1.058 l-1.657,0.951l-0.027-0.788C4.612,14.476,5.071,13.736,5.551,13.076z M6.286,15.331l0.243,0.625l-2.092,1.141l-0.299-0.708 C6.233,15.623,5.873,15.629,6.286,15.331z M7.045,16.771l0.273,0.462c-0.788,0.389-1.438,0.914-2.009,1.52l-0.436-0.868 C5.663,17.646,6.406,17.313,7.045,16.771z M8.052,18.075l0.462,0.436c-0.362,0.811-1.11,1.315-1.822,1.846L5.96,19.515 C6.679,19.046,7.591,18.673,8.052,18.075z M9.595,19.582c0.073,0.433-0.222,1.076-1.216,2.026 c-0.387-0.174-0.787-0.337-1.034-0.652c1.61-0.816,2.024-1.255,2.143-1.471C9.53,19.479,9.6,19.517,9.595,19.582L9.595,19.582z M10.607,20.25c0.037,0.383-0.041,0.831,0.19,1.085l0.216,0.056c-0.114,0.471-0.341,0.823-0.326,1.294 c-0.859-0.208-0.954-0.297-1.277-0.506C10.408,20.627,10.599,20.262,10.607,20.25L10.607,20.25z M12.018,21.036l1.061,1.224 c-0.107,0.585-0.098,0.934,0.299,1.087c-0.6-0.033-1.188-0.04-1.683-0.345C12.125,22.363,12.118,21.791,12.018,21.036z M17.355,21.512c0.308,0.469,0.349,0.707,0.657,0.815c-0.406,0.394-0.589,0.471-1.066,0.652c0.15-0.304,0.001-0.73-0.134-1.248 C16.712,21.539,17.213,21.555,17.355,21.512z M14.356,21.797c1.79,0.534,1.183,0.874,1.732,1.408 c-0.472,0.099-0.905,0.205-1.659,0.163C14.985,22.956,14.731,22.496,14.356,21.797z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GNU IceCat" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gnuicecat extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7J, create_fragment$7J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gnuprivacyguard.svelte generated by Svelte v3.23.2 */

        function create_fragment$7K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.968 11.583h1.274v-3.82A7.76 7.76 0 0 1 12.005 0a7.76 7.76 0 0 1 7.762 7.763v3.783c-.018.01-.037.028-.056.037l-.01.01-.008.009h-.01l-.01.01-.009.009H19.636l-.018.018h-.02l-.018.01h-.01l-.009.01-.009.009h-.01l-.009.009-.009.01-.01.009-.009.009-.028.019-.019.01-.028.018-.018.01-.02.009-.027.018-.019.01-.01.009-.027.019-.02.01-.046.027-.019.01-.018.009-.02.01h-.008l-.057.027h-.019c-.018.01-.037.02-.065.038h-.01l-.009.01-.028.018-.018.01-.029.018-.018.01h-.01l-.028.018-.018.01-.02.009c-.018.01-.046.019-.065.028l-.018.01-.02.009-.037.018-.037.02-.047.018-.047.019-.019.009-.037.019-.019.01c-1.545.739-4.017 1.516-8.708 1.853-3.362.244-5.403 1.723-6.724 3.502zm4.842 0h8.371v-3.82a4.184 4.184 0 0 0-4.186-4.186A4.184 4.184 0 0 0 7.81 7.763zm13.222 1.461V24H5.572c1.704-.946 2.968-.852 5.075-.787 2.865.094 6.03-1.105 7.585-2.696 1.554-1.592-.14-.375-1.901.074-1.76.45-5.17.497-7.454-.103 7.173.094 9.973-2.219 11.555-4.307 1.583-2.079-.683-.365-2.153.356-1.47.72-4.036 1.227-6.864.852 4.27-.01 7.52-2.144 9.607-4.345z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GNU Privacy Guard" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gnuprivacyguard extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7K, create_fragment$7K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gnusocial.svelte generated by Svelte v3.23.2 */

        function create_fragment$7L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.217 0C2.474 0 1.06 1.413 1.06 3.156V15.77c0 1.744 1.414 3.158 3.157 3.158h9.367C13.567 22.498 8.756 24 8.756 24s8.138-.038 9.305-5.072h1.72c1.744 0 3.157-1.414 3.157-3.157V3.157C22.938 1.413 21.524 0 19.782 0H4.218zm4.527 2.53c.073-.013.132-.003.174.034.335.3-.556.593-.484 2.063.032.646-.16 1.146 1.076 1.146.826 0 .483-.734 1.523-.734.656 0 .86.435.934.767.072-.33.274-.768.93-.768 1.04 0 .7.733 1.525.733 1.237 0 1.044-.5 1.076-1.146.072-1.47-.82-1.764-.484-2.063.042-.037.1-.042.172-.02.5.143 1.607 1.558 1.638 2.155.038.71.04 1.825-1.015 2.407 1.19 1.167 1.352 2.72 1.352 2.72l-2.045-.034s-.464-2.118-2.94-2.01c-2.474.108-2.796.538-2.796 3.156 0 2.617 1.147 3.517 2.905 3.585 2.76.108 2.51-1.433 2.51-1.433l-1.29.072-.718-1.937h4.41c0 2.116-.897 5.414-5.092 5.2-4.196-.216-5.128-3.515-5.164-5.74-.018-1.225.188-2.602 1.2-3.574-1.052-.58-1.033-1.7-1.033-2.414 0-.88 1.13-2.084 1.637-2.17z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GNU social" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gnusocial extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7L, create_fragment$7L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Go.svelte generated by Svelte v3.23.2 */

        function create_fragment$7M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.811 10.715c-.047 0-.058-.023-.035-.059l.246-.315c.023-.035.081-.058.128-.058h4.172c.046 0 .058.035.035.07l-.199.303c-.023.036-.082.07-.117.07l-4.23-.011zM.047 11.79c-.047 0-.059-.023-.035-.058l.245-.316c.023-.035.082-.058.129-.058h5.328c.047 0 .07.035.058.07l-.093.28c-.012.047-.058.07-.105.07l-5.527.012zm2.828 1.075c-.047 0-.059-.035-.035-.07l.163-.292c.023-.035.07-.07.117-.07h2.337c.047 0 .07.035.07.082l-.023.28c0 .047-.047.082-.082.082l-2.547-.012zM15.004 10.505c-.736.187-1.239.327-1.963.514-.176.046-.187.058-.34-.117-.174-.199-.303-.327-.548-.444-.737-.362-1.45-.257-2.115.175-.795.514-1.204 1.274-1.192 2.22.011.935.654 1.706 1.577 1.835.795.105 1.46-.175 1.987-.771.105-.129.198-.269.315-.433H10.47c-.245 0-.304-.152-.222-.35.152-.362.432-.97.596-1.274a.315.315 0 0 1 .292-.187h4.253c-.023.316-.023.631-.07.947a4.983 4.983 0 0 1-.958 2.29c-.841 1.11-1.94 1.8-3.33 1.986-1.145.152-2.209-.07-3.143-.77-.865-.655-1.356-1.52-1.484-2.595-.152-1.274.222-2.419.993-3.424.83-1.086 1.928-1.776 3.272-2.021 1.098-.199 2.15-.07 3.096.572.62.41 1.063.97 1.356 1.648.07.105.023.164-.117.199 M18.872 16.967c-1.064-.024-2.034-.328-2.852-1.029a3.665 3.665 0 0 1-1.262-2.255c-.21-1.32.152-2.489.947-3.529.853-1.122 1.881-1.706 3.272-1.951 1.192-.21 2.314-.094 3.33.596.923.63 1.496 1.484 1.648 2.605.198 1.578-.257 2.863-1.344 3.962-.771.783-1.718 1.273-2.805 1.495-.315.059-.63.07-.934.106zm2.78-4.721c-.011-.152-.011-.269-.034-.386-.21-1.157-1.274-1.811-2.384-1.554-1.087.245-1.788.935-2.045 2.033-.21.912.234 1.835 1.075 2.209.643.28 1.285.245 1.905-.07.923-.48 1.425-1.227 1.484-2.232z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Go" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Go extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7M, create_fragment$7M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Godotengine.svelte generated by Svelte v3.23.2 */

        function create_fragment$7N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.559 0.689c-1.096 0.244-2.181 0.583-3.198 1.095 0.023 0.898 0.081 1.758 0.199 2.632-0.395 0.253-0.81 0.47-1.178 0.766-0.375 0.288-0.758 0.564-1.097 0.901-0.678-0.448-1.396-0.869-2.135-1.241-0.797 0.857-1.542 1.782-2.15 2.818 0.458 0.741 0.936 1.435 1.452 2.094h0.014v6.356c0.012 0 0.023-0 0.035 0.003l3.896 0.376c0.204 0.020 0.364 0.184 0.378 0.389l0.12 1.72 3.399 0.242 0.234-1.587c0.030-0.206 0.207-0.358 0.415-0.358h4.111c0.208 0 0.385 0.152 0.415 0.358l0.234 1.587 3.399-0.242 0.12-1.72c0.014-0.205 0.174-0.369 0.378-0.389l3.895-0.376c0.012 0 0.023-0.003 0.035-0.003v-0.507h0.002v-5.848h0.014c0.516-0.659 0.994-1.353 1.452-2.094-0.608-1.036-1.354-1.961-2.151-2.819-0.739 0.372-1.457 0.793-2.135 1.241-0.339-0.337-0.721-0.613-1.096-0.901-0.369-0.296-0.784-0.513-1.178-0.766 0.117-0.874 0.175-1.734 0.199-2.632-1.017-0.512-2.101-0.851-3.198-1.095-0.438 0.736-0.838 1.533-1.187 2.312-0.414-0.069-0.829-0.094-1.246-0.099h-0.016c-0.417 0.005-0.832 0.030-1.246 0.099-0.349-0.779-0.749-1.576-1.188-2.312l0.001-0.001zM6.476 9.994c1.297 0 2.349 1.051 2.349 2.348s-1.052 2.348-2.349 2.348c-1.296 0-2.348-1.051-2.348-2.348s1.051-2.348 2.348-2.348zM17.524 9.994c1.296 0 2.348 1.051 2.348 2.348s-1.051 2.348-2.348 2.348c-1.297 0-2.349-1.051-2.349-2.348s1.051-2.348 2.349-2.348zM6.701 10.924c-0.861 0-1.559 0.698-1.559 1.559s0.698 1.558 1.559 1.558c0.861 0 1.559-0.698 1.559-1.558s-0.697-1.559-1.559-1.559zM17.298 10.924c-0.861 0-1.558 0.698-1.558 1.559s0.697 1.558 1.558 1.558c0.861 0 1.559-0.698 1.559-1.558s-0.697-1.559-1.559-1.559zM12 11.377c0.417 0 0.757 0.308 0.757 0.687v2.162c0 0.379-0.339 0.687-0.757 0.687s-0.756-0.308-0.756-0.687v-2.162c0-0.379 0.339-0.687 0.756-0.687zM1.46 16.951c0.002 0.377 0.006 0.789 0.006 0.871 0 3.701 4.694 5.479 10.526 5.5h0.014c5.832-0.020 10.525-1.799 10.525-5.5 0-0.084 0.005-0.495 0.007-0.871l-3.502 0.338-0.121 1.729c-0.015 0.208-0.18 0.375-0.389 0.39l-4.181 0.296c-0.206 0-0.384-0.151-0.415-0.358l-0.238-1.614h-3.386l-0.238 1.614c-0.032 0.217-0.226 0.373-0.445 0.357l-4.151-0.296c-0.208-0.015-0.375-0.181-0.389-0.389l-0.12-1.729-3.504-0.337z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Godot Engine" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Godotengine extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7N, create_fragment$7N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gofundme.svelte generated by Svelte v3.23.2 */

        function create_fragment$7O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.6236 4.0792l-4.2223 3.0705c-.6695.4892-.8127 1.4224-.3309 2.0922.4892.6698 1.4221.8128 2.0921.3312l4.2219-3.0706c.67-.4892.8127-1.4224.3313-2.0922a1.4883 1.4883 0 0 0-2.092-.3312zm-9.6483-1.1816c-.8278 0-1.4978.6698-1.4978 1.4976v2.5212c0 .8279.67 1.4977 1.4978 1.4977.8279 0 1.4974-.6698 1.4974-1.4977V4.3952c0-.8278-.6695-1.4976-1.4974-1.4976zM.2877 4.4103c-.4892.6698-.3387 1.603.3308 2.0922L4.841 9.573c.6695.4891 1.6029.3386 2.092-.3312.4893-.6698.3387-1.603-.3313-2.0922L2.3798 4.0792c-.6773-.4817-1.6107-.3387-2.092.331zm3.695 7.7893C6.1051 10.303 8.905 9.144 11.9753 9.144c3.0705 0 5.8702 1.159 7.9926 3.0555zm14.5556 1.6335c-1.3473 0-2.236.4433-2.8004.9926-.5948.587-1.0232 1.5058-1.0232 2.6497 0 1.302.5646 2.1445 1.0089 2.5885.843.843 1.926 1.0385 2.829 1.0385 1.4827 0 2.2804-.4586 2.7843-.9478.5043-.4892.7234-1.024.8284-1.4078H19.825c-.1056.2107-.279.3687-.4296.459-.3083.1656-.7368.1814-.797.1814-.5492 0-.8583-.1883-1.0088-.3388-.2933-.286-.4296-.7757-.4296-1.1445h5.095v-.2634c0-.7601-.12-1.9567-1.0833-2.8749-.8132-.7676-1.8358-.9325-2.6334-.9325zm.0601 1.5577c.241 0 .6845.0448 1.008.3684.1881.1882.3384.4744.399.7378h-2.77c.0455-.3085.2038-.5572.3694-.7378.2561-.2634.5797-.3684.9936-.3684zm-16.851-1.3549h2.446v.8279c.5795-.7 1.377-.9483 2.047-.9483.4893 0 .9482.1054 1.3171.3086.5044.2634.783.6397.948.9783.2786-.4892.6251-.7827.9335-.9482.4892-.2785.9632-.3387 1.4226-.3387.5038 0 1.3317.0753 1.8961.6247.61.5945.6397 1.4073.6397 1.8814v4.4553h-2.4459v-3.379c0-.7226-.0753-1.2117-.3533-1.4676-.1359-.1204-.324-.2258-.6397-.2258-.2786 0-.5044.0753-.7228.2785-.414.3988-.4437.9633-.4437 1.302v3.507H6.346v-3.3791c0-.6548-.0454-1.1816-.324-1.4676-.2106-.2258-.4891-.2784-.7374-.2784-.2634 0-.474.0451-.6695.2483-.429.414-.429 1.0687-.429 1.4977v3.3791H1.74v-6.856Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GoFundMe" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gofundme extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7O, create_fragment$7O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/GogDotCom.svelte generated by Svelte v3.23.2 */

        function create_fragment$7P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.15 15.24H4.36a.4.4 0 0 0-.4.4v2c0 .21.18.4.4.4h2.8v1.32h-3.5c-.56 0-1.02-.46-1.02-1.03v-3.39c0-.56.46-1.02 1.03-1.02h3.48v1.32zM8.16 11.54c0 .58-.47 1.05-1.05 1.05H2.63v-1.35h3.78a.4.4 0 0 0 .4-.4V6.39a.4.4 0 0 0-.4-.4H4.39a.4.4 0 0 0-.41.4v2.02c0 .23.18.4.4.4H6v1.35H3.68c-.58 0-1.05-.46-1.05-1.04V5.68c0-.57.47-1.04 1.05-1.04H7.1c.58 0 1.05.47 1.05 1.04v5.86zM21.36 19.36h-1.32v-4.12h-.93a.4.4 0 0 0-.4.4v3.72h-1.33v-4.12h-.93a.4.4 0 0 0-.4.4v3.72h-1.33v-4.42c0-.56.46-1.02 1.03-1.02h5.61v5.44zM21.37 11.54c0 .58-.47 1.05-1.05 1.05h-4.48v-1.35h3.78a.4.4 0 0 0 .4-.4V6.39a.4.4 0 0 0-.4-.4h-2.03a.4.4 0 0 0-.4.4v2.02c0 .23.18.4.4.4h1.62v1.35H16.9c-.58 0-1.05-.46-1.05-1.04V5.68c0-.57.47-1.04 1.05-1.04h3.43c.58 0 1.05.47 1.05 1.04v5.86zM13.72 4.64h-3.44c-.58 0-1.04.47-1.04 1.04v3.44c0 .58.46 1.04 1.04 1.04h3.44c.57 0 1.04-.46 1.04-1.04V5.68c0-.57-.47-1.04-1.04-1.04m-.3 1.75v2.02a.4.4 0 0 1-.4.4h-2.03a.4.4 0 0 1-.4-.4V6.4c0-.22.17-.4.4-.4H13c.23 0 .4.18.4.4zM12.63 13.92H9.24c-.57 0-1.03.46-1.03 1.02v3.39c0 .57.46 1.03 1.03 1.03h3.39c.57 0 1.03-.46 1.03-1.03v-3.39c0-.56-.46-1.02-1.03-1.02m-.3 1.72v2a.4.4 0 0 1-.4.4v-.01H9.94a.4.4 0 0 1-.4-.4v-1.99c0-.22.18-.4.4-.4h2c.22 0 .4.18.4.4zM23.49 1.1a1.74 1.74 0 0 0-1.24-.52H1.75A1.74 1.74 0 0 0 0 2.33v19.34a1.74 1.74 0 0 0 1.75 1.75h20.5A1.74 1.74 0 0 0 24 21.67V2.33c0-.48-.2-.92-.51-1.24m0 20.58a1.23 1.23 0 0 1-1.24 1.24H1.75A1.23 1.23 0 0 1 .5 21.67V2.33a1.23 1.23 0 0 1 1.24-1.24h20.5a1.24 1.24 0 0 1 1.24 1.24v19.34z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GOG.com" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class GogDotCom extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7P, create_fragment$7P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Goldenline.svelte generated by Svelte v3.23.2 */

        function create_fragment$7Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.377 21.658c0 1.225-.989 2.215-2.212 2.215-1.224 0-2.217-.99-2.217-2.215 0-1.223.993-2.215 2.217-2.215 1.223 0 2.213.993 2.212 2.215zm-4.715-.172L6.47 22.7s-.287.08-.392-.215c-.06-.181.091-.398.091-.398l5.213-8.514s.267-.402.77-.549c.418-.121.872.16.872.16l8.351 5.253s.362.147.348.438c-.015.293-.333.343-.333.343l-5.04 1.178c-.426-.744-1.23-1.244-2.156-1.244-1.32 0-2.413 1.032-2.504 2.335h-.028zM3.898 7.297l1.513-5.263s.072-.303.381-.242c.186.031.303.273.303.273l4.889 8.698s.223.425.106.941c-.099.425-.567.683-.567.683L1.864 17.11s-.307.243-.547.084c-.242-.163-.136-.463-.136-.463l1.472-5.116c1.177-.206 2.071-1.233 2.071-2.47 0-.738-.319-1.396-.826-1.859v.011zm.532 1.858c0 1.225-.989 2.218-2.214 2.218C.995 11.373 0 10.38 0 9.155c0-1.221.995-2.213 2.216-2.213 1.225 0 2.217.992 2.217 2.213H4.43zm15.666-1.734l3.81 4.18s.211.212.003.445c-.124.141-.394.111-.394.111l-9.974-.395s-.478-.035-.853-.402c-.31-.303-.282-.838-.282-.838l.51-9.852s-.05-.389.212-.511c.27-.122.467.129.467.129l3.318 3.628c-.188.35-.293.744-.293 1.17 0 1.381 1.123 2.504 2.509 2.504.341 0 .667-.075.964-.197l.003.028zm1.25-2.317c0 1.229-.986 2.217-2.212 2.217-1.224 0-2.217-.987-2.217-2.217 0-1.215.993-2.201 2.217-2.201 1.223 0 2.213 1.002 2.213 2.217l-.001-.016z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GoldenLine" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Goldenline extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7Q, create_fragment$7Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Goodreads.svelte generated by Svelte v3.23.2 */

        function create_fragment$7R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.525 15.977V.49h-2.059v2.906h-.064c-.211-.455-.481-.891-.842-1.307-.36-.412-.767-.777-1.232-1.094-.466-.314-.962-.561-1.519-.736C13.256.09 12.669 0 12.038 0c-1.21 0-2.3.225-3.246.67-.947.447-1.743 1.057-2.385 1.83-.642.773-1.133 1.676-1.47 2.711-.336 1.037-.506 2.129-.506 3.283 0 1.199.141 2.326.425 3.382.286 1.057.737 1.976 1.368 2.762.631.78 1.412 1.397 2.375 1.833.961.436 2.119.661 3.471.661 1.248 0 2.33-.315 3.262-.946s1.638-1.473 2.119-2.525h.061v2.284c0 2.044-.421 3.607-1.264 4.705-.84 1.081-2.224 1.638-4.146 1.638-.572 0-1.128-.061-1.669-.181-.542-.12-1.036-.315-1.487-.57-.437-.271-.827-.601-1.143-1.038-.316-.435-.526-.961-.632-1.593H5.064c.067.887.315 1.654.737 2.3.424.646.961 1.172 1.602 1.593.641.406 1.367.706 2.172.902.811.194 1.639.3 2.494.3 1.383 0 2.541-.195 3.486-.555.947-.376 1.714-.902 2.301-1.608.601-.708 1.021-1.549 1.293-2.556.27-1.007.42-2.134.42-3.367l-.044.062zm-7.484-.557c-.955 0-1.784-.189-2.479-.571-.697-.38-1.277-.882-1.732-1.503-.467-.621-.797-1.332-1.022-2.139s-.332-1.633-.332-2.484c0-.871.105-1.725.301-2.563.21-.84.54-1.587.992-2.24.451-.652 1.037-1.182 1.728-1.584s1.533-.605 2.51-.605 1.803.209 2.495.621c.676.415 1.247.959 1.683 1.634.436.677.751 1.429.947 2.255.195.826.285 1.656.285 2.482 0 .852-.12 1.678-.345 2.484-.226.807-.572 1.518-1.038 2.139-.465.621-1.021 1.123-1.698 1.503-.676.382-1.458.571-2.359.571h.064z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Goodreads" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Goodreads extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7R, create_fragment$7R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Google.svelte generated by Svelte v3.23.2 */

        function create_fragment$7S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.24 10.285V14.4h6.806c-.275 1.765-2.056 5.174-6.806 5.174-4.095 0-7.439-3.389-7.439-7.574s3.345-7.574 7.439-7.574c2.33 0 3.891.989 4.785 1.849l3.254-3.138C18.189 1.186 15.479 0 12.24 0c-6.635 0-12 5.365-12 12s5.365 12 12 12c6.926 0 11.52-4.869 11.52-11.726 0-.788-.085-1.39-.189-1.989H12.24z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Google extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7S, create_fragment$7S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googleads.svelte generated by Svelte v3.23.2 */

        function create_fragment$7T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.994 1.046h.022c.899.002 1.73.301 2.398.805l.003.001.001.001a4 4 0 011.116 1.299l4.467 7.769.025.065 3.419 5.927A3.98 3.98 0 0124 18.948c0 .565-.117 1.104-.329 1.592l.006.016a3.93 3.93 0 01-.634.993 3.97 3.97 0 01-1.045.868 3.984 3.984 0 01-1.946.537h-.068a3.984 3.984 0 01-2.398-.805l-.003-.001v-.001h-.001a4 4 0 01-1.116-1.299l-4.467-7.769-.025-.065-3.419-5.927-.005-.009-.011-.019A3.981 3.981 0 018 5.052c0-.424.066-.832.188-1.215v-.001l.008-.025.01-.03c.052-.157.117-.337.117-.337.158-.358.371-.689.626-.984l.063-.072.014-.015.002-.003.001-.001.002-.002.009-.01.006-.007c.27-.296.59-.557.956-.767a3.984 3.984 0 011.946-.537h.046zM4.006 22.954h-.058a3.984 3.984 0 01-1.946-.537 3.97 3.97 0 01-1.045-.868 3.93 3.93 0 01-.634-.993l.006-.016A3.988 3.988 0 010 18.948c0-.743.202-1.439.555-2.035l3.419-5.927.025-.065 3.039-5.286c.076.648.276 1.281.596 1.856l.057.1 3.377 5.854-.003-.01.067.142.291.507-3.889 6.764a4 4 0 01-1.116 1.299h-.001v.001l-.003.001a3.984 3.984 0 01-2.398.805h-.01z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Ads" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googleads extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7T, create_fragment$7T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googleadsense.svelte generated by Svelte v3.23.2 */

        function create_fragment$7U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.842 1.375a3.958 3.958 0 0 0-.352.01 3.935 3.935 0 0 0-3.133 1.933 4.233 4.233 0 0 0-.134.254l-3.67 6.28a4.63 4.63 0 0 0-.227.386l-2.263 3.907a4.847 4.847 0 0 1 2.468-.36 4.765 4.765 0 0 1 1.858.617A4.981 4.981 0 0 1 8.81 18.08l2.306-3.969a3.753 3.753 0 0 0 .227-.384l3.67-6.282a3.86 3.86 0 0 0-1.284-5.549 3.958 3.958 0 0 0-1.888-.521zm8.36 6.553a3.894 3.894 0 0 0-3.458 1.937l-3.889 6.719a3.874 3.874 0 0 0 1.424 5.3 3.894 3.894 0 0 0 5.313-1.42l3.888-6.718a3.875 3.875 0 0 0-1.423-5.299 3.894 3.894 0 0 0-1.856-.52zm-16.384 6.83A3.987 3.987 0 0 0 .721 16.46l-.065.11c-.043.066-.096.123-.136.193-1.08 1.887-.418 4.253 1.453 5.343 1.87 1.09 4.305.395 5.384-1.494.028-.047.04-.098.065-.146l.004-.006c.96-1.86.278-4.13-1.543-5.191a3.792 3.792 0 0 0-1.666-.51 3.987 3.987 0 0 0-.399-.002Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google AdSense" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googleadsense extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7U, create_fragment$7U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googleanalytics.svelte generated by Svelte v3.23.2 */

        function create_fragment$7V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.36 21.14A2.86 2.86 0 014.5 24a2.86 2.86 0 01-2.86-2.86 2.86 2.86 0 012.86-2.87 2.86 2.86 0 012.86 2.87zM9.14 12v8.86C9.14 22.88 10.53 24 12 24c1.36 0 2.86-.95 2.86-3.14v-8.72c0-1.85-1.36-3-2.86-3A2.91 2.91 0 009.14 12zm7.5-9.14v18c0 2.02 1.39 3.14 2.86 3.14 1.36 0 2.86-.95 2.86-3.14V3c0-1.85-1.36-3-2.86-3a2.91 2.91 0 00-2.86 2.86Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Analytics" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googleanalytics extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7V, create_fragment$7V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googleassistant.svelte generated by Svelte v3.23.2 */

        function create_fragment$7W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.545 1.03C2.93 1.03 0 3.975 0 7.61c0 3.635 2.93 6.582 6.545 6.582 3.615 0 6.545-2.947 6.545-6.582S10.16 1.03 6.545 1.03zm15.818 4.388a1.64 1.64 0 00-1.636 1.644c0 .909.733 1.647 1.636 1.647.904 0 1.637-.738 1.637-1.646a1.64 1.64 0 00-1.637-1.645zm-4.91 2.193a3.28 3.28 0 00-3.271 3.291 3.28 3.28 0 003.271 3.291 3.282 3.282 0 003.274-3.29 3.282 3.282 0 00-3.274-3.292zm0 7.68c-2.109 0-3.818 1.72-3.818 3.84s1.71 3.84 3.818 3.84c2.109 0 3.818-1.72 3.818-3.84s-1.71-3.84-3.818-3.84Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Assistant" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googleassistant extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7W, create_fragment$7W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlecalendar.svelte generated by Svelte v3.23.2 */

        function create_fragment$7X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.84 4.15c-.993 0-1.8.787-1.84 1.772.003.058.004.116.012.172l1.19 7.597h6.384v-.43h.873c1.145 0 2.083-.567 2.083-1.793 0-1.227-.659-1.835-1.827-1.835-1.213 0-1.861.79-1.88 1.75h-1.25c.024-1.643 1.411-2.77 3.132-2.77 1.932 0 3.078 1.096 3.078 2.882 0 1.138-.869 1.895-1.563 2.196h6.079v-3.468l-2.619.873V9.922l3.647-1.31h.203v5.08h5.256l1.19-7.598c.008-.057.01-.115.012-.172a1.842 1.842 0 0 0-1.84-1.772zm-.615 9.696l-.611 7.877a1.846 1.846 0 0 0 1.843 1.974h19.087a1.846 1.846 0 0 0 1.842-1.974l-.611-7.877h-5.233v5.233H16.31v-5.233h-5.806c.635.277 1.443.908 1.44 2.255 0 1.95-1.457 2.98-3.224 2.98-1.53 0-3.176-.815-3.23-2.771h1.258c.028 1.214.955 1.758 1.972 1.758 1.168 0 1.976-.613 1.976-1.94 0-1.014-.554-1.888-2.238-1.888h-.873v-.394zM3.076.304c-1.02 0-1.846.826-1.846 1.846l.006 1.957a1.83 1.83 0 0 1 .61-.112h20.308c.217 0 .422.045.616.113V2.15c0-1.02-.826-1.846-1.846-1.846zm3.078.922a.923.923 0 0 1 .922.924.923.923 0 0 1-.922.921.923.923 0 0 1-.924-.921.923.923 0 0 1 .924-.924zm11.692 0a.923.923 0 0 1 .924.924.923.923 0 0 1-.924.921.923.923 0 0 1-.922-.921.923.923 0 0 1 .922-.924Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Calendar" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlecalendar extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7X, create_fragment$7X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlecardboard.svelte generated by Svelte v3.23.2 */

        function create_fragment$7Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.234 4.932a2.959 2.959 0 00-2.18-.977H3.083c-.827 0-1.58.375-2.18.977C.3 5.534 0 6.361 0 7.188v9.624c0 .827.3 1.654.902 2.256a2.814 2.814 0 002.18.977H7.37a3.22 3.22 0 001.654-.45c.451-.301.902-.753 1.128-1.279l1.203-2.33c.15-.302.376-.452.677-.452.3 0 .601.15.676.451l1.203 2.331c.226.526.677.902 1.128 1.203.451.3 1.053.451 1.58.451h4.285c.827 0 1.58-.376 2.18-.977.602-.602.903-1.429.903-2.256v-9.55c.075-.826-.15-1.653-.752-2.255zm-16.617 9.55c-1.354 0-2.406-1.129-2.406-2.482 0-1.353 1.128-2.406 2.481-2.406s2.406 1.128 2.406 2.481c-.075 1.278-1.128 2.406-2.481 2.406zm10.978 0c-1.354 0-2.482-1.053-2.482-2.407 0-1.353 1.053-2.481 2.407-2.481C18.873 9.594 20 10.647 20 12c0 1.353-1.052 2.481-2.405 2.481Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Cardboard" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlecardboard extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7Y, create_fragment$7Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlecast.svelte generated by Svelte v3.23.2 */

        function create_fragment$7Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 18.5455v3.2727h3.2727c0-1.811-1.4618-3.2727-3.2727-3.2727zm0-4.3637v2.1818c3.011 0 5.4545 2.4437 5.4545 5.4546h2.1819c0-4.2218-3.4146-7.6364-7.6364-7.6364zm0-4.3636V12c5.4218 0 9.8182 4.3964 9.8182 9.8182H12c0-6.6327-5.3782-12-12-12zm21.8182-7.6364H2.1818C.9818 2.1818 0 3.1636 0 4.3636v3.2728h2.1818V4.3636h19.6364v15.2728h-7.6364v2.1818h7.6364c1.2 0 2.1818-.9818 2.1818-2.1818V4.3636c0-1.2-.9818-2.1818-2.1818-2.1818Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Cast" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlecast extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7Z, create_fragment$7Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlechrome.svelte generated by Svelte v3.23.2 */

        function create_fragment$7_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.214 8.69l6.715-1.679A12.027 12.027 0 0 1 24 11.972C24 18.57 18.569 24 11.968 24c-.302 0-.605-.011-.907-.034l4.905-8.347c.356-.376.655-.803.881-1.271a5.451 5.451 0 0 0-.043-4.748 5.156 5.156 0 0 0-.59-.91zm-3.24 8.575l-2.121 6.682C4.738 23.345 0 18.14 0 11.977 0 9.592.709 7.26 2.038 5.279l4.834 8.377c.18.539 1.119 2.581 3.067 3.327.998.382 2.041.481 3.035.282zM11.973 7.62c-2.006.019-3.878 1.544-4.281 3.512a4.478 4.478 0 0 0 1.237 4.032c1.214 1.186 3.14 1.578 4.734.927 1.408-.576 2.47-1.927 2.691-3.431.272-1.856-.788-3.832-2.495-4.629a4.413 4.413 0 0 0-1.886-.411zM7.046 9.962L2.259 4.963A12.043 12.043 0 0 1 11.997 0c4.56 0 8.744 2.592 10.774 6.675H12.558c-1.811-.125-3.288.52-4.265 1.453a5.345 5.345 0 0 0-1.247 1.834z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Chrome" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlechrome extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7_, create_fragment$7_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googleclassroom.svelte generated by Svelte v3.23.2 */

        function create_fragment$7$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.6367 1.6367C.7322 1.6367 0 2.369 0 3.2734v17.4532c0 .9045.7322 1.6367 1.6367 1.6367h20.7266c.9045 0 1.6367-.7322 1.6367-1.6367V3.2734c0-.9045-.7322-1.6367-1.6367-1.6367H1.6367zm.545 2.1817h19.6367v16.3632h-2.7266v-1.0898h-4.9102v1.0898h-12V3.8184zM12 8.1816c-.9046 0-1.6367.7322-1.6367 1.6368 0 .9045.7321 1.6367 1.6367 1.6367.9046 0 1.6367-.7322 1.6367-1.6367 0-.9046-.7321-1.6368-1.6367-1.6368zm-4.3633 1.9102c-.6773 0-1.2285.5493-1.2285 1.2266 0 .6772.5512 1.2265 1.2285 1.2265.6773 0 1.2266-.5493 1.2266-1.2265 0-.6773-.5493-1.2266-1.2266-1.2266zm8.7266 0c-.6773 0-1.2266.5493-1.2266 1.2266 0 .6772.5493 1.2265 1.2266 1.2265.6773 0 1.2285-.5493 1.2285-1.2265 0-.6773-.5512-1.2266-1.2285-1.2266zM12 12.5449c-1.179 0-2.4128.4012-3.1484 1.0059-.384-.1198-.8043-.1875-1.2149-.1875-1.3136 0-2.7285.695-2.7285 1.5586v.8965h14.1836v-.8965c0-.8637-1.4149-1.5586-2.7285-1.5586-.4106 0-.831.0677-1.2149.1875-.7356-.6047-1.9694-1.0059-3.1484-1.0059Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$7$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Classroom" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googleclassroom extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$7$, create_fragment$7$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlecloud.svelte generated by Svelte v3.23.2 */

        function create_fragment$80(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.19 2.38a9.344 9.344 0 0 0-9.234 6.893c.053-.02-.055.013 0 0-3.875 2.551-3.922 8.11-.247 10.941l.006-.007-.007.03a6.717 6.717 0 0 0 4.077 1.356h5.173l.03.03h5.192c6.687.053 9.376-8.605 3.835-12.35a9.365 9.365 0 0 0-2.821-4.552l-.043.043.006-.05A9.344 9.344 0 0 0 12.19 2.38zm-.358 4.146c1.244-.04 2.518.368 3.486 1.15a5.186 5.186 0 0 1 1.862 4.078v.518c3.53-.07 3.53 5.262 0 5.193h-5.193l-.008.009v-.04H6.785a2.59 2.59 0 0 1-1.067-.23h.001a2.597 2.597 0 1 1 3.437-3.437l3.013-3.012A6.747 6.747 0 0 0 8.11 8.24c.018-.01.04-.026.054-.023a5.186 5.186 0 0 1 3.67-1.69z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$80($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Cloud" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlecloud extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$80, create_fragment$80, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googledrive.svelte generated by Svelte v3.23.2 */

        function create_fragment$81(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.433 22.396l4-6.929H24l-4 6.929H4.433zm3.566-6.929l-3.998 6.929L0 15.467 7.785 1.98l3.999 6.931-3.785 6.556zm15.784-.375h-7.999L7.999 1.605h8.002l7.785 13.486h-.003z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$81($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Drive" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googledrive extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$81, create_fragment$81, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googleearth.svelte generated by Svelte v3.23.2 */

        function create_fragment$82(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0c-1.326 0-2.597.22-3.787.613 4.94-1.243 8.575 1.72 11.096 5.606 1.725 2.695 2.813 2.83 4.207 2.412A11.956 11.956 0 0012 0zM7.658 2.156c-1.644.019-3.295.775-4.931 2.207A11.967 11.967 0 000 12c.184-2.823 2.163-5.128 4.87-5.07 2.104.044 4.648 1.518 7.13 5.289 4.87 7.468 10.917 5.483 11.863 1.51.081-.566.137-1.14.137-1.729 0-.176-.02-.347-.027-.521-1.645 1.725-4.899 2.35-8.264-2.97-2.59-4.363-5.31-6.383-8.05-6.353zM3.33 13.236c-1.675.13-2.657 1.804-2.242 3.756A11.955 11.955 0 0012 24c4.215 0 7.898-2.149 10.037-5.412v-.043c-2.836 3.49-8.946 4.255-13.855-2.182-1.814-2.386-3.544-3.228-4.852-3.127Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$82($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Earth" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googleearth extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$82, create_fragment$82, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlefit.svelte generated by Svelte v3.23.2 */

        function create_fragment$83(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6 1.84c-3.315 0-6 2.678-6 5.982a5.948 5.948 0 001.758 4.23l.54.541L3.502 13.8l2.615-2.603-1.205-1.21-.541-.543a2.273 2.273 0 01-.674-1.622c0-.534.186-1.024.493-1.414a2.3 2.3 0 013.448-.198l.538.522 1.213 1.2c-1.96 1.96-3.923 3.914-5.887 5.868l1.403 1.407 1.209 1.203 3.27 3.274-.004.003L12 22.16l2.616-2.475h-.001l-.002-.002 5.885-5.883 1.744-1.747c1.22-1.215 1.917-3.09 1.727-4.983-.288-2.865-2.662-5.016-5.544-5.213a6 6 0 00-4.667 1.736l-1.754 1.743-1.213-1.21-.55-.533A5.995 5.995 0 006 1.841zm11.96 3.688a2.303 2.303 0 012.32 1.963 2.286 2.286 0 01-.657 1.959l-1.744 1.747-5.882 5.876-3.271-3.263 3.277-3.263 4.368-4.346c.426-.425.99-.663 1.589-.673Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$83($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Fit" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlefit extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$83, create_fragment$83, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlehangouts.svelte generated by Svelte v3.23.2 */

        function create_fragment$84(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C6.2 0 1.5 4.7 1.5 10.5c0 5.5 5 10 10.5 10V24c6.35-3.1 10.5-8.2 10.5-13.5C22.5 4.7 17.8 0 12 0zm-.5 12c0 1.4-.9 2.5-2 2.5V12H7V7.5h4.5V12zm6 0c0 1.4-.9 2.5-2 2.5V12H13V7.5h4.5V12z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$84($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Hangouts" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlehangouts extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$84, create_fragment$84, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlehangoutschat.svelte generated by Svelte v3.23.2 */

        function create_fragment$85(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0A10.357 10.357 0 0 0 1.637 10.363c0 5.427 4.949 9.818 10.363 9.818v3.818c6.3-3.191 10.363-8.333 10.363-13.637A10.358 10.358 0 0 0 12-.001zm.027 4.227c.873 0 1.664.151 2.4.465s1.364.722 1.895 1.254c.532.532.94 1.145 1.24 1.855s.451 1.459.451 2.25c0 .45-.055.86-.15 1.242s-.246.722-.451 1.008c-.205.286-.45.518-.75.682s-.64.246-1.035.246c-.382 0-.735-.096-1.035-.287s-.547-.464-.725-.832a2.586 2.586 0 0 1-.885.832c-.355.191-.765.287-1.242.287a2.923 2.923 0 0 1-2.099-.873A3.066 3.066 0 0 1 9 11.374a3.376 3.376 0 0 1-.232-1.256c0-.45.082-.872.232-1.254.164-.382.368-.709.641-.982.259-.273.574-.491.928-.641s.723-.232 1.105-.232.735.082 1.035.232.559.355.764.6h.096v-.613h1.295v3.832c0 .245.068.464.205.668s.355.312.641.312c.191 0 .354-.054.49-.176s.232-.286.314-.477c.082-.191.136-.424.164-.656a6.67 6.67 0 0 0 .041-.723c0-.614-.123-1.201-.355-1.76a4.897 4.897 0 0 0-.98-1.459c-.423-.423-.914-.749-1.486-.994s-1.187-.367-1.869-.367c-.655 0-1.267.122-1.84.354s-1.064.56-1.486.969c-.423.409-.751.9-.996 1.459-.245.573-.367 1.186-.367 1.855s.122 1.282.367 1.855.586 1.05 1.023 1.459a4.75 4.75 0 0 0 3.287 1.322c.75 0 1.404-.164 1.99-.477l.477 1.199a5.864 5.864 0 0 1-2.455.518c-.873 0-1.664-.149-2.414-.463-.736-.314-1.376-.724-1.908-1.256s-.956-1.145-1.256-1.855c-.3-.709-.449-1.471-.449-2.275s.149-1.555.449-2.277a5.736 5.736 0 0 1 3.164-3.123c.723-.314 1.527-.465 2.414-.465zM11.836 8.4c-.218 0-.436.041-.641.123s-.382.19-.545.34a1.44 1.44 0 0 0-.369.561c-.095.218-.135.462-.135.734s.04.518.135.736c.095.218.219.409.369.559.164.15.341.274.545.342a1.727 1.727 0 0 0 1.282 0c.205-.082.382-.192.545-.342s.287-.327.369-.545c.095-.218.135-.464.135-.75s-.04-.532-.135-.75a1.74 1.74 0 0 0-.369-.545 1.759 1.759 0 0 0-1.186-.463z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$85($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Hangouts Chat" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlehangoutschat extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$85, create_fragment$85, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlehangoutsmeet.svelte generated by Svelte v3.23.2 */

        function create_fragment$86(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C6.28 0 1.636 4.641 1.636 10.364c0 5.421 4.945 9.817 10.364 9.817V24c6.295-3.194 10.364-8.333 10.364-13.636C22.364 4.64 17.72 0 12 0zM7.5 6.272h6.817a1.363 1.363 0 0 1 1.365 1.365v1.704l2.728-2.727v7.501l-2.726-2.726v1.703a1.362 1.362 0 0 1-1.365 1.365H7.5c-.35 0-.698-.133-.965-.4a1.358 1.358 0 0 1-.4-.965V7.637A1.362 1.362 0 0 1 7.5 6.272Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$86($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Hangouts Meet" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlehangoutsmeet extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$86, create_fragment$86, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlekeep.svelte generated by Svelte v3.23.2 */

        function create_fragment$87(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.995 7.995C19.995 3.6 16.396 0 12 0S4.005 3.6 4.005 7.995c0 2.55 1.2 4.89 3.194 6.405v7.979H8.82V24h6.359v-1.62H16.8V14.4c2.011-1.5 3.195-3.87 3.195-6.405zM8.805 20.774v-1.575h6.391v1.575H8.805zm0-3.194v-1.575h6.391v1.575H8.805zm6.75-4.261l-.359.24v.841H8.805v-.84l-.345-.24c-1.8-1.199-2.85-3.18-2.85-5.324 0-3.525 2.85-6.391 6.39-6.391s6.39 2.851 6.39 6.391c0 2.145-1.05 4.14-2.85 5.324h.015z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$87($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Keep" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlekeep extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$87, create_fragment$87, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlelens.svelte generated by Svelte v3.23.2 */

        function create_fragment$88(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 16.667a4.666 4.666 0 100-9.333 4.666 4.666 0 000 9.333m8 6a2.666 2.666 0 100-5.333 2.666 2.666 0 000 5.333m-13.333-2a3.343 3.343 0 01-3.334-3.334v-2.666H0v2.666A6.665 6.665 0 006.667 24h2.666v-3.333zm-3.334-14c0-1.834 1.5-3.334 3.334-3.334h2.666V0H6.667A6.665 6.665 0 000 6.667v2.666h3.333zm14-3.334c1.834 0 3.334 1.5 3.334 3.334v2.666H24V6.667A6.665 6.665 0 0017.333 0h-2.666v3.333Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$88($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Lens" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlelens extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$88, create_fragment$88, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlemaps.svelte generated by Svelte v3.23.2 */

        function create_fragment$89(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.527 4.799c1.212 2.608.937 5.678-.405 8.173-1.101 2.047-2.744 3.74-4.098 5.614-.619.858-1.244 1.75-1.669 2.727-.141.325-.263.658-.383.992-.121.333-.224.673-.34 1.008-.109.314-.236.684-.627.687h-.007c-.466-.001-.579-.53-.695-.887-.284-.874-.581-1.713-1.019-2.525-.51-.944-1.145-1.817-1.79-2.671L19.527 4.799zM8.545 7.705l-3.959 4.707c.724 1.54 1.821 2.863 2.871 4.18.247.31.494.622.737.936l4.984-5.925-.029.01c-1.741.601-3.691-.291-4.392-1.987a3.377 3.377 0 0 1-.209-.716c-.063-.437-.077-.761-.004-1.198l.001-.007zM5.492 3.149l-.003.004c-1.947 2.466-2.281 5.88-1.117 8.77l4.785-5.689-.058-.05-3.607-3.035zM14.661.436l-3.838 4.563a.295.295 0 0 1 .027-.01c1.6-.551 3.403.15 4.22 1.626.176.319.323.683.377 1.045.068.446.085.773.012 1.22l-.003.016 3.836-4.561A8.382 8.382 0 0 0 14.67.439l-.009-.003zM9.466 5.868L14.162.285l-.047-.012A8.31 8.31 0 0 0 11.986 0a8.439 8.439 0 0 0-6.169 2.766l-.016.018 3.665 3.084z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$89($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Maps" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlemaps extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$89, create_fragment$89, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlemessages.svelte generated by Svelte v3.23.2 */

        function create_fragment$8a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.92 3.332c-.776 0-1.216.67-.692 1.383l2.537 4.403v7.86c0 2.013 1.467 3.69 3.459 3.69H20.31a3.75 3.75 0 003.69-3.69V7.043a3.723 3.723 0 00-3.668-3.71zm5.786 3.71H20.1c.587 0 1.153.357 1.153.923 0 .566-.566.922-1.153.922H6.706c-.587 0-1.153-.356-1.153-.922 0-.566.566-.923 1.153-.923zm0 3.69H20.1c.587 0 1.153.356 1.153.922 0 .566-.566.922-1.153.922H6.706c-.587 0-1.153-.356-1.153-.922 0-.566.566-.922 1.153-.922zm-.021 3.71h9.705c.587 0 1.153.356 1.153.922 0 .566-.566.923-1.153.923H6.685c-.587 0-1.153-.357-1.153-.923 0-.566.566-.922 1.153-.922Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Messages" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlemessages extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8a, create_fragment$8a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlemybusiness.svelte generated by Svelte v3.23.2 */

        function create_fragment$8b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.273 1.643c-.736 0-1.363.492-1.568 1.16L0 9.279c0 1.664 1.336 3 3 3a3 3 0 003-3c0 1.664 1.336 3 3 3a3 3 0 003-3c0 1.65 1.35 3 3 3 1.664 0 3-1.336 3-3 0 1.664 1.336 3 3 3s3-1.336 3-3l-1.705-6.476a1.646 1.646 0 00-1.568-1.16H3.273zm8.729 9.326c-.604 1.063-1.703 1.81-3.002 1.81-1.304 0-2.398-.747-3-1.806-.604 1.06-1.702 1.806-3 1.806-.484 0-.944-.1-1.363-.277v8.232c0 .9.736 1.637 1.636 1.637h17.454c.9 0 1.636-.737 1.636-1.637v-8.232c-.419.178-.88.277-1.363.277-1.304 0-2.398-.746-3-1.804-.602 1.058-1.696 1.804-3 1.804-1.299 0-2.394-.75-2.998-1.81zm5.725 3.765c.808 0 1.488.298 2.007.782l-.859.859a1.623 1.623 0 00-1.148-.447c-.98 0-1.772.827-1.772 1.806 0 .98.792 1.807 1.772 1.807.882 0 1.485-.501 1.615-1.191h-1.615v-1.16h2.826c.035.196.054.4.054.613 0 1.714-1.147 2.931-2.88 2.931a3 3 0 010-6Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google My Business" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlemybusiness extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8b, create_fragment$8b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlenearby.svelte generated by Svelte v3.23.2 */

        function create_fragment$8c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.546 12l5.455-5.455L17.455 12l-5.454 5.454zm16.976-1.154L13.158.48a1.635 1.635 0 00-2.314 0L.478 10.846a1.629 1.629 0 000 2.305l10.37 10.371a1.629 1.629 0 002.304 0l10.37-10.371a1.629 1.629 0 000-2.305zM12 20.726l-8.727-8.728L12 3.27l8.727 8.728Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Nearby" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlenearby extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8c, create_fragment$8c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlenews.svelte generated by Svelte v3.23.2 */

        function create_fragment$8d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.0863 5.6694v-2.875a.6101.6101 0 0 0-.6114-.6073H5.5235a.6101.6101 0 0 0-.6156.6074v2.834l8.3905-3.052a.5938.5938 0 0 1 .7422.3895l.5448 1.4981zM23.582 7.343l-8.8032-2.3683.7518 2.066h5.5837a.6142.6142 0 0 1 .6128.6128v8.795l2.247-8.366a.5924.5924 0 0 0-.3921-.7395zM2.27 7.6535a.6156.6156 0 0 1 .613-.6128h12.1546l-1.2693-3.4905a.5951.5951 0 0 0-.7435-.3827L.3674 7.7748a.5938.5938 0 0 0-.3227.775l2.2253 6.112zm0 0a.6156.6156 0 0 1 .613-.6128h12.1546l-1.2693-3.4905a.5951.5951 0 0 0-.7435-.3827L.3674 7.7748a.5938.5938 0 0 0-.3227.775l2.2253 6.112zM21.2668 21.2a.6142.6142 0 0 1-.6129.6129H3.3445a.6142.6142 0 0 1-.6129-.6129V8.1153a.6142.6142 0 0 1 .6129-.6129h17.3093a.6142.6142 0 0 1 .6129.6129zm-3.0315-3.4196v-1.1958a.0804.0804 0 0 0-.0804-.0803h-5.3726v1.3619h5.3726a.0817.0817 0 0 0 .0804-.0858zm.817-2.5876v-1.2012a.0804.0804 0 0 0-.0803-.0817h-6.1897v1.3619h6.1897a.079.079 0 0 0 .0804-.0817zm-.817-2.5875v-1.2067a.0804.0804 0 0 0-.0804-.0803h-5.3726v1.3619h5.3726a.0817.0817 0 0 0 .0804-.079zm-10.086 1.4395v1.2256h1.7704c-.1457.749-.8049 1.2925-1.7704 1.2925a1.976 1.976 0 0 1 0-3.9495 1.7704 1.7704 0 0 1 1.2529.4903l.9342-.9329a3.1405 3.1405 0 0 0-2.1871-.8525 3.2685 3.2685 0 1 0 0 6.537c1.8889 0 3.1323-1.3279 3.1323-3.1977a3.9576 3.9576 0 0 0-.0518-.6183Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google News" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlenews extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8d, create_fragment$8d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlepay.svelte generated by Svelte v3.23.2 */

        function create_fragment$8e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.963 7.235A3.963 3.963 0 00.422 9.419a3.963 3.963 0 000 3.559 3.963 3.963 0 003.541 2.184c1.07 0 1.97-.352 2.627-.957.748-.69 1.18-1.71 1.18-2.916a4.722 4.722 0 00-.07-.806H3.964v1.526h2.14a1.835 1.835 0 01-.79 1.205c-.356.241-.814.379-1.35.379-1.034 0-1.911-.697-2.225-1.636a2.375 2.375 0 010-1.517c.314-.94 1.191-1.636 2.225-1.636a2.152 2.152 0 011.52.594l1.132-1.13a3.808 3.808 0 00-2.652-1.033zm6.501.55v6.9h.886V11.89h1.465c.603 0 1.11-.196 1.522-.588a1.911 1.911 0 00.635-1.464 1.92 1.92 0 00-.635-1.456 2.125 2.125 0 00-1.522-.598zm2.427.85a1.156 1.156 0 01.823.365 1.176 1.176 0 010 1.686 1.171 1.171 0 01-.877.357H11.35V8.635h1.487a1.156 1.156 0 01.054 0zm4.124 1.175c-.842 0-1.477.308-1.907.925l.781.491c.288-.417.68-.626 1.175-.626a1.255 1.255 0 01.856.323 1.009 1.009 0 01.366.785v.202c-.34-.193-.774-.289-1.3-.289-.617 0-1.11.145-1.479.434-.37.288-.554.677-.554 1.165a1.476 1.476 0 00.525 1.156c.35.308.785.463 1.305.463.61 0 1.098-.27 1.465-.81h.038v.655h.848v-2.909c0-.61-.19-1.09-.568-1.44-.38-.35-.896-.525-1.551-.525zm2.263.154l1.946 4.422-1.098 2.38h.915L24 9.963h-.965l-1.368 3.391h-.02l-1.406-3.39zm-2.146 2.368c.494 0 .88.11 1.156.33 0 .372-.147.696-.44.973a1.413 1.413 0 01-.997.414 1.081 1.081 0 01-.69-.232.708.708 0 01-.293-.578c0-.257.12-.47.363-.647.24-.173.54-.26.9-.26Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Pay" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlepay extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8e, create_fragment$8e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googleplay.svelte generated by Svelte v3.23.2 */

        function create_fragment$8f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.22 0c-.03.093-.06.185-.06.308v23.229c0 .217.061.34.184.463l11.415-12.093L1.22 0zm12.309 12.708l2.951 3.045-4.213 2.4s-5.355 3.044-8.308 4.739l9.57-10.184zm.801-.831l3.166 3.292c.496-.276 4.371-2.492 4.924-2.8.584-.338.525-.8.029-1.046-.459-.255-4.334-2.475-4.92-2.835l-3.203 3.392.004-.003zm-.803-.8l2.984-3.169-4.259-2.431S5.309 1.505 2.999.179l10.53 10.898h-.002z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Play" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googleplay extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8f, create_fragment$8f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlepodcasts.svelte generated by Svelte v3.23.2 */

        function create_fragment$8g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.5 9.68c-.83 0-1.5.67-1.5 1.5V12.81a1.5 1.5 0 1 0 3 0v-1.63c0-.83-.67-1.5-1.5-1.5zM22.5 9.68c-.83 0-1.5.67-1.5 1.5V12.81a1.5 1.5 0 1 0 3 0v-1.63c0-.83-.67-1.5-1.5-1.5zM6.68 14.59c-.83 0-1.5.67-1.5 1.5V17.72a1.5 1.5 0 1 0 3 0V16.1c0-.83-.67-1.5-1.5-1.5zM6.68 4.77c-.83 0-1.5.67-1.5 1.5V11.63a1.5 1.5 0 0 0 3 0V6.26c0-.83-.67-1.5-1.5-1.5zM17.32 4.77c-.83 0-1.5.67-1.5 1.5V7.91a1.5 1.5 0 0 0 3 0V6.27c0-.83-.67-1.5-1.5-1.5zM12 0c-.83 0-1.5.67-1.5 1.5v1.63a1.5 1.5 0 1 0 3 0V1.5C13.5.67 12.83 0 12 0zM12 19.36c-.83 0-1.5.67-1.5 1.5V22.5a1.5 1.5 0 1 0 3 .01v-1.64c0-.82-.67-1.5-1.5-1.5zM17.32 10.9c-.83 0-1.5.68-1.5 1.5v5.33a1.5 1.5 0 0 0 3 0V12.4c0-.83-.67-1.5-1.5-1.5zM12 6.13c-.83 0-1.5.68-1.5 1.5v8.73a1.5 1.5 0 0 0 3 0V7.64c0-.83-.67-1.5-1.5-1.5z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Podcasts" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlepodcasts extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8g, create_fragment$8g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlescholar.svelte generated by Svelte v3.23.2 */

        function create_fragment$8h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 24a7 7 0 1 1 0-14 7 7 0 0 1 0 14zm0-24L0 9.5l4.838 3.94A8 8 0 0 1 12 9a8 8 0 0 1 7.162 4.44L24 9.5z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Scholar" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlescholar extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8h, create_fragment$8h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlesearchconsole.svelte generated by Svelte v3.23.2 */

        function create_fragment$8i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.548 1.156L6.832 2.872v1.682h1.716zm0 3.398v.035H6.832v-.035H3.386L0 7.844v3.577h2.826V8.94c0-.525.429-.954.954-.954h16.476c.525 0 .954.43.954.954v2.48h2.754V7.844l-3.386-3.29H17.3v.035h-1.717v-.035zm7.035 0H17.3V2.872l-1.717-1.716zM8.679 1.188V2.84h6.773V1.188zm11.471 7.07a.834.834 0 00-.132.01l-.543.002c-5.216.014-10.432-.008-15.648.01-.435-.063-.794.436-.716.883v2.264h17.812c-.016-.888.045-1.782-.034-2.666-.104-.342-.427-.502-.739-.502zm-15.422.634a.689.698 0 01.689.698.689.698 0 01-.689.697.689.698 0 01-.688-.697.689.698 0 01.688-.698zm2.134 0a.689.698 0 01.689.698.689.698 0 01-.689.697.689.698 0 01-.688-.697.689.698 0 01.688-.698zM.036 11.645v9.156c0 1.05.858 1.908 1.907 1.908h.883V11.645zm21.174 0v11.064h.882c1.05 0 1.908-.858 1.908-1.908v-9.156zM4.057 13.133v6.85h6.137v-6.85zm13.243.021v3.777l-1.708.977-1.708-.977v-3.758a4.006 4.006 0 000 7.23v2.441h3.457v-2.442a4.006 4.006 0 00-.041-7.248zm-13.243 8.26v1.43h7.925v-1.43z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Search Console" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlesearchconsole extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8i, create_fragment$8i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlesheets.svelte generated by Svelte v3.23.2 */

        function create_fragment$8j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.908 0c-.873 0-1.635.764-1.635 1.637v20.726c0 .873.762 1.637 1.635 1.637h14.184c.873 0 1.635-.764 1.635-1.637V7.045h-4.909a2.157 2.157 0 0 1-2.136-2.137V0H4.908zm9.774.5v4.408c0 .581.555 1.137 1.136 1.137h4.409L14.682.5zM7.637 11.781h8.726v7.856H7.637V11.78zm1.09 1.092v1.309h2.728v-1.309H8.727zm3.818 0v1.309h2.728v-1.309h-2.728zm-3.818 2.182v1.308h2.728v-1.308H8.727zm3.818 0v1.308h2.728v-1.308h-2.728zm-3.818 2.181v1.309h2.728v-1.309H8.727zm3.818 0v1.309h2.728v-1.309h-2.728z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Sheets" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlesheets extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8j, create_fragment$8j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googlestreetview.svelte generated by Svelte v3.23.2 */

        function create_fragment$8k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.285 0c-.11 0-.218.004-.326.01-.03.001-.062.005-.092.008a5.723 5.723 0 00-.549.064c-.037.006-.074.015-.111.022-.07.013-.138.027-.207.042l-.1.024a5.635 5.635 0 00-.273.074l-.023.008a5.67 5.67 0 00-.301.102c-.022.007-.043.017-.065.025a5.669 5.669 0 00-.22.09l-.096.043a5.765 5.765 0 00-.184.088l-.097.05c-.061.032-.122.064-.182.098l-.088.05c-.066.04-.13.082-.195.124l-.063.039a5.746 5.746 0 00-.488.367l-.072.063a5.803 5.803 0 00-.451.433 5.7 5.7 0 00-.14.156l-.06.07a5.692 5.692 0 00-1.33 3.664 5.712 5.712 0 009.143 4.571l.017-.014a5.778 5.778 0 00.452-.38l.062-.06a5.747 5.747 0 00.37-.39l.054-.062c.06-.07.116-.143.172-.217l.017-.021.002-.004c.06-.08.118-.163.174-.246.018-.026.034-.054.05-.08.04-.06.078-.12.114-.182l.051-.088c.035-.061.069-.123.102-.186.016-.03.033-.06.048-.091.03-.06.058-.121.086-.182l.047-.103c.031-.072.06-.144.088-.217l.025-.065c.036-.097.07-.195.1-.295l.02-.07c.022-.075.043-.15.062-.227a5.675 5.675 0 00.068-.313 5.758 5.758 0 00.086-.645l.008-.112a5.759 5.759 0 00-.056-1.191 5.677 5.677 0 00-.114-.559 5.655 5.655 0 00-.648-1.533 5.73 5.73 0 00-.477-.672A5.76 5.76 0 0021.248.826l-.086-.049a5.716 5.716 0 00-.398-.215A5.681 5.681 0 0018.285 0zM1.715 2.285A1.72 1.72 0 000 3.995v18.29L12.941 9.344a6.426 6.426 0 01-1.12-3.63c0-1.26.38-2.432 1.007-3.429H1.715zM4.857 4c.848 0 1.557.31 2.102.818l-.912.891a1.698 1.698 0 00-1.19-.459c-.818 0-1.512.551-1.76 1.295a1.889 1.889 0 000 1.195c.248.744.942 1.295 1.76 1.295.46 0 .808-.121 1.067-.297.396-.27.624-.722.623-1.025h-1.69V6.57h2.94c.045.197.078.386.078.645 0 .957-.342 1.765-.936 2.312-.52.48-1.233.758-2.082.758a3.142 3.142 0 110-6.285zm9.8 7.059l-2.452 2.45a12 12 0 014.428-1.56 6.456 6.456 0 01-1.977-.89zm7.058.113a6.601 6.601 0 01-1.774.775c.607.087 1.2.22 1.774.395v-1.17zm-3.43 1.4c-2.51 0-4.868.864-6.73 2.264-.425.34-.698.863-.698 1.45V24H20a1.72 1.72 0 001.715-1.715v-9.164a11.078 11.078 0 00-3.43-.549zm-8.025 2.883L1.715 24h8.392v-7.715c0-.292.063-.567.153-.83Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Street View" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googlestreetview extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8k, create_fragment$8k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googletagmanager.svelte generated by Svelte v3.23.2 */

        function create_fragment$8l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.929,18.136c1.619,0,2.932,1.313,2.932,2.932S13.549,24,11.929,24s-2.932-1.313-2.932-2.932 S10.31,18.136,11.929,18.136z M23.119,9.878l-9-9c-1.171-1.171-3.071-1.171-4.242,0c-1.171,1.171-1.171,3.071,0,4.242l6.866,6.866 l-4.493,4.588l2.119,2.211c0.581,0.621,0.901,1.432,0.901,2.282c0,0.313-0.044,0.615-0.125,0.903l7.974-7.851 C24.291,12.949,24.291,11.05,23.119,9.878z M11.669,7.491L9.588,5.41C8.944,4.766,8.589,3.91,8.589,3c0-0.333,0.048-0.659,0.14-0.97 L0.876,9.809c-1.17,1.17-1.17,3.067,0,4.238l7.824,7.875c-0.072-0.273-0.111-0.559-0.111-0.854c0-1.842,1.499-3.341,3.341-3.341 c0.351,0,0.69,0.055,1.008,0.156l-5.706-5.955L11.669,7.491z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Tag Manager" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googletagmanager extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8l, create_fragment$8l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Googletranslate.svelte generated by Svelte v3.23.2 */

        function create_fragment$8m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.597 0C.719 0 0 .719 0 1.599v16.275c0 .878.719 1.597 1.597 1.597h10L13.074 24h9.33C23.28 24 24 23.293 24 22.428V6.39c0-.865-.719-1.572-1.597-1.572h-9.93L10.927 0zm11.109 5.539h9.697c.234 0 .455.091.62.255a.834.834 0 01.256.596v16.038a.824.824 0 01-.255.596.881.881 0 01-.62.255h-8.677l3.45-3.808h.004l-.74-2.302c.01-.009.58-.501 1.283-1.247a52.6 52.6 0 002.818 2.806l.772-.772c-1.272-1.154-2.205-2.07-2.89-2.805.918-1.087 1.851-2.455 2.049-3.708h2.034v.003h.002v-.94h-4.532v-1.52h-1.472v1.52h-2.204zm-5.966.46c1.012 0 1.861.374 2.513.975l-.99.952a2.194 2.194 0 00-1.523-.584c-1.306 0-2.364 1.08-2.364 2.409 0 1.33 1.058 2.409 2.364 2.409 1.508 0 2.13-1.08 2.19-1.808l-2.188-.002V9.066h3.511c.05.23.089.457.089.764 0 2.147-1.433 3.669-3.602 3.669a3.752 3.752 0 01-3.751-3.75c0-2.07 1.68-3.75 3.751-3.75zm7.863 5.447h4.766c-.308 1.084-.988 2.108-1.652 2.904-1.176-1.392-1.18-1.844-1.18-1.844h-1.222s.05.678 1.7 2.61c-.533.546-.946.875-.95.88Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Google Translate" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Googletranslate extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8m, create_fragment$8m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/GovDotUk.svelte generated by Svelte v3.23.2 */

        function create_fragment$8n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.4 13.031c.261-.64-.04-1.374-.682-1.638-.631-.262-1.362.049-1.623.688-.266.637.038 1.363.668 1.623.632.267 1.368-.037 1.623-.673m.858-3.244c.256-.636-.045-1.37-.691-1.639-.631-.258-1.367.053-1.639.687-.27.638.03 1.369.662 1.629.646.266 1.367-.039 1.639-.677m1.218-1.095c.645.264 1.367-.041 1.637-.675.256-.639-.045-1.375-.676-1.639-.632-.26-1.368.049-1.639.686-.271.638.046 1.367.678 1.626m3.156 1.053c.646.256 1.368-.045 1.64-.676.255-.646-.046-1.383-.691-1.639-.634-.271-1.37.046-1.626.676-.27.632.045 1.368.677 1.625M21.6 13.006c.271.631.993.933 1.639.661.632-.27.933-.992.661-1.639-.271-.646-1.008-.947-1.639-.676-.646.256-.945.992-.676 1.639m.752-2.57c.631-.257.931-.993.676-1.64-.271-.632-1.008-.946-1.639-.677-.646.271-.947.992-.676 1.639.256.632.993.933 1.624.678m-2.78-1.729c.631-.26.932-.992.672-1.631-.27-.646-1.001-.947-1.639-.686-.632.271-.937.992-.67 1.639.27.631 1.007.932 1.638.676m-3.412.858c.631-.271.932-1.007.677-1.639-.271-.646-.993-.947-1.64-.691-.631.271-.932 1.008-.661 1.639.271.632.993.932 1.64.662M9.425 4.935l.093 2.399 1.752-.923c.035.039.079.078.12.107-.181.718-.621 1.914-.896 2.575-.335.812.051 1.744.862 2.078.812.331 1.747-.06 2.083-.872.241-.57.121-1.188-.24-1.623-.391-.678-.781-1.533-.992-2.195.061-.045.105-.105.15-.15l1.895.977.09-2.39-1.969.632c-.016-.031-.031-.061-.045-.075l.766-2.181-2.33-.074.707 2.148c-.061.031-.105.076-.15.137l-1.896-.57zm11.896 9.109c.16.883.188 1.284-.015 1.859-.285-.286-.54-.807-.749-1.594l-.872 2.79c.52-.346.915-.565 1.364-.571-.815 1.713-1.819 2.146-2.461 2.021-.787-.158-1.15-.867-1.012-1.466.175-.842 1.052-1.052 1.448-.067.792-1.566-.52-2.078-1.368-1.624 1.313-1.28 1.468-2.426.426-3.836-1.464 1.106-1.49 2.21-.851 3.772-.842-.985-2.18-.466-1.713 1.113.627-.949 1.432-.346 1.298.565-.109.796-1.163 1.413-2.461 1.292-1.864-.165-1.954-1.457-1.983-2.525.451-.074 1.277.361 1.983 1.354l.286-2.962c-.767.782-1.474.946-2.24.962.271-.781 1.459-2.09 1.459-2.09l-3.729-.045s1.188 1.323 1.443 2.119c-.768-.014-1.459-.164-2.225-.961l.255 2.961c.706-.991 1.534-1.412 1.984-1.338-.045 1.053-.15 2.346-2.015 2.511-1.293.105-2.345-.526-2.449-1.323-.121-.901.691-1.503 1.307-.541.481-1.578-.856-2.104-1.699-1.127.662-1.564.647-2.676-.811-3.789-1.053 1.398-.902 2.541.405 3.85-.842-.467-2.165.029-1.383 1.607.405-.992 1.278-.766 1.458.076.12.601-.24 1.308-1.021 1.457-.646.121-1.639-.315-2.451-2.044.451.016.842.241 1.354.587l-.859-2.783c-.209.781-.48 1.295-.766 1.578-.186-.57-.166-.977.014-1.859l-1.803.613c.922 1.264 1.857 3.021 2.59 6.104 2.275-.376 6.157-.603 8.509-.603 2.345.015 6.229.285 8.494.691.767-3.081 1.713-4.825 2.646-6.073l-1.773-.646-.014-.015z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GOV.UK" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class GovDotUk extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8n, create_fragment$8n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gradle.svelte generated by Svelte v3.23.2 */

        function create_fragment$8o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.7 4.3c-1.5-1.5-3.8-1.5-5.3-.1-.1.1-.1.2-.1.3 0 .1 0 .2.1.3l.5.5c.1.1.3.1.5 0 .4-.3.8-.4 1.3-.4 1.2 0 2.2 1 2.2 2.2 0 .6-.2 1.1-.6 1.5-3 3-7.1-5.4-16.2-1.1-.6.3-.9 1-.6 1.6v.1L6 11.9c.3.6 1.1.8 1.7.5l.7-.4c.8-.5 1.5-1 2.2-1.6.1-.1.4-.1.5 0 .2.1.2.3.1.5l-.1.1c-.7.6-1.5 1.2-2.3 1.7l-.7.3c-.3.2-.6.3-1 .3-.7 0-1.4-.4-1.7-1L3.9 9.7c-2.8 2-4.6 5.9-3.6 10.8 0 .2.2.3.4.3h1.7c.2 0 .3-.1.4-.3.2-1.4 1.4-2.3 2.8-2.1 1.1.1 2 1 2.1 2.1 0 .2.2.3.4.3h1.6c.2 0 .3-.1.4-.3.2-1.4 1.4-2.3 2.8-2.1 1.1.1 2 1 2.1 2.1 0 .2.2.3.4.3H17c.2 0 .4-.2.4-.4 0-2.3.7-4.9 2.4-6.2 5.9-4.6 4.3-8.5 2.9-9.9zm-6.2 6.9l-1.2-.6c0-.4.3-.7.7-.7.4 0 .7.3.7.7.1.3 0 .5-.2.6z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gradle" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gradle extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8o, create_fragment$8o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Grafana.svelte generated by Svelte v3.23.2 */

        function create_fragment$8p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.999 10.626c-.043-.405-.106-.873-.234-1.384s-.341-1.065-.618-1.661c-.298-.575-.66-1.193-1.15-1.768-.192-.234-.405-.447-.618-.681.341-1.342-.405-2.513-.405-2.513-1.299-.085-2.108.405-2.406.618-.043-.021-.106-.043-.149-.064-.213-.085-.447-.17-.681-.256-.234-.064-.469-.149-.703-.192-.234-.064-.49-.106-.745-.149-.043 0-.085-.021-.128-.021C14.608.766 12.99 0 12.99 0c-1.853 1.193-2.215 2.79-2.215 2.79s0 .043-.021.085c-.106.021-.192.064-.298.085-.128.043-.277.085-.405.149s-.277.106-.405.17c-.277.128-.532.256-.809.405a8.52 8.52 0 0 0-.745.469c-.043-.021-.064-.043-.064-.043-2.492-.958-4.706.192-4.706.192-.192 2.662 1.001 4.323 1.235 4.621-.064.17-.106.319-.17.49a10.658 10.658 0 0 0-.405 1.853c-.021.085-.021.192-.043.277-2.3 1.129-2.981 3.471-2.981 3.471 1.917 2.215 4.174 2.343 4.174 2.343a9.61 9.61 0 0 0 .98 1.448c.149.192.319.362.49.554-.703 2.002.106 3.684.106 3.684 2.151.085 3.556-.937 3.854-1.171l.639.192c.66.17 1.342.277 2.002.298h.873c1.001 1.448 2.79 1.64 2.79 1.64 1.256-1.342 1.342-2.641 1.342-2.939v-.021-.043-.064c.256-.192.511-.383.767-.596.511-.447.937-.98 1.32-1.533.043-.043.064-.106.106-.149 1.427.085 2.428-.894 2.428-.894-.234-1.491-1.086-2.215-1.256-2.343l-.021-.021-.021-.021-.021-.021c0-.085.021-.17.021-.277.021-.17.021-.319.021-.49v-.213-.277-.128c0-.043 0-.085-.021-.128l-.043-.256c-.021-.17-.064-.319-.085-.49a6.327 6.327 0 0 0-.724-1.789 6.634 6.634 0 0 0-1.214-1.448 5.89 5.89 0 0 0-1.533-.98 5.368 5.368 0 0 0-1.682-.469c-.277-.043-.575-.043-.852-.043h-.128-.298c-.149.021-.298.043-.426.064-.575.106-1.107.319-1.576.596s-.873.639-1.214 1.043a4.284 4.284 0 0 0-.767 1.299c-.17.447-.277.937-.298 1.384v.511c0 .064 0 .106.021.17a3.642 3.642 0 0 0 .703 1.81c.256.341.532.596.852.809.319.213.639.362.98.469s.66.149.958.128h.446c.043 0 .085-.021.106-.021.043 0 .064-.021.106-.021.064-.021.149-.043.213-.064.128-.043.256-.106.383-.149.128-.064.234-.128.319-.192.021-.021.064-.043.085-.064a.24.24 0 0 0 .043-.341.298.298 0 0 0-.319-.064c-.021.021-.043.021-.085.043a1.43 1.43 0 0 1-.277.106c-.106.021-.213.064-.319.085-.064 0-.106.021-.17.021h-.361s-.021 0 0 0h-.086c-.022 0-.064 0-.085-.021-.234-.043-.49-.106-.724-.213s-.469-.256-.66-.447c-.213-.192-.383-.405-.532-.66s-.234-.532-.277-.809c-.021-.149-.043-.298-.021-.447v-.128c0 .021 0 0 0 0v-.043-.064c0-.085.021-.149.043-.234a3.114 3.114 0 0 1 .916-1.725c.128-.128.256-.234.405-.319.149-.106.298-.192.447-.256s.319-.128.49-.17c.17-.043.341-.085.511-.085.085 0 .17-.021.256-.021H15.228c.021 0 0 0 0 0h.085a4.046 4.046 0 0 1 1.619.49c.681.383 1.256.958 1.597 1.661.17.341.298.724.362 1.129.021.106.021.192.043.298v.554c0 .106-.021.213-.021.319-.021.106-.021.213-.043.319l-.064.319c-.021.106-.128.405-.192.618s-.362.788-.618 1.129a5.164 5.164 0 0 1-2.002 1.64c-.405.17-.809.319-1.235.383a3.221 3.221 0 0 1-.639.064h-.319c.021 0 0 0 0 0h-.021c-.106 0-.234 0-.341-.021-.469-.043-.916-.128-1.363-.256s-.873-.298-1.278-.511a6.956 6.956 0 0 1-2.108-1.746c-.277-.362-.532-.745-.745-1.15s-.362-.831-.49-1.256a5.489 5.489 0 0 1-.213-1.32v-.49-.17c0-.213.021-.447.064-.681.021-.234.064-.447.106-.681s.106-.447.17-.681.277-.873.469-1.278c.383-.809.873-1.533 1.448-2.108.149-.149.298-.277.469-.405.064-.064.213-.192.383-.298s.341-.213.532-.298c.085-.043.17-.085.277-.128.043-.021.085-.043.149-.064.043-.021.085-.043.149-.064.192-.085.383-.149.575-.213.043-.021.106-.021.149-.043s.106-.021.149-.043.192-.043.298-.085c.043-.021.106-.021.149-.043.043 0 .106-.021.149-.021s.106-.021.149-.021l.17-.043c.043 0 .106-.021.149-.021.064 0 .106-.021.17-.021.043 0 .128-.021.17-.021s.064 0 .106-.021h.149c.064 0 .106 0 .17-.021h.085s.021 0 0 0H15.033c.383.021.767.064 1.129.128a7.234 7.234 0 0 1 2.044.681 7.676 7.676 0 0 1 1.661 1.086c.021.021.064.043.085.085.021.021.064.043.085.085.064.043.106.106.17.149s.106.106.17.149c.043.064.106.106.149.17a7.88 7.88 0 0 1 1.406 1.98c.021.021.021.043.043.085.021.021.021.043.043.085s.043.106.085.149c.021.043.043.106.064.149s.043.106.064.149c.085.192.149.383.213.575.106.298.17.554.234.767a.204.204 0 0 0 .192.149c.106 0 .17-.085.17-.192-.021-.256-.021-.532-.043-.852z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Grafana" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Grafana extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8p, create_fragment$8p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Graphcool.svelte generated by Svelte v3.23.2 */

        function create_fragment$8q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.138 7.929c-1.167-.657-2.633.2-2.868.348l-5.037 2.857c-.744-.591-1.804-.566-2.519.06-.715.625-.881 1.671-.395 2.488s1.486 1.168 2.376.836 1.416-1.252 1.25-2.187l5.023-2.851.032-.019c.33-.209 1.096-.521 1.454-.319.258.146.405.633.417 1.35h-.006v6.301c-.001.588-.314 1.131-.823 1.426l-7.222 4.172c-.51.293-1.137.293-1.646 0l-7.222-4.172c-.509-.295-.822-.838-.823-1.426v-8.34c.001-.588.314-1.131.823-1.425l6.536-3.772c.621.713 1.664.882 2.479.4.815-.48 1.172-1.475.848-2.363-.324-.89-1.236-1.421-2.169-1.266-.934.156-1.623.955-1.641 1.901L3.262 5.823c-.942.542-1.522 1.544-1.524 2.63v8.338c.001 1.086.579 2.088 1.519 2.631l7.221 4.172c.94.541 2.097.541 3.037 0l7.222-4.172c.938-.543 1.517-1.545 1.519-2.629v-6.062h.005c.034-1.422-.347-2.363-1.123-2.802z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Graphcool" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Graphcool extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8q, create_fragment$8q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Graphql.svelte generated by Svelte v3.23.2 */

        function create_fragment$8r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.051 2.751l4.935 2.85c.816-.859 2.173-.893 3.032-.077.148.14.274.301.377.477.589 1.028.232 2.339-.796 2.928-.174.1-.361.175-.558.223v5.699c1.146.273 1.854 1.423 1.58 2.569-.048.204-.127.4-.232.581-.592 1.023-1.901 1.374-2.927.782-.196-.113-.375-.259-.526-.429l-4.905 2.832c.372 1.124-.238 2.335-1.361 2.706-.217.071-.442.108-.67.108-1.181.001-2.139-.955-2.14-2.136 0-.205.029-.41.088-.609l-4.936-2.847c-.816.854-2.171.887-3.026.07-.854-.816-.886-2.171-.07-3.026.283-.297.646-.506 1.044-.603l.001-5.699c-1.15-.276-1.858-1.433-1.581-2.584.047-.198.123-.389.224-.566.592-1.024 1.902-1.374 2.927-.782.177.101.339.228.48.377l4.938-2.85C9.613 1.612 10.26.423 11.39.088 11.587.029 11.794 0 12 0c1.181-.001 2.139.954 2.14 2.134.001.209-.03.418-.089.617zm-.515.877c-.019.021-.037.039-.058.058l6.461 11.19c.026-.009.056-.016.082-.023V9.146c-1.145-.283-1.842-1.442-1.558-2.588.006-.024.012-.049.019-.072l-4.946-2.858zm-3.015.059l-.06-.06-4.946 2.852c.327 1.135-.327 2.318-1.461 2.645-.026.008-.051.014-.076.021v5.708l.084.023 6.461-11.19-.002.001zm2.076.507c-.39.112-.803.112-1.192 0l-6.46 11.189c.294.283.502.645.6 1.041h12.911c.097-.398.307-.761.603-1.044L12.597 4.194zm.986 16.227l4.913-2.838c-.015-.047-.027-.094-.038-.142H5.542l-.021.083 4.939 2.852c.388-.404.934-.653 1.54-.653.627 0 1.19.269 1.583.698z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GraphQL" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Graphql extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8r, create_fragment$8r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Grav.svelte generated by Svelte v3.23.2 */

        function create_fragment$8s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm6.489 13.965c-1.251-.825-1.965-1.523-2.589-2.777-.427.859-1.421 2.135-3.098 3.139-.84 2.61-4.823 7.605-6.113 6.885-.381-.195-.452-.48-.367-.765.093-.704 1.566-2.34 1.566-2.34s.029.345.494 1.065c-.629-1.936 1.021-4.305 1.456-5.131.689-.209.734-1.095.734-1.095.046-1.364-.569-2.34-1.155-2.94.421.525.556 1.306.57 2.025v.255c-.029.601-.21 1.41-.585 1.41v.016c-.39-.016-.885.074-1.319.21l-.961.239s.51-.015.78.226c-.314.51-1.005 1.125-1.771 1.484-1.109.525-1.439-.51-.869-1.17.135-.165.285-.3.404-.404-.09-.09-.135-.21-.149-.36-.075-.345-.045-.78.45-1.485.09-.149.21-.3.345-.449l.015-.016.016-.015v-.015c.029-.046.074-.076.104-.12.57-.585 1.485-1.2 2.911-1.74 1.694-2.49 2.309-2.956 2.309-2.956.181-.179.511-.419.615-.479-.87-1.515-1.049-3.646-.824-4.215-.03.03-.046.06-.061.105.09-.195.135-.255.225-.36.24-.27 1.035-.42 1.336.18.15.315.18.735.18 1.035-.645-.029-1.215.69-1.215.69s.524-.24 1.186-.255c0 0 .179.164.389.449-.284.556-.779 1.725-.42 2.971.061.24.15.45.256.629.015.016.015.016.015.031l.03.029c.585.886 1.649.976 1.649.976-.495-.24-.915-.646-1.169-1.125-.136-.255-.227-.48-.271-.646-.285-1.08.135-1.725.375-2.145.54-.84 1.544-1.351 2.609-1.23 1.5.165 2.581 1.53 2.399 3.03-.104.915-.659 1.681-1.409 2.085.181.494-.015 1.08-.015 1.08.449.57.479.9.465 1.215-.585-.09-1.141.301-1.141.301s1.111-.256 1.756.314c.42.449.704.87.869 1.17.24.435 1.35.465 1.229 1.23-.135.779-.989.779-2.31-.09l.074-.151zm-4.824-4.61c-.22-.219-.574-.219-.795 0l-.465.468c-.222.21-.222.57 0 .796l.51.51c.222.225.577.21.795 0l.47-.466c.221-.225.221-.585 0-.794l-.515-.525v.011zm-2.205-.186c-.14.14-.14.368 0 .511.141.138.368.138.51 0 .14-.143.14-.371 0-.511-.142-.141-.369-.141-.51 0zm1.269-.252c.142-.139.142-.366 0-.51-.141-.138-.367-.138-.51 0-.139.144-.139.371 0 .51.142.142.369.142.51 0zm5.385-1.304c.591-1.131-.247-1.791-.825-2.332-.924-.87-1.846-1.245-2.9-.029-1.052 1.199-.383 2.609.58 3.284.96.69 2.535.226 3.135-.915l.01-.008zm-1.595-.463c-.372-.445.322-1.252.757-.77.8.89-.387 1.216-.757.77z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Grav" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Grav extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8s, create_fragment$8s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gravatar.svelte generated by Svelte v3.23.2 */

        function create_fragment$8t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0c-1.326 0-2.4 1.074-2.4 2.4v8.4c0 1.324 1.074 2.398 2.4 2.398s2.4-1.074 2.4-2.398V5.21c2.795.99 4.799 3.654 4.799 6.789 0 3.975-3.225 7.199-7.199 7.199S4.801 15.975 4.801 12c0-1.989.805-3.789 2.108-5.091.938-.938.938-2.458 0-3.396s-2.458-.938-3.396 0C1.344 5.686 0 8.686 0 12c0 6.627 5.373 12 12 12s12-5.373 12-12S18.627 0 12 0");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gravatar" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gravatar extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8t, create_fragment$8t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Greensock.svelte generated by Svelte v3.23.2 */

        function create_fragment$8u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.473 23.948c-.311-.053-.639-.2-.82-.365a.702.702 0 0 1-.198-.487c0-.18.09-.44.242-.696a2.2 2.2 0 0 0 .209-.465c.03-.113.096-.3.147-.417l.091-.212.024-1.436c.013-.79.037-1.526.053-1.638a4.94 4.94 0 0 1 .253-.962l.084-.209-.123-.073c-.115-.069-.21-.168-.58-.608-.457-.54-1.057-.836-1.908-.94a16 16 0 0 0-.84-.057c-1.252-.058-1.966-.319-2.61-.952-.48-.474-.731-1.025-.833-1.836-.138-1.098-.29-1.663-.57-2.12a2.035 2.035 0 0 0-.237-.315l-.114-.113-.25.16c-.139.088-.329.203-.423.255a8.301 8.301 0 0 0-.896.571c-.696.507-1.459 1.142-1.877 1.562-.188.188-.287.267-.327.262-.288-.043-.066-1.28.396-2.21.595-1.197 1.593-2.303 2.752-3.051.95-.613 2.485-1.456 3.196-1.753 1.26-.527 2.892-1.098 4.01-1.403.236-.064.381-.122.477-.19.22-.153.434-.225.681-.23.206-.003.226-.01.425-.14.235-.152.302-.162.538-.08l.154.055.187-.127.188-.127.27.006c.205.004.299-.007.387-.046.114-.05.118-.056.15-.245.072-.406.08-.61.037-.854-.058-.324-.063-1.584-.008-1.829.059-.266.097-.319.295-.417.297-.147.519-.188 1.032-.188.624 0 .94.084 1.174.31.212.206.248.68.137 1.8-.064.642-.072.823-.055 1.244.01.271.027.524.037.561.017.065.032.069.259.074.221.004.26.014.471.125.204.106.356.234.386.325.006.02.04.021.104.003.118-.035.225.003.309.109.051.065.083.078.203.078.16 0 .216.038.349.234a.598.598 0 0 0 .246.2c.22.11.515.414.63.654.175.362.212.777.101 1.154-.04.14-.04.145.042.282.174.29.237.65.167.954l-.041.18.118.117c.583.583.497 1.531-.215 2.38-.076.09-.165.232-.198.318-.14.363-.294.618-.499.828l-.204.21h-.214c-.21 0-.505-.07-.685-.165-.075-.039-.08-.038-.065.01.05.172.164.87.205 1.255.063.594.044 1.458-.04 1.829a2.85 2.85 0 0 1-.297.785c-.076.126-.083.155-.066.304.024.217-.027.576-.115.813-.104.277-.143.407-.166.546-.02.122-.02.123.066.123.115 0 .175.068.175.199 0 .06-.05.374-.112.7-.171.908-.182 1.013-.184 1.895-.003.909-.004.902.204 1.037l.464.302a6.37 6.37 0 0 0 1.276.656c.653.258.743.324.743.544 0 .095-.019.133-.1.211-.252.243-.744.297-1.737.192a16.668 16.668 0 0 0-1.55-.075c-1.365-.02-1.567-.067-1.745-.408-.102-.195-.084-.45.059-.868a5.86 5.86 0 0 0 .163-.56c.093-.455.03-.993-.188-1.604l-.185-.518c-.186-.528-.286-1.494-.176-1.712.02-.04.054-.05.146-.044l.119.01.096-.204c.075-.158.158-.264.38-.488l.285-.286-.014-.182c-.014-.174-.243-1.027-.276-1.025-.009 0-.073.088-.144.195-.17.258-.552.658-.766.802-.094.064-.172.137-.172.162-.002.103-.094.31-.201.455-.106.143-.113.163-.097.29.024.183-.033.773-.104 1.08a3.482 3.482 0 0 1-.257.665c-.27.56-.472 1.058-.525 1.29a5.534 5.534 0 0 0-.068.673c-.013.264-.04.524-.06.577-.026.075-.027.132-.002.246.018.082.03.266.027.41-.004.2.012.33.07.564.1.397.122.647.073.796-.03.092-.064.129-.166.18-.237.12-.899.185-1.259.123zm.95-.318c.137-.039.252-.159.252-.263 0-.045-.04-.183-.087-.306-.09-.23-.254-.837-.254-.938 0-.054.004-.055.085-.012l.085.045-.002-.11a1.326 1.326 0 0 0-.064-.295c-.074-.223-.084-.228-.554-.254l-.322-.017-.115.113a1.03 1.03 0 0 0-.169.22c-.052.103-.072.255-.038.29.008.009.085 0 .17-.02a.755.755 0 0 1 .155-.029c0 .005-.086.073-.192.151-.47.348-.633.564-.633.837 0 .286.266.508.688.574.29.046.854.054.995.014zm6.354-.465c.117-.142.103-.285-.046-.45a1.223 1.223 0 0 0-.292-.22 3.668 3.668 0 0 1-.328-.195c-.086-.06-.362-.22-.612-.36a8.634 8.634 0 0 1-.527-.306l-.07-.055v-1.075c0-1.06-.002-1.073-.058-1.058-.273.075-.726.109-1.302.098l-.619-.01.088.218c.167.416.254.97.253 1.606 0 .238-.014.326-.073.492a8.78 8.78 0 0 0-.087.249c-.011.035.032.06.194.108.115.035.289.071.387.082l.178.018-.018.181c-.02.205.003.418.054.486.029.038.149.052.69.078.412.02.858.062 1.209.114.305.045.633.084.73.085.162.003.18-.003.249-.086zm-6.252-1.831c.015-.01.037-.222.047-.471.031-.7.057-.8.41-1.589.287-.644.441-1.245.427-1.673l-.008-.254-.107.106c-.227.225-.071-.13.197-.447.203-.24.273-.375.307-.587.014-.086.047-.13.18-.23.502-.385.867-.87 1.103-1.463.056-.141.198-.62.315-1.066.218-.826.335-1.179.44-1.333.04-.059.055-.068.045-.029-.06.235-.08.33-.13.637-.032.191-.09.564-.128.828-.078.532-.156.876-.261 1.144l-.07.178.189.485c.193.497.283.855.302 1.205l.01.192-.154.032a.784.784 0 0 0-.497.314c-.136.19-.208.348-.173.384.015.015.207.05.425.075.342.04.47.042.919.013a5.73 5.73 0 0 0 .579-.056c.042-.015.083-.101.154-.323.162-.51.193-.693.174-1.05l-.016-.317.082-.105c.192-.244.34-.682.4-1.19.075-.626-.06-1.936-.315-3.062-.12-.533-.17-.854-.17-1.09v-.207l-.193.02c-.687.076-1.518.055-2.028-.05-.276-.056-.976-.26-1.13-.329l-.119-.053-.017.135a2.093 2.093 0 0 1-.04.226c-.023.085-.014.102.131.246.18.18.236.276.236.402 0 .075-.045.138-.263.367-.16.168-.364.345-.52.449l-.256.172-.106.376c-.394 1.39-.468 2.649-.21 3.554l.064.226-.125.155c-.47.592-.746 1.041-.788 1.29-.008.05-.048.215-.088.367-.1.386-.178.953-.212 1.566a43.822 43.822 0 0 1-.104 1.539l-.017.152.195.06c.108.033.273.073.367.087.174.028.499.023.548-.008zm3.793-2.148c.303-.018.581-.066.635-.11.023-.018.05-.1.06-.18l.017-.148-.24.053a5.127 5.127 0 0 1-.577.078 9.474 9.474 0 0 1-1.382-.04c-.152-.023-.153-.022-.103.177.037.15.045.154.445.185.266.02.634.016 1.145-.015zm-.255-.68c.396-.033.894-.118.99-.17.031-.017.061-.074.072-.139l.036-.208.018-.099-.096.02c-.433.091-.762.118-1.42.118-.639 0-.712-.006-.88-.063a.603.603 0 0 0-.206-.048c-.028.017-.03.24-.005.395.015.095.03.111.125.138.297.08.796.101 1.366.055zm-7.249-3.523c1-.286 2.308-1.137 3.377-2.197.35-.348.39-.397.437-.55l.064-.199c.007-.016-.056-.045-.138-.065-.216-.052-.377-.174-.379-.288 0-.066-.04-.132-.15-.255-.187-.208-.233-.298-.253-.497l-.016-.158-.216-.158c-.124-.09-.564-.332-1.028-.565a14.706 14.706 0 0 1-1.039-.561c-.39-.264-.653-.576-.8-.947-.029-.076-.063-.138-.075-.138-.033 0-.91.85-1.286 1.247-.924.977-1.563 1.825-1.964 2.61-.1.195-.21.425-.242.511l-.06.157.073.26c.04.143.13.373.2.51.246.484.541.777 1.024 1.015.52.257.98.346 1.75.337.416-.005.535-.016.721-.07zM2.921 11.56c.657-.582 1.563-1.22 2.674-1.882.727-.433 3.533-1.837 4.826-2.414.234-.105.446-.201.47-.215.023-.013.091-.18.151-.369.276-.869.412-1.041.908-1.153.063-.014.078-.034.078-.099 0-.11.078-.374.145-.491.05-.09.051-.095.005-.082-.027.009-.19.056-.363.106-2.38.687-4.462 1.6-6.26 2.742-1.92 1.22-3.022 2.68-3.343 4.429l-.024.13.232-.231c.127-.127.353-.339.501-.47zm17.677.33c.19-.098.487-.548.597-.902a.812.812 0 0 1 .182-.338c.292-.32.531-.905.532-1.304 0-.62-.349-.859-.863-.592-.064.033-.121.055-.127.048-.029-.029.117-.17.29-.28.233-.15.277-.24.277-.566 0-.271-.069-.493-.225-.733-.07-.105-.098-.177-.087-.218l.072-.264c.096-.347.061-.744-.088-.997-.227-.385-.506-.573-.894-.602l-.225-.017.134.147c.392.429.583.963.508 1.42-.039.232-.077.28-.303.372l-.13.053.015.179c.026.295-.024.508-.212.905-.093.198-.164.376-.157.395.025.067.28.195.483.244l.2.048-.125.04c-.161.053-.198.126-.199.397 0 .245.035.346.217.616.08.118.135.237.144.308.015.111.01.118-.08.151a1.52 1.52 0 0 1-.31.05c-.367.023-.395.033-.558.19-.15.143-.153.151-.153.307 0 .215.08.645.132.704.064.073.436.255.58.283a.544.544 0 0 0 .373-.044zm-5.41-.294c.239-.187.425-.374.532-.535.065-.098.069-.117.036-.197-.052-.127-.411-.45-.611-.547a1.463 1.463 0 0 0-.418-.12l-.246-.034-.154-.192c-.314-.39-.49-.693-.742-1.282-.216-.502-.409-.795-.713-1.082-.125-.118-.217-.215-.206-.215.012 0 .161.073.333.163.288.151.321.162.451.146.465-.056.873-.591 1.024-1.34.043-.214.127-.429.218-.557.004-.005.182.115.395.267.534.38.652.436.955.448.202.008.314-.008.672-.094.765-.186 1.594-.262 2.1-.193.285.039.692.163 1 .306.301.14.359.148.457.062.08-.07.081-.08.08-.342-.002-.386-.144-.804-.36-1.053-.11-.129-.415-.34-.72-.501a12.227 12.227 0 0 1-.327-.178c-.142-.083-.309-.073-.752.044-.515.135-.652.133-1.243-.018-.499-.128-.532-.13-1.022-.053-.261.041-.918.017-1.138-.041a4.228 4.228 0 0 1-.325-.104c-.19-.071-.522-.083-.822-.03-.6.107-1.054.43-1.218.87-.084.224-.073.329.042.401.177.112.416.421.416.54 0 .01-.056-.041-.125-.113-.166-.174-.32-.251-.5-.251a.62.62 0 0 0-.55.362 3.846 3.846 0 0 0-.133.42c-.11.402-.206.612-.412.892-.186.253-.211.366-.146.651.164.719.448 1.011 1.639 1.686.625.354.948.553 1.182.729.179.133.184.14.168.243-.037.233.112.49.406.695.075.052.122.107.122.143 0 .072.196.17.343.17.08 0 .145-.034.313-.166zm4.815-1.314c.454.013.479-.019.235-.301-.254-.295-.323-.532-.23-.794l.037-.102-.159-.078a1.167 1.167 0 0 0-.163-.072 7.965 7.965 0 0 0-.079.31c-.058.24-.13.856-.131 1.12 0 .023.038.013.105-.028.092-.055.14-.062.385-.055zm-1.518-.025c.273-.015.556-.036.63-.046l.134-.018.017-.452c.023-.64.115-1.018.393-1.622.198-.43.281-.807.24-1.086-.018-.122-.025-.13-.188-.201a4.295 4.295 0 0 0-.934-.253c-.31-.045-1.214-.019-1.555.045-.14.026-.397.08-.57.121-.426.1-.652.087-.976-.055-.32-.141-.524-.268-.717-.448-.151-.141-.165-.148-.206-.101-.03.035-.047.14-.057.368-.014.347-.066.53-.22.777a.832.832 0 0 0-.086.16c0 .012.119.146.264.296.499.52.744.654 1.138.624.13-.01.22-.006.22.01 0 .029-.254.23-.361.286-.048.025-.06.053-.052.113l.06.408c.036.236.064.343.1.375.093.08.577.33.88.452.401.163.617.221.924.247.373.031.381.031.922 0zm-3.23-.427c.008-.015-.022-.24-.07-.502-.063-.356-.098-.485-.137-.518-.03-.024-.173-.128-.319-.231a5.503 5.503 0 0 1-.537-.452l-.271-.264-.142.075-.154.083a.7.7 0 0 0 .064.176c.04.093.126.323.19.51.165.489.291.723.616 1.148l.124.161.23.036c.126.02.257.046.291.059.056.021.063.012.08-.115a.755.755 0 0 1 .034-.166zm4.948-4.86c.2-.019.234-.05.147-.138-.052-.053-.179-.059-.28-.012-.068.031-.082.024-.187-.09-.11-.122-.116-.125-.254-.108-.125.015-.144.01-.16-.041a1.078 1.078 0 0 0-.18-.226.842.842 0 0 0-.325-.23c-.243-.092-.378-.082-.609.045-.667.365-.64.361-1.283.197-.603-.154-1.054-.307-1.197-.407-.12-.083-.379-.17-.593-.2-.16-.022-.264.013-.416.14l-.08.066.072.128c.102.181.092.191-.062.06-.163-.14-.357-.234-.485-.235-.089 0-.355.115-.387.168-.009.014.073.033.181.043.115.01.271.048.376.093.272.116.414.154.664.18.273.026.771-.005.828-.053.029-.025.115-.029.296-.015.238.018.337.04.903.193.328.09.558.083.949-.026.18-.05.406-.1.501-.11.16-.017.192-.01.44.103.4.18.61.296.728.4.117.1.13.103.413.076zm-2.228-.684l.238-.124-.005-.245a11.964 11.964 0 0 0-.022-.495l-.017-.251-.238.184c-.141.11-.278.192-.339.203-.171.033-1.016 0-1.096-.042a2.31 2.31 0 0 1-.291-.259l-.22-.22-.003.13c0 .07-.011.192-.024.268-.022.138-.02.142.13.333.084.107.152.202.152.212 0 .076 1.128.426 1.382.43.081 0 .184-.036.353-.124zm-.452-.889c.282-.054.42-.258.523-.773.11-.554.166-1.425.113-1.797-.047-.334-.419-.485-1.136-.461-.444.015-.628.059-.779.187-.094.08-.096.087-.137.457-.08.711.036 1.724.24 2.105.097.183.184.25.365.28.203.035.635.036.811.002z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "GreenSock" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Greensock extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8u, create_fragment$8u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gridsome.svelte generated by Svelte v3.23.2 */

        function create_fragment$8v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.026.017l-.108.001C4.905.135-.102 5.975.002 11.956.025 19.286 6.02 24.13 12.083 23.98c7.208-.2 12.323-6.461 11.892-12.05a2.197 2.197 0 0 0-2.192-2.001h-3.15a2.155 2.155 0 0 0-2.161 2.147c0 1.187.967 2.148 2.16 2.148h.788c-.87 2.791-3.62 5.455-7.44 5.56-3.803.095-7.61-2.904-7.768-7.569a2.173 2.173 0 0 0 0-.159c-.148-3.72 2.895-7.637 7.88-7.845a2.096 2.096 0 0 0 2.003-2.183 2.095 2.095 0 0 0-2.07-2.011zm-.018 9.911a2.15 2.15 0 0 0-2.146 2.151 2.15 2.15 0 0 0 2.146 2.152 2.15 2.15 0 0 0 2.147-2.152 2.15 2.15 0 0 0-2.147-2.15Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gridsome" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gridsome extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8v, create_fragment$8v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Groovy.svelte generated by Svelte v3.23.2 */

        function create_fragment$8w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.997 6.012S10.315 8.8 9.516 10.155c-.155.058-.172.041-.341.207-.41-.47-.897-.041-1.028.22-.057-.566-.151-.567-.279-.694.074-.496.316-1.305-.241-1.884-1.078-.727-2.326 1.05-3.021 1.982l-.375.622c-1.546-.032-2.763.008-4.231-.021 1.79.67 1.864.686 4.026 1.506 0 .066.161.372.34.552.147.15.308.234.389.284-.106.054-.32.138-.385.258-.292.546.139.672.418 1.107.315.568.382.944 1.126.625.254-.11.562-.148.758-.21-.693 1.094-.87 1.392-2.083 3.274l.012.004c4.85-1.893 4.974-1.942 7.373-2.89 3.448 1.338 3.646 1.448 7.432 2.891-.529-.826-.89-1.343-1.274-1.995.151-.013.483-.046.777-.233.213-.135.463-.288.688-.574.443-.565.551-1.277.39-2.166-.078-.423-.235-.834-.213-.85 2.061-.778 2.304-.862 4.226-1.587-2.31.034-2.422.01-4.591.016-.036-.414-.244-.627-.882-.606-.238.039-.389.12-.5.445-.357-.657-.85-.464-1.06-.14-.275-.282-.917-.377-1.24-.17-.238-.112-.514-.112-.757.177-.175-.146-.23-.188-.614-.342-.886-1.497-1.622-2.692-2.36-3.951zm.012.802c.35.535 1.552 2.61 1.849 3.074-.337.023-.668.202-.918.562-.217-.224-.47-.445-.917-.463-.544-.093-.834.148-1.2.568-.108-.365-.53-.45-.896-.28.327-.519 1.872-3.122 2.082-3.46zM7.45 9.128c-.05 1.434-1.068 2.712-1.798 2.245-.551-.449.149-1.584.59-1.985-.033.307.246.498.023.77-.446.543-.27.936-.078.996.513.162 1.004-1.227 1.004-2.201 0-.625-.366-.613-1.086.136-.983 1.022-1.513 2.012-1.16 2.69.197.38.485.651.959.594.925-.11 1.483-1.254 1.543-1.988.148-.003.109.01.148-.02 0 .129.177.755.317 1.166.183.702.964 2.11-1.369 2.658-.44.11-.614.148-1.05.32-.213-.443-.263-.585-.697-1.013.588-.205.593-.185.972-.317 1.467-.51 1.908-.947 1.857-1.57 0 0 .018-.32-.185-.588a2.613 2.613 0 0 1-.293.645c-.437.68-1.296 1.101-2.06.833-.417-.146-.596-.466-.596-1.015 0-.703 1.601-2.735 2.387-3.08.555-.165.579.293.571.724zm6.502 1.3c.26.006.543.133.735.34.594.64.529 1.417.163 1.905-.435.581-1.532.324-1.791-.488-.12-.378.095-1.312.475-1.624a.628.628 0 0 1 .418-.132zm-2.113.066a.502.502 0 0 1 .117.017c.503.03.61.313.701.56.231.626.173 1.212-.301 1.691-.711.719-1.54.401-1.536-.567.014-.69.443-1.715 1.02-1.7zm1.868.038c-.383.287-.432 1.023-.08 1.296.138.13.215.22.613.256.273.024.704-.253.725-.527.01-.125-.013-.333-.312-.67-.252-.283-.579-.349-.661-.3-.265.156.021.28.125.383.162.163.2.234.125.282a.447.447 0 0 1-.372.057c-.105-.049-.456-.246-.163-.777zm3.759.003c.167.26.215.316.402.965.24.838.546 1.163.816 1.01.74-.418.148-1.476-.113-1.974.167-.002.134.007.286.005.12.471.086.387.407 1.813.385 1.706.442 2.16-.528 2.926-.446.352-1.103.37-1.667.34l-.636-.095c.438-.287.545-.557.542-1.116 1.278.535 1.959.132 2.23-.526.132-.317.086-.735-.04-1.471.008.6-.005.71-.084 1.007-.158.595-.547.76-.812.34-.102-.163-.345-.702-.42-1.282-.075-.58-.132-1.395-.5-1.736.04-.08.082-.17.117-.206zm-1.247.01c.258.068.572.204.74.52.234.436.388.668.376 1.447-.014.832-.34 1.055-.557 1.086-.278.04-.762.034-1.049-1.598-.095-.541-.268-1.056-.45-1.224.09-.11.097-.096.165-.204.091.1.17.27.298.777.202.808.387.975.745 1.02.558.072.778-.78.318-1.391-.1-.134-.365-.307-.503-.236.008.236.113.162.114.318-.026.185-.053.219-.113.32-.142-.056-.21-.078-.334-.291-.157-.31-.055-.6.25-.544zm-4.597.076c-.263.185-.594.8-.304 1.35.143.205.297.372.638.3.245-.051.671-.34.73-.749.052-.35-.456-1.028-.738-.87-.327.183-.128.314.074.511.185.18.052.289-.077.342-.258.106-.403.003-.467-.203-.065-.205-.01-.38.144-.68zm-2.867.064c.056.172.1.402.218.624.028.023.132 0 .269-.157.086-.1.185-.238.357-.463.104.095.113.166.142.219.073.13.225.12.273.106.168-.167.195-.275.306-.29.01.216.021.35-.257.677a.535.535 0 0 1-.501.172c-.12-.034-.199-.108-.389-.205-.258.04-.19.315-.143.546.12.611.5.855.832.675.116-.062.09-.062.312-.153-.038.388-.06.463.01.896-.541.301-.982.25-1.102-.506-.091-.632-.261-1.4-.415-1.556-.145-.147-.205-.195-.205-.195l.293-.39zm-7.114.082c.753.01 1.602.01 2.506.017-.13.318-.175.54-.193.854-.422-.163-1.877-.684-2.313-.871zm20.723.01c-.997.359-1.715.637-2.677 1.004-.105-.45-.124-.588-.219-.994 1.601-.005 1.628-.002 2.896-.01zm-6.978 2.04c.105.43.253.641.253.641.202.348.454.545.84.645.085.136.115.163.148.236.037.457.01.514-.344.774-.209.204-.218.497-.003.769.231.22.474.298 1.375.064.174.3.418.653.776 1.217-1.206-.455-2.868-1.103-6.43-2.49 0 0-4.169 1.62-6.404 2.491.935-1.474 1.012-1.599 1.677-2.63.225-.089.149-.053.349-.155.459-.245.827-.61 1.028-1.145.368.83.779.925 1.636.655.177-.082.38-.2.424-.518.46.413 1.432.49 2.142-.382.612.717 2.001.785 2.533-.171zm2.157.865s.04.129.064.169c-.101.003-.213 0-.213 0a.905.905 0 0 0 .149-.17z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Groovy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Groovy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8w, create_fragment$8w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Groupon.svelte generated by Svelte v3.23.2 */

        function create_fragment$8x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.316 20.334C5.618 22.736 8.554 24 12.012 24c3.988 0 7.739-1.95 9.978-5.163 1.353-1.95 2.01-4.158 2.01-6.755 0-.484-.032-1.006-.063-1.529H10.595v4.61h6.687c-1.155 2.012-3.094 3.12-5.27 3.12-3.229 0-6.125-2.824-6.125-6.497 0-3.315 2.699-6.069 6.125-6.069 1.844 0 3.355.749 4.811 2.239h6.52C21.468 3.019 17.084 0 12.083 0c-3.323 0-6.22 1.17-8.53 3.409C1.25 5.647 0 8.572 0 11.754c-.008 3.417 1.108 6.271 3.316 8.58z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Groupon" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Groupon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8x, create_fragment$8x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Grunt.svelte generated by Svelte v3.23.2 */

        function create_fragment$8y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.04 0c-1.381.488-1.731 1.231-1.835 1.906-.355-.254-.316-1.079-.336-1.29-.353.041-1.366 1.025-1.32 2.265a7.96 7.96 0 00-.276.08c-.296-.402-1.167-1.472-2.314-1.842A3.647 3.647 0 005.832.936c-1.36 0-2.163.81-2.17.818l-.383.445.576.114c.01.002.966.201 1.362.826.065.104.083.31.101.527.012.13-.016.257-.043.379-.02.09-.038.181-.043.273-.358.014-.665.084-.914.211a1.255 1.255 0 00-.662.797c-.233.854.525 1.805.551 1.836.089.158.126 1.303-.078 1.762-.028.063-.103.126-.201.205-.03.024-.065.049-.102.076-.288.217-.722.548-.722 1.305 0 1.036 1.05 1.597 1.894 2.049.139.074.271.144.39.212l-.003.004c.126.073.57.534.57 1.223 0 .323-.028 1.859-.172 2.924-.541-.464-1.04-1.211-1.152-2.049 0 0-1.372 1.057-.969 3.32.246 1.385 1.087 2.16 2.203 2.565.405.89 1.365 2.143 3.155 2.326.677.554 1.613.913 2.978.914V24h.008c1.367-.001 2.305-.36 2.982-.916 1.786-.185 2.744-1.437 3.149-2.326 1.116-.406 1.957-1.18 2.203-2.565.402-2.263-.969-3.32-.969-3.32-.112.838-.61 1.585-1.152 2.049-.144-1.065-.174-2.601-.174-2.924 0-.689.446-1.15.572-1.223l-.004-.004c.12-.068.253-.138.39-.212.845-.452 1.893-1.013 1.893-2.05 0-.756-.434-1.087-.722-1.304l-.102-.076c-.097-.079-.173-.142-.2-.205-.205-.46-.168-1.604-.079-1.762.026-.03.784-.982.55-1.836a1.255 1.255 0 00-.661-.797c-.248-.127-.554-.197-.91-.21a1.655 1.655 0 00-.043-.276 1.289 1.289 0 01-.043-.379c.018-.218.036-.423.101-.527.396-.625 1.35-.825 1.36-.826l.576-.114-.381-.445c-.007-.008-.812-.818-2.172-.818-.371 0-.75.06-1.129.183-1.148.37-2.018 1.443-2.312 1.844a8.06 8.06 0 00-.45-.127c-.196-.74.42-1.803.42-1.803s-.635-.14-1.578.715C13 1.442 12.743.784 13.04 0zm5.118 1.637c.516 0 .936.14 1.158.234-.144.065-.3.15-.455.252a2.51 2.51 0 00-.43-.037 2.33 2.33 0 00-1.347.418c-.578.406-.846.793-.969 1.049a5.47 5.47 0 00-.552-.28c.285-.418.926-1.236 1.767-1.507.265-.086.543-.13.828-.13zm-12.314.002c.285 0 .564.043.828.129.839.27 1.481 1.086 1.767 1.505-.074.034-.15.068-.222.104a5.505 5.505 0 00-.33.176c-.124-.256-.392-.641-.969-1.047a2.32 2.32 0 00-1.346-.418c-.172 0-.32.017-.433.037a3.15 3.15 0 00-.453-.25 3.034 3.034 0 011.158-.236zm-.157.982c.349.014.655.123.913.328.386.308.572.844.634 1.057a2.965 2.965 0 00-.49.521 6.575 6.575 0 00-.543-.125C6.048 4.194 6.025 3.91 6 3.61c-.024-.29-.05-.588-.205-.834a1.932 1.932 0 00-.107-.154zm12.625.002a1.91 1.91 0 00-.105.15c-.155.246-.18.544-.205.834-.025.3-.05.587-.203.795-.197.037-.38.08-.541.125a2.952 2.952 0 00-.488-.52c.065-.221.256-.754.634-1.056.257-.204.562-.314.909-.328zm-6.31.727c1.307 0 2.477.25 3.482.74.667.325.916.57 1.01.705-1.596.709-2.483 2.164-2.492 2.18l-.162.273.262-.182.02-.015c.407-.321 1.827-1.395 3.003-1.768.329-.104.966-.28 1.541-.28.293 0 .53.045.707.136.166.085.27.206.314.369.117.425-.289 1.057-.439 1.246a.518.518 0 00-.06.1 6.35 6.35 0 01-.016-.672c-.188.41-.305 1.477-.238 2.017.168 1.373.736 2.078.736 2.078-.037-.073-.082-.362-.125-.699.034.03.068.057.101.084l.024.02c.214.172.416.333.416.853 0 .665-.72 1.056-1.416 1.432-.134.072-.267.143-.395.217-.406.234-.845.784-.894 1.603-.041.687.043 2.338.162 3.555-.584.226-1.253.3-1.861.318a5.246 5.246 0 01-.258-.617h.002c-.032-.092-.919-2.394-1.239-2.918.257 1.835.823 3.459 1.102 4.201a4.04 4.04 0 00-.549-.035l-2.736-.002h-.006l-2.736.002c-.206 0-.387.013-.55.035.28-.742.846-2.366 1.102-4.201-.319.524-1.205 2.826-1.236 2.918a5.244 5.244 0 01-.258.617c-.608-.017-1.277-.092-1.861-.318.12-1.217.201-2.868.16-3.555-.049-.819-.486-1.37-.892-1.603-.127-.074-.261-.145-.395-.217-.696-.376-1.416-.767-1.416-1.432 0-.52.202-.681.416-.853l.023-.02.102-.084c-.043.335-.089.623-.125.697.006-.007.569-.71.736-2.076.067-.54-.052-1.607-.24-2.017.008.227 0 .454-.016.67a.516.516 0 00-.058-.098c-.15-.189-.556-.821-.44-1.246a.575.575 0 01.315-.37c.176-.09.414-.134.707-.134.575 0 1.214.175 1.543.28C8.055 5.655 9.474 6.73 9.88 7.05l.02.015.26.182-.163-.273c-.01-.016-.895-1.471-2.49-2.18.094-.135.342-.38 1.01-.705 1.005-.49 2.177-.74 3.484-.74zm-1.281 4.613s.68.827 1.277.834v.002h.006c.597-.007 1.277-.834 1.277-.834v-.002c-.466.282-.884.38-1.281.389a2.495 2.495 0 01-1.28-.39zm-4.434.066c-.23.006-.47.036-.717.096.204.045.416.11.633.191l-.004.002c-.192.085-.3.323-.326.555-.054.47.244.898.244.898.03-.35.104-.6.19-.777.02.483.147 1.104.597 1.602.323.357 1.667 1.094 2.57.285.048.115.1.25.141.398.137.481-.125 1.184-.125 1.184s.705-.8.65-1.525c.507-.023 1.005-.394.99-.915 0 0-.883.488-1.663-.41-.4-.458-1.567-1.622-3.18-1.584zm11.428 0c-1.613-.038-2.781 1.126-3.18 1.584-.78.898-1.664.41-1.664.41-.014.52.482.892.988.915-.054.724.653 1.525.653 1.525s-.262-.703-.125-1.184c.042-.147.091-.282.138-.396.903.807 2.248.07 2.57-.287.452-.5.579-1.12.598-1.604.086.178.16.428.19.78 0 0 .3-.43.246-.899-.027-.232-.134-.47-.326-.555-.002 0-.004 0-.006-.002.217-.082.431-.146.635-.191a3.367 3.367 0 00-.717-.096zm-10.512.76c.915.514 1.754 1.204 2.104 1.736-.263.155-1.008.496-1.778-.076-.487-.362-.465-1.235-.326-1.66zm9.596 0c.14.425.161 1.298-.326 1.66-.77.572-1.517.23-1.78.076.35-.532 1.191-1.222 2.106-1.736zM4.455 16.197c.512 1.614 2.212 2.075 3.486 2.131a7.15 7.15 0 01-.34.485l-.052.052c-.339.366-.404.87-.194 1.494-1.057-.016-2.163-.468-2.724-1.392-.569-.936-.41-2.535-.176-2.77zm15.092 0c.233.235.393 1.834-.176 2.77-.561.923-1.664 1.373-2.72 1.39.21-.624.144-1.125-.194-1.49l-.002-.002c-.018-.02-.04-.04-.06-.06a7.1 7.1 0 01-.334-.477c1.274-.055 2.975-.517 3.486-2.13zM12 18.895l2.045.001h.74c.709 0 1.019.184 1.154.338.198.226.21.589.04 1.08v.002c-.31.886-1.14 3.03-3.979 3.034-2.839-.004-3.67-2.148-3.979-3.034-.17-.491-.157-.856.041-1.082.136-.154.446-.338 1.155-.338h.74L12 18.895zm-1.805.72l-.896.002h-.182c-.256 0-.384.074-.445.135-.089.09-.102.213-.041.37.163.415.533.756.642.85a.86.86 0 00.551.196l.002.002c.207 0 .39-.076.516-.211.352-.376.561-.782.611-.906.029-.071.062-.207-.04-.313-.081-.082-.221-.125-.417-.125h-.3zm3.31 0c-.194 0-.335.043-.415.125-.104.106-.07.242-.041.313.05.124.259.53.611.906v.002c.126.135.31.209.518.209a.861.861 0 00.55-.197c.11-.094.48-.434.643-.85.061-.156.048-.281-.04-.371-.061-.06-.188-.135-.444-.135h-.184l-.896-.002h-.301zm-6.728 1.387c.282.052.575.088.873.111.163.379.347.748.577 1.088a3.186 3.186 0 01-1.45-1.199zm10.446 0a3.19 3.19 0 01-1.442 1.195c.228-.34.413-.707.574-1.084a8.26 8.26 0 00.868-.111Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Grunt" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Grunt extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8y, create_fragment$8y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Guangzhoumetro.svelte generated by Svelte v3.23.2 */

        function create_fragment$8z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.433 12.329A16.188 16.188 0 0 1 22.118.009L17.684 0a16.2 16.2 0 0 0-4.776 11.374V24h3.525zm-8.869 0A16.174 16.174 0 0 0 1.882.009L6.319 0a16.238 16.238 0 0 1 4.773 11.374V24H7.564zm0 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Guangzhou Metro" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Guangzhoumetro extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8z, create_fragment$8z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gulp.svelte generated by Svelte v3.23.2 */

        function create_fragment$8A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.936 4.694c-.336 0-.675.078-1.013.222-.34.145-.676.346-1.007.605a7.133 7.133 0 00-.97.917c-.313.354-.61.745-.887 1.164-.276.42-.533.867-.78 1.32h-.001v.001c-.239.473-.448.96-.63 1.455-.18.496-.324.993-.438 1.497-.11.5-.178.987-.2 1.465a.515.515 0 00-.01.091v.095c0 .261.038.53.075.776v.002l.001.002c.068.262.175.504.31.717a1.7 1.7 0 00.537.518c.217.138.474.207.776.207.263 0 .536-.06.817-.185.279-.125.557-.288.834-.479.268-.192.536-.412.794-.66.207-.192.396-.392.583-.59l-.196.608c-.085.293-.18.576-.257.853-.085.274-.152.52-.209.738-.057.216-.096.362-.096.456v.215c0 .241.025.411.104.518a.398.398 0 00.333.152.435.435 0 00.265-.095c.081-.06.15-.137.219-.224v-.002l.002-.001c.057-.087.115-.18.164-.278.05-.101.078-.19.107-.269v-.001l.067-.24.143-.495.19-.662c.076-.247.142-.495.227-.747l.225-.75c.072-.244.14-.465.203-.661.063-.2.116-.362.16-.493.02-.065.04-.116.054-.154l.014-.032.04.018.018-.048c.076-.218.151-.427.227-.626.076-.2.152-.4.21-.597a3.762 3.762 0 00.22-1.29.637.637 0 00-.05-.255.44.44 0 00-.124-.18.499.499 0 00-.174-.1.622.622 0 00-.19-.03.655.655 0 00-.378.127c-.129.086-.225.229-.297.422v.001l-.55 1.764a3.91 3.91 0 01-.317.513v.001a9.407 9.407 0 01-1.71 1.832c-.207.17-.404.301-.6.404a1.063 1.063 0 01-.5.146.48.48 0 01-.312-.103.637.637 0 01-.204-.275 1.582 1.582 0 01-.102-.387 3.182 3.182 0 01-.028-.422c0-.413.066-.874.198-1.394.132-.52.312-1.04.539-1.579.227-.54.492-1.06.786-1.571.293-.511.605-.965.926-1.362.32-.396.64-.706.97-.95.327-.244.62-.362.902-.362a.88.88 0 01.497.145c.152.098.29.263.42.496v-.001c.134.259.269.46.385.606.12.15.259.227.408.227a.51.51 0 00.416-.208c.115-.138.17-.327.17-.556 0-.096-.01-.2-.03-.307a.87.87 0 00-.14-.334c-.314-.47-.651-.807-1.01-1.024H7.06a2.216 2.216 0 00-1.125-.317zm10.961.855a.802.802 0 00-.41.12h-.001l-.001.001a.85.85 0 00-.318.43l-1.889 4.758-.417 1.045c-.153.38-.295.76-.447 1.148a4.792 4.792 0 00-.176.551 4.995 4.995 0 01-.257.215c-.207.16-.403.281-.589.365h-.002c-.184.093-.339.129-.463.129-.082 0-.137-.02-.172-.053-.035-.033-.056-.084-.056-.166 0-.185.028-.39.084-.615.057-.22.132-.451.217-.683a8.73 8.73 0 01.274-.69l.276-.644c.086-.2.153-.382.21-.534a1.15 1.15 0 00.089-.377.71.71 0 00-.143-.437.474.474 0 00-.39-.19.466.466 0 00-.378.179 1.514 1.514 0 00-.254.42 3.917 3.917 0 00-.201.537c-.056.19-.131.368-.207.535-.113.25-.246.524-.416.826a6.64 6.64 0 01-.565.849c-.207.26-.432.479-.675.654-.24.175-.495.257-.75.257-.083 0-.138-.03-.167-.088a.472.472 0 01-.052-.225c.01-.204.046-.419.112-.643.066-.222.141-.443.226-.66.085-.21.18-.424.283-.625.105-.201.2-.391.294-.56v-.001l.248-.47c.068-.136.107-.243.135-.33l.001-.002v-.001c.01-.04.021-.09.021-.145a.419.419 0 00-.054-.214v-.001l-.001-.001a.526.526 0 00-.335-.238.65.65 0 00-.588.103c-.132.091-.231.232-.319.426a23.085 23.085 0 00-.79 1.817c-.19.505-.323.914-.418 1.229a4.666 4.666 0 00-.163.7v.001l-.02.231v.002c0 .214.029.4.09.55v.002c.068.147.148.266.249.357a.893.893 0 00.36.191c.132.04.27.059.41.059.311 0 .598-.058.861-.155s.501-.232.714-.396c.21-.163.4-.346.563-.548.12-.14.21-.285.3-.427-.04.22-.078.437-.078.614 0 .33.063.57.202.717a.695.695 0 00.523.214c.208 0 .439-.057.694-.17.253-.113.51-.262.77-.446.065-.045.127-.093.19-.141l.005.036a1 1 0 00.15.35h.001l.001.002c.08.099.17.18.291.24.123.062.273.091.45.091.253 0 .516-.059.787-.175h.002c.268-.125.537-.279.805-.48.268-.201.545-.44.812-.697l.01-.009c-.046.106-.09.212-.138.319-.219.484-.442.972-.674 1.471-.233.5-.466.994-.684 1.488l-.001.003-.001.002a3.93 3.93 0 01-.104.278c-.036.092-.085.188-.115.298v.001c-.037.1-.075.198-.095.306-.03.11-.04.217-.04.315 0 .208.059.367.172.447a.67.67 0 00.398.115c.122 0 .234-.03.335-.08v-.001h.001a.95.95 0 00.263-.22c.076-.09.14-.192.198-.308.059-.117.107-.242.154-.365l.002-.004v-.004c.008-.037.037-.121.084-.244l.162-.436.19-.512.199-.522.17-.435c.048-.124.077-.21.095-.255v-.001c.019-.038.048-.095.085-.189l.133-.313.161-.37.172-.38.142-.342.103-.226.001-.001c.085-.17.188-.358.302-.566v-.001c.123-.207.255-.405.396-.612v-.001c.152-.2.302-.397.463-.585.161-.187.33-.347.5-.498.173-.14.346-.262.521-.345a1.14 1.14 0 01.499-.128c.086 0 .143.018.178.039a.135.135 0 01.042.103c0 .08-.043.207-.144.353v.001c-.104.16-.226.33-.377.519-.162.19-.323.389-.503.597-.18.21-.352.419-.514.628a6.18 6.18 0 00-.412.603v.001a1.518 1.518 0 00-.205.53v.007a.193.193 0 01-.004.022c-.003.01-.006.014-.006.035v.057c0 .257.092.465.274.606.183.152.441.22.76.22.349 0 .67-.068.97-.204.298-.134.605-.316.92-.556h.001c.315-.236.64-.517.991-.843.341-.325.739-.685 1.184-1.08a.847.847 0 00.262-.352c.059-.138.089-.275.089-.41a.635.635 0 00-.082-.324.278.278 0 00-.248-.148.369.369 0 00-.164.043c-.053.026-.109.06-.17.101-.104.033.017.063.03.108-.538.481-1.004.887-1.373 1.206-.38.332-.699.588-.946.788a5.893 5.893 0 01-.574.41c-.132.079-.233.117-.289.117-.078 0-.132-.02-.156-.043a.142.142 0 01-.043-.108c0-.007.01-.036.035-.075.026-.04.065-.091.117-.152l.398-.465c.162-.181.324-.381.504-.6.18-.22.35-.447.502-.682.16-.23.285-.467.39-.7.101-.233.156-.455.156-.666a.837.837 0 00-.106-.426.92.92 0 00-.277-.3c-.11-.08-.238-.14-.375-.181h-.001a1.557 1.557 0 00-1.043.073 3.064 3.064 0 00-.598.332 5.677 5.677 0 00-.565.45 9.89 9.89 0 00-.38.378l.036-.176c.015-.073.025-.141.034-.207v-.001c.01-.068.013-.116.013-.149a.529.529 0 00-.126-.373v-.001h-.002c-.087-.09-.222-.129-.4-.129-.122 0-.24.07-.34.19a2.18 2.18 0 00-.263.418 4.225 4.225 0 00-.202.48l-.133.378v.001c-.046.159-.097.321-.15.485-.014.004-.027.008-.041.014a.33.33 0 00-.136.089l.003-.003c-.118.114-.251.247-.399.389-.147.142-.303.284-.464.426-.162.133-.326.275-.49.407-.162.13-.32.245-.471.345-.15.101-.29.18-.419.241a.776.776 0 01-.309.088c-.06 0-.085-.014-.1-.042h-.001a.311.311 0 01-.032-.155c0-.113.02-.243.064-.39.042-.146.086-.274.13-.385l.028-.03.374-.952c.142-.365.294-.746.465-1.152l.513-1.254c.17-.427.342-.84.503-1.234l.475-1.102c.142-.336.266-.619.37-.848l-.001.002c.059-.117.097-.227.135-.32v-.002a.934.934 0 00.055-.297c0-.196-.061-.35-.18-.443a.6.6 0 00-.384-.133Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "gulp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gulp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8A, create_fragment$8A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gumroad.svelte generated by Svelte v3.23.2 */

        function create_fragment$8B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.826 15.069a1.018 1.018 0 1 1-.001 2.036 1.018 1.018 0 0 1 0-2.036zM21.327 1.11a1.018 1.018 0 1 1 .001 2.036 1.018 1.018 0 0 1 0-2.036zM3.322 3.107h16.116a2.13 2.13 0 0 0 1.89 1.151c1.174 0 2.129-.955 2.129-2.13A2.131 2.131 0 0 0 21.327 0c-.89 0-1.654.55-1.97 1.329H3.321C1.764 1.329.543 2.51.543 4.019v17.156C.543 22.706 1.816 24 3.322 24h17.155c1.51 0 2.738-1.267 2.738-2.825V10.998c0-1.532-1.228-2.78-2.738-2.78H10.3c-1.553 0-2.866 1.274-2.866 2.78v3.198c0 1.484 1.286 2.691 2.866 2.691h3.554a2.132 2.132 0 0 0 1.972 1.329c1.174 0 2.129-.956 2.129-2.13s-.955-2.129-2.13-2.129a2.13 2.13 0 0 0-1.889 1.152H10.3c-.523 0-1.088-.349-1.088-.913v-3.198c0-.524.519-1 1.088-1h10.177c.538 0 .96.439.96 1v10.177c0 .567-.44 1.047-.96 1.047H3.322c-.533 0-1-.49-1-1.047V4.02c0-.52.43-.912 1-.912");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gumroad" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gumroad extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8B, create_fragment$8B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gumtree.svelte generated by Svelte v3.23.2 */

        function create_fragment$8C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.829 6.52c-.189-.127-.315-.315-.315-.57C18.198 2.596 15.412 0 11.994 0s-6.203 2.594-6.52 5.949c0 .255-.126.442-.314.57-1.711 1.202-2.785 3.165-2.785 5.378 0 3.038 2.087 5.573 4.872 6.331.507.127.95.189 1.14.061.379-.188.76-1.832.57-2.213-.128-.189-.57-.379-1.014-.506-1.646-.443-2.848-1.961-2.848-3.732 0-1.015.379-1.9 1.014-2.6.252-.315.63-.567.948-.757.696-.38 1.14-1.142 1.14-1.964 0-.45.063-.826.189-1.201.506-1.532 1.961-2.659 3.67-2.659 1.711 0 3.166 1.127 3.672 2.659.126.375.189.751.189 1.201 0 .812.381 1.578 1.142 1.953.379.18.694.436.946.752.634.69 1.014 1.576 1.014 2.598 0 2.148-1.709 3.861-3.86 3.861-2.468 0-4.431 2.013-4.431 4.416v2.523c0 .496.064 1.006.19 1.142.315.316 1.962.316 2.278 0 .136-.136.195-.631.195-1.142v-2.583c0-.946.766-1.713 1.713-1.713 3.605 0 6.52-2.915 6.52-6.52 0-2.163-1.066-4.116-2.78-5.317l-.015.033z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gumtree" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gumtree extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8C, create_fragment$8C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Gutenberg.svelte generated by Svelte v3.23.2 */

        function create_fragment$8D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.439,11.358c-0.084-0.057-0.199-0.034-0.256,0.051c-0.334,0.503-1.043,0.53-1.08,0.53 c-0.007,0-0.01,0-0.017,0c-0.874,0-1.208,0.746-1.221,0.776c-0.04,0.094,0.003,0.202,0.094,0.243 c0.024,0.01,0.051,0.017,0.074,0.017c0.071,0,0.138-0.04,0.169-0.111c0.003-0.007,0.233-0.52,0.823-0.553v0.955 c-0.024,0.206-0.121,0.368-0.294,0.489c-0.179,0.125-0.418,0.189-0.712,0.189c-0.351,0-0.638-0.121-0.85-0.361 c-0.216-0.24-0.324-0.58-0.324-1.019l0.003-1.053c0.017-0.388,0.121-0.695,0.321-0.914c0.216-0.24,0.499-0.361,0.85-0.361 c0.294,0,0.533,0.064,0.712,0.189c0.179,0.125,0.28,0.297,0.297,0.52l0,0c0,0.007,0,0.017,0,0.024c0,0.128,0.105,0.233,0.233,0.233 c0.128,0,0.233-0.105,0.233-0.233c0-0.007,0-0.017,0-0.024l0,0c-0.034-0.334-0.186-0.597-0.459-0.796 C12.762,9.948,12.422,9.85,12.01,9.85c-0.489,0-0.884,0.162-1.184,0.482c-0.283,0.3-0.432,0.695-0.449,1.181l0,0l0,0 c0,0.034-0.003,0.067-0.003,0.101l0.003,0.948h-0.003c0,0.536,0.152,0.965,0.452,1.285s0.695,0.482,1.184,0.482 c0.412,0,0.752-0.098,1.026-0.297c0.25-0.182,0.398-0.422,0.449-0.719l0.01-1.059c0.307-0.074,0.725-0.243,0.989-0.641 C14.55,11.53,14.527,11.415,14.439,11.358z M17.688,0.511h2.588c0.115,0,0.209-0.094,0.209-0.209s-0.094-0.209-0.209-0.209h-2.588 c-0.115,0-0.209,0.094-0.209,0.209S17.573,0.511,17.688,0.511z M3.825,0.511h2.588c0.115,0,0.209-0.094,0.209-0.209 S6.527,0.093,6.413,0.093H3.825c-0.115,0-0.209,0.094-0.209,0.209S3.707,0.511,3.825,0.511z M20.408,2.191 c0.116,0,0.209,0.094,0.209,0.209c0,0.116-0.094,0.209-0.209,0.209c-0.116,0-0.209-0.094-0.209-0.209 C20.198,2.285,20.292,2.191,20.408,2.191z M11.99,1.533c0.116,0,0.209,0.094,0.209,0.209s-0.094,0.209-0.209,0.209 s-0.209-0.094-0.209-0.209S11.874,1.533,11.99,1.533z M8.11,2.404c0.003,0,0.007,0,0.01,0c0.786,0,1.137-0.493,1.404-0.951 c0.088-0.152,0.412-0.658,0.87-0.789c0.567-0.165,1.171,0.098,1.407,0.614c0.034,0.074,0.108,0.118,0.182,0.121 c0.003,0,0.007,0,0.01,0c0.003,0,0.007,0,0.013,0c0.074-0.003,0.148-0.047,0.182-0.121c0.236-0.516,0.84-0.779,1.407-0.614 c0.459,0.135,0.783,0.638,0.87,0.789c0.267,0.462,0.617,0.951,1.414,0.951l0,0c0.479,0,1.046-0.358,1.204-1.043 c0.132-0.567-0.111-1.08-0.641-1.339c-0.105-0.051-0.229-0.01-0.28,0.094c-0.051,0.105-0.01,0.229,0.094,0.28 c0.503,0.25,0.459,0.692,0.418,0.87c-0.081,0.351-0.391,0.722-0.8,0.722c-0.523,0-0.773-0.263-1.053-0.746 c-0.138-0.236-0.523-0.81-1.113-0.982c-0.644-0.189-1.326,0.037-1.717,0.533c-0.391-0.496-1.073-0.722-1.717-0.533 c-0.59,0.172-0.975,0.746-1.113,0.982c-0.28,0.482-0.53,0.746-1.043,0.746c-0.003,0-0.007,0-0.007,0 c-0.445-0.003-0.729-0.314-0.81-0.621c-0.04-0.145-0.125-0.641,0.442-0.978c0.098-0.057,0.132-0.186,0.071-0.287 C7.755,0.005,7.631-0.029,7.529,0.032C6.878,0.42,6.777,1.034,6.898,1.479C7.047,2.029,7.536,2.4,8.11,2.404z M11.996,22.1H12l0,0 H11.996z M3.498,2.191c0.116,0,0.209,0.094,0.209,0.209c0,0.116-0.094,0.209-0.209,0.209S3.288,2.516,3.288,2.4 C3.288,2.285,3.382,2.191,3.498,2.191z M2.911,0.096c0.116,0,0.209,0.094,0.209,0.209S3.026,0.514,2.911,0.514 S2.701,0.421,2.701,0.305S2.795,0.096,2.911,0.096z M21.15,0.096c0.116,0,0.209,0.094,0.209,0.209s-0.094,0.209-0.209,0.209 s-0.209-0.094-0.209-0.209S21.034,0.096,21.15,0.096z M22.27,13.5c0.116,0,0.209,0.094,0.209,0.209 c0,0.116-0.094,0.209-0.209,0.209c-0.116,0-0.209-0.094-0.209-0.209C22.061,13.594,22.154,13.5,22.27,13.5z M21.43,18.285 c0.116,0,0.209,0.094,0.209,0.209c0,0.116-0.094,0.209-0.209,0.209s-0.209-0.094-0.209-0.209 C21.221,18.378,21.314,18.285,21.43,18.285z M20.087,18.882c0.116,0,0.209,0.094,0.209,0.209c0,0.116-0.094,0.209-0.209,0.209 c-0.116,0-0.209-0.094-0.209-0.209C19.878,18.975,19.972,18.882,20.087,18.882z M7.674,1.088c0,0.31,0.253,0.563,0.563,0.563 c0.31,0,0.563-0.253,0.563-0.563S8.548,0.524,8.238,0.524C7.928,0.521,7.674,0.774,7.674,1.088z M8.238,0.939 c0.081,0,0.148,0.067,0.148,0.148c0,0.081-0.067,0.148-0.148,0.148c-0.081,0-0.148-0.067-0.148-0.148 C8.089,1.007,8.157,0.939,8.238,0.939z M15.829,1.651c0.31,0,0.563-0.253,0.563-0.563s-0.253-0.563-0.563-0.563 c-0.31,0-0.563,0.253-0.563,0.563S15.519,1.651,15.829,1.651z M15.829,0.939c0.081,0,0.148,0.067,0.148,0.148 c0,0.081-0.067,0.148-0.148,0.148s-0.148-0.067-0.148-0.148C15.681,1.007,15.748,0.939,15.829,0.939z M12.56,1.439 c-0.108,0.04-0.162,0.159-0.121,0.267c0.04,0.108,0.159,0.162,0.267,0.125c0.034-0.013,0.843-0.283,1.464,0.682 c0.04,0.061,0.108,0.094,0.175,0.094c0.037,0,0.078-0.01,0.111-0.034c0.098-0.061,0.125-0.192,0.064-0.287 C13.872,1.284,12.955,1.294,12.56,1.439z M11.433,1.439c-0.03-0.01-0.307-0.108-0.685-0.051c-0.351,0.051-0.854,0.25-1.272,0.901 C9.415,2.387,9.442,2.515,9.54,2.576c0.034,0.024,0.074,0.034,0.111,0.034c0.067,0,0.135-0.034,0.175-0.094 c0.617-0.965,1.427-0.695,1.464-0.682c0.108,0.04,0.226-0.017,0.267-0.125C11.598,1.601,11.541,1.479,11.433,1.439z M21.032,2.009 l1.016-1.154v1.663c0,0.115,0.094,0.209,0.209,0.209s0.209-0.094,0.209-0.209V0.305c0-0.088-0.054-0.165-0.135-0.196 s-0.172-0.007-0.229,0.057l-1.38,1.569c-0.078,0.088-0.067,0.219,0.02,0.294C20.823,2.107,20.954,2.097,21.032,2.009z M1.767,2.731 c0.115,0,0.209-0.094,0.209-0.209V0.858l1.016,1.154C3.069,2.1,3.201,2.107,3.285,2.033c0.088-0.078,0.094-0.209,0.02-0.294 l-1.38-1.572C1.868,0.103,1.777,0.079,1.696,0.109C1.615,0.14,1.561,0.217,1.561,0.305v2.217C1.561,2.636,1.652,2.731,1.767,2.731z  M16.497,2.937c-0.098-0.007-0.189,0.061-0.213,0.155c-0.024,0.098,0.024,0.199,0.111,0.24c0.331,0.155,0.631,0.216,0.901,0.216 c0.516,0,0.928-0.226,1.215-0.462c0.459-0.378,0.695-0.854,0.705-0.874c0.047-0.098,0.013-0.216-0.081-0.27 c-0.213-0.125-0.58-0.202-1.14,0.138c-0.28,0.172-0.496,0.378-0.533,0.415C16.949,2.947,16.521,2.937,16.497,2.937z M17.742,2.805 c0.003-0.003,0.007-0.007,0.01-0.01c0.159-0.159,0.607-0.526,0.958-0.543c-0.101,0.145-0.253,0.341-0.459,0.513 c-0.304,0.25-0.628,0.371-0.972,0.364C17.422,3.055,17.58,2.947,17.742,2.805z M4.958,1.941C4.864,1.995,4.83,2.114,4.878,2.211 c0.01,0.02,0.246,0.496,0.705,0.874c0.287,0.236,0.695,0.462,1.215,0.462c0.273,0,0.574-0.061,0.901-0.216 c0.091-0.044,0.135-0.142,0.111-0.24C7.786,2.994,7.698,2.93,7.597,2.933c-0.017,0-0.449,0.013-0.962-0.439 C6.598,2.458,6.382,2.252,6.102,2.08C5.542,1.742,5.171,1.82,4.958,1.941z M6.355,2.805c0.159,0.142,0.317,0.246,0.462,0.324 c-0.729,0.007-1.211-0.55-1.431-0.877c0.351,0.017,0.8,0.385,0.958,0.543C6.349,2.798,6.352,2.802,6.355,2.805z M22.516,19.759 c-0.209-0.175-0.439-0.277-0.651-0.334c0.081-0.061,0.159-0.132,0.226-0.209c0.516-0.607,0.52-1.501,0.007-2.082 c-0.078-0.088-0.209-0.094-0.294-0.017c-0.088,0.078-0.094,0.209-0.017,0.294c0.375,0.425,0.368,1.083-0.013,1.535 c-0.31,0.364-0.901,0.452-1.076,0.472c-0.53,0.057-1.124,0.179-1.444,0.904c-0.051,0.111-0.081,0.236-0.088,0.371 c-0.074-0.024-0.155-0.037-0.236-0.037c-0.422,0-0.766,0.344-0.766,0.766c0,0.29,0.162,0.543,0.401,0.671 c-0.071,0.064-0.138,0.135-0.199,0.216c-0.709-0.955-1.842-1.555-3.09-1.555c-0.179,0-0.358,0.013-0.53,0.037 c1.026-0.314,1.98-0.803,2.851-1.451l0,0c1.124-0.84,2.058-1.937,2.699-3.168c0.675-1.296,1.016-2.696,1.016-4.153 c0-0.01,0-0.017,0-0.027c0-0.003,0-0.003,0-0.007s0-0.007,0-0.01c-0.007-1.184-0.27-2.25-0.644-3.168 c0.138,0.027,0.27,0.037,0.388,0.037c0.874,0,1.258-0.601,1.299-0.671l0,0c0.189-0.317,0.219-0.702,0.111-1.049 c0.003-0.01,0.003-0.024,0.003-0.037V3.284c0-0.115-0.094-0.209-0.209-0.209c-0.115,0-0.209,0.094-0.209,0.209v3.195 c-0.354-0.307-0.867-0.341-1.08-0.341c-0.412,0.003-0.668-0.061-0.857-0.385c-0.159-0.273-0.067-0.557,0.091-0.719 c0.199-0.202,0.482-0.229,0.759-0.078c0.101,0.054,0.229,0.02,0.283-0.081c0.054-0.101,0.02-0.229-0.081-0.283 c-0.439-0.243-0.931-0.182-1.258,0.148c-0.324,0.331-0.385,0.82-0.155,1.218c0.3,0.516,0.756,0.59,1.204,0.59 c0.007,0,0.01,0,0.017,0c0.135,0,0.57,0.02,0.82,0.256c0.324,0.307,0.408,0.789,0.196,1.147c0,0-0.003,0.003-0.003,0.007 c-0.017,0.03-0.418,0.712-1.538,0.354c-0.337-0.715-0.729-1.323-1.093-1.808L19.19,6.631l0.165-0.128l-0.067-0.088 c-0.719-1.204,0.111-2.487,0.543-3.03l0.243-0.277l0,0l0,0l0,0c0.074-0.088,0.067-0.219-0.02-0.294 c-0.084-0.071-0.206-0.067-0.283,0.01l0,0c-0.007,0.007-0.044,0.044-0.101,0.108c-0.375,0.381-1.839,1.731-3.259,1.026l-0.04-0.027 l-0.02-0.013c-1.272-0.685-2.527-1.08-3.725-1.181c-0.155-0.354-0.361-0.624-0.621-0.624c-0.263,0-0.469,0.273-0.628,0.634 c-1.677,0.074-3.762,1.157-3.85,1.201C6.099,4.668,4.628,3.311,4.253,2.93C4.196,2.866,4.155,2.829,4.152,2.822l0,0 c-0.078-0.078-0.199-0.081-0.283-0.01c-0.088,0.074-0.094,0.206-0.02,0.294l0,0l0,0l0,0l0.26,0.294 C4.26,3.588,4.452,3.861,4.614,4.188c0.405,0.82,0.412,1.565,0.024,2.22C4.155,7.009,3.764,7.64,3.464,8.305 c-1.13,0.368-1.535-0.321-1.552-0.351c0-0.003-0.003-0.003-0.003-0.007C1.696,7.589,1.78,7.107,2.104,6.8 c0.25-0.236,0.685-0.256,0.82-0.256h0.003c0.452,0,0.918-0.071,1.218-0.59C4.375,5.555,4.314,5.062,3.99,4.735 C3.663,4.401,3.17,4.344,2.732,4.587C2.63,4.641,2.593,4.769,2.651,4.87c0.054,0.101,0.182,0.138,0.283,0.081 c0.28-0.152,0.563-0.125,0.759,0.078C3.852,5.191,3.94,5.474,3.784,5.747C3.599,6.068,3.346,6.132,2.941,6.132 c-0.003,0-0.007,0-0.013,0c-0.186,0-0.617,0.027-0.962,0.25V3.335c0-0.115-0.094-0.209-0.209-0.209 c-0.115,0-0.209,0.094-0.209,0.209v3.509C1.318,7.255,1.305,7.758,1.541,8.163C1.564,8.207,1.709,8.45,2.033,8.632 C2.219,8.736,2.485,8.834,2.84,8.834c0.128,0,0.27-0.013,0.422-0.044c-0.364,0.978-0.547,2.031-0.553,3.178 c0,0.003,0,0.003,0,0.007v0.003c0,0.01,0,0.02,0,0.027c0,2.072,0.729,4.106,2.051,5.729c1.171,1.437,2.763,2.503,4.528,3.047 c-0.186-0.027-0.375-0.04-0.563-0.04c-1.238,0-2.362,0.59-3.07,1.532c-0.057-0.074-0.121-0.145-0.192-0.206 c0.223-0.135,0.375-0.378,0.375-0.658c0-0.422-0.344-0.766-0.766-0.766c-0.078,0-0.152,0.013-0.223,0.034 c-0.01-0.132-0.04-0.256-0.088-0.368c-0.324-0.725-0.914-0.847-1.444-0.904c-0.175-0.02-0.766-0.108-1.076-0.472 c-0.391-0.442-0.398-1.1-0.024-1.525c0.078-0.088,0.067-0.219-0.017-0.294c-0.088-0.078-0.219-0.067-0.294,0.017 c-0.509,0.58-0.506,1.474,0.007,2.082c0.067,0.081,0.145,0.148,0.226,0.209c-0.213,0.057-0.442,0.162-0.651,0.334 c-0.496,0.408-0.749,1.09-0.756,2.018c-0.017,0.084,0.02,0.172,0.094,0.219c0.034,0.02,0.071,0.03,0.108,0.03 c0.013,0,0.03-0.003,0.044-0.007h0.003c0.007,0,0.01-0.003,0.017-0.007c0.01-0.003,0.024-0.007,0.034-0.013 c0.003,0,0.003-0.003,0.007-0.003c0.034-0.02,0.064-0.047,0.084-0.081c0.081-0.105,0.415-0.236,0.692-0.294 c1.083-0.236,1.309-0.968,1.275-1.319c-0.01-0.115-0.111-0.199-0.226-0.189c-0.115,0.01-0.199,0.111-0.189,0.226 c0,0.003,0.003,0.064-0.017,0.155c-0.051,0.209-0.236,0.57-0.931,0.722c-0.003,0-0.003,0-0.007,0 c-0.081,0.017-0.324,0.074-0.55,0.179c0.061-0.601,0.253-1.039,0.58-1.312c0.503-0.418,1.167-0.3,1.174-0.297 c0.024,0.003,0.044,0.003,0.064,0c0.111,0.024,0.206,0.037,0.277,0.044c0.557,0.061,0.897,0.182,1.11,0.658 c0.165,0.375-0.047,0.806-0.334,1.022c-0.145,0.111-0.533,0.331-0.968-0.027c-0.088-0.074-0.219-0.061-0.294,0.027 c-0.074,0.088-0.061,0.219,0.027,0.294c0.196,0.162,0.415,0.256,0.641,0.283c-0.29,0.236-0.486,0.533-0.574,0.688 c-0.283,0.489-0.513,0.752-0.894,0.756v-1.461c0-0.115-0.094-0.209-0.209-0.209s-0.209,0.094-0.209,0.209v1.694 c0,0.084,0.051,0.155,0.121,0.189c0.037,0.027,0.081,0.047,0.128,0.047h4.858c0.074,0,0.135-0.037,0.175-0.094 c0.027-0.027,0.051-0.061,0.061-0.101c0.192-0.746,0.864-1.265,1.633-1.265c0.688,0,1.299,0.418,1.559,1.043H9.652 c-0.182-0.449-0.621-0.749-1.117-0.749c-0.543,0-1.022,0.368-1.167,0.891c-0.03,0.111,0.037,0.226,0.145,0.256 c0.111,0.03,0.226-0.037,0.256-0.145c0.094-0.344,0.408-0.584,0.763-0.584c0.263,0,0.499,0.128,0.644,0.331H9.054 c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209h0.422C9.483,23.997,9.493,24,9.5,24c0.01,0,0.02,0,0.027-0.003h0.837 c0.115,0,0.209-0.094,0.209-0.209c0-0.01,0-0.02-0.003-0.03c0.003-0.027,0.003-0.057-0.003-0.088 c-0.246-0.914-1.083-1.552-2.031-1.552c-0.918,0-1.724,0.594-2.004,1.461h-1.09c0.088-0.28,0.206-0.54,0.354-0.783 c0.01-0.013,0.017-0.027,0.027-0.04c0.617-0.968,1.697-1.589,2.895-1.589c0.709,0,1.39,0.216,1.967,0.621 c0.017,0.01,0.034,0.02,0.051,0.024c0.088,0.105,0.175,0.216,0.26,0.331c0.02,0.027,0.037,0.054,0.057,0.081 c-0.02,0.428,0.213,0.877,0.695,1.336c0.017,0.051,0.034,0.094,0.044,0.128v0.044c0,0.115,0.094,0.209,0.209,0.209 c0.098,0,0.175-0.064,0.199-0.155l0,0c0-0.003,0.03-0.105,0.091-0.273c0.435-0.425,0.651-0.84,0.648-1.242 c0.027-0.04,0.057-0.084,0.088-0.125c0.094-0.128,0.192-0.253,0.294-0.371c0.574-0.398,1.245-0.607,1.947-0.607 c1.512,0,2.834,0.985,3.273,2.412h-1.09c-0.277-0.867-1.083-1.461-2.004-1.461c-0.948,0-1.781,0.638-2.031,1.552 c-0.01,0.034-0.01,0.067,0,0.101c0,0.007,0,0.01,0,0.017c0,0.115,0.094,0.209,0.209,0.209h1.829c0.115,0,0.209-0.094,0.209-0.209 s-0.094-0.209-0.209-0.209h-0.665c0.145-0.202,0.381-0.331,0.644-0.331c0.361,0,0.675,0.243,0.766,0.594 c0.024,0.094,0.108,0.155,0.202,0.155c0.017,0,0.034-0.003,0.051-0.007c0.111-0.027,0.179-0.142,0.152-0.253 c-0.138-0.533-0.617-0.908-1.171-0.908c-0.493,0-0.931,0.3-1.117,0.749h-0.422c0.256-0.624,0.87-1.043,1.559-1.043 c0.769,0,1.441,0.52,1.633,1.265c0.003,0.017,0.013,0.034,0.02,0.051c0.027,0.084,0.105,0.145,0.199,0.145h4.95 c0.115,0,0.209-0.094,0.209-0.209c0-0.003,0-0.01,0-0.013s0-0.01,0-0.013v-0.04c0.003-0.02,0.003-0.04,0.003-0.061 c0-0.003,0-0.007-0.003-0.01v-1.582c0-0.115-0.094-0.209-0.209-0.209s-0.209,0.094-0.209,0.209v1.417 c-0.351-0.027-0.57-0.287-0.84-0.752c-0.088-0.148-0.27-0.428-0.54-0.658c0.186-0.04,0.364-0.128,0.53-0.267 c0.088-0.074,0.101-0.206,0.027-0.294s-0.206-0.101-0.294-0.027c-0.432,0.358-0.82,0.138-0.968,0.027 c-0.287-0.216-0.499-0.651-0.334-1.022c0.213-0.476,0.553-0.601,1.11-0.658c0.071-0.007,0.165-0.02,0.277-0.044 c0.02,0.003,0.044,0.003,0.067,0c0.007,0,0.665-0.121,1.171,0.297c0.331,0.273,0.526,0.712,0.584,1.316 c-0.229-0.108-0.476-0.165-0.553-0.182c-0.003,0-0.003,0-0.007,0c-0.692-0.152-0.881-0.509-0.931-0.719 c-0.02-0.088-0.02-0.148-0.017-0.155c0.01-0.115-0.074-0.216-0.189-0.226c-0.115-0.01-0.216,0.074-0.226,0.189 c-0.034,0.354,0.192,1.083,1.279,1.319c0.28,0.061,0.634,0.199,0.698,0.304c0,0,0,0.003,0.003,0.003 c0.01,0.013,0.02,0.027,0.03,0.037c0.003,0.003,0.007,0.003,0.01,0.007c0.01,0.007,0.02,0.017,0.03,0.02 c0.003,0.003,0.01,0.007,0.013,0.007c0.01,0.007,0.02,0.01,0.03,0.013c0.003,0,0.01,0.003,0.013,0.003 c0.013,0.003,0.03,0.007,0.047,0.007l0,0c0.013,0,0.024,0,0.037-0.003c0.003,0,0.007,0,0.01-0.003 c0.01-0.003,0.02-0.007,0.034-0.01h0.003c0.01-0.003,0.017-0.01,0.027-0.013l0.003-0.003c0.007-0.003,0.013-0.01,0.017-0.013 c0.003-0.003,0.01-0.007,0.013-0.013c0.003-0.003,0.01-0.01,0.013-0.013c0.003-0.007,0.01-0.01,0.013-0.017s0.007-0.01,0.01-0.017 c0.003-0.007,0.007-0.01,0.01-0.017s0.003-0.013,0.007-0.02c0.003-0.007,0.003-0.013,0.007-0.02c0-0.007,0.003-0.013,0.003-0.017 c0-0.007,0.003-0.013,0.003-0.024V21.82C23.275,20.866,23.019,20.174,22.516,19.759z M5.009,23.575H2.813 c0.186-0.189,0.317-0.415,0.418-0.59c0.088-0.152,0.412-0.658,0.87-0.789c0.54-0.159,1.046,0.027,1.296,0.455 C5.232,22.937,5.1,23.248,5.009,23.575z M5.066,21.763c-0.192,0-0.348-0.155-0.348-0.348s0.155-0.348,0.348-0.348 c0.192,0,0.348,0.155,0.348,0.348C5.414,21.608,5.255,21.763,5.066,21.763z M17.435,19.128L17.435,19.128l0.03,0.037L17.435,19.128 z M17.442,18.919c-1.97-0.229-3.394,0.617-4.244,1.366c-0.368,0.324-0.658,0.658-0.877,0.941c-0.04-0.027-0.078-0.054-0.111-0.071 v-0.594c1.596-1.603,3.182-2.082,4.234-2.2c0.698-0.078,1.262-0.013,1.599,0.051C17.85,18.592,17.651,18.76,17.442,18.919z M19.915,15.977c-0.202,0.388-0.435,0.759-0.692,1.117c-0.267-0.084-0.601-0.162-1.002-0.199c0.894-1.134,1.461-2.487,1.643-3.914 c0.29-0.034,0.692-0.159,0.999-0.358C20.782,13.794,20.465,14.921,19.915,15.977z M18.495,12.212l0.243-0.01 c0.081,0.361,0.354,0.651,0.712,0.749c-0.189,1.444-0.789,2.807-1.748,3.92c-0.462,0-0.999,0.054-1.606,0.186 C17.513,15.903,18.437,14.165,18.495,12.212z M14.53,17.542c-0.135,0.054-0.229,0.098-0.277,0.118 c-0.56,0.223-1.161,0.368-1.788,0.415l5.597-5.597C17.894,14.732,16.49,16.642,14.53,17.542z M20.883,11.986 c-0.007,0.189-0.523,0.496-0.978,0.57c-0.064,0.01-0.128,0.017-0.189,0.017c-0.081,0-0.159-0.017-0.229-0.047 c-0.213-0.091-0.361-0.3-0.361-0.543c0-0.243,0.148-0.452,0.361-0.543c0.071-0.03,0.148-0.047,0.229-0.047 c0.061,0,0.125,0.007,0.189,0.017c0.455,0.074,0.968,0.381,0.978,0.567C20.883,11.979,20.883,11.982,20.883,11.986z M18.93,6.648 l0.088,0.118l0,0c0.766,1.022,1.663,2.605,1.835,4.575c-0.304-0.196-0.702-0.321-0.989-0.354c-0.216-1.707-0.975-3.249-2.099-4.44 c0.047-0.098,0.074-0.209,0.074-0.324c0-0.155-0.047-0.3-0.125-0.418l0.958-1.093C18.491,5.406,18.579,6.064,18.93,6.648z M16.133,4.283l0.044,0.03L16.2,4.327c0.334,0.169,0.692,0.253,1.063,0.253c0.391,0,0.8-0.094,1.211-0.283l-1.08,1.231 c-0.098-0.047-0.206-0.071-0.324-0.071c-0.152,0-0.29,0.044-0.408,0.118c-1.063-0.776-2.321-1.292-3.691-1.461 c-0.034-0.246-0.101-0.597-0.202-0.941C13.852,3.294,14.982,3.666,16.133,4.283z M17.422,6.223c0,0.152-0.101,0.283-0.24,0.331 c-0.034,0.01-0.071,0.017-0.108,0.017c-0.01,0-0.024,0-0.034,0c-0.155-0.013-0.28-0.132-0.307-0.28 c-0.003-0.02-0.007-0.044-0.007-0.064c0-0.024,0.003-0.044,0.007-0.067c0.03-0.152,0.159-0.27,0.317-0.28c0.007,0,0.017,0,0.024,0 s0.013,0,0.02,0c0.155,0.01,0.287,0.121,0.321,0.27c0.003,0.02,0.007,0.037,0.007,0.057C17.418,6.209,17.422,6.216,17.422,6.223z M12.988,4.539c1.255,0.165,2.416,0.644,3.398,1.353c-0.051,0.101-0.078,0.213-0.078,0.334c0,0.152,0.044,0.29,0.121,0.412 l-1.68,1.916c-0.078,0.088-0.067,0.219,0.02,0.294c0.04,0.034,0.088,0.051,0.138,0.051c0.057,0,0.115-0.024,0.159-0.071 l1.677-1.913c0.101,0.051,0.213,0.078,0.334,0.078c0.155,0,0.297-0.047,0.415-0.125c1.046,1.12,1.751,2.557,1.96,4.15 c-0.361,0.101-0.641,0.398-0.715,0.769l-0.24,0.01c-0.051-1.542-0.648-3.013-1.69-4.157c-0.078-0.084-0.209-0.091-0.294-0.013 c-0.084,0.078-0.091,0.209-0.013,0.294c0.918,1.005,1.464,2.281,1.569,3.63l-2.244-2.237c-0.081-0.081-0.213-0.081-0.294,0 c-0.081,0.081-0.081,0.213,0,0.294l2.409,2.409l-5.938,5.938l-5.938-5.938l2.389-2.389c0.081-0.081,0.081-0.213,0-0.294 c-0.081-0.081-0.213-0.081-0.294,0L5.944,11.55c0.118-1.535,0.806-2.915,1.856-3.92l1.046,1.194 c0.04,0.047,0.098,0.071,0.159,0.071c0.047,0,0.098-0.017,0.138-0.051c0.088-0.078,0.094-0.209,0.02-0.294L8.113,7.353 c0.945-0.789,2.129-1.299,3.428-1.397L9.76,7.721c-0.081,0.081-0.081,0.213,0,0.294c0.04,0.04,0.094,0.061,0.148,0.061 s0.105-0.02,0.148-0.061l1.957-1.937l1.9,1.9c0.081,0.081,0.213,0.081,0.294,0c0.081-0.081,0.081-0.213,0-0.294l-1.727-1.727 c1.07,0.081,2.088,0.439,2.976,1.049c0.094,0.064,0.226,0.04,0.29-0.054c0.064-0.094,0.04-0.226-0.054-0.29 c-1.026-0.705-2.22-1.097-3.468-1.134V5.379C12.614,5.285,12.928,4.951,12.988,4.539z M6.892,7.046 c0.118,0,0.229-0.027,0.327-0.074l0.3,0.344c-1.191,1.137-1.95,2.719-2.011,4.477l-0.169-0.01 c-0.081-0.395-0.388-0.705-0.783-0.786c0.206-1.562,0.894-2.972,1.906-4.079C6.588,6.999,6.733,7.046,6.892,7.046z M6.544,6.284 c0-0.017,0-0.03,0.003-0.047c0-0.01,0.003-0.017,0.003-0.027c0.03-0.148,0.159-0.263,0.314-0.273c0.007,0,0.013,0,0.017,0 s0.003,0,0.007,0c0.159,0,0.294,0.108,0.334,0.256c0.007,0.03,0.013,0.061,0.013,0.091c0,0.024-0.003,0.047-0.007,0.071 c-0.03,0.148-0.159,0.263-0.314,0.273c-0.01,0-0.017,0-0.027,0c-0.044,0-0.088-0.01-0.125-0.024 C6.639,6.557,6.544,6.429,6.544,6.284z M5.336,12.201l0.172,0.01c0.057,1.957,0.985,3.698,2.406,4.852 c-0.611-0.135-1.147-0.189-1.613-0.192c-0.951-1.11-1.555-2.466-1.744-3.904C4.945,12.886,5.252,12.586,5.336,12.201z M5.94,12.478 l5.597,5.597C8.555,17.849,6.166,15.461,5.94,12.478z M11.43,4.077c0.091-0.631,0.401-1.474,0.563-1.542 c0.186,0.071,0.472,0.945,0.56,1.538C12.57,4.192,12.58,4.3,12.58,4.388c0,0.037-0.003,0.071-0.01,0.105 c-0.051,0.273-0.29,0.482-0.58,0.482s-0.53-0.209-0.58-0.482c-0.007-0.034-0.01-0.071-0.01-0.105 C11.403,4.296,11.413,4.192,11.43,4.077z M11.794,5.376v0.145c-1.505,0.047-2.881,0.611-3.961,1.515L7.536,6.695 C7.614,6.577,7.661,6.432,7.661,6.28c0-0.128-0.034-0.25-0.088-0.354c0.989-0.725,2.159-1.215,3.431-1.387 C11.062,4.958,11.382,5.295,11.794,5.376z M6.642,4.58c0.371,0,0.729-0.084,1.066-0.253c0.02-0.01,1.947-1.012,3.505-1.147 c-0.101,0.341-0.169,0.695-0.202,0.938C9.625,4.29,8.346,4.826,7.276,5.622C7.162,5.555,7.033,5.518,6.892,5.518 c-0.118,0-0.229,0.027-0.327,0.074L5.431,4.3C5.846,4.485,6.251,4.58,6.642,4.58z M4.958,6.668l0.017-0.024 c0.351-0.58,0.439-1.242,0.263-1.937l1.012,1.157C6.173,5.983,6.126,6.128,6.126,6.28c0,0.111,0.024,0.216,0.067,0.314 c-1.103,1.188-1.846,2.713-2.058,4.4c-0.3,0.047-0.698,0.175-0.999,0.368C3.255,9.58,3.852,8.038,4.958,6.668z M3.12,11.979 c0.007-0.196,0.55-0.466,0.978-0.553c0.094-0.02,0.182-0.03,0.256-0.03c0.057,0,0.108,0.007,0.162,0.024 c0.246,0.071,0.428,0.297,0.428,0.567s-0.182,0.496-0.428,0.567c-0.051,0.013-0.105,0.024-0.162,0.024 c-0.078,0-0.165-0.01-0.256-0.03c-0.428-0.091-0.972-0.361-0.978-0.557C3.12,11.982,3.12,11.982,3.12,11.979z M3.14,12.6 c0.3,0.196,0.702,0.324,0.999,0.371c0.179,1.431,0.746,2.787,1.643,3.92c-0.401,0.037-0.736,0.111-1.005,0.196 C3.808,15.758,3.248,14.222,3.14,12.6z M5.077,17.478c-0.01-0.013-0.02-0.024-0.03-0.037c1.016-0.28,2.126-0.132,2.905,0.054 c0.941,0.226,1.63,0.553,1.636,0.557l0.003-0.007c0.746,0.297,1.559,0.462,2.409,0.462c0.847,0,1.657-0.162,2.399-0.459l0,0 c0,0,0.007-0.003,0.02-0.01c0.088-0.037,0.179-0.074,0.263-0.115c0.287-0.118,0.769-0.294,1.35-0.432 c0.786-0.189,1.9-0.337,2.915-0.054c-0.175,0.216-0.358,0.422-0.553,0.621c-0.283-0.078-1.005-0.226-1.98-0.121 c-1.059,0.115-2.618,0.567-4.211,2.038v-0.368c0-0.115-0.094-0.209-0.209-0.209c-0.115,0-0.209,0.094-0.209,0.209v0.348 c-1.582-1.454-3.134-1.903-4.187-2.018c-0.999-0.108-1.731,0.054-1.997,0.128C5.424,17.883,5.245,17.684,5.077,17.478z M5.964,18.416c0.337-0.067,0.908-0.135,1.619-0.054c1.873,0.209,3.31,1.279,4.211,2.176v0.611 c-0.03,0.017-0.064,0.037-0.101,0.064c-0.219-0.28-0.506-0.607-0.867-0.924c-0.85-0.752-2.281-1.603-4.258-1.366v0.003 C6.359,18.764,6.156,18.595,5.964,18.416z M11.204,21.723c-0.395-0.506-0.827-0.887-1.258-1.174l0.003-0.01 c-0.01-0.003-0.02-0.007-0.03-0.007c-0.719-0.469-1.441-0.675-2.021-0.759c-0.273-0.142-0.543-0.3-0.803-0.472 c1.272-0.037,2.426,0.395,3.445,1.289c0.351,0.307,0.628,0.624,0.837,0.897C11.312,21.557,11.254,21.635,11.204,21.723z M12.212,22.988c-0.051,0.061-0.105,0.121-0.165,0.182c-0.013,0.013-0.03,0.03-0.047,0.044l-0.003,0.003l-0.003,0.003v-0.007 c-0.007-0.007-0.017-0.013-0.024-0.024c-0.067-0.064-0.125-0.128-0.179-0.192c-0.246-0.294-0.354-0.567-0.317-0.816 c0.003-0.02,0.007-0.04,0.013-0.061c0.027-0.108,0.078-0.202,0.138-0.283c0.051-0.067,0.108-0.125,0.165-0.175 c0.051-0.044,0.101-0.081,0.145-0.111c0.02-0.013,0.037-0.024,0.054-0.034c0,0,0.003,0,0.003-0.003h0.003 c0.024,0.013,0.047,0.03,0.078,0.051c0.04,0.027,0.088,0.064,0.135,0.105c0.061,0.054,0.121,0.118,0.172,0.189 c0.061,0.088,0.111,0.186,0.132,0.297c0,0.007,0.003,0.017,0.007,0.024C12.557,22.424,12.452,22.694,12.212,22.988z M13.036,21.466 c-0.007,0.007-0.013,0.013-0.017,0.02c-0.078,0.088-0.148,0.175-0.213,0.26c-0.051-0.088-0.108-0.169-0.169-0.24 c0.209-0.273,0.493-0.601,0.85-0.914c1.012-0.891,2.163-1.323,3.425-1.292c-0.263,0.172-0.533,0.334-0.81,0.476 C14.658,19.995,13.67,20.744,13.036,21.466z M18.923,21.068c0.192,0,0.348,0.155,0.348,0.348s-0.155,0.348-0.348,0.348 s-0.348-0.155-0.348-0.348C18.576,21.227,18.731,21.068,18.923,21.068z M19.976,22.151c0.459,0.135,0.783,0.638,0.87,0.789 c0.108,0.189,0.253,0.439,0.466,0.634H18.98c-0.088-0.317-0.213-0.617-0.371-0.894C18.866,22.222,19.439,21.993,19.976,22.151z M2.199,7.495c0,0.341,0.277,0.621,0.621,0.621S3.44,7.839,3.44,7.495c0-0.341-0.277-0.621-0.621-0.621S2.199,7.154,2.199,7.495z M3.022,7.495c0,0.111-0.091,0.202-0.202,0.202c-0.111,0-0.202-0.091-0.202-0.202s0.091-0.202,0.202-0.202 C2.931,7.292,3.022,7.384,3.022,7.495z M21.737,7.495c0-0.341-0.277-0.621-0.621-0.621c-0.341,0-0.621,0.277-0.621,0.621 c0,0.341,0.277,0.621,0.621,0.621S21.737,7.839,21.737,7.495z M20.914,7.495c0-0.111,0.091-0.202,0.202-0.202 s0.202,0.091,0.202,0.202s-0.091,0.202-0.202,0.202C21.005,7.701,20.914,7.61,20.914,7.495z M22.334,9.04 c-0.078-0.03-0.169-0.013-0.229,0.047c-0.273,0.28-0.722,0.27-0.729,0.27c-0.003,0-0.007,0-0.007,0 c-0.111,0-0.202,0.088-0.209,0.199c-0.003,0.115,0.084,0.213,0.199,0.216c0.02,0,0.351,0.01,0.688-0.145v3.404 c0,0.115,0.094,0.209,0.209,0.209s0.209-0.094,0.209-0.209V9.232C22.462,9.148,22.412,9.07,22.334,9.04z M1.73,13.241 c0.115,0,0.209-0.094,0.209-0.209V9.627c0.337,0.155,0.668,0.145,0.688,0.145c0.115-0.003,0.206-0.101,0.199-0.216 C2.823,9.442,2.725,9.351,2.61,9.357c-0.003,0-0.455,0.01-0.729-0.27C1.821,9.027,1.733,9.01,1.652,9.04 C1.574,9.07,1.524,9.148,1.524,9.232v3.802C1.52,13.15,1.615,13.241,1.73,13.241z M22.499,16.712c0-0.115-0.094-0.209-0.209-0.209 h-1.35c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209h1.35C22.405,16.922,22.499,16.83,22.499,16.712z M21.099,17.512 c0.115,0,0.209-0.094,0.209-0.209s-0.094-0.209-0.209-0.209h-0.52c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209 H21.099z M21.605,17.897c0-0.115-0.094-0.209-0.209-0.209h-1.289c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209h1.289 C21.511,18.106,21.605,18.015,21.605,17.897z M20.789,18.494c0-0.115-0.094-0.209-0.209-0.209h-1.009 c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209h1.009C20.694,18.703,20.789,18.609,20.789,18.494z M18.916,18.882 c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209h0.574c0.115,0,0.209-0.094,0.209-0.209s-0.094-0.209-0.209-0.209 H18.916z M22.29,15.312h-0.752c-0.115,0-0.209,0.094-0.209,0.209c0,0.115,0.094,0.209,0.209,0.209h0.752 c0.115,0,0.209-0.094,0.209-0.209C22.499,15.407,22.405,15.312,22.29,15.312z M22.29,15.909h-1.049 c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209h1.049c0.115,0,0.209-0.094,0.209-0.209S22.405,15.909,22.29,15.909z M22.29,14.121h-0.334c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209h0.334c0.115,0,0.209-0.094,0.209-0.209 C22.499,14.216,22.405,14.121,22.29,14.121z M22.29,14.718h-0.513c-0.115,0-0.209,0.094-0.209,0.209 c0,0.115,0.094,0.209,0.209,0.209h0.513c0.115,0,0.209-0.094,0.209-0.209C22.499,14.813,22.405,14.718,22.29,14.718z M1.723,13.511 c0.116,0,0.209,0.094,0.209,0.209c0,0.116-0.094,0.209-0.209,0.209c-0.116,0-0.209-0.094-0.209-0.209 C1.514,13.604,1.607,13.511,1.723,13.511z M2.566,18.291c0.116,0,0.209,0.094,0.209,0.209c0,0.116-0.094,0.209-0.209,0.209 c-0.116,0-0.209-0.094-0.209-0.209C2.357,18.385,2.451,18.291,2.566,18.291z M3.909,18.889c0.116,0,0.209,0.094,0.209,0.209 c0,0.116-0.094,0.209-0.209,0.209S3.7,19.213,3.7,19.098C3.7,18.982,3.794,18.889,3.909,18.889z M1.703,16.928h1.35 c0.115,0,0.209-0.094,0.209-0.209S3.167,16.51,3.052,16.51h-1.35c-0.115,0-0.209,0.094-0.209,0.209 C1.493,16.837,1.588,16.928,1.703,16.928z M3.413,17.104h-0.52c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209h0.52 c0.115,0,0.209-0.094,0.209-0.209C3.622,17.198,3.528,17.104,3.413,17.104z M3.886,17.698H2.597c-0.115,0-0.209,0.094-0.209,0.209 s0.094,0.209,0.209,0.209h1.289c0.115,0,0.209-0.094,0.209-0.209C4.095,17.789,4,17.698,3.886,17.698z M4.422,18.291H3.413 c-0.115,0-0.209,0.094-0.209,0.209s0.094,0.209,0.209,0.209h1.009c0.115,0,0.209-0.094,0.209-0.209 C4.631,18.386,4.537,18.291,4.422,18.291z M4.294,19.098c0,0.115,0.094,0.209,0.209,0.209h0.574c0.115,0,0.209-0.094,0.209-0.209 s-0.094-0.209-0.209-0.209H4.503C4.388,18.889,4.294,18.983,4.294,19.098z M1.703,15.737h0.752c0.115,0,0.209-0.094,0.209-0.209 c0-0.115-0.094-0.209-0.209-0.209H1.703c-0.115,0-0.209,0.094-0.209,0.209C1.493,15.643,1.588,15.737,1.703,15.737z M1.703,16.335 h1.049c0.115,0,0.209-0.094,0.209-0.209s-0.094-0.209-0.209-0.209H1.703c-0.115,0-0.209,0.094-0.209,0.209 S1.588,16.335,1.703,16.335z M1.703,14.546h0.334c0.115,0,0.209-0.094,0.209-0.209c0-0.115-0.094-0.209-0.209-0.209H1.703 c-0.115,0-0.209,0.094-0.209,0.209S1.588,14.546,1.703,14.546z M1.703,15.14h0.513c0.115,0,0.209-0.094,0.209-0.209 c0-0.115-0.094-0.209-0.209-0.209H1.703c-0.115,0-0.209,0.094-0.209,0.209C1.493,15.049,1.588,15.14,1.703,15.14z M11.996,23.217 L11.996,23.217c0.003-0.003,0-0.003,0-0.007V23.217z M21.484,4.175C21.487,4.175,21.487,4.175,21.484,4.175 c0.094,0,0.179-0.064,0.202-0.159c0.074-0.297,0.044-0.55-0.098-0.759C21.362,2.92,20.947,2.856,20.9,2.849 c-0.108-0.013-0.209,0.054-0.233,0.162c-0.078,0.354-0.034,0.638,0.135,0.847C21.052,4.161,21.443,4.172,21.484,4.175z M21.248,3.493c0.04,0.064,0.064,0.138,0.064,0.226c-0.061-0.024-0.128-0.061-0.175-0.121c-0.054-0.067-0.081-0.155-0.081-0.267 C21.123,3.365,21.197,3.419,21.248,3.493z M20.128,1.159c-0.226-0.337-0.641-0.401-0.688-0.408 c-0.108-0.013-0.209,0.054-0.233,0.162c-0.078,0.354-0.034,0.638,0.135,0.847c0.243,0.304,0.634,0.314,0.678,0.314l0,0 c0.094,0,0.179-0.064,0.202-0.159C20.3,1.624,20.269,1.368,20.128,1.159z M19.672,1.499c-0.054-0.067-0.081-0.155-0.081-0.267 c0.071,0.034,0.145,0.088,0.192,0.162c0.04,0.064,0.064,0.138,0.064,0.226C19.787,1.597,19.719,1.56,19.672,1.499z M3.133,2.849 C3.086,2.856,2.674,2.92,2.445,3.257C2.307,3.466,2.273,3.719,2.347,4.016C2.371,4.107,2.455,4.175,2.55,4.175l0,0 c0.044,0,0.435-0.01,0.678-0.314C3.396,3.652,3.44,3.365,3.363,3.014C3.342,2.906,3.241,2.836,3.133,2.849z M2.907,3.598 C2.86,3.659,2.792,3.696,2.728,3.719c0-0.088,0.024-0.165,0.064-0.226c0.051-0.074,0.125-0.128,0.192-0.162 C2.985,3.443,2.958,3.531,2.907,3.598z M4.564,0.75C4.517,0.757,4.105,0.821,3.875,1.159C3.737,1.368,3.703,1.621,3.778,1.918 C3.801,2.009,3.886,2.076,3.98,2.076l0,0c0.044,0,0.435-0.01,0.678-0.314c0.169-0.209,0.213-0.496,0.135-0.847 C4.77,0.808,4.672,0.737,4.564,0.75z M4.334,1.499C4.287,1.56,4.22,1.597,4.156,1.621c0-0.088,0.024-0.165,0.064-0.226 C4.27,1.321,4.344,1.267,4.412,1.233C4.412,1.344,4.388,1.432,4.334,1.499z M18.579,10.562c0.013,0.108,0.101,0.186,0.206,0.186 c0.007,0,0.017,0,0.024,0c0.115-0.013,0.196-0.118,0.182-0.233c-0.209-1.822-1.454-3.111-1.508-3.165 c-0.081-0.081-0.213-0.084-0.294-0.003c-0.081,0.081-0.084,0.213-0.003,0.294C17.199,7.653,18.387,8.885,18.579,10.562z M5.218,10.744c0.007,0,0.017,0,0.024,0c0.105,0,0.196-0.078,0.206-0.186C5.64,8.882,6.828,7.65,6.838,7.64 c0.081-0.081,0.078-0.216-0.003-0.294C6.753,7.265,6.618,7.265,6.541,7.35c-0.054,0.054-1.296,1.343-1.508,3.165 C5.023,10.629,5.104,10.73,5.218,10.744z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Gutenberg" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Gutenberg extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8D, create_fragment$8D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Habr.svelte generated by Svelte v3.23.2 */

        function create_fragment$8E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v24h24V0zm7.025 4h1.633c1.219 0 1.64.029 1.668.113.019.066.028 1.369.028 2.897l-.008 2.783.476-.422c.657-.581 1.212-.787 2.262-.824.694-.019.973.009 1.46.178 1.06.356 1.81 1.087 2.204 2.166.15.421.17.863.197 4.285l.03 3.824h-3.338v-3.121c0-3.075-.01-3.113-.217-3.488-.29-.497-.609-.722-1.106-.778-.853-.093-1.443.197-1.78.89-.16.32-.179.656-.188 3.356-.01 1.65-.03 3.03-.03 3.067-.008.047-.75.074-1.65.074h-1.64v-7.5z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Habr" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Habr extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8E, create_fragment$8E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hackclub.svelte generated by Svelte v3.23.2 */

        function create_fragment$8F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C2.4 0 0 2.4 0 12s2.4 12 12 12 12-2.4 12-12S21.6 0 12 0zm4.5 19.5094h-3.3094V13.003c0-.975-.1875-1.6218-.8343-1.6218-.7125 0-1.575 1.003-1.575 2.625v5.503H7.5V4.9689l3.2906-.5625v5.428c.7125-.6468 1.7063-.928 2.7188-.928 2.1562 0 2.9906 1.4156 2.9906 3.628z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hack Club" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hackclub extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8F, create_fragment$8F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hackaday.svelte generated by Svelte v3.23.2 */

        function create_fragment$8G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 4.124c0-.204.021-.401.06-.595l1.956 1.734 2.144-2.38L2.246 1.18c.259-.072.53-.114.812-.114a3.062 3.062 0 0 1 3.058 3.037v.021c0 .152-.012.304-.033.45l2.385 2.112a6.716 6.716 0 0 0-2.013 2.54L3.982 7.037a3.038 3.038 0 0 1-.924.145A3.06 3.06 0 0 1 0 4.124zm20.942 12.694c-.306 0-.601.045-.88.129l-2.308-2.044a6.862 6.862 0 0 1-1.819 2.706l1.993 1.765a3.05 3.05 0 0 0-.044.502 3.06 3.06 0 0 0 3.935 2.929l-1.992-1.77 2.14-2.365 1.981 1.76c.034-.181.052-.364.052-.554v-.026a3.057 3.057 0 0 0-3.058-3.032zm-3.397-7.592l2.473-2.189c.292.093.601.145.924.145A3.06 3.06 0 0 0 23.94 3.53l-1.956 1.734-2.144-2.38 1.914-1.703a3.049 3.049 0 0 0-.812-.114 3.062 3.062 0 0 0-3.058 3.037v.021c0 .152.012.304.033.45l-2.385 2.112a6.716 6.716 0 0 1 2.013 2.54zm-11.3 5.677l-2.307 2.044A3.057 3.057 0 0 0 0 19.85v.026c0 .19.018.373.052.554l1.982-1.76 2.14 2.365-1.993 1.77a3.06 3.06 0 0 0 3.935-2.929 3.05 3.05 0 0 0-.044-.502l1.993-1.765a6.862 6.862 0 0 1-1.82-2.706zm8.971 2.657a1.076 1.076 0 1 1-1.961.424h-.192a1.076 1.076 0 1 1-2.127 0h-.15A1.105 1.105 0 0 1 9.7 19.23c-.604 0-1.094-.5-1.094-1.115 0-.21.057-.405.156-.572-1.493-1.142-2.474-3.051-2.474-5.213 0-3.497 2.559-6.332 5.713-6.332s5.713 2.835 5.713 6.332c0 2.173-.991 4.091-2.497 5.231zm-4.194-5.914a1.995 1.995 0 0 0-.559-.66 1.804 1.804 0 0 0-.918-.264 1.45 1.45 0 0 0-.319.036c-.405.05-.747.327-.983.647-.207.257-.368.569-.372.905-.032.278.024.556.075.828.066.322.293.584.55.774.119.095.29.226.44.116.1-.134.016-.33.107-.478a.5.5 0 0 1 .258-.326c.263-.132.527-.262.808-.355.228-.067.416-.219.61-.349.255-.197.424-.558.303-.874zm.996 2.325c-.279-.007-.63 1.237-.574 1.78.175.72.237-.505.574-.506.323.014.275 1.255.53.504.078-.5-.224-1.77-.53-1.778zm4.036-.833c.051-.272.107-.55.075-.828-.004-.336-.165-.648-.372-.905-.236-.32-.578-.596-.983-.647a1.45 1.45 0 0 0-.319-.036c-.32-.001-.644.1-.918.264-.235.171-.42.406-.559.66-.121.316.048.677.303.874.194.13.382.282.61.35.28.092.545.222.808.354a.5.5 0 0 1 .258.326c.091.147.007.344.106.478.151.11.322-.021.44-.116.258-.19.485-.452.551-.774z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hackaday" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hackaday extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8G, create_fragment$8G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hackerearth.svelte generated by Svelte v3.23.2 */

        function create_fragment$8H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.983.002H9.508v6.494h.11a3.629 3.629 0 0 1 3.557-1.332l-.023-.004c1.966.144 3.91 1.336 4.02 5.158v7.554a.299.299 0 0 1-.287.287h-2.11a.287.287 0 0 1-.287-.287V10.55c0-1.778-.585-3.114-2.341-3.114h-.038a2.606 2.606 0 0 0-2.6 2.78v-.008 7.665a.287.287 0 0 1-.287.287H7.124a.287.287 0 0 1-.287-.287V.004H3.193L3.126.003c-.823 0-1.493.652-1.523 1.468V22.458c.03.857.73 1.541 1.59 1.546h17.792a1.458 1.458 0 0 0 1.413-1.55v.004V1.474A1.38 1.38 0 0 0 21.021.005l-.038.001h.002zm-2.54 20.983H5.555V19.66h12.888z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HackerEarth" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hackerearth extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8H, create_fragment$8H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hackerone.svelte generated by Svelte v3.23.2 */

        function create_fragment$8I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.207 0c-.4836 0-.8774.1018-1.1823.3002-.3044.2003-.4592.4627-.4592.7798v21.809c0 .2766.1581.5277.4752.7609.315.2335.7031.3501 1.1664.3501.4427 0 .8306-.1166 1.1678-.3501.3352-.231.5058-.4843.5058-.761V1.0815c0-.319-.1623-.5769-.4893-.7813C8.0644.1018 7.6702 0 7.207 0zm9.5234 8.662c-.4836 0-.8717.0981-1.1683.3007l-4.439 2.7822c-.1988.1861-.2841.4687-.2473.855.0342.3826.2108.747.5238 1.0907.3145.346.6662.5626 1.0684.6547.3963.0899.6973.041.8962-.143l1.7551-1.0951v9.7817c0 .2767.1522.5278.4607.761.3007.2335.6873.3501 1.1504.3501.463 0 .863-.1166 1.1983-.3501.3371-.2332.5058-.4843.5058-.761V9.7381c0-.3193-.165-.577-.4898-.7754-.3252-.2026-.7288-.3007-1.2143-.3007z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HackerOne" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hackerone extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8I, create_fragment$8I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hackerrank.svelte generated by Svelte v3.23.2 */

        function create_fragment$8J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0c1.285 0 9.75 4.886 10.392 6 .645 1.115.645 10.885 0 12S13.287 24 12 24s-9.75-4.885-10.395-6c-.641-1.115-.641-10.885 0-12C2.25 4.886 10.715 0 12 0zm2.295 6.799c-.141 0-.258.115-.258.258v3.875H9.963V6.908h.701c.141 0 .254-.115.254-.258 0-.094-.049-.176-.123-.221L9.223 4.92c-.049-.063-.141-.109-.226-.109-.084 0-.16.045-.207.107L7.11 6.43c-.072.045-.12.126-.12.218 0 .143.113.258.255.258h.704l.008 10.035c0 .145.111.258.254.258h1.492c.142 0 .259-.115.259-.256v-4.004h4.073v4.152h-.699c-.143 0-.256.115-.256.258 0 .092.048.174.119.219l1.579 1.51c.044.061.141.109.225.109.085 0 .159-.045.208-.109l1.679-1.51c.072-.045.12-.127.12-.219 0-.143-.115-.258-.255-.258h-.704l-.007-10.034c0-.145-.114-.26-.255-.26h-1.494v.002z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HackerRank" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hackerrank extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8J, create_fragment$8J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hackhands.svelte generated by Svelte v3.23.2 */

        function create_fragment$8K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.3 17.63h6.35c.5 0 .89-.4.89-.9s-.4-.89-.9-.89H5.3c-.5 0-.89.4-.89.89 0 .5.4.9.9.9zM16.58 13.77c0-.5-.4-.9-.9-.9H6.54c-.5 0-.89.4-.89.9s.4.9.9.9h9.15c.5 0 .9-.4.9-.9zM18.44 10.8a.91.91 0 0 0-.89-.88H6.53c-.5 0-.89.39-.89.89s.4.89.9.89h11.01c.5 0 .89-.4.89-.9zM5.64 7.82c0 .5.4.89.9.89h9.5c.49 0 .88-.4.88-.9 0-.49-.4-.88-.89-.88h-9.5c-.5 0-.89.39-.89.89zM7.92 3.96H5.3c-.5 0-.89.4-.89.9s.4.89.9.89h2.64c.5 0 .9-.4.9-.9a.93.93 0 0 0-.93-.89zM22.87 20.8a.93.93 0 0 0-.94-.94H4.7c-.95 0-1.73-.8-1.73-1.74V3.57c0-.95.78-1.73 1.73-1.73h14.55c.95 0 1.74.76 1.74 1.73v11.8c0 .5.42.92.9.92.51 0 .93-.42.93-.92V3.57c0-1.97-1.6-3.57-3.57-3.57H4.7a3.57 3.57 0 0 0-3.57 3.57v14.55c0 1.97 1.6 3.57 3.57 3.57H20.4L22.87 24v-3.2z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HackHands" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hackhands extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8K, create_fragment$8K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hackster.svelte generated by Svelte v3.23.2 */

        function create_fragment$8L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.425 10.349c.262 0 .48.209.48.479v2.155c0 .32.26.582.58.582h4.26c.295 0 .355.426.068.504l-8.568 2.468c-.248.073-.509-.068-.581-.317-.013-.043-.021-.088-.019-.133v-2.252c-.002-.115-.094-.209-.209-.21H5.042c-.114-.001-.207-.093-.209-.207v-2.53c.001-.353-.28-.643-.634-.65l-3.998-.07c-.235-.01-.278-.34-.052-.408l8.76-2.529c.111-.029.225.037.254.146.004.016.007.033.007.053v2.441c0 .26.217.478.479.478h8.776zM8.788 4.543c.305-.052.375.348.375.348s.025.947 0 1.338c-.027.39-.383.375-.383.375H5.304s-.315-.113-.357-.522c-.053-.408.434-.636.434-.636s3.104-.851 3.405-.903h.002zm5.885-1.104s-.045-.461.471-.66c.512-.191 3.268-.904 3.268-.904s.512-.2.547.471c.035.668 0 6.178 0 6.178s.018.451-.469.486c-.488.035-3.225 0-3.225 0s-.592.053-.592-.417V3.439zm.078 14.332c.025-.391.383-.375.375-.384h3.475s.305.113.357.522c.053.408-.436.635-.436.635s-3.102.851-3.406.902c-.305.062-.365-.339-.365-.339s-.025-.945 0-1.336zm-5.518 2.79s.051.461-.471.66c-.513.19-3.268.903-3.268.903s-.514.201-.547-.47c-.035-.668 0-6.178 0-6.178s-.018-.451.469-.486 3.225 0 3.225 0 .529-.053.592.417c.059.46 0 .79 0 .79v4.364z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hackster" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hackster extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8L, create_fragment$8L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Happycow.svelte generated by Svelte v3.23.2 */

        function create_fragment$8M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.66 1.23c-.424.004-.924.156-1.13.236-1.69.678-2.78 3.09-2.2 5.52-.32-.139-.614-.257-.676-.28a8.46 8.46 0 0 0-1.45-.412c-.849-.156-1.8-.189-2.53.471-.693.63-.963 1.87-.271 2.6.749.783 2.3.637 3.27.548.101-.01.557-.04 1-.106a9.763 9.763 0 0 0-.116 1.59c-3.73 1.32-3.43 10.1 5.09 11.2 10.8 1.39 11.6-6.81 9.07-9.14.091-.518.144-.999.165-1.45.433.202.933.386 1.04.426.903.353 2.34.917 3.29.462.874-.42.985-1.56.51-2.29-.497-.768-1.42-1.01-2.27-1.12a9.355 9.355 0 0 0-1.51-.061c-.05.002-.252.012-.497.03 1.33-1.83 1.4-4.19.319-5.48-.25-.298-1.22-1.23-1.65-.743-.279.392.226 1.16.186 1.74-.092.901-.855 1.62-1.36 2.01-.717-.57-1.36-.745-1.36-.745l-.322-.062c-.644-.5-1.53-.563-1.53-.563.363-.44 1.56-.1 1.56-.1-1.06-1.06-2.31-.328-2.31-.328 0-.517-.381-.831-.381-.831-.398.306-.415.714-.415.714-1.01-1.06-2.12-.794-2.12-.794s.98.31 1.17 1.08a2.638 2.638 0 0 0-.533-.049l-.346-.066a6.87 6.87 0 0 0-1.81.062c-.245-.593-.51-1.5-.191-2.28.237-.527 1.04-.966.983-1.44-.063-.277-.346-.363-.676-.359zm2.03 3.21c.612.065 1.19.512 1.6.993.004-.298.045-.625.269-.843.227.189.265.57.25.867.528-.343 1.23-.48 1.82-.203-.465-.063-.989.058-1.24.498.768.044 1.63.26 2.1.92-.692-.385-1.64-.876-2.42-.365.541.139 1.13.49 1.17 1.11a2.764 2.764 0 0 0-1.9-1.12c-.69.027-1.42.342-1.84.904-.106.174-.188.353-.174.01-.044-.673.737-.908 1.26-.997-.612-.3-1.31-.514-1.99-.375.511-.414 1.22-.43 1.83-.28a1.627 1.627 0 0 0-.728-1.12zM2.26 6.92a2.81 2.81 0 0 1 .526.054c.284.05.876.21 1.13.497.25.287.974 1.36-.751 1.62-.563.06-1.46.159-1.89-.298-.394-.422-.229-1.16.175-1.54.265-.248.529-.328.81-.333zm5.77 1a1.35 1.35 0 0 1 .264.02c2.65.432 1.14 4.81 1.14 4.81l-.294-.203c.204-.483.428-1.25.416-2.01-.017-1.07-.63-1.94-1.37-1.92-.74.01-1.33.892-1.31 1.97.004.279.046.785.121 1.05-.005-.015-.005-.133-.01-.15l-.678-.213s.013-3.32 1.72-3.35zm7.61 1.21c.156.001.322.022.498.063 1.94.46.663 3.57.663 3.57l-.607.1v.003c-.655.103-1.39.213-2.13.35-.023-.028.019.03 0 0l-.865.143s.105-4.25 2.44-4.23zm-1.58 4.15l2.21-.315c.117-.167.182-.442.225-.665.203-1.05.158-2.03-.53-2.3a.953.953 0 0 0-.334-.066c-.617-.012-1.29.54-1.63 1.38-.205.518-.391 1.63-.258 2 .05.14.511.119.418.016zM8.27 9.57a.409.409 0 1 1 0 .818.409.409 0 0 1 0-.818zm13.1.55c.167.002.32.015.427.03.492.066.904.159 1.19.617.274.437.213 1.11-.289 1.36-.543.269-1.37-.07-1.89-.281-1.57-.71-.56-1.42-.237-1.59.202-.11.517-.137.795-.134zm-5.92.645a.409.409 0 1 1 .026.818.409.409 0 0 1-.026-.818zm-9.85.741c1.45-.014 2.64.949 3.88 1.56 1.7.91 3.72.797 5.53.348 1.1-.334 2.49-.539 3.43.234 1.26 1.25 1.41 3.21.84 4.79-.697 2.04-2.7 3.33-4.74 3.75-2.55.45-5.29.36-7.7-.663-2.75-1.06-4.7-4.09-4.21-7.06.146-1.47 1.41-2.92 2.96-2.97zm1.77 1.75a.625.625 0 0 0-.164.025c-.418.125-.507.674-.198 1.23.309.552.898.9 1.32.773.418-.125.507-.674.198-1.23-.27-.484-.755-.809-1.15-.799zm-2.55.945a1.014 1.014 0 0 0-.614.174c-.535.384-.549 1.42.074 2.29.623.868 1.65 1.24 2.18.857.535-.384.534-1.54-.088-2.41-.428-.597-1.04-.903-1.55-.911zm10.7.172a1.357 1.357 0 0 0-.608.144c-.571.272-.956.837-.858 1.26.098.425.64.549 1.21.278.572-.272.955-.837.858-1.26-.061-.266-.296-.414-.603-.421zm-10.8.14c.633-.02 1.18.411 1.5.931.3.534.566 1.41-.004 1.85-.878.205-1.66-.574-1.96-1.33-.244-.474-.208-1.41.47-1.45zm12.9 1.48a1.294 1.294 0 0 0-.104 0c-.47.022-1.03.29-1.51.764-.756.755-.991 1.75-.525 2.21.465.466 1.46.23 2.21-.524.756-.756.991-1.75.525-2.21a.867.867 0 0 0-.601-.238zm.014.309c.174.01.35.091.44.243.233.785-.355 1.58-.985 1.99-.423.305-1.21.618-1.51.012-.09-1.11.915-2.12 1.98-2.25a.602.602 0 0 1 .074 0zm-10.3 1.45a.124.124 0 0 0-.103.062c-.01.014-.19.312-.548.309a.125.125 0 0 0-.128.129c.001.065.053.12.116.129l.018.001a.85.85 0 0 0 .316-.057c.216.431 1.1 1.9 3.28 2.25 2.21.353 3.87-.74 4.3-1.05a.88.88 0 0 0 .339.157l.017.003a.129.129 0 0 0 .138-.1.132.132 0 0 0-.102-.155c-.35-.078-.474-.411-.48-.427a.135.135 0 0 0-.166-.083.126.126 0 0 0-.081.163c.003.01.045.126.146.256-.436.3-2.02 1.26-4.09.968-1.93-.272-2.83-1.69-3.06-2.11.138-.111.209-.23.215-.238a.13.13 0 0 0-.05-.178.135.135 0 0 0-.075-.018z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HappyCow" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Happycow extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8M, create_fragment$8M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Harbor.svelte generated by Svelte v3.23.2 */

        function create_fragment$8N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.0573.0022C7.455-.0207 3.2453 2.5912 1.2218 6.7248-.8016 10.8584-.282 15.7852 2.5591 19.4059c2.841 3.6208 7.5027 5.2974 11.999 4.3153 4.4963-.982 8.0346-4.4498 9.1071-8.9254.0062-.0249.0133-.0494.0192-.0746.209-.8929.315-1.8069.3156-2.724 0-.0317-.0022-.063-.0024-.0948-.0012-.1373-.0095-.2726-.0152-.4088-.019-.2669.0399.2645 0 0 .0399.2645-.019-.2669 0 0v-.0003a11.9318 11.9318 0 00-.2045-1.7663c-.0334-.173-.0672-.3458-.1078-.5164a11.9097 11.9097 0 00-.9547-2.6018c-.0077-.0151-.0141-.0311-.0219-.046a12.0382 12.0382 0 00-1.2805-1.99c-.0694-.088-.1363-.178-.208-.2638a12.1001 12.1001 0 00-2.0533-1.9417 12.4056 12.4056 0 00-.3305-.2362 11.9978 11.9978 0 00-6.7639-2.129zm.2143 2.2105a9.7818 9.7818 0 014.9926 1.5378l-5.683 5.9103 7.8255-4.05a9.8492 9.8492 0 011.1544 1.6475c.0066.012.0123.0244.0189.0365l-8.8448 2.8423 9.7994-.3337a9.7295 9.7295 0 01.2246 1.5305l-10.178-.7304 9.985 3.4641c-.98 4.5004-4.9603 7.7119-9.5662 7.7182-.0895 0-.178-.0043-.267-.0067l-.1026-1.2554-4.7386-2.0882-.1597 1.8055c.1982.1234-.2066-.1087 0 0-.2066-.1087.1982.1234 0 0a9.787 9.787 0 01-4.5209-8.2437c-.0038-5.5141 4.5485-9.9416 10.0604-9.7846zM9.1434 5.9054a.201.201 0 00-.1943.2v.1467L6.82 8.3357v.6525h.3834v2.27H6.82v1.1125h.6088l-.1408 1.5896 3.948 1.7396-.2724-3.3292h.5167v-1.1125h-.3832v-2.27h.3832v-.6525L9.3509 6.252v-.1467a.201.201 0 00-.2075-.2zM7.8197 8.9882h2.6607v2.27h-.6312v-.9695c0-.932-1.398-.932-1.398 0v.9695h-.6315zm-.581 5.528l-.0665.7506 4.1788 1.8414-.0662-.8092zm-.1156 1.3064l-.0662.7506 4.4092 1.9431-.0662-.809zm-.1154 1.3065l-.0665.7503 4.64 2.045-.066-.8088Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Harbor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Harbor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8N, create_fragment$8N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hashnode.svelte generated by Svelte v3.23.2 */

        function create_fragment$8O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.84 0h16.32A3.84 3.84 0 0 1 24 3.84v16.32A3.84 3.84 0 0 1 20.16 24H3.84A3.84 3.84 0 0 1 0 20.16V3.84A3.84 3.84 0 0 1 3.84 0zm14.175 21.638l-.004-.001a2.577 2.577 0 0 0 .209-5.139l-4.917-8.682c-.719-1.292-2.108-1.236-2.609.598-.43 1.736-.319 3.372-.444 5.348-.001.013-.01.024-.023.027s-.026-.002-.033-.013l-4.39-8.751c.358-.281.568-.711.569-1.167a1.459 1.459 0 1 0-1.459 1.459c.069 0 .125-.014.18-.014 1.848 4.75 3.904 10.293 4.64 11.571.5 1.222 2.209.833 2.251-.486l.18-6.932c0-.042.055-.042.07-.014l3.526 8.389a2.573 2.573 0 0 0 2.254 3.806z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hashnode" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hashnode extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8O, create_fragment$8O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Haskell.svelte generated by Svelte v3.23.2 */

        function create_fragment$8P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.006 20.47L5.649 12 .006 3.531h4.235l5.674 8.47-5.674 8.468zm5.643 0L11.29 12 5.65 3.531h4.266l11.253 16.938h-4.224l-3.535-5.34-3.495 5.34zM19.3 15.525l-1.877-2.827h6.571v2.826zm-2.826-4.235l-1.877-2.827h9.387v2.827z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Haskell" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Haskell extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8P, create_fragment$8P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hatenabookmark.svelte generated by Svelte v3.23.2 */

        function create_fragment$8Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.47 0C22.42 0 24 1.58 24 3.53v16.94c0 1.95-1.58 3.53-3.53 3.53H3.53C1.58 24 0 22.42 0 20.47V3.53C0 1.58 1.58 0 3.53 0h16.94zm-3.705 14.47c-.78 0-1.41.63-1.41 1.41s.63 1.414 1.41 1.414 1.41-.645 1.41-1.425-.63-1.41-1.41-1.41zM8.61 17.247c1.2 0 2.056-.042 2.58-.12.526-.084.976-.222 1.32-.412.45-.232.78-.564 1.02-.99s.36-.915.36-1.48c0-.78-.21-1.403-.63-1.87-.42-.48-.99-.734-1.74-.794.66-.18 1.156-.45 1.456-.81.315-.344.465-.824.465-1.424 0-.48-.103-.885-.3-1.26-.21-.36-.493-.645-.883-.87-.345-.195-.735-.315-1.215-.405-.464-.074-1.29-.12-2.474-.12H5.654v10.486H8.61zm.736-4.185c.705 0 1.185.088 1.44.262.27.18.39.495.39.93 0 .405-.135.69-.42.855-.27.18-.765.254-1.44.254H8.31v-2.297h1.05zm8.656.706v-7.06h-2.46v7.06H18zM8.925 9.08c.71 0 1.185.08 1.432.24.245.16.367.435.367.83 0 .38-.13.646-.39.804-.265.154-.747.232-1.452.232h-.57V9.08h.615z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hatena Bookmark" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hatenabookmark extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8Q, create_fragment$8Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Haveibeenpwned.svelte generated by Svelte v3.23.2 */

        function create_fragment$8R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.03 2.37a2.09 2.09 0 0 0-.333.02.905.905 0 0 0-.244.067.527.527 0 0 0-.166.088.5.5 0 0 0-.133.144L.652 4.943a4.084 4.084 0 0 0-.308.532 2.184 2.184 0 0 0-.2.496c-.051.17-.089.351-.11.543A5.53 5.53 0 0 0 0 7.143c0 .199.022.356.066.474a.48.48 0 0 0 .188.266.745.745 0 0 0 .32.123c.133.023.288.031.465.031v.002c.184 0 .342-.01.475-.033a.857.857 0 0 0 .332-.123.56.56 0 0 0 .187-.266c.044-.118.067-.275.067-.474V5.729L3.547 2.71a.418.418 0 0 0 .045-.154.177.177 0 0 0-.067-.112.342.342 0 0 0-.177-.054 2.17 2.17 0 0 0-.319-.022zm4.347 5.61a2.03 2.03 0 0 0-.559.065.647.647 0 0 0-.343.205.813.813 0 0 0-.182.387 3.436 3.436 0 0 0-.043.6c0 .228.014.422.043.58a.883.883 0 0 0 .182.386.75.75 0 0 0 .343.205c.144.036.33.053.559.053a2.2 2.2 0 0 0 .547-.053.75.75 0 0 0 .344-.205.75.75 0 0 0 .183-.387c.036-.157.053-.35.053-.58a2.77 2.77 0 0 0-.053-.6.702.702 0 0 0-.183-.386.647.647 0 0 0-.344-.205 1.937 1.937 0 0 0-.547-.065zm4.05 3.69a.337.337 0 0 0-.308.172c-.068.114-.103.316-.103.605 0 .29.035.496.103.617.069.115.172.17.309.17h4.779c.13 0 .228-.055.297-.17.068-.114.101-.32.101-.617 0-.145-.01-.268-.033-.367a.637.637 0 0 0-.08-.24.25.25 0 0 0-.127-.137.335.335 0 0 0-.158-.033zm7.395 0a.337.337 0 0 0-.308.172c-.069.114-.104.316-.104.605 0 .29.035.496.104.617.068.115.171.17.308.17H23.6c.13 0 .228-.055.296-.17.07-.114.104-.32.104-.617 0-.145-.012-.268-.035-.367a.637.637 0 0 0-.08-.24.247.247 0 0 0-.125-.137.343.343 0 0 0-.16-.033zm-11.32 4.29c-.184 0-.342.012-.475.034a.857.857 0 0 0-.332.123.56.56 0 0 0-.187.266 1.383 1.383 0 0 0-.067.474v1.414L4.994 21.29a.418.418 0 0 0-.045.154c.007.044.03.082.067.112.036.03.096.046.177.054.089.013.195.022.32.022.133 0 .242-.006.33-.022a.905.905 0 0 0 .245-.066.527.527 0 0 0 .166-.088.5.5 0 0 0 .133-.144l1.504-2.254a4.12 4.12 0 0 0 .308-.532c.089-.162.153-.326.197-.496.052-.17.09-.351.112-.543.022-.191.033-.4.033-.629a1.38 1.38 0 0 0-.066-.474.477.477 0 0 0-.188-.266.745.745 0 0 0-.32-.123 2.795 2.795 0 0 0-.465-.031z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "haveibeenpwned" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Haveibeenpwned extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8R, create_fragment$8R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Haxe.svelte generated by Svelte v3.23.2 */

        function create_fragment$8S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.784 0a.221.221 0 0 0-.043.003h-5.853a.221.221 0 0 0-.1.023L12 2.918 6.21.026a.221.221 0 0 0-.098-.023H.238a.221.221 0 0 0-.026 0 .221.221 0 0 0-.21.256v5.853a.221.221 0 0 0 .024.1l2.894 5.785L.026 17.79a.221.221 0 0 0-.024.099v5.84a.221.221 0 0 0 .002.078.221.221 0 0 0 .253.19h5.855a.221.221 0 0 0 .099-.023L12 21.076l5.789 2.898a.221.221 0 0 0 .099.023h5.877a.221.221 0 0 0 .232-.257V17.89a.221.221 0 0 0-.023-.1l-2.895-5.792 2.895-5.786a.221.221 0 0 0 .023-.099V.267a.221.221 0 0 0-.005-.098.221.221 0 0 0-.208-.169zM2.022.445H6.06l4.038 2.017zm15.918 0h4.038l-8.075 2.017zM.528.528l11.039 2.76-8.28 8.275-.238-.953zM23.47.535l-2.76 11.031-8.277-8.279zm.084 1.487V6.06l-2.019 4.035zm-23.11.003L2.29 9.398l.175.7L.445 6.06zM12 3.48L20.52 12l-8.517 8.516-8.241-8.234L3.48 12zm8.712 8.952l.088.351 2.672 10.688-11.04-2.76zm-17.424 0l8.274 8.274L.531 23.46l.266-1.065zm18.247 1.466l2.02 4.042v4.027zm-19.07 0l-2.02 8.08v-4.038zm7.626 7.638l-4.032 2.018H2.02zm3.818 0l8.071 2.018h-4.04z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Haxe" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Haxe extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8S, create_fragment$8S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hbo.svelte generated by Svelte v3.23.2 */

        function create_fragment$8T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.042 16.896H4.414v-3.754H2.708v3.754H.01L0 7.22h2.708v3.6h1.706v-3.6h2.628zm12.043.046C21.795 16.94 24 14.689 24 11.978a4.89 4.89 0 0 0-4.915-4.92c-2.707-.002-4.09 1.991-4.432 2.795.003-1.207-1.187-2.632-2.58-2.634H7.59v9.674l4.181.001c1.686 0 2.886-1.46 2.888-2.713.385.788 1.72 2.762 4.427 2.76zm-7.665-3.936c.387 0 .692.382.692.817 0 .435-.305.817-.692.817h-1.33v-1.634zm.005-3.633c.387 0 .692.382.692.817 0 .436-.305.818-.692.818h-1.33V9.373zm1.77 2.607c.305-.039.813-.387.992-.61-.063.276-.068 1.074.006 1.35-.204-.314-.688-.701-.998-.74zm3.43 0a2.462 2.462 0 1 1 4.924 0 2.462 2.462 0 0 1-4.925 0zm2.462 1.936a1.936 1.936 0 1 0 0-3.872 1.936 1.936 0 0 0 0 3.872Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HBO" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hbo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8T, create_fragment$8T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hcl.svelte generated by Svelte v3.23.2 */

        function create_fragment$8U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.3968 10.4013l-1.0971 2.4399H24l-.3435.7629H17.294l1.4331-3.2028zm-6.3985 1.0896h2.4633c-.0152-.5377-.5358-.911-1.5672-1.0592-2.0348-.2994-4.2354-.1718-5.802.6934-1.2346.6859-1.329 1.7176-.099 2.2232 1.0357.4218 3.2106.4656 4.767.201 1.0077-.1712 1.7776-.502 2.2093-.9974H14.454c-.3262.251-.7526.376-1.25.3804-1.4124.0094-1.5988-.4182-1.3525-.9106.293-.5801.9075-.8966 1.8447-.9216.7381-.0199 1.1029.1436 1.3021.3908M0 13.6067h2.604l.5578-1.2789h2.553l-.5732 1.2771h2.635l1.4457-3.2031h-2.653l-.4769 1.0807H3.5421l.4831-1.0807-2.5781-.0006Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HCL" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hcl extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8U, create_fragment$8U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hellofresh.svelte generated by Svelte v3.23.2 */

        function create_fragment$8V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.773 1.063a8.14 8.14 0 00-.37.005 11.51 11.51 0 00-.966.11c-2.884.456-5.652 2.003-7.642 4.177A12.53 12.53 0 002.55 6.96a11.8 11.8 0 00-1.858 5.07c-.127 1.127.18 2.498-.267 3.559a4.25 4.25 0 00-.16.45c-.302.942-.727 3.072 1.164 4.042.8.41 1.732.427 2.535.86.23.124.453.255.676.382a13.365 13.365 0 001.402.74c.064.027.124.054.187.079 3.269 1.29 6.995.97 10.1-.62.37-.186.717-.4 1.059-.61.052-.03.106-.058.158-.089.25-.147.493-.3.728-.46a12.552 12.552 0 00.123-.094c.24-.17.462-.338.655-.493a12.552 12.552 0 00.26-.199c.163-.138.321-.279.476-.424a12.158 12.158 0 001.986-2.404 13.458 13.458 0 001.793-4.602c.015-.074.028-.148.041-.222.014-.075.028-.142.04-.213a16.736 16.736 0 00.19-3.484c-.053-1.178.473-2.04-.134-3.174h.002a1.619 1.619 0 00-.5-.565l-.092-.06a.834.834 0 00-.05-.032c-.39-.227-.852-.335-1.294-.5-.096-.035-.177.026-.109.106 1.068 1.253 1.18 2.233-.033.766-2.832-3.424-7.488-3.701-8.856-3.705zM12.75 2.13c.621.007 1.01.07 1.01.07s-2.684.074-5.52 1.701c-2.29 1.315-1.427.046.186-.798 1.607-.843 3.289-.985 4.324-.973zm3.336 2.459c.049-.003.1 0 .152.01 1.45.265.15 4.272-.527 5.214.26 2.126 1.057.41 1.37-.51.097-.286.22-.642.26-.935.133-.942.415-1.671.981-2.06.318-.219.648-.309 1.06-.141 1.314.532.8 4.342-.37 4.81a1.171 1.171 0 01-.598.079v-.002c-.692-.06-.901-.575-1.018-1.399-.534 1.616-1.528 2.736-2.285.75-.19.48-2.024 2.76-2.666.108l-.015-.06c-.185.335-1.37 2.427-2.85 1.687a1.031 1.031 0 01-.299-.245 1.855 1.855 0 01-.351-.636 3.276 3.276 0 01-.149-.729 5.259 5.259 0 01-.008-.586c-.2-.013-.418-.02-.574-.027h-.111c-.015 1.059-.003 2.153.078 2.791a.05.05 0 01-.014.035.05.05 0 01-.029.016c-.42.07-.933.332-.885-.74.03-.587.05-1.478.063-2.082a6.91 6.91 0 00-1.16.19 8.932 8.932 0 00-.371.11c-.007.264-.012.517-.012.742-.026 1.344-.036 3.09.064 3.842a.043.043 0 01-.011.032.043.043 0 01-.026.013c-.441.076-.984.247-.933-.88 0 0 .05-2.167.076-2.928.005-.162.01-.33.013-.502-.238.114-.39.219-.576.322-.055.028-.104.058-.152.086-.048.027-.094.052-.135.078-.083.05-.289.174-.318.19a.078.078 0 01-.086 0 .423.423 0 01-.123-.184c-.06-.176-.05-.43.168-.569a5.55 5.55 0 01.34-.207 7.543 7.543 0 01.894-.408c.011-1.118-.008-2.445-.045-2.81A.054.054 0 014.95 7c.196-.058.964-.24.93.486 0 0-.056 1.154-.092 2.147.105-.021.213-.04.322-.055a7.327 7.327 0 011.194-.076c.03-1.695.006-3.432-.053-3.934a.042.042 0 01.008-.027.042.042 0 01.008-.01.042.042 0 01.015-.008c.174-.053.93-.24.897.465-.029 1.135-.068 2.496-.088 3.55v.009c.236.015.483.034.717.058a3.411 3.411 0 01.695-1.515c.103-.13.566-.585.937-.666.509-.137.842.24.938.476a1.823 1.823 0 01.094.887l-.004.03v.031a1.644 1.644 0 01-.04.182 1.462 1.462 0 01-.093.24 1.446 1.446 0 01-.332.44 1.595 1.595 0 01-.557.29 1.47 1.47 0 01-.506.059 2.254 2.254 0 01-.224-.022l-.11-.017v.013c0 .113-.003.224 0 .332a4.018 4.018 0 00.079.719c.086.379.282.576.529.623.927.247 1.936-1.418 2.11-1.697-.373-1.835.05-5.725 1.37-5.365 1.27.341.035 4.46-.564 5.289.211 2.657 1.697.158 1.818-.02-.17-.685-.189-1.563-.105-2.611.106-1.321.51-2.675 1.244-2.713zm.174.697c-.457.017-.813 2.086-.655 3.897.55-1.071 1.12-3.782.698-3.891a.147.147 0 00-.043-.006zm-2.602.047c-.45.029-.835 2.281-.658 4.037.52-.995 1.123-3.924.701-4.033a.133.133 0 00-.043-.004zm5.365 1.178c-.18.004-.432.117-.613.447-.505.928-.52 3.106.02 3.623.126.121.333.047.422-.023a.925.925 0 00.234-.307c.439-.815.7-2.698.287-3.463-.036-.067-.17-.282-.35-.277zm-8.431 1.35a.255.255 0 00-.076.015.617.617 0 00-.237.168 1.585 1.585 0 00-.209.293 3.29 3.29 0 00-.273.68 5.304 5.304 0 00-.154.683l-.01-.004v.016c.083.011.148.02.16.02a.864.864 0 00.182-.018.823.823 0 00.318-.137 1.035 1.035 0 00.219-.22 1.748 1.748 0 00.279-.569 1.94 1.94 0 00.063-.344 1.054 1.054 0 00-.022-.326.428.428 0 00-.127-.228l-.02-.014-.013-.006c.003 0-.006-.004-.014-.004h-.008a.07.07 0 00-.027-.004.255.255 0 00-.031-.002zm9.4 3.784a.138.138 0 01.022 0 .138.138 0 01.134.145v4.582a.21.21 0 01-.17.2l-.47.083a.138.138 0 01-.17-.14v-1.889a.06.06 0 00-.068-.057l-.73.13a.092.092 0 00-.07.08v1.888a.21.21 0 01-.17.2l-.47.083a.138.138 0 01-.17-.14v-4.582a.21.21 0 01.17-.2l.47-.084a.138.138 0 01.17.14v1.833a.06.06 0 00.07.057l.73-.127a.092.092 0 00.068-.08v-1.834a.21.21 0 01.17-.202l.47-.082a.138.138 0 01.014-.004zm-3.785.608c.563-.007.898.353.898 1.158v.164a.191.191 0 01-.15.176l-.478.086a.11.11 0 01-.127-.108v-.144c0-.498-.136-.65-.395-.604-.272.048-.396.27-.396.526 0 .382.287.61.716.957l-.005.004c.503.409.894.762.894 1.437 0 .764-.497 1.334-1.213 1.461-.748.132-1.21-.31-1.21-1.039v-.342a.21.21 0 01.17-.2l.415-.073a.138.138 0 01.17.14v.28c0 .382.13.576.45.52.217-.038.437-.179.437-.548 0-.457-.352-.702-.758-1.025-.406-.323-.852-.697-.852-1.398 0-.63.351-1.256 1.18-1.403.09-.015.174-.024.254-.025zm-2.014.416a.138.138 0 01.024 0 .138.138 0 01.135.143v.374a.21.21 0 01-.17.202l-1.057.187a.092.092 0 00-.068.078v1.182a.06.06 0 00.068.055l.715-.127a.138.138 0 01.172.14v.348a.21.21 0 01-.172.2l-.715.128a.092.092 0 00-.068.08v1.336a.06.06 0 00.068.057l1.111-.198a.138.138 0 01.17.141v.39a.21.21 0 01-.17.202l-1.822.318a.138.138 0 01-.17-.14v-4.58a.21.21 0 01.17-.202l1.768-.31a.138.138 0 01.011-.004zm-3.351.621c.677.014.824.565.824 1.299 0 .77-.158 1.09-.533 1.353a.089.089 0 00-.041.104h.002l.574 1.828a.154.154 0 01-.123.186l-.461.084a.185.185 0 01-.217-.13l-.492-1.726a.077.077 0 00-.088-.053l-.156.028a.092.092 0 00-.069.082v1.804a.21.21 0 01-.171.202l-.477.084a.138.138 0 01-.17-.141v-4.582a.21.21 0 01.17-.2l1.104-.195c.12-.02.227-.029.324-.027zm-2.23.377a.138.138 0 01.007 0 .138.138 0 01.135.145v.369a.21.21 0 01-.17.199l-1.084.191a.092.092 0 00-.068.082v1.205a.06.06 0 00.068.057l.75-.133a.138.138 0 01.17.14v.362a.21.21 0 01-.17.2l-.75.132a.092.092 0 00-.068.08v1.932a.21.21 0 01-.17.2l-.479.085a.138.138 0 01-.17-.14V14.19a.21.21 0 01.17-.199l1.801-.32a.138.138 0 01.027-.004zm1.898.346a.867.867 0 00-.127.013l-.254.043a.092.092 0 00-.068.08v1.405a.06.06 0 00.068.054l.254-.045v.002c.368-.065.478-.253.478-.853 0-.525-.084-.705-.351-.7Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HelloFresh" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hellofresh extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8V, create_fragment$8V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hellyhansen.svelte generated by Svelte v3.23.2 */

        function create_fragment$8W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.27 10.09h4.08V5.63h4.11L9.98 18.37H8.34V14H4.26v4.37H0V5.63h4.27zm15.45 3.82h-4.07v4.46h-4.1l2.47-12.74h1.64V10h4.08V5.63H24v12.74h-4.28Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Helly Hansen" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hellyhansen extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8W, create_fragment$8W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Helm.svelte generated by Svelte v3.23.2 */

        function create_fragment$8X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.651,19.252c0.704,1.005,0.96,2.039,0.573,2.31c-0.387,0.271-1.271-0.324-1.975-1.329 c-0.259-0.37-0.456-0.744-0.584-1.082c-1.156,0.772-2.493,1.258-3.898,1.4c0.081,0.34,0.13,0.737,0.13,1.166 c0,1.227-0.383,2.221-0.856,2.221c-0.473,0-0.856-0.994-0.856-2.221c0-0.42,0.047-0.807,0.125-1.142 c-1.414-0.099-2.765-0.547-3.944-1.284c-0.127,0.301-0.3,0.621-0.524,0.942c-0.704,1.005-1.588,1.6-1.975,1.329 c-0.387-0.271-0.131-1.305,0.573-2.31c0.236-0.337,0.492-0.622,0.743-0.85c-0.487-0.437-0.928-0.931-1.309-1.479l1.124-0.782 c1.345,1.934,3.554,3.088,5.908,3.088c2.36,0,4.571-1.158,5.916-3.098l1.125,0.78c-0.348,0.502-0.747,0.957-1.183,1.366 C18.06,18.518,18.369,18.85,18.651,19.252z M6.277,5.623C5.682,6.143,5.153,6.746,4.711,7.43l1.15,0.743 C7.193,6.111,9.453,4.88,11.907,4.88c2.535,0,4.835,1.294,6.151,3.461l1.17-0.711c-0.435-0.716-0.963-1.349-1.56-1.895 c0.324-0.245,0.671-0.603,0.983-1.049c0.704-1.005,0.96-2.039,0.573-2.31c-0.387-0.271-1.271,0.324-1.975,1.329 c-0.294,0.419-0.504,0.84-0.627,1.212c-1.152-0.761-2.485-1.232-3.9-1.364c0.108-0.372,0.175-0.83,0.175-1.333 C12.897,0.994,12.514,0,12.041,0c-0.473,0-0.856,0.994-0.856,2.221c0,0.491,0.063,0.941,0.167,1.308 c-1.413,0.09-2.757,0.525-3.93,1.247c-0.128-0.336-0.323-0.705-0.58-1.071C6.139,2.7,5.255,2.106,4.868,2.377 c-0.387,0.271-0.131,1.305,0.573,2.31C5.706,5.065,5.997,5.385,6.277,5.623z M0.5,15.272h1.648V12.8h1.859v2.473h1.648V9.043H4.008 v2.319H2.148V9.043H0.5V15.272z M7.036,9.043v6.229h4.121v-1.38H8.684v-1.112h2.032v-1.38H8.684v-0.978h2.377v-1.38L7.036,9.043 L7.036,9.043z M12.364,9.043v6.229h4.006v-1.38h-2.358V9.043L12.364,9.043L12.364,9.043z M17.443,9.043v6.229h1.514v-1.84 c0-0.16-0.008-0.335-0.024-0.527c-0.016-0.192-0.034-0.388-0.053-0.589c-0.019-0.201-0.042-0.398-0.067-0.589 c-0.026-0.192-0.048-0.364-0.067-0.517h0.038l0.498,1.457l0.863,2.099h0.613l0.862-2.099l0.517-1.457h0.038 c-0.019,0.153-0.042,0.326-0.067,0.518c-0.026,0.192-0.048,0.388-0.067,0.589c-0.019,0.201-0.037,0.398-0.053,0.589 c-0.016,0.192-0.024,0.367-0.024,0.527v1.84H23.5V9.043h-1.706l-0.939,2.588l-0.345,1.016h-0.038l-0.345-1.016l-0.978-2.588 L17.443,9.043L17.443,9.043z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Helm" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Helm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8X, create_fragment$8X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Here.svelte generated by Svelte v3.23.2 */

        function create_fragment$8Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.656 19.63l-3.304 3.295L.044 19.63zM11.49 12.108c-.69-.821-.656-1.264-.229-1.69.519-.52 1.047-.306 1.639.274zm7.08-8.993c.518-.519 1.046-.305 1.638.275l-1.41 1.41c-.692-.818-.659-1.258-.229-1.685zm4.271 1.44c-.643.962-1.742 2.52-2.929 1.343l2.97-2.97c-.266-.283-.47-.524-.611-.676-1.614-1.6-3.418-1.62-4.834-.214-.943.943-1.19 2.02-.915 3.051l-.916-1.065a1.935 1.935 0 0 0-.555 2.67l-1.065-.884-1.431 1.406 1.907 1.907c-1.474-1.168-3.051-1.055-4.34.217-1.363 1.361-1.269 3.012-.246 4.37l-.208-.205c-1.349-1.348-2.813-.872-3.54-.146-.561.561-.915 1.33-.762 1.867l-2.918-2.92-1.556 1.556 5.764 5.768h3.095l-2.078-2.09c-1.093-1.111-1.111-1.697-.58-2.225.53-.528 1.104-.192 2.151.851l2.054 2.05 1.562-1.543-1.95-1.947c1.404 1.062 3.088 1.12 4.577-.378l.028-.028a4.43 4.43 0 0 0 1.19-1.678l-1.169-.784c-.647.96-1.76 2.523-2.93 1.364l2.976-2.976 1.855 1.84 1.618-1.617-2.32-2.319c-1.083-1.083-.442-2.1 0-2.484a4.577 4.577 0 0 0 .916 1.27c1.501 1.504 3.439 1.806 5.145.106l.027-.027a4.434 4.434 0 0 0 1.19-1.678z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HERE" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Here extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8Y, create_fragment$8Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Heroku.svelte generated by Svelte v3.23.2 */

        function create_fragment$8Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.61 0H3.39C2.189 0 1.23.96 1.23 2.16v19.681c0 1.198.959 2.159 2.16 2.159h17.22c1.2 0 2.159-.961 2.159-2.159V2.16C22.77.96 21.811 0 20.61 0zm.96 21.841c0 .539-.421.96-.96.96H3.39c-.54 0-.96-.421-.96-.96V2.16c0-.54.42-.961.96-.961h17.22c.539 0 .96.421.96.961v19.681zM6.63 20.399L9.33 18l-2.7-2.4v4.799zm9.72-9.719c-.479-.48-1.379-1.08-2.879-1.08-1.621 0-3.301.421-4.5.84V3.6h-2.4v10.38l1.68-.78s2.76-1.26 5.16-1.26c1.2 0 1.5.66 1.5 1.26v7.2h2.4v-7.2c.059-.179.059-1.501-.961-2.52zM13.17 7.5h2.4c1.08-1.26 1.62-2.521 1.8-3.9h-2.399c-.241 1.379-.841 2.64-1.801 3.9z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Heroku" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Heroku extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8Z, create_fragment$8Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hexo.svelte generated by Svelte v3.23.2 */

        function create_fragment$8_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 .007L1.57 6.056V18.05L12 23.995l10.43-6.049V5.952L12 .007zm4.798 17.105l-.939.521-.939-.521V12.94H9.08v4.172l-.94.521-.938-.521V6.89l.939-.521.939.521v4.172h5.84V6.89l.94-.521.938.521v10.222z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hexo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hexo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8_, create_fragment$8_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hey.svelte generated by Svelte v3.23.2 */

        function create_fragment$8$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.57 6.698a5.724 5.724 0 00-2.644 1.572c-.84-2.952-2.65-7.42-4.415-8.15a1.283 1.283 0 00-1.181.05c-1.104.643-1.823 2.709-1.194 6.624C7.71 2.353 6.863 2.36 6.472 2.353a.956.956 0 00-.873.597c-.263.584-.79 2.406.494 6.327C4.547 7.16 4.072 6.89 3.526 6.917a.969.969 0 00-.821.557c-.463.873-.41 3.068 1.027 6.34a2.946 2.946 0 00-1.773-.73 1.06 1.06 0 00-.853.544c-.584 1.073.642 4.083 2.157 6.124C4.49 21.427 6.947 24 10.515 24a8.047 8.047 0 001.489-.141.654.654 0 00-.25-1.284c-2.965.578-5.2-1.052-6.553-2.515-2.021-2.19-2.908-4.82-2.959-5.622.424.173 1.644.892 4.018 3.934a.65.65 0 001.059-.757c-3.337-5.066-3.664-8.132-3.555-9.166.982 1 3.433 4.671 5.28 7.445a.642.642 0 00.88.199.642.642 0 00.238-.873C6.312 8.16 6.446 4.952 6.67 3.874c.577.584 2.11 2.618 5.34 9.626a.642.642 0 00.84.327.642.642 0 00.366-.827c-3.132-8.504-1.772-11.385-1.252-11.712.674 0 2.567 3.247 3.748 7.502.07.263.141.52.205.77a4.094 4.094 0 00-.385.924c-.64 2.355-1.283 7.7-.045 9.17a1.194 1.194 0 001.04.444 1.688 1.688 0 001.232-.757c1.15-1.675.475-5.879-.443-9.557a4.832 4.832 0 012.567-1.84 1.283 1.283 0 011.284.307c.526.59 1.445 2.798-1.34 10.583a.654.654 0 001.231.436c2.22-6.206 2.568-10.204 1.084-11.886A2.528 2.528 0 0019.57 6.7zm-2.888 11.918a.41.41 0 01-.218.186c-.48-.571-.48-3.953.045-6.727.995 4.795.417 6.2.173 6.54z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$8$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HEY" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hey extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$8$, create_fragment$8$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Highly.svelte generated by Svelte v3.23.2 */

        function create_fragment$90(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.2 20.4H13.799999999999999V24H10.2zM9 0H15V18H9z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$90($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Highly" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Highly extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$90, create_fragment$90, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hilton.svelte generated by Svelte v3.23.2 */

        function create_fragment$91(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.123 14.234c0-1.544-1.06-2.788-2.972-3.386V7.347h3.57v8.59h-1.105a2.993 2.993 0 0 0 .506-1.703M11.194 3.708C4.744 3.708 0 7.808 0 12.184c0 2.257 1.267 4.168 2.88 5.481l.114-.092a6.369 6.369 0 0 1-2.418-4.95C.92 7.83 6.818 5.134 12.092 5.134c3.709 0 10.388.85 10.388 7.072 0 3.247-3.455 7.462-10.733 7.462-3.731 0-6.61-2.004-6.61-4.86 0-2.487 1.935-4.26 4.836-4.26a7.83 7.83 0 0 1 2.12.345c-1.199-.207-3.087.092-4.055.85v4.192h3.57v-4.743a4.064 4.064 0 0 1 1.543.6v4.192h.922a3.83 3.83 0 0 1-3.27 1.126v.184c3.385.276 4.813-1.336 4.813-3.156 0-2.118-2.004-3.362-4.03-3.639V7.347h-3.57v3.179c-2.304.46-4.561 1.842-4.561 4.1 0 3.501 4.883 5.666 9.12 5.666 6.452 0 11.425-3.109 11.425-7.508.023-5.299-7.163-9.076-12.806-9.076Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$91($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hilton" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hilton extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$91, create_fragment$91, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hipchat.svelte generated by Svelte v3.23.2 */

        function create_fragment$92(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.736 19.056s.103-.073.267-.198C22.46 16.958 24 14.203 24 11.139 24 5.424 18.627.787 12.003.787 5.377.787 0 5.424 0 11.139c0 5.717 5.371 10.356 11.998 10.356.847 0 1.694-.073 2.524-.228l.262-.045c1.683 1.092 4.139 1.99 6.288 1.99.665 0 .978-.546.552-1.104-.648-.795-1.541-2.068-1.888-3.052zm-1.462-4.526c-.716 1.069-2.934 2.889-6.254 2.889h-.046c-3.328 0-5.543-1.831-6.254-2.889a1.137 1.137 0 0 1-.273-.574.49.49 0 0 1 .447-.526c.008-.003.014-.003.021-.003.117.006.23.043.328.111a9.137 9.137 0 0 0 5.754 2.056 8.805 8.805 0 0 0 5.76-2.059.461.461 0 0 1 .313-.122c.267 0 .478.213.483.475a1.321 1.321 0 0 1-.268.643h-.011z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$92($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HipChat" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hipchat extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$92, create_fragment$92, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hitachi.svelte generated by Svelte v3.23.2 */

        function create_fragment$93(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.787 11.41h-1.026a.852.852 0 00-.052-.284.714.714 0 00-.459-.427 1.417 1.417 0 00-.913.019.89.89 0 00-.535.542 2.318 2.318 0 00-.04 1.425.88.88 0 00.535.584 1.492 1.492 0 00.977.027.705.705 0 00.428-.384.976.976 0 00.08-.396h1.031a2.198 2.198 0 01-.049.351c-.09.365-.346.672-.684.814a3.254 3.254 0 01-2.251.104c-.477-.15-.89-.493-1.054-.96a2.375 2.375 0 01-.133-.788c0-.388.068-.764.254-1.077.192-.321.486-.569.842-.701a3.062 3.062 0 012.318.063 1.2 1.2 0 01.698.853c.017.076.028.156.033.235zm-3.979 2.436H12.72l-.32-.793h-1.834c-.001.001-.315.794-.319.793h-1.09l1.727-3.693c0 .002 1.199 0 1.199 0l1.725 3.693zm5.483.001h-.977s.005-3.693 0-3.693h.977v1.477h1.976c0 .005-.002-1.478 0-1.477h.979s.003 3.686 0 3.693h-.979v-1.626c0 .005-1.976 0-1.976 0 .002.007 0 1.624 0 1.626zm-18.312 0H0s.005-3.693 0-3.693h.979s-.002 1.487 0 1.477h1.976c0 .005-.004-1.478 0-1.477h.978s.004 3.686 0 3.693h-.978v-1.626c0 .005-1.976 0-1.976 0 0 .007-.002 1.625 0 1.626zm7.531-.001h-.977v-3.065H6.036s.002-.626 0-.627c.002.001 3.971 0 3.971 0v.627H8.51v3.065zm-3.801-3.692h.977v3.692h-.977v-3.692zm18.312 0H24v3.692h-.979v-3.692zm-11.537.627l-.681 1.68h1.361l-.68-1.68z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$93($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hitachi" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hitachi extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$93, create_fragment$93, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hive.svelte generated by Svelte v3.23.2 */

        function create_fragment$94(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.442 21.355c.55-.19.74-.256.99-.373.342-.152.605-.39.605-.818a.846.846 0 00-.605-.813c-.318-.092-.703.042-.99.122l-5.42 1.46a7.808 7.808 0 01-4.057 0l-5.407-1.46c-.287-.08-.672-.214-.99-.122a.847.847 0 00-.605.813c0 .427.263.666.605.818.25.117.44.184.99.373l5.138 1.79c1.491.52 3.104.52 4.601 0zm-9.263-3.224a7.622 7.622 0 003.636 0l8.01-1.967c.507-.122.709-.165.99-.257.354-.116.605-.415.605-.806a.847.847 0 00-.605-.813c-.281-.08-.697.024-.99.08l-8.664 1.545a6.813 6.813 0 01-2.334 0l-8.652-1.545c-.293-.056-.708-.16-.99-.08a.847.847 0 00-.604.813c0 .39.25.69.604.806.282.092.483.135.99.257zM14.75.621a24.43 24.43 0 00-5.511 0L6.495.933c-.294.03-.715.055-.99.14-.28.092-.605.355-.605.807 0 .39.257.702.605.806.281.08.696.074.99.074h11.01c.293 0 .709.006.99-.074a.835.835 0 00.605-.806c0-.452-.324-.715-.605-.807-.275-.085-.697-.11-.99-.14zm6.037 6.767c.3-.019.709-.037.99-.116a.84.84 0 000-1.614c-.281-.085-.69-.073-.99-.073H3.214c-.3 0-.709-.012-.99.073a.84.84 0 000 1.614c.281.079.69.097.99.116l7.808.556c.642.042 1.308.042 1.943 0zm1.62 4.242c.513-.08.708-.104.989-.202.354-.121.605-.409.605-.806a.84.84 0 00-.605-.806c-.28-.086-.69-.019-.99.012l-9.232.929c-.776.079-1.582.079-2.358 0l-9.22-.93c-.3-.03-.715-.097-.99-.011a.84.84 0 00-.605.806c0 .397.25.685.605.806.275.092.476.123.99.202l8.823 1.418c1.038.165 2.12.165 3.158 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$94($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hive" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hive extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$94, create_fragment$94, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hockeyapp.svelte generated by Svelte v3.23.2 */

        function create_fragment$95(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.794 15.002c.075-.057.181-.007.194.083.006.057.012.114.012.171C22 16.842 18.669 19 12 19c-6.669 0-10-2.158-10-3.737 0-.057.006-.115.013-.166a.12.12 0 0 1 .193-.082c1.656 1.19 4.919 2.209 9.794 2.209 4.881 0 8.144-1.019 9.794-2.222zM12 14.168c-5.406 0-8.988-1.229-10.738-2.649a.122.122 0 0 0-.187.039c-.094.178-.137.369-.137.56 0 1.75 3.687 4.087 11.062 4.087s11.063-2.33 11.063-4.087c0-.198-.044-.382-.138-.56a.122.122 0 0 0-.188-.039c-1.75 1.42-5.33 2.649-10.737 2.649zm12-5.73c0 2.018-4 4.711-12 4.711S0 10.456 0 8.438C0 6.42 4 5 12 5s12 1.42 12 3.438zm-3.5-.318c0-1.013-2.831-1.592-8.5-1.592-5.669 0-8.5.58-8.5 1.592s2.831 2.483 8.5 2.483c5.669 0 8.5-1.471 8.5-2.483z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$95($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HockeyApp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hockeyapp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$95, create_fragment$95, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Homeassistant.svelte generated by Svelte v3.23.2 */

        function create_fragment$96(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.9922 1.3945a.7041.7041 0 00-.498.211L.1621 13.0977A.5634.5634 0 000 13.494a.567.567 0 00.5664.5664H2.67v8.0743c0 .2603.2104.4707.4707.4707h7.9473v-3.6836L8.037 15.8672a2.42 2.42 0 01-.9473.1933c-1.3379 0-2.4218-1.0868-2.4218-2.4257 0-1.339 1.084-2.4239 2.4218-2.4239 1.338 0 2.422 1.085 2.422 2.4239 0 .3359-.068.6563-.1915.9472l1.7676 1.7676v-5.375C10.2 10.615 9.5723 9.744 9.5723 8.7266c0-1.339 1.0859-2.4258 2.4238-2.4258 1.338 0 2.4219 1.0868 2.4219 2.4258 0 1.0174-.6259 1.8884-1.5137 2.248v5.375l1.7656-1.7676a2.4205 2.4205 0 01-.1914-.9472c0-1.339 1.086-2.4239 2.4238-2.4239 1.338 0 2.422 1.085 2.422 2.4239 0 1.3389-1.084 2.4257-2.422 2.4257a2.42 2.42 0 01-.9472-.1933l-3.0508 3.0547v3.6836h7.9473a.4702.4702 0 00.4707-.4707v-8.0743h2.1113a.5686.5686 0 00.3965-.162c.2233-.2185.2262-.5775.0078-.8008l-2.5156-2.5723V6.4707c0-.2603-.2104-.4727-.4707-.4727h-1.9649c-.2603 0-.4707.2124-.4707.4727v1.1035L12.5 1.6035a.7056.7056 0 00-.5078-.209zm.0039 6.3614c-.5352 0-.9688.4351-.9688.9707 0 .5355.4336.9687.9688.9687a.9683.9683 0 00.9687-.9687c0-.5356-.4335-.9707-.9687-.9707zM7.0898 12.666a.9683.9683 0 00-.9687.9688c0 .5355.4336.9707.9687.9707.5352 0 .9688-.4352.9688-.9707a.9683.9683 0 00-.9688-.9688zm9.8125 0c-.5351 0-.9707.4332-.9707.9688 0 .5355.4356.9707.9707.9707.5352 0 .9688-.4352.9688-.9707a.9683.9683 0 00-.9688-.9688Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$96($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Home Assistant" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Homeassistant extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$96, create_fragment$96, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Homeadvisor.svelte generated by Svelte v3.23.2 */

        function create_fragment$97(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.98 2.442H8.02L0 10.46h2.275l6.882-6.88 6.881 6.881H24l-8.02-8.018m-.492 9.348L9.157 5.459 4.01 10.605v4.987a1.33 1.33 0 0 0 1.329 1.329h6.077l4.637 4.637v-4.637h2.598a1.33 1.33 0 0 0 1.33-1.33V11.79h-4.494Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$97($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HomeAdvisor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Homeadvisor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$97, create_fragment$97, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Homebrew.svelte generated by Svelte v3.23.2 */

        function create_fragment$98(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.938 0a.214.214 0 0 0-.206.156c-.316 1.104.179 2.15.838 2.935.153.181.313.347.476.501a2.039 2.039 0 0 0-.665.02c-1.184.233-2.193.985-2.74 2.532a3.893 3.893 0 0 0-.2 1.466 1.565 1.565 0 0 0-1.156 1.504 1.59 1.59 0 0 0 1.227 1.541l.026 12.046c0 .195.1.377.264.482a.214.214 0 0 0 .008.005c.537.31 2.047.812 5.21.812 3.238 0 4.7-.678 5.181-1.04a.214.214 0 0 0 .008-.007.571.571 0 0 0 .206-.439c.002-.344.002-1.136.002-1.604a.143.143 0 0 1 .147-.144c.397.006.869.006 1.318.005a1.826 1.826 0 0 0 1.832-1.825v-5.804a1.826 1.826 0 0 0-1.825-1.826H16.56a.14.14 0 0 1-.143-.144V10.6h.007v-.001a1.573 1.573 0 0 0 1.356-1.556c0-.816-.627-1.489-1.424-1.563-.025-1.438-.437-2.126-.736-2.58a.214.214 0 0 0-.005-.007c-.364-.51-1.193-1.282-2.275-1.316-.503-.016-.842.124-1.125.254-.217.1-.42.177-.67.22.002-1.286.945-1.981.945-1.981a.214.214 0 0 0 .05-.298s-.087-.122-.21-.26c-.121-.136-.269-.294-.47-.378a.214.214 0 0 0-.079-.017.214.214 0 0 0-.145.055 4.308 4.308 0 0 0-.875 1.101 3.42 3.42 0 0 0-.133.273 3.497 3.497 0 0 0-.381-.846C9.794.978 9.063.436 8.017.016A.214.214 0 0 0 7.939 0zm.156.524c.85.378 1.43.83 1.79 1.403.274.438.426.962.484 1.584a3.07 3.07 0 0 0-.012.462 6.897 6.897 0 0 1-.168-.052 5.487 5.487 0 0 1-1.29-1.106c-.551-.657-.935-1.46-.804-2.291zM11.8 1.618c.07.054.141.101.212.18.034.039.032.04.058.073-.332.308-1.07 1.144-.952 2.453a.214.214 0 0 0 .222.195c.469-.017.782-.172 1.056-.299.273-.126.508-.228.931-.214.875.027 1.639.715 1.939 1.134.295.449.65 1 .663 2.36a1.66 1.66 0 0 0-.41.142 1.938 1.938 0 0 0-1.77-1.16 1.94 1.94 0 0 0-1.87 1.448 1.783 1.783 0 0 0-1.356-.64c-.484 0-.91.205-1.233.517a1.873 1.873 0 0 0-1.85-1.625c-.649 0-1.218.335-1.552.84a3.1 3.1 0 0 1 .157-.735c.51-1.437 1.355-2.045 2.42-2.254.367-.073.664-.011.99.095.325.106.671.262 1.094.342a.214.214 0 0 0 .252-.245c-.112-.67.073-1.266.336-1.744a3.71 3.71 0 0 1 .663-.863zM7.44 6.611a1.442 1.442 0 0 1 1.363 1.925.214.214 0 0 0 .168.283h.005a.214.214 0 0 0 .238-.146 1.373 1.373 0 0 1 2.613-.01.214.214 0 0 0 .417-.09 1.509 1.509 0 0 1 1.504-1.664c.678 0 1.249.445 1.442 1.056a.214.214 0 0 0 .259.143l.15-.04a.214.214 0 0 0 .051-.02 1.139 1.139 0 0 1 1.702.995 1.14 1.14 0 0 1-.985 1.131.214.214 0 0 0-.001 0 2.215 2.215 0 0 0-.485.126 10.65 10.65 0 0 1-1.176.365.214.214 0 0 0-.162.186 1.276 1.276 0 0 1-.146.478 2.07 2.07 0 0 0-.239 1.111l.001.151a.438.438 0 0 1-.16.36.665.665 0 0 1-.43.14.586.586 0 0 1-.588-.59.803.803 0 0 0-.38-.681.214.214 0 0 0-.002-.002c-.24-.145-.43-.37-.532-.636a.214.214 0 0 0-.207-.138 19.469 19.469 0 0 1-5.37-.6l-.003-.002a9.007 9.007 0 0 0-.838-.194h.003a1.16 1.16 0 0 1-.937-1.134c0-.619.488-1.118 1.101-1.14a.214.214 0 0 0 .204-.176 1.443 1.443 0 0 1 1.42-1.187zm8.549 4.106v.455c0 .314.259.573.572.573h1.329a1.397 1.397 0 0 1 1.397 1.397v5.804a1.396 1.396 0 0 1-1.402 1.396.214.214 0 0 0-.002 0c-.448.002-.918 0-1.31-.005a.573.573 0 0 0-.584.573c0 .468 0 1.262-.002 1.603a.214.214 0 0 0 0 .001c0 .042-.019.08-.05.107-.346.26-1.75.95-4.915.95-3.107 0-4.587-.52-4.99-.752a.143.143 0 0 1-.065-.118l-.025-11.955c.145.033.288.07.431.11a.214.214 0 0 0 .003 0c.115.031.246.064.383.097v10.37c0 .129.069.247.18.31.453.217 1.767.732 4.071.732 2.32 0 3.595-.626 4.022-.884a.357.357 0 0 0 .164-.3l.001-10.21c.267-.075.531-.158.792-.254zm-7.99.894a.493.493 0 0 1 .494.493v8.578a.493.493 0 0 1-.493.493.493.493 0 0 1-.494-.493v-8.578A.493.493 0 0 1 8 11.611zm8.652 1.14a.663.663 0 0 0-.662.662v5.208a.663.663 0 0 0 .662.662h1.14a.663.663 0 0 0 .662-.662v-5.209a.663.663 0 0 0-.662-.662zm0 .428h1.14a.233.233 0 0 1 .233.233v5.21a.233.233 0 0 1-.233.232h-1.14a.233.233 0 0 1-.233-.233v-5.209a.233.233 0 0 1 .233-.233z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$98($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Homebrew" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Homebrew extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$98, create_fragment$98, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Homify.svelte generated by Svelte v3.23.2 */

        function create_fragment$99(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.5 10.562v.053l-.004.05c-.09 2.328-.058 11.357-.057 11.822.002 1.078-.84 1.943-1.62 1.283l-7.076-5.53c-2.224 2.302-4.358 4.495-4.808 4.925-.992.946-1.81-1.327-1.06-1.808.068-.042 2.254-1.95 4.674-4.05l-5.24-4.095c-.454-.355-.628-.945-.368-1.26.09-.085.21-.13.332-.127.056.002.112.014.165.038 1.62.72 4.015 2.492 6.4 4.327 2.486-2.15 4.873-4.19 5.186-4.363.388-.214.49.353.36.516-.132.166-2.2 2.326-4.467 4.68 2.233 1.73 4.352 3.386 5.69 4.135l.22-10.62c-.174-.207-5.406-7.163-5.973-7.748-.905.782-5.645 6.114-5.884 6.344 1.082.108 5.676.382 8.57.683.73.07 1.216.606-.35.592L3.93 10.392c-.176-.006-.333-.11-.398-.267-.066-.157-.028-.336.096-.456.06-.058 8.153-8.923 8.832-9.487.154-.127.317-.188.487-.183.23.008.416.144.492.227.084.077 4.35 5.94 6.432 8.8.498.678.624 1.137.628 1.502v.032z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$99($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "homify" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Homify extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$99, create_fragment$99, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Honda.svelte generated by Svelte v3.23.2 */

        function create_fragment$9a(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.903 6.87c-.329-3.219-2.47-3.896-4.354-4.205-.946-.16-2.63-.299-3.716-.339-.946-.06-3.168-.09-3.835-.09-.658 0-2.89.03-3.836.09-1.076.04-2.77.18-3.716.339C2.563 2.984.42 3.66.092 6.869c-.08.877-.1 2.023-.09 3.248.03 2.032.2 3.407.3 4.364.069.657.338 2.62.687 3.636.478 1.395.916 1.803 1.424 2.222.937.757 2.471.996 2.79 1.056 1.733.309 5.24.368 6.785.368 1.544 0 5.05-.05 6.784-.368.329-.06 1.863-.29 2.79-1.056.508-.419.946-.827 1.424-2.222.35-1.016.628-2.979.698-3.636.1-.957.279-2.332.299-4.364.04-1.225.01-2.371-.08-3.248m-1.176 5.4c-.189 2.57-.418 4.105-.747 5.22-.289.977-.637 1.624-1.165 2.093-.867.787-2.063.956-2.76 1.056-1.514.229-4.055.299-6.057.299-2.003 0-4.544-.08-6.058-.3-.697-.099-1.893-.268-2.76-1.055-.518-.469-.876-1.126-1.155-2.093-.329-1.105-.558-2.65-.747-5.22-.11-1.544-.09-4.055.08-5.4.258-2.012 1.255-3.019 3.387-3.397.996-.18 2.34-.309 3.606-.369 1.016-.07 2.7-.1 3.637-.09.936-.01 2.62.03 3.636.09 1.275.06 2.61.19 3.606.369 2.142.378 3.139 1.395 3.388 3.397.199 1.345.229 3.856.11 5.4M17.526 3.88c-.548 2.461-.767 3.587-1.216 5.37-.428 1.714-.767 3.298-1.335 4.065-.587.777-1.365.947-1.893 1.006-.279.03-.478.04-1.066.05-.597 0-.797-.02-1.076-.05-.528-.06-1.315-.229-1.892-1.006-.578-.767-.907-2.351-1.335-4.065-.469-1.773-.678-2.909-1.236-5.37 0 0-.548.02-.797.04-.329.02-.588.05-.867.09 0 0 .32 5.061.459 7.203.15 2.252.418 6.057.667 8.927 0 0 .458.07 1.226.12.807.049 1.165.049 1.165.049.329-1.265.747-3.019 1.206-3.766.378-.608.966-.677 1.295-.717.518-.07.956-.08 1.166-.08.199-.01.637 0 1.165.08.329.05.917.11 1.295.717.469.747.877 2.5 1.206 3.766 0 0 .358-.01 1.165-.05a11.35 11.35 0 001.226-.12c.249-2.869.518-6.665.667-8.926.14-2.142.459-7.203.459-7.203-.28-.04-.538-.07-.867-.09-.23-.02-.787-.04-.787-.04Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9a($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Honda" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Honda extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9a, create_fragment$9a, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hootsuite.svelte generated by Svelte v3.23.2 */

        function create_fragment$9b(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.002 0h.023c1.311.004 2.603.322 3.766.928C16.948.332 18.23.022 19.532.022h.676V24l-.656-.002C15.369 24 11.356 22.336 8.4 19.373 5.43 16.43 3.77 12.414 3.791 8.23V.021h.677c1.301 0 2.586.311 3.741.906C9.381.318 10.682 0 12.002 0zm0 .654c-1.381 0-2.676.373-3.791 1.021-1.138-.655-2.428-1.001-3.742-1h-.022V8.23c-.025 8.35 6.764 15.09 15.107 15.113V.675h-.022c-1.313-.001-2.604.343-3.743.999-1.144-.666-2.443-1.018-3.766-1.02h-.021zm3.252 2.754c1.79.002 3.238 1.453 3.237 3.242-.003 1.791-1.454 3.238-3.244 3.236-.616 0-1.22-.176-1.739-.508l-1.516 1.508-1.507-1.516c-1.514.952-3.515.495-4.465-1.02-.952-1.516-.495-3.516 1.021-4.467s3.516-.494 4.467 1.022c.273.437.44.933.483 1.446l.016-.02.015.018c.154-1.667 1.556-2.945 3.232-2.941zM8.76 8.789c1.192.006 2.163-.959 2.168-2.15.001-.219-.031-.436-.096-.644-.243.544-.882.788-1.426.546-.545-.244-.79-.883-.546-1.428.109-.243.304-.437.548-.547-1.137-.355-2.347.276-2.705 1.414-.066.207-.099.424-.1.642-.003 1.192.96 2.163 2.153 2.167h.004zm6.478.019c1.193.003 2.163-.962 2.166-2.155s-.963-2.162-2.155-2.164c-.216-.002-.431.03-.638.094.545.244.789.883.547 1.428-.244.543-.883.787-1.428.545-.245-.109-.439-.307-.549-.553-.355 1.139.279 2.352 1.417 2.707.209.063.423.097.64.098z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9b($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hootsuite" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hootsuite extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9b, create_fragment$9b, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/HotelsDotCom.svelte generated by Svelte v3.23.2 */

        function create_fragment$9c(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.6672 1.3329c-1.4725 0-2.6661 1.1936-2.6661 2.6662v4.334L11.334 8V3.3326C11.3342 1.4927 9.8415 0 8 0 6.1584 0 4.6672 1.4928 4.6672 3.3327v17.3346C4.6672 22.5088 6.1584 24 8 24s3.3343-1.4912 3.3343-3.3327v-5.3338h6.6669v5.3338c0 1.4726 1.1936 2.6661 2.6661 2.6661 1.4726 0 2.6662-1.1935 2.6662-2.666V3.9991c0-1.4725-1.1936-2.6661-2.6662-2.6661M4 3.333c0-.5379.1085-1.051.3023-1.5206-.975.5812-1.6354 1.6353-1.6354 2.8537v15.335c0 1.4323.9084 2.6429 2.1779 3.114C4.3178 22.4379 4 21.59 4 20.6677zm-1.698-.1874C1.327 3.7269.6666 4.7825.6666 5.9993v12.6673c0 1.2184.6604 2.2724 1.6354 2.8537a3.9658 3.9658 0 0 1-.3023-1.5206V4.6662c0-.5379.1085-1.051.3023-1.5206m15.0318.854c0-.6976.217-1.344.5844-1.8803-1.1052.3256-1.9175 1.3362-1.9175 2.5468v2.9002l1.3331.0668zm0 12.0004h-1.333v4.0008c0 1.2106.8122 2.2212 1.9174 2.5467-.3674-.5363-.5844-1.1827-.5844-1.8802zm-3.3334 3.3335c0 1.2106.8122 2.2212 1.919 2.5467-.369-.5363-.586-1.1827-.586-1.8802v-4.0008h-1.333zm1.3333-14.6671c0-.6976.217-1.344.5844-1.8803-1.1052.3256-1.9174 1.3362-1.9174 2.5468v2.133l1.333.0667Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9c($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hotels.com" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class HotelsDotCom extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9c, create_fragment$9c, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Houdini.svelte generated by Svelte v3.23.2 */

        function create_fragment$9d(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 19.635V24h3.824A8.662 8.662 0 0 1 0 19.635zm16.042-4.555c0-4.037-3.253-7.92-8.111-8.089C4.483 6.873 1.801 8.136 0 10.005v4.209c1.224-3.549 4.595-5.158 7.419-5.128 3.531.041 6.251 2.703 6.275 5.72 0 2.878-1.183 4.992-4.436 5.516-1.774.296-4.548-.754-4.436-3.434.065-1.381 1.138-2.162 2.366-2.106-1.207 1.618.39 2.801 1.52 2.561a2.51 2.51 0 0 0 1.966-2.502c0-1.017-.958-2.662-3.333-2.6-2.936.068-4.785 2.183-4.85 4.797-.071 3.28 3.007 5.457 6.174 5.483 4.633.059 7.395-2.984 7.377-7.441zM0 0v6.906a12.855 12.855 0 0 1 7.931-2.609c6.801 0 11.134 4.762 11.131 10.765 0 4.17-1.946 7.308-4.995 8.938H24V0H0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9d($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Houdini" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Houdini extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9d, create_fragment$9d, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Houzz.svelte generated by Svelte v3.23.2 */

        function create_fragment$9e(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.27 0V24H9.32V16.44H14.68V24H22.73V10.37L6.61 5.75V0H1.27Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9e($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Houzz" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Houzz extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9e, create_fragment$9e, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hp.svelte generated by Svelte v3.23.2 */

        function create_fragment$9f(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 24h-.4l2.5-6.7h3.4c.6 0 1.2-.5 1.4-1L21.6 9c.4-1.2-.3-2.2-1.5-2.2h-4.7l-3.9 10.8-2.2 6.1C3.9 22.4 0 17.7 0 12 0 6.5 3.7 1.9 8.8.4L6.5 6.8 2.6 17.3h2.5l3.2-8.9h1.9L7 17.3h2.5l3-8.3c.4-1.2-.2-2.2-1.5-2.2H9L11.5 0h.5c6.6 0 12 5.4 12 12s-5.4 12-12 12zm7.3-15.7h-1.9l-2.7 7.3h1.9l2.7-7.3z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9f($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HP" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9f, create_fragment$9f, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Htmlacademy.svelte generated by Svelte v3.23.2 */

        function create_fragment$9g(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0L2.524.994v17.368L12 24l9.476-5.638V.994L12.099.01 12 0zm8.236 17.657L12 22.557l-8.236-4.9v-7.119l8.2 4.881.014.885-5.626-3.349-.008.86 5.648 3.394.015.908-5.647-3.36-.008.86L12 19.01l5.703-3.412v-.862l-.008.004v-2.805l2.54-1.517v7.238zm-.006-8.162l-2.254 1.328-1.04.613-4.96-2.951-.009.858 4.24 2.521-.037.023-.092.054-.602.355-3.5-2.083-.009.859 2.763 1.643-.652.436-.015.01-2.088-1.23-.008.858 1.37.807-1.395.837-8.16-4.85 8.172-4.912v.001l8.276 4.823zm.006-.864l-8.28-4.882h-.002l-8.19 4.877V2.11L12 1.246l8.237.864v6.52z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9g($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HTML Academy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Htmlacademy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9g, create_fragment$9g, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Html5.svelte generated by Svelte v3.23.2 */

        function create_fragment$9h(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.5 0h21l-1.91 21.563L11.977 24l-8.564-2.438L1.5 0zm7.031 9.75l-.232-2.718 10.059.003.23-2.622L5.412 4.41l.698 8.01h9.126l-.326 3.426-2.91.804-2.955-.81-.188-2.11H6.248l.33 4.171L12 19.351l5.379-1.443.744-8.157H8.531z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9h($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HTML5" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Html5 extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9h, create_fragment$9h, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Huawei.svelte generated by Svelte v3.23.2 */

        function create_fragment$9i(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.67 6.14S1.82 7.91 1.72 9.78v.35c.08 1.51 1.22 2.4 1.22 2.4 1.83 1.79 6.26 4.04 7.3 4.55 0 0 .06.03.1-.01l.02-.04v-.04C7.52 10.8 3.67 6.14 3.67 6.14zM9.65 18.6c-.02-.08-.1-.08-.1-.08l-7.38.26c.8 1.43 2.15 2.53 3.56 2.2.96-.25 3.16-1.78 3.88-2.3.06-.05.04-.09.04-.09zm.08-.78C6.49 15.63.21 12.28.21 12.28c-.15.46-.2.9-.21 1.3v.07c0 1.07.4 1.82.4 1.82.8 1.69 2.34 2.2 2.34 2.2.7.3 1.4.31 1.4.31.12.02 4.4 0 5.54 0 .05 0 .08-.05.08-.05v-.06c0-.03-.03-.05-.03-.05zM9.06 3.19a3.42 3.42 0 00-2.57 3.15v.41c.03.6.16 1.05.16 1.05.66 2.9 3.86 7.65 4.55 8.65.05.05.1.03.1.03a.1.1 0 00.06-.1c1.06-10.6-1.11-13.42-1.11-13.42-.32.02-1.19.23-1.19.23zm8.299 2.27s-.49-1.8-2.44-2.28c0 0-.57-.14-1.17-.22 0 0-2.18 2.81-1.12 13.43.01.07.06.08.06.08.07.03.1-.03.1-.03.72-1.03 3.9-5.76 4.55-8.64 0 0 .36-1.4.02-2.34zm-2.92 13.07s-.07 0-.09.05c0 0-.01.07.03.1.7.51 2.85 2 3.88 2.3 0 0 .16.05.43.06h.14c.69-.02 1.9-.37 3-2.26l-7.4-.25zm7.83-8.41c.14-2.06-1.94-3.97-1.94-3.98 0 0-3.85 4.66-6.67 10.8 0 0-.03.08.02.13l.04.01h.06c1.06-.53 5.46-2.77 7.28-4.54 0 0 1.15-.93 1.21-2.42zm1.52 2.14s-6.28 3.37-9.52 5.55c0 0-.05.04-.03.11 0 0 .03.06.07.06 1.16 0 5.56 0 5.67-.02 0 0 .57-.02 1.27-.29 0 0 1.56-.5 2.37-2.27 0 0 .73-1.45.17-3.14z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9i($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Huawei" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Huawei extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9i, create_fragment$9i, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hubspot.svelte generated by Svelte v3.23.2 */

        function create_fragment$9j(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.164 7.93V5.084a2.198 2.198 0 001.267-1.978v-.067A2.2 2.2 0 0017.238.845h-.067a2.2 2.2 0 00-2.193 2.193v.067a2.196 2.196 0 001.252 1.973l.013.006v2.852a6.22 6.22 0 00-2.969 1.31l.012-.01-7.828-6.095A2.497 2.497 0 104.3 4.656l-.012.006 7.697 5.991a6.176 6.176 0 00-1.038 3.446c0 1.343.425 2.588 1.147 3.607l-.013-.02-2.342 2.343a1.968 1.968 0 00-.58-.095h-.002a2.033 2.033 0 102.033 2.033 1.978 1.978 0 00-.1-.595l.005.014 2.317-2.317a6.247 6.247 0 104.782-11.134l-.036-.005zm-.964 9.378a3.206 3.206 0 113.215-3.207v.002a3.206 3.206 0 01-3.207 3.207z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9j($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "HubSpot" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hubspot extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9j, create_fragment$9j, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hugo.svelte generated by Svelte v3.23.2 */

        function create_fragment$9k(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.754 0a3.998 3.998 0 00-2.049.596L3.33 4.532a4.252 4.252 0 00-2.017 3.615v8.03c0 1.473.79 2.838 2.067 3.574l6.486 3.733a3.88 3.88 0 003.835.018l7.043-3.966a3.817 3.817 0 001.943-3.323V7.752a3.57 3.57 0 00-1.774-3.084L13.817.541a3.998 3.998 0 00-2.063-.54zm.022 1.674c.413-.006.828.1 1.2.315l7.095 4.127c.584.34.941.96.94 1.635v8.462c0 .774-.414 1.484-1.089 1.864l-7.042 3.966a2.199 2.199 0 01-2.179-.01l-6.485-3.734a2.447 2.447 0 01-1.228-2.123v-8.03c0-.893.461-1.72 1.221-2.19l6.376-3.935a2.323 2.323 0 011.19-.347zm-4.7 3.844V18.37h2.69v-5.62h4.46v5.62h2.696V5.518h-2.696v4.681h-4.46V5.518Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9k($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hugo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hugo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9k, create_fragment$9k, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hulu.svelte generated by Svelte v3.23.2 */

        function create_fragment$9l(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.4 7.355h-3.607a5.91 5.91 0 0 0-2.063.405V-.03H2.94v24.06h5.8v-9.51a1.61 1.61 0 0 1 1.56-1.7h3.39a1.59 1.59 0 0 1 1.59 1.56v9.59h5.78V13.54c0-4.41-2.25-6.162-5.9-6.162");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9l($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hulu" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hulu extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9l, create_fragment$9l, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Humblebundle.svelte generated by Svelte v3.23.2 */

        function create_fragment$9m(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.145 23.996c.12-.463.23-.9.343-1.338.692-2.713 1.322-5.44 1.82-8.197.245-1.35.446-2.71.633-4.074.142-1.028.217-2.064.198-3.105-.01-.557-.034-1.116-.193-1.655-.07-.24-.174-.473-.3-.686-.165-.273-.43-.378-.75-.368-.883.026-1.633.363-2.272.96-.727.68-1.202 1.527-1.553 2.445-.166.435-.284.887-.422 1.33-.02.066-.026.123-.115.122C1.04 9.424.545 9.425.05 9.424c-.013 0-.024-.008-.036-.01 0-.193-.02-.385.003-.572.346-2.853 1.57-5.267 3.668-7.226C4.47.882 5.4.373 6.462.142 8.017-.196 9.258.4 9.996 1.822c.375.72.578 1.496.71 2.293.21 1.287.218 2.586.175 3.885-.014.42-.04.84-.062 1.26-.002.054 0 .108 0 .176.057.003.105.008.154.008.905 0 1.81-.002 2.717.005.124 0 .16-.047.18-.16.575-3.113 1.367-6.17 2.39-9.166.024-.074.05-.124.147-.124 1.12.004 2.24.004 3.362.004.017 0 .035.004.07.008l-.193.753C18.89 3.7 18.21 6.65 17.66 9.628c-.288 1.546-.533 3.1-.69 4.664-.086.875-.14 1.752-.113 2.63.016.53.054 1.062.22 1.57.064.202.16.4.273.58.167.26.426.366.74.356 1.16-.033 2.042-.59 2.746-1.47.707-.88 1.133-1.9 1.434-2.98.028-.1.06-.202.076-.306.014-.082.054-.104.13-.104.467.002.933.004 1.4 0 .102-.002.12.043.117.13-.014.804-.157 1.583-.39 2.347-.59 1.928-1.557 3.635-2.992 5.06-.813.81-1.762 1.407-2.88 1.706-.677.183-1.355.212-2.025-.028-.76-.27-1.276-.816-1.66-1.504-.402-.725-.613-1.512-.75-2.322-.24-1.406-.24-2.824-.172-4.242.042-.89.127-1.777.193-2.666.014-.19.016-.19-.174-.19-.855 0-1.71.002-2.566-.002-.104 0-.153.024-.17.137-.27 1.813-.637 3.608-1.074 5.387-.453 1.842-.974 3.664-1.587 5.46-.044.127-.104.16-.233.16-1.065-.006-2.13-.004-3.197-.004h-.17z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9m($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Humble Bundle" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Humblebundle extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9m, create_fragment$9m, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hurriyetemlak.svelte generated by Svelte v3.23.2 */

        function create_fragment$9n(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 16.085L11.994 4.091 0 16.097l3.817 3.812 8.182-8.189 8.189 8.182z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9n($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hurriyetemlak" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hurriyetemlak extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9n, create_fragment$9n, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Husqvarna.svelte generated by Svelte v3.23.2 */

        function create_fragment$9o(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.001 14.457c2.04 0 1.997 0 1.997.645v4.054h2.775V7.927h-2.775v3.371c0 .664.042.662-1.997.662h.001c-2.04 0-1.996.002-1.996-.662v-3.37H7.23v11.228h2.775v-4.054c0-.644-.043-.645 1.996-.645M12 0c1.04 0 1.72.18 2.004.241-.143 1.307-.1 2.355 0 2.657.347 1.006 2.32 1.475 3.115 1.012.878-.523.676-2.109.676-3.155 0 0 1.294.301 2.086.594.644.238 1.593.703 1.593.703.188 1.323.01 3.281-1.316 3.945 1 .985 1.335 2.152 1.764 4.304.346 1.932.265 3.28.243 4.405-.101 1.53-.101 2.354-.468 3.743-.53 1.588-.844 2.335-1.918 3.438C17.599 24.131 14.045 24 12 23.998c-2.045.001-5.598.133-7.779-2.11-1.074-1.104-1.388-1.85-1.918-3.439-.367-1.389-.367-2.213-.469-3.743-.02-1.126-.102-2.473.245-4.405.428-2.152.763-3.319 1.763-4.304-1.326-.664-1.504-2.622-1.316-3.945 0 0 .95-.465 1.593-.703.792-.293 2.085-.594 2.085-.594 0 1.046-.201 2.632.676 3.155.797.463 2.768-.006 3.116-1.012.102-.302.142-1.35 0-2.657C10.28.181 10.959 0 12 0m-.004 21.125c2.387 0 3.149 0 4.331-.322.408-.14 1.143-.341 1.674-1.166.979-1.65.979-4.747.979-6.236 0-1.49 0-4.125-.979-5.754-.53-.846-1.255-1.078-1.674-1.188-1.208-.316-1.983-.297-4.331-.302h.002c-2.348.005-3.123-.014-4.331.302-.418.11-1.143.342-1.674 1.188-.979 1.63-.979 4.264-.979 5.754 0 1.489 0 4.586.98 6.236.53.825 1.264 1.025 1.673 1.166 1.182.323 1.944.322 4.33.322Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9o($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Husqvarna" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Husqvarna extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9o, create_fragment$9o, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hypothesis.svelte generated by Svelte v3.23.2 */

        function create_fragment$9p(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.43 0C2.5 0 1.72 .768 1.72 1.72V18.86C1.72 19.8 2.5 20.57 3.43 20.57H9.38L12 24L14.62 20.57H20.57C21.5 20.57 22.29 19.8 22.29 18.86V1.72C22.29 .77 21.5 0 20.57 0H3.43M5.14 3.43H7.72V9.43S8.58 7.72 10.28 7.72C12 7.72 13.74 8.57 13.74 11.24V17.14H11.16V12C11.16 10.61 10.28 10.07 9.43 10.29C8.57 10.5 7.72 11.41 7.72 13.29V17.14H5.14V3.43M18 13.72C18.95 13.72 19.72 14.5 19.72 15.42A1.71 1.71 0 0 1 18 17.13A1.71 1.71 0 0 1 16.29 15.42C16.29 14.5 17.05 13.71 18 13.71Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9p($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hypothesis" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hypothesis extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9p, create_fragment$9p, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Hyundai.svelte generated by Svelte v3.23.2 */

        function create_fragment$9q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.999 18.145c6.627 0 12.001-2.751 12.001-6.144 0-3.395-5.374-6.146-12.001-6.146C5.374 5.855 0 8.606 0 12.001c0 3.393 5.374 6.144 11.999 6.144m2.26-3.015c-.2.464-.545 1.454-1.336 1.85-.24.119-.537.174-.8.185H12c-2.214 0-4.276-.31-6.002-.834l-.066-.025c-.16-.053-.24-.127-.24-.218 0-.079.043-.14.099-.195l.109-.097c.4-.332 1.598-1.2 3.858-2.067.793-.301 1.786-.679 2.825-.9.608-.126 2.868-.473 1.675 2.301m6.062-6.194c.043-.074.1-.137.203-.142.056-.006.132.007.248.08 1.409.867 2.245 1.952 2.245 3.125 0 2.118-2.724 3.94-6.62 4.735-.248.05-.416.048-.471-.015-.04-.038-.05-.106 0-.19a.815.815 0 01.104-.145c2.12-2.5 3.736-6.189 4.195-7.253.035-.074.068-.147.096-.195M9.777 8.857c.2-.463.545-1.454 1.335-1.846.24-.12.537-.178.8-.185.061-.002.104 0 .12 0 2.217 0 4.276.306 6.004.833.013.006.053.02.066.025.16.054.24.127.24.218 0 .079-.042.137-.098.193a1.89 1.89 0 01-.11.096c-.397.335-1.598 1.201-3.858 2.068-.795.304-1.786.679-2.822.899-.61.13-2.87.474-1.677-2.3M7.6 7.264c.25-.048.415-.048.476.015.035.04.045.106-.002.19a.89.89 0 01-.104.142c-2.12 2.503-3.737 6.189-4.198 7.256a2.313 2.313 0 01-.096.195c-.04.073-.099.136-.2.142-.056.005-.135-.011-.251-.081C1.817 14.256.98 13.172.98 11.999c0-2.118 2.724-3.94 6.62-4.735Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Hyundai" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Hyundai extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9q, create_fragment$9q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Iata.svelte generated by Svelte v3.23.2 */

        function create_fragment$9r(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.418 19.73l.98-4.885H5.99l-.973 4.884zm4.807-1.6h1.012l-.26-1.792zm-2.235 1.6l2.412-4.885h1.57l.99 4.884H9.487l-.088-.58H7.827l-.25.58zm6.439 0l.547-3.674h-1.394l.238-1.233h4.281l-.237 1.233h-1.328L14 19.73zm5.354-1.6h1.012l-.26-1.792zm-2.23 1.6l2.407-4.885h1.57l.99 4.884h-1.487l-.072-.58h-1.57l-.25.58zM24 9.324h-7.495c-.276 1.372-1.228 2.517-3.125 3.308.216.652.951 1.255 1.715 1.255h4.065c.62 0 1.112-.52 1.311-.94H16.34c-.254-.044-.265-.25-.01-.271h4.06c.525 0 1-.448 1.277-.935h-4.73c-.237-.039-.237-.238 0-.277h4.769c.48 0 .918-.558 1.1-.934h-5.232c-.26-.033-.26-.277 0-.282H22.9c.415 0 .819-.454 1.101-.924zm-24 0h7.495c.27 1.372 1.228 2.517 3.12 3.308-.216.652-.952 1.255-1.715 1.255H4.84c-.62 0-1.112-.52-1.311-.94H7.66c.249-.044.265-.25.01-.271H3.607c-.525 0-1-.448-1.272-.935H7.07c.238-.039.238-.238 0-.277H2.3c-.481 0-.918-.558-1.1-.934h5.232c.26-.033.26-.277 0-.282H1.106c-.42 0-.824-.454-1.106-.924zM9.569 5.21c.277.238.586.448.918.58.282-.553.675-1.028 1.129-1.449a4.05 4.05 0 0 0-2.047.869zM8.242 7.937h1.67a5.358 5.358 0 0 1 .454-1.909 4.021 4.021 0 0 1-1.002-.63 3.83 3.83 0 0 0-1.122 2.539zM11.87 6.37v1.566H10.2a4.62 4.62 0 0 1 .414-1.815c.399.144.83.238 1.256.25zm2.561-1.161a3.346 3.346 0 0 1-.918.58 5.243 5.243 0 0 0-1.134-1.443 3.993 3.993 0 0 1 2.052.863zm1.322 2.727h-1.665a5.096 5.096 0 0 0-.442-1.909c.354-.166.69-.376.984-.63a3.723 3.723 0 0 1 1.123 2.539zM12.14 6.37v1.566h1.66c0-.631-.155-1.234-.415-1.815a4.017 4.017 0 0 1-1.245.25zm-2.571 4.57c.277-.216.597-.454.918-.57.299.559.67 1.018 1.129 1.433a4.05 4.05 0 0 1-2.047-.863zM8.242 8.208h1.67c.039.691.182 1.3.454 1.924a4.202 4.202 0 0 0-1.002.625 3.864 3.864 0 0 1-1.122-2.55zm3.628 1.57v-1.57H10.2c.01.63.154 1.255.414 1.814.399-.144.83-.232 1.256-.244zm2.561 1.162a3.41 3.41 0 0 0-.918-.57 5.113 5.113 0 0 1-1.134 1.433 4.088 4.088 0 0 0 2.052-.863zm1.322-2.732h-1.665a5.075 5.075 0 0 1-.442 1.924c.354.166.674.366.984.625a3.806 3.806 0 0 0 1.123-2.55zm-3.612 1.57v-1.57h1.66c0 .63-.155 1.244-.415 1.814a4.01 4.01 0 0 0-1.245-.244zm-.271-5.276a4.387 4.387 0 0 0-1.123 1.382c.36.122.741.222 1.123.222zm.271 0c.443.365.846.846 1.112 1.382a3.26 3.26 0 0 1-1.112.222zm-.271 7.146a4.23 4.23 0 0 1-1.123-1.388c.36-.128.741-.2 1.123-.2zm.271.011c.443-.37.846-.868 1.112-1.4a3.715 3.715 0 0 0-1.112-.198z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9r($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Iata" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Iata extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9r, create_fragment$9r, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ibeacon.svelte generated by Svelte v3.23.2 */

        function create_fragment$9s(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 .053c-6.617 0-12 5.383-12 12 0 6.077 4.541 11.113 10.408 11.894v-.364C4.741 22.804.36 17.931.36 12.053.36 5.635 5.582.413 12 .413s11.64 5.222 11.64 11.64c0 5.878-4.38 10.751-10.048 11.53v.364C19.459 23.166 24 18.13 24 12.053c0-6.617-5.383-12-12-12zm0 1.696c-5.653 0-10.251 4.598-10.251 10.25 0 5.112 3.76 9.362 8.66 10.129v-.366c-4.7-.763-8.3-4.85-8.3-9.762 0-5.454 4.437-9.89 9.891-9.89s9.891 4.436 9.891 9.89c0 4.912-3.6 8.999-8.3 9.762v.366c4.9-.767 8.66-5.017 8.66-10.128 0-5.653-4.598-10.25-10.251-10.25zm0 1.736c-4.695 0-8.515 3.82-8.515 8.515 0 4.151 2.986 7.618 6.923 8.365v-.367C6.671 19.256 3.845 15.952 3.845 12c0-4.496 3.659-8.155 8.155-8.155 4.496 0 8.154 3.659 8.154 8.155 0 3.952-2.825 7.256-6.562 7.998v.367c3.937-.747 6.923-4.214 6.923-8.365 0-4.695-3.82-8.515-8.515-8.515zm0 1.725A6.798 6.798 0 0 0 5.21 12c0 3.196 2.22 5.883 5.198 6.602v-.372C7.63 17.52 5.57 14.996 5.57 12A6.437 6.437 0 0 1 12 5.57 6.437 6.437 0 0 1 18.43 12c0 2.996-2.06 5.52-4.838 6.23v.372c2.979-.719 5.198-3.406 5.198-6.602A6.798 6.798 0 0 0 12 5.21zm0 1.749A5.047 5.047 0 0 0 6.959 12a5.05 5.05 0 0 0 3.45 4.782v-.38A4.689 4.689 0 0 1 7.318 12c0-2.58 2.1-4.68 4.681-4.68s4.68 2.1 4.68 4.68a4.689 4.689 0 0 1-3.088 4.402v.38A5.05 5.05 0 0 0 17.042 12 5.047 5.047 0 0 0 12 6.96zm0 1.737A3.308 3.308 0 0 0 8.696 12c0 1.245.692 2.33 1.712 2.894v-.42a2.943 2.943 0 1 1 3.184 0v.42A3.306 3.306 0 0 0 15.304 12 3.308 3.308 0 0 0 12 8.696zm0 1.712A1.592 1.592 0 0 0 10.408 12 1.592 1.592 0 0 0 12 13.592 1.592 1.592 0 0 0 13.592 12 1.592 1.592 0 0 0 12 10.408Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9s($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "iBeacon" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ibeacon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9s, create_fragment$9s, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ibm.svelte generated by Svelte v3.23.2 */

        function create_fragment$9t(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 16.144h4.667v.668H0zM0 14.862h4.667v.67H0zM1.33 13.583h2.003v.671H1.33zM1.33 12.305h2.003v.67H1.33zM1.33 11.025h2.003v.671H1.33zM1.33 9.744h2.003v.671H1.33zM0 8.466h4.667v.67H0zM0 7.187h4.667v.67H0zM5.332 15.532h7.177c.12-.206.212-.433.267-.67H5.333v.67zM11.95 12.305H6.667v.67h5.843a2.67 2.67 0 00-.558-.67zM6.666 11.025v.671h5.285c.223-.188.41-.414.559-.671H6.666zM12.509 8.466H5.332v.67h7.443a2.891 2.891 0 00-.266-.67zM10.303 7.187H5.332v.67h6.685a2.522 2.522 0 00-1.714-.67zM6.666 9.744h2v.671h-2zM10.667 10.415h2.092c.059-.214.09-.44.09-.671h-2.182v.671zM6.666 13.583h1.999v.671h-2zM10.667 13.583v.671h2.182c0-.23-.031-.457-.09-.671h-2.092zM5.332 16.807l4.97.007c.667 0 1.268-.257 1.717-.67H5.332v.663zM13.334 16.144h3.332v.668h-3.332zM13.334 14.862h3.332v.67h-3.332zM14.665 13.583h2v.671h-2zM14.665 12.305h2v.67h-2zM17.594 8.466h-4.26v.67h4.49zM17.152 7.187h-3.818v.669h4.048zM20.665 16.144H24v.668h-3.335zM20.665 14.862H24v.67h-3.335zM20.665 13.583h2v.671h-2zM20.665 12.305h2v.67h-2zM20.665 11.696h2v-.671h-3.811l-.188.542-.188-.542H14.665v.671h2v-.616l.213.616h3.575l.212-.616zM22.666 9.744h-3.37l-.23.671h3.6zM20.183 7.187l-.231.669H24v-.669zM18.666 16.807l.23-.663h-.461zM18.224 15.532h.884l.238-.67h-1.357zM17.775 14.254h1.782l.235-.671h-2.253zM17.327 12.975h2.679l.229-.67h-3.138zM14.665 10.415h3.602l-.231-.671h-3.371zM19.51 9.136H24v-.67h-4.262z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9t($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "IBM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ibm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9t, create_fragment$9t, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Icloud.svelte generated by Svelte v3.23.2 */

        function create_fragment$9u(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.013 10.726l.001-.028A6.346 6.346 0 0 0 8.09 7.67a3.414 3.414 0 0 0-4.989 2.829A4.72 4.72 0 0 0 0 14.929a4.72 4.72 0 0 0 4.719 4.719h14.807a4.475 4.475 0 0 0 .487-8.922z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9u($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "iCloud" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Icloud extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9u, create_fragment$9u, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Icomoon.svelte generated by Svelte v3.23.2 */

        function create_fragment$9v(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C10.34 0 8.79 .313 7.34 .938A12 12 0 0 0 3.5 3.5A12 12 0 0 0 .937 7.34C.313 8.79 0 10.34 0 12C0 13.66 .313 15.21 .938 16.66A12 12 0 0 0 3.5 20.5A12 12 0 0 0 7.34 23.06C8.79 23.69 10.34 24 12 24C13.66 24 15.21 23.69 16.66 23.06A12 12 0 0 0 20.5 20.5A12 12 0 0 0 23.06 16.66C23.69 15.21 24 13.66 24 12C24 10.34 23.69 8.79 23.06 7.34A12 12 0 0 0 20.5 3.5A12 12 0 0 0 16.66 .937C15.21 .313 13.66 0 12 0M8.88 1.5A11.65 11.65 0 0 1 11.37 3.42A12.31 12.31 0 0 1 13.27 5.87C13.8 6.77 14.2 7.73 14.5 8.77C14.78 9.8 14.93 10.88 14.93 12S14.78 14.2 14.5 15.23A11.71 11.71 0 0 1 13.27 18.13A12.31 12.31 0 0 1 11.37 20.58C10.62 21.33 9.79 21.96 8.88 22.5A11.91 11.91 0 0 1 6.42 20.58A12.31 12.31 0 0 1 4.5 18.13A11.71 11.71 0 0 1 3.31 15.23A11.63 11.63 0 0 1 2.86 12C2.86 10.88 3 9.8 3.31 8.77A11.71 11.71 0 0 1 4.5 5.87A12.31 12.31 0 0 1 6.42 3.42C7.17 2.67 8 2.04 8.88 1.5M8.86 9.23C8.09 9.23 7.44 9.5 6.9 10.04A2.67 2.67 0 0 0 6.09 12C6.09 12.77 6.36 13.42 6.9 13.96C7.44 14.5 8.09 14.77 8.86 14.77C9.63 14.77 10.28 14.5 10.82 13.96C11.36 13.42 11.63 12.77 11.63 12S11.36 10.58 10.82 10.04A2.67 2.67 0 0 0 8.86 9.23Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9v($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "IcoMoon" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Icomoon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9v, create_fragment$9v, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Icon.svelte generated by Svelte v3.23.2 */

        function create_fragment$9w(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.605.021a2.397 2.397 0 00-.47 4.747 2.397 2.397 0 10.47-4.746zm-9.584 2.395C6.73 2.416 2.437 6.707 2.437 12c0 2.142.703 4.121 1.891 5.717l2.586-2.586a5.99 5.99 0 018.236-8.238l2.586-2.586a9.537 9.537 0 00-5.715-1.891zm7.692 3.867L17.127 8.87a5.989 5.989 0 01-8.236 8.238l-2.586 2.584a9.543 9.543 0 005.716 1.893c5.293 0 9.583-4.29 9.583-9.584 0-2.142-.704-4.12-1.891-5.717zM2.396 19.187a2.398 2.398 0 00-.47 4.749 2.402 2.402 0 002.822-2.823 2.399 2.399 0 00-2.352-1.925z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9w($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ICON" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Icon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9w, create_fragment$9w, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Iconfinder.svelte generated by Svelte v3.23.2 */

        function create_fragment$9x(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C4.492 2.746-.885 11.312.502 19.963.502 19.963 4.989 24 12 24c7.01 0 11.496-4.037 11.496-4.037C24.882 11.312 19.508 2.746 12 0zm0 1.846s2.032.726 3.945 2.488c.073.067.13.163.129.277-.001.168-.128.287-.301.287a.496.496 0 01-.137-.027 6.537 6.537 0 00-2.316-.4 6.625 6.625 0 00-3.914 1.273l-.002.002a7.978 7.978 0 016.808.768C20.48 9.11 22.597 14.179 21.902 19c0 0-1.646 1.396-4.129 2.172a.369.369 0 01-.303-.026c-.144-.084-.185-.255-.1-.404a.492.492 0 01.094-.103 6.562 6.562 0 001.504-1.809 6.632 6.632 0 00.856-4.027l-.002-.002a7.949 7.949 0 01-3.838 5.383c-4.42 2.552-9.99 1.882-13.885-1.184 0 0-.388-2.124.182-4.662a.373.373 0 01.176-.25c.145-.084.31-.033.396.117a.448.448 0 01.045.13c.126.762.405 1.5.814 2.208a6.637 6.637 0 003.059 2.756 7.96 7.96 0 01-1.672-2.033 7.928 7.928 0 01-1.066-4.205C4.128 8.047 7.464 3.659 12 1.846zm0 7.623c-2.726 0-5.117.93-6.483 2.332-.064.32-.1.65-.1.984 0 3.146 2.947 5.695 6.583 5.695 3.635 0 6.584-2.549 6.584-5.695 0-.334-.038-.664-.102-.984C17.116 10.4 14.724 9.469 12 9.469zm0 .693a3.12 3.12 0 010 6.238 3.118 3.118 0 01-2.872-4.336 1.3 1.3 0 101.657-1.656A3.108 3.108 0 0112 10.162z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9x($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Iconfinder" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Iconfinder extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9x, create_fragment$9x, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Iconify.svelte generated by Svelte v3.23.2 */

        function create_fragment$9y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 19.5c3.75 0 7.159-3.379 6.768-4.125-.393-.75-2.268 1.875-6.768 1.875s-6-2.625-6.375-1.875S8.25 19.5 12 19.5zm4.125-12c.623 0 1.125.502 1.125 1.125v1.5c0 .623-.502 1.125-1.125 1.125A1.123 1.123 0 0115 10.125v-1.5c0-.623.502-1.125 1.125-1.125zm-8.25 0C8.498 7.5 9 8.002 9 8.625v1.5c0 .623-.502 1.125-1.125 1.125a1.123 1.123 0 01-1.125-1.125v-1.5c0-.623.502-1.125 1.125-1.125zM12 0C5.381 0 0 5.381 0 12s5.381 12 12 12 12-5.381 12-12S18.619 0 12 0zm0 1.5c5.808 0 10.5 4.692 10.5 10.5S17.808 22.5 12 22.5 1.5 17.808 1.5 12 6.192 1.5 12 1.5Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Iconify" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Iconify extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9y, create_fragment$9y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Iconjar.svelte generated by Svelte v3.23.2 */

        function create_fragment$9z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.506 5.875c-.492 0-.936-.453-.936-.954 0-1.155 2.858-2.01 6.11-2.01.295 0 .492 0 .492-.25 0-.452-.985-.602-.985-1.355 0-.804.936-1.306 2.118-1.306 1.183 0 2.119.502 2.119 1.306 0 .753-.985.853-.985 1.355 0 .151.148.251.492.251 3.252 0 6.16.803 6.16 2.009a.944.944 0 0 1-.937.953H5.507zM20.238 10.443c1.183.753 1.626 2.109 1.43 3.365l-1.38 7.58C19.992 22.897 18.71 24 17.182 24H7.526C6 24 4.718 22.896 4.422 21.389l-1.38-7.581a3.307 3.307 0 0 1 1.479-3.315c.69-.501.837-1.355 0-1.656-1.183-.452-.937-1.908.246-1.908h7.193c1.133 0 2.514.853 2.514 3.615 0 2.762-1.282 2.51-1.282 4.468 0 .854.69 1.758 1.527 1.859 1.43.15 2.267-.402 2.267-2.41 0-2.06-1.182-3.013-1.182-4.72 0-2.059 1.28-2.863 2.118-2.863h2.07c1.182 0 1.429 1.457.246 1.909-.837.35-.69 1.205 0 1.656z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "IconJar" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Iconjar extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9z, create_fragment$9z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Icq.svelte generated by Svelte v3.23.2 */

        function create_fragment$9A(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.406.133C14.65.07 13.93.223 13.226.6c-.94.503-1.61 1.275-1.912 2.28v.067l-.035.235-.134-.235-.335-.603c-.536-.837-1.206-1.34-2.044-1.574C8.03.604 7.426.673 6.79 1.01c-.705.436-1.106 1.106-1.274 2.045-.168.972 0 1.91.502 2.847l.236.336-.807-.267c-1.005-.236-1.944-.104-2.883.4C1.592 6.87.99 7.576.588 8.55c-.37.938-.336 1.843.133 2.68.202.37.504.67.772.872.402.402.905.636 1.508.736l.234.066-.502.438c-.47.402-.738.903-.906 1.406-.168.603-.1 1.207.236 1.777.17.268.334.503.602.67.268.235.604.403 1.006.436.738.17 1.508.168 2.346-.1l-.604 1.005-.168.436c-.335 1.074-.233 2.01.27 2.983.235.37.5.705.77 1.006.4.368.906.602 1.51.77 1.004.268 2.01.236 2.98-.267.94-.503 1.543-1.31 1.845-2.315l.032-.2c.637.703 1.24 1.173 1.912 1.34.67.202 1.34.17 1.944-.233.57-.335.973-.906 1.174-1.61.168-.738.168-1.474 0-2.312.335.235.67.4 1.072.502 1.073.335 2.01.3 2.95-.2.904-.504 1.508-1.308 1.81-2.347.268-1.005.202-1.977-.3-2.916l-.17-.27c-.267-.402-.537-.804-.94-1.072-.334-.235-.735-.402-1.104-.57 1.04-.503 1.776-1.207 2.11-2.112.236-.738.17-1.342-.167-1.945v-.066c-.402-.67-.937-1.105-1.775-1.34-.503-.1-1.072-.102-1.574-.068l-1.108.235.37-.838c.334-1.073.235-2.112-.335-3.084l-.1-.17c-.503-.838-1.24-1.34-2.246-1.607-.26-.067-.516-.113-.768-.133zm-.57 1.414c.323-.03.65.012.967.13.704.166 1.207.534 1.51 1.104v.003c.168.335.267.736.267 1.172l-.1.738c-.134.37-.302.703-.503 1.004l-3.016 3.69c-.3-.235-.637-.403-.972-.57l-.336-3.79-.033-1.34.032-.335c.168-.67.638-1.173 1.24-1.508.302-.168.62-.268.944-.297zm-6.883.537c.134-.004.276.03.41.096.603.168 1.106.603 1.508 1.44.17.336.336.67.403 1.073l.67 3.957-.504.168-2.983-3.252-.168-.334c-.27-.604-.435-1.173-.368-1.777v-.002c.034-.603.268-1.003.67-1.238.1-.084.227-.127.36-.13zm12.13 5.033c.15 0 .297.007.448.024.57.068.972.337 1.173.74l.135.433-.067.335c-.234.603-.738 1.074-1.575 1.442-.335.168-.703.235-1.105.3l-4.123.503-.067-.235-.068-.1.135-.167 3.387-2.816.4-.166.002-.002c.45-.2.885-.286 1.328-.29zM4.622 7.3c.16.008.324.033.49.075v.002l.908.367 2.95 2.147c-.27.336-.435.67-.536 1.005l-4.828.603-.334-.066c-.603-.1-1.007-.37-1.276-.87-.27-.503-.267-1.006-.066-1.51.235-.636.67-1.14 1.306-1.407.453-.252.906-.373 1.387-.346zm7.16 2.69c.604 0 1.175.236 1.544.604.47.47.67.973.67 1.576 0 .603-.2 1.172-.67 1.574-.436.436-.94.67-1.543.67-.636 0-1.17-.235-1.573-.67-.436-.402-.67-.97-.67-1.574 0-.603.234-1.107.67-1.576.402-.37.937-.604 1.574-.604zm8.415 2.58l.336.035c.504.168.973.468 1.24.97.336.37.503.873.503 1.443l-.1.67c-.167.67-.57 1.173-1.14 1.44-.603.336-1.207.403-1.877.17-.402-.1-.67-.268-.904-.536l-3.52-2.918.235-.502.1-.403 3.788-.335 1.34-.035zm-6.636 2.448l1.407 1.44.87 1.073.17.337c.3.57.468 1.105.4 1.742-.066.602-.267 1.038-.67 1.206-.234.168-.502.17-.77.135-.637-.166-1.14-.668-1.508-1.473l-.403-1.108-.502-2.917.568-.2.436-.235zm-3.62.068c.334.167.67.334 1.04.367.066 1.14.165 2.347.332 3.654v1.342l-.033.333c-.236.603-.638 1.107-1.24 1.375-.604.335-1.24.402-1.845.235-.67-.167-1.173-.57-1.44-1.106-.17-.335-.304-.74-.304-1.14l.17-.77c.066-.335.235-.67.503-.94l2.816-3.35z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9A($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ICQ" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Icq extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9A, create_fragment$9A, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ideal.svelte generated by Svelte v3.23.2 */

        function create_fragment$9B(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.975 2.61v18.782h11.411c6.89 0 10.64-3.21 10.64-9.415 0-6.377-4.064-9.367-10.64-9.367H.975zm11.411-.975C22.491 1.635 24 8.115 24 11.977c0 6.7-4.124 10.39-11.614 10.39H0V1.635h12.386z M2.506 13.357h3.653v6.503H2.506z M6.602 10.082a2.27 2.27 0 1 1-4.54 0 2.27 2.27 0 0 1 4.54 0m1.396-1.057v2.12h.65c.45 0 .867-.13.867-1.077 0-.924-.463-1.043-.867-1.043h-.65zm10.85-1.054h1.053v3.174h1.56c-.428-5.758-4.958-7.002-9.074-7.002H7.999v3.83h.65c1.183 0 1.92.803 1.92 2.095 0 1.333-.719 2.129-1.92 2.129h-.65v7.665h4.388c6.692 0 9.021-3.107 9.103-7.665h-2.64V7.97zm-2.93 2.358h.76l-.348-1.195h-.063l-.35 1.195zm-1.643 1.87l1.274-4.228h1.497l1.274 4.227h-1.095l-.239-.818H15.61l-.24.818h-1.095zm-.505-1.054v1.052h-2.603V7.973h2.519v1.052h-1.467v.49h1.387v1.05H12.22v.58h1.55z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9B($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "iDEAL" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ideal extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9B, create_fragment$9B, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ifixit.svelte generated by Svelte v3.23.2 */

        function create_fragment$9C(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.345 12.506l2.37 3.131c.198.261.211.69.025.961l-.119.177c-.181.27-.55.645-.814.831l-.285.201c-.266.195-.697.195-.956-.016l-3.135-2.369c-.255-.195-.681-.195-.94 0l-3.136 2.369c-.258.211-.689.211-.956.03l-.207-.135c-.27-.181-.641-.556-.825-.81l-.181-.256c-.186-.27-.18-.689.018-.96l2.377-3.149c.195-.256.195-.675 0-.945L6.197 8.43c-.194-.263-.203-.69-.013-.957l.2-.285c.187-.264.56-.629.828-.814l.175-.119c.27-.196.703-.182.961.014l3.135 2.37c.26.195.684.195.942 0l3.135-2.385c.258-.195.698-.226.979-.061l.33.195c.28.165.639.524.795.81l.12.21c.154.285.123.721-.075.99l-2.37 3.135c-.194.255-.194.676 0 .945l.006.028zM12 0C5.37 0 0 5.373 0 12s5.37 12 12 12c6.627 0 12-5.373 12-12S18.627 0 12 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9C($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "iFixit" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ifixit extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9C, create_fragment$9C, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ifood.svelte generated by Svelte v3.23.2 */

        function create_fragment$9D(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.428 1.67c-4.65 0-7.184 4.149-7.184 6.998 0 2.294 2.2 3.299 4.25 3.299l-.006-.006c4.244 0 7.184-3.854 7.184-6.998 0-2.29-2.175-3.293-4.244-3.293zm11.328 0c-4.65 0-7.184 4.149-7.184 6.998 0 2.294 2.2 3.299 4.25 3.299l-.006-.006C21.061 11.96 24 8.107 24 4.963c0-2.29-2.18-3.293-4.244-3.293zM14.172 14.52l2.435 1.834c-2.17 2.07-6.124 3.525-9.353 3.17A8.913 8.913 0 01.23 14.541H0a9.598 9.598 0 008.828 7.758c3.814.24 7.323-.905 9.947-3.13l-.004.007 1.08 2.988 1.555-7.623-7.234-.02Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9D($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "iFood" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ifood extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9D, create_fragment$9D, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ifttt.svelte generated by Svelte v3.23.2 */

        function create_fragment$9E(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 8.82h2.024v6.36H0zm11.566 0h-3.47v2.024h1.446v4.337h2.024v-4.337h1.446V8.82zm5.494 0h-3.47v2.024h1.446v4.337h2.024v-4.337h1.446V8.82zm5.494 0h-3.47v2.024h1.446v4.337h2.024v-4.337H24V8.82zM7.518 10.843V8.82H2.892v6.36h2.024v-1.734H6.65v-2.024H4.916v-.578z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9E($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "IFTTT" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ifttt extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9E, create_fragment$9E, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Iheartradio.svelte generated by Svelte v3.23.2 */

        function create_fragment$9F(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.403 21.983c.597 0 1.023-.306 1.023-.817v-.012c0-.489-.375-.784-1.017-.784H3.182v1.613zm-1.67-1.8c0-.125.102-.228.221-.228h1.489c.488 0 .88.148 1.13.398.193.193.307.472.307.784v.011c0 .654-.443 1.034-1.062 1.154l.988 1.272c.046.051.074.102.074.164 0 .12-.114.222-.227.222-.091 0-.16-.05-.21-.12l-1.12-1.453H3.183v1.346a.228.228 0 01-.228.227.227.227 0 01-.221-.227v-3.55m6.674 2.29l-.914-2.035-.915 2.034zm-2.812 1.164l1.614-3.528c.056-.125.142-.2.284-.2h.022c.137 0 .228.075.279.2l1.613 3.522a.31.31 0 01.029.113c0 .12-.097.216-.216.216-.108 0-.182-.074-.222-.165l-.415-.914H7.402l-.415.926c-.04.097-.113.153-.216.153a.204.204 0 01-.204-.204.26.26 0 01.028-.12m6.078-.118c1.005 0 1.647-.682 1.647-1.563v-.011c0-.88-.642-1.574-1.647-1.574h-.932v3.148zm-1.38-3.335c0-.125.102-.228.221-.228h1.16c1.249 0 2.112.858 2.112 1.977v.012c0 1.119-.863 1.988-2.113 1.988h-1.159a.226.226 0 01-.221-.227v-3.522m4.481-.029c0-.124.103-.227.222-.227.125 0 .227.103.227.227v3.579a.228.228 0 01-.227.227.227.227 0 01-.222-.227v-3.579m5.027 1.801v-.011c0-.904-.659-1.642-1.568-1.642s-1.556.727-1.556 1.63v.012c0 .903.659 1.642 1.567 1.642.91 0 1.557-.728 1.557-1.631zm-3.59 0v-.011c0-1.097.824-2.057 2.033-2.057 1.21 0 2.023.949 2.023 2.045v.012c0 1.096-.824 2.056-2.034 2.056s-2.022-.949-2.022-2.045m2.03-17.192c0 1.397-.754 2.773-2.242 4.092a.345.345 0 01-.458-.517c1.333-1.182 2.01-2.385 2.01-3.575v-.016c0-.966-.606-2.103-1.38-2.588a.345.345 0 11.367-.586c.97.61 1.703 1.974 1.703 3.174zM14.76 7.677a.345.345 0 11-.337-.602c.799-.448 1.336-1.318 1.339-2.167a2.096 2.096 0 00-1.124-1.855.345.345 0 11.321-.611 2.785 2.785 0 011.493 2.46v.011c-.004 1.09-.683 2.199-1.692 2.764zm-2.772-1.015a1.498 1.498 0 11.001-2.997 1.498 1.498 0 01-.001 2.997zm-2.303.882a.345.345 0 01-.47.133c-1.009-.565-1.688-1.674-1.692-2.764v-.01a2.785 2.785 0 011.493-2.461.346.346 0 01.321.611 2.096 2.096 0 00-1.124 1.855c.003.849.54 1.719 1.34 2.166a.345.345 0 01.132.47zM7.464 8.825a.344.344 0 01-.488.03C5.49 7.536 4.734 6.16 4.734 4.763v-.016c0-1.2.732-2.564 1.703-3.174a.346.346 0 01.367.586c-.774.485-1.38 1.622-1.38 2.588v.016c0 1.19.677 2.393 2.01 3.575a.345.345 0 01.03.487zM16.152 0c-1.727 0-3.27.915-4.164 2.252C11.094.915 9.55 0 7.823 0A4.982 4.982 0 002.84 4.983c0 1.746 1.106 3.005 2.261 4.17l4.518 4.272a.371.371 0 00.626-.27V9.827c0-.963.78-1.743 1.743-1.745a1.745 1.745 0 011.742 1.745v3.328c0 .326.39.493.626.27l4.518-4.272c1.155-1.165 2.261-2.424 2.261-4.17A4.982 4.982 0 0016.152 0M4.582 14.766h1.194v1.612h1.532v-1.612H8.5v4.307H7.308v-1.637H5.776v1.637H4.582v-4.307m6.527 2.353a.563.563 0 00-.578-.587c-.308 0-.55.238-.578.587zm-2.264.305v-.012c0-.972.696-1.741 1.68-1.741 1.15 0 1.68.842 1.68 1.82 0 .075 0 .16-.007.24H9.971c.093.364.357.549.72.549.277 0 .498-.105.738-.34l.647.536c-.32.406-.782.677-1.447.677-1.045 0-1.784-.695-1.784-1.729m7.29-1.68h1.17v.67c.19-.454.498-.75 1.051-.725v1.23h-.098c-.609 0-.954.351-.954 1.12v1.034h-1.168v-3.329m2.95 2.295v-1.353h-.393v-.942h.393v-.842h1.17v.842h.775v.942h-.775v1.126c0 .234.105.332.32.332.153 0 .301-.043.442-.11v.916c-.209.117-.485.19-.812.19-.7 0-1.12-.307-1.12-1.1m-15.65-3.584a.62.62 0 100 1.24.62.62 0 000-1.24m10.502 3.952c-.303.013-.483-.161-.483-.371 0-.203.16-.307.454-.307h.667v.036c-.004.137-.06.617-.638.642zm1.746-1.008c0-1.033-.739-1.729-1.784-1.729-.665 0-1.126.271-1.447.677l.647.536c.24-.234.461-.34.738-.34.359 0 .621.182.716.537l.001.025-.77.003c-.956.013-1.458.37-1.458 1.045 0 .65.464.999 1.262.999.432 0 .764-.17.987-.401v.32h1.106v-1.628l.002-.032V17.4M3.458 15.99h-.043a.61.61 0 00-.61.61v2.474h1.263v-2.474a.61.61 0 00-.61-.61");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9F($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "iHeartRadio" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Iheartradio extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9F, create_fragment$9F, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Imdb.svelte generated by Svelte v3.23.2 */

        function create_fragment$9G(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.31 9.588v.005c-.077-.048-.227-.07-.42-.07v4.815c.27 0 .44-.06.5-.165.062-.104.095-.405.095-.885v-2.866c0-.33-.004-.54-.033-.63-.022-.096-.067-.163-.14-.204zM22.416 0H1.62C.742.06.06.744 0 1.596V22.38c.06.874.712 1.542 1.555 1.617.015.003.03.003.045.003h20.845c.88-.088 1.55-.826 1.555-1.71V1.71C24 .82 23.305.07 22.416 0zM4.792 15.626H2.887V8.26h1.905v7.366zm6.54-.002H9.67v-4.97L9 15.623H7.812l-.698-4.86-.007 4.86H5.44V8.26h2.468c.083.523.16 1.048.23 1.574l.27 1.87.442-3.444h2.483v7.364zm4.977-2.18c0 .655-.044 1.094-.104 1.32-.062.22-.17.4-.326.52-.15.13-.34.218-.57.266-.223.045-.57.075-1.02.075l-.004-.002H11.98V8.26h1.426c.914 0 1.45.047 1.77.128.325.09.575.225.745.42.165.18.273.404.313.645.05.235.076.705.076 1.402v2.588zm4.944.475c0 .45-.045.764-.09.99-.06.224-.195.404-.405.568-.226.166-.48.24-.78.24-.22 0-.5-.06-.68-.136-.19-.094-.358-.237-.515-.427l-.116.47h-1.717V8.26l-.02-.003h1.8v2.4c.15-.175.315-.31.51-.4.196-.083.466-.127.69-.127.226-.003.45.036.66.115.17.07.32.185.436.33.09.125.15.27.18.42.03.138.044.43.044.87v2.054zM19.08 11.205c-.12 0-.194.04-.225.12-.03.08-.06.29-.06.624v1.946c0 .324.03.533.06.623.04.086.13.14.226.134.12 0 .272-.047.3-.14.03-.097.046-.32.046-.674l.03-.002v-1.89c0-.303-.015-.508-.06-.603-.044-.1-.195-.14-.315-.14z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9G($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "IMDb" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Imdb extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9G, create_fragment$9G, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Imgur.svelte generated by Svelte v3.23.2 */

        function create_fragment$9H(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.147 3.043c-.002-.113-.069-.182-.189-.191a14.117 14.117 0 00-.51-.045l-.162-.01a21.998 21.998 0 00-1.085-.046l-.217-.005c-.172-.003-.35-.004-.532-.004l-.189-.001c-.295 0-.601.003-.919.01l-.106.003a55.86 55.86 0 00-.87.026l-.237.009c-.335.013-.676.029-1.027.049l-.012.001c-.357.021-.724.045-1.095.071l-.275.021c-.304.023-.609.048-.92.076l-.25.021c-.38.035-.766.074-1.156.115-.08.009-.161.019-.242.027-.319.035-.641.073-.965.113l-.33.042c-.403.051-.806.105-1.212.164a.547.547 0 00-.154.045.303.303 0 00-.097.074l-.003.002c-.045.055-.047.12.004.179.003.004.002.008.005.012l3.488 3.456-6.629 6.596c-.069.067-.068.165 0 .251.856 1.093 1.44 1.793 2.143 2.492.699.703 1.398 1.286 2.493 2.143a.216.216 0 00.132.051.167.167 0 00.119-.051l6.597-6.629 3.455 3.488a.143.143 0 00.101.047c.096 0 .187-.118.212-.292.746-5.141.882-10.051.634-12.31z M15.87 24l6.356-6.357.026-.026.156-.155-.006-.006a3.144 3.144 0 00.822-1.711c.804-5.53.903-10.591.654-12.952a2.904 2.904 0 00-.834-1.812 2.96 2.96 0 00-1.816-.855C20.458.042 19.476 0 18.318 0c-2.999 0-6.667.284-10.063.777a3.143 3.143 0 00-1.887.991L0 8.137V24H15.87zm1.528-6.707c-.151 0-.563.405-.563.613a.1.1 0 01-.099.1.1.1 0 01-.099-.1c0-.208-.411-.613-.563-.613a.1.1 0 01-.099-.1c0-.054.044-.098.099-.098.152 0 .563-.404.563-.614 0-.055.044-.098.099-.098.054 0 .099.043.099.098 0 .21.412.614.563.614a.1.1 0 010 .198zM5.4 7.045c.197 0 .735-.528.735-.801a.13.13 0 01.128-.129c.071 0 .128.058.128.129 0 .272.538.801.735.801.071 0 .128.057.128.128a.128.128 0 01-.128.128c-.197 0-.735.528-.735.801a.128.128 0 01-.128.128.128.128 0 01-.128-.128c0-.273-.538-.801-.735-.801a.128.128 0 010-.256zm-3.99 3.26c0-.065.057-.098.119-.118.69-.228 1.269-.8 1.403-1.554.011-.064.053-.118.118-.118.066 0 .107.054.119.118.133.754.711 1.326 1.401 1.554.062.02.118.053.118.118s-.056.098-.118.119c-.69.227-1.269.799-1.403 1.553-.011.064-.053.119-.119.119-.065 0-.106-.054-.118-.119-.134-.754-.713-1.326-1.403-1.553-.061-.022-.117-.054-.117-.119zm1.565 9.307c-.113 0-.42.302-.42.459 0 .04-.034.073-.074.073a.074.074 0 01-.074-.073c0-.157-.307-.459-.42-.459a.074.074 0 01-.074-.073c0-.039.034-.073.074-.073.113 0 .42-.302.42-.457 0-.042.033-.073.074-.073.04 0 .074.031.074.073 0 .155.307.457.42.457.04 0 .073.034.073.073a.073.073 0 01-.073.073zm.568-3.047c-.14 0-.521.375-.521.568a.092.092 0 11-.183 0c0-.193-.381-.568-.521-.568a.09.09 0 01-.091-.09c0-.051.041-.092.091-.092.14 0 .521-.375.521-.568a.09.09 0 01.092-.09.09.09 0 01.091.09c0 .193.381.568.521.568a.091.091 0 010 .182zm3.334 4.382c-.203 0-.758.546-.758.827 0 .073-.06.133-.132.133a.133.133 0 01-.133-.133c0-.281-.555-.827-.758-.827a.134.134 0 01-.133-.133c0-.073.059-.132.133-.132.204 0 .758-.545.758-.828 0-.071.06-.132.133-.132.073 0 .132.061.132.132 0 .283.555.828.758.828.074 0 .133.059.133.132a.133.133 0 01-.133.133zm1.922-.806c-1.086-.851-1.869-1.498-2.653-2.287-.789-.784-1.436-1.566-2.287-2.654-.626-.8-.566-1.897.144-2.607l.001-.001.002-.001L9.364 7.26 7.149 5.066l-.003-.003-.002-.003c-.52-.52-.7-1.27-.472-1.958.148-.447.464-.802.867-1.049a1.983 1.983 0 01.371-.19 2.1 2.1 0 01.468-.131c.005 0 .009-.003.014-.004C11.746 1.24 15.363.96 18.317.96h.002c1.125 0 2.072.041 2.818.121.469.046.903.249 1.228.576.328.331.525.767.562 1.237.243 2.311.144 7.253-.651 12.714-.001.01-.006.016-.007.025a2.258 2.258 0 01-.18.586c-.006.014-.01.028-.018.042-.333.699-1.001 1.163-1.771 1.163-.51 0-.992-.2-1.358-.567l-.003-.002-.004-.004-2.192-2.215-5.333 5.359-.001.002h-.001a1.94 1.94 0 01-1.378.573c-.44 0-.877-.151-1.231-.429zm2.576 2.09c-.139 0-.518.373-.518.566a.09.09 0 01-.091.09.09.09 0 01-.09-.09c0-.193-.379-.566-.519-.566a.09.09 0 110-.18c.139 0 .519-.373.519-.566a.09.09 0 01.09-.09c.05 0 .091.041.091.09 0 .193.379.566.518.566.05 0 .091.039.091.09s-.04.09-.091.09zm2.115-2.437c.248 0 .922-.662.922-1.003 0-.088.072-.161.161-.161.088 0 .161.073.161.161 0 .341.674 1.003.921 1.003.089 0 .161.073.161.161a.16.16 0 01-.161.161c-.247 0-.921.662-.921 1.005a.162.162 0 01-.161.162.162.162 0 01-.161-.162c0-.343-.674-1.005-.922-1.005a.161.161 0 010-.322z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9H($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Imgur" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Imgur extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9H, create_fragment$9H, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Indeed.svelte generated by Svelte v3.23.2 */

        function create_fragment$9I(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.822 10.308a3.018 3.018 0 111.32-4.038 3.006 3.006 0 01-1.32 4.044zM11.6.572c2.47-.901 5.294-.852 7.408.982a3.587 3.587 0 011.023 1.37c.213.69-.749-.07-.88-.168a9.407 9.407 0 00-2.15-1.095C12.837.386 8.897 2.707 6.463 6.316a19.505 19.505 0 00-2.248 5.126 2.918 2.918 0 01-.213.642c-.107.204-.049-.547-.049-.572a15.821 15.821 0 01.43-2.239C5.511 5.34 8.01 2.065 11.6.565zm.037 20.993v-8.763c.249.025.486.037.736.037a6.167 6.167 0 003.219-.895v9.62c0 .822-.15 1.43-.52 1.826A1.874 1.874 0 0113.62 24a1.825 1.825 0 01-1.427-.609c-.368-.404-.56-1.013-.56-1.825z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9I($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Indeed" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Indeed extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9I, create_fragment$9I, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Influxdb.svelte generated by Svelte v3.23.2 */

        function create_fragment$9J(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.775 14.443L21.482 4.5c-.128-.536-.621-1.093-1.178-1.243L9.868.043C9.739 0 9.589 0 9.418 0c-.45 0-.9.171-1.222.45L.718 7.414C.31 7.78.096 8.507.225 9.021l2.443 10.65c.128.536.621 1.093 1.178 1.243l9.772 3.043c.128.043.278.043.45.043.45 0 .9-.171 1.221-.45l7.993-7.436c.407-.428.622-1.114.493-1.671zM10.961 2.4l7.178 2.207c.279.086.279.214 0 .279l-3.771.857c-.279.086-.686-.043-.879-.257l-2.614-2.829c-.236-.236-.193-.343.086-.257zm4.478 12.857c.086.279-.107.45-.385.364l-7.736-2.4c-.279-.085-.343-.321-.129-.514L13.104 7.2c.214-.214.45-.129.514.15zM2.69 8.25L8.968 2.4c.214-.214.536-.171.75.021l3.15 3.408c.214.214.171.535-.022.75l-6.278 5.85c-.214.214-.536.171-.75-.022L2.668 9c-.214-.236-.193-.579.021-.75zm1.522 9.257l-1.65-7.286c-.086-.278.043-.342.235-.128l2.615 2.828c.214.215.278.622.214.9l-1.136 3.686c-.085.3-.214.3-.278 0zm9.193 4.286l-8.208-2.55a.555.555 0 01-.364-.686l1.372-4.414a.555.555 0 01.685-.364l8.207 2.528c.279.086.45.386.365.686l-1.372 4.414a.598.598 0 01-.685.386zm7.285-5.979l-5.485 5.1c-.215.215-.322.129-.236-.15l1.136-3.685c.085-.279.385-.579.685-.622l3.772-.857c.278-.107.321.021.128.214zm.6-1.114l-4.521 1.029c-.279.085-.579-.108-.643-.386l-1.929-8.357c-.085-.279.108-.579.386-.643l4.522-1.029c.278-.085.578.107.642.386l1.929 8.357c.064.322-.107.6-.386.643z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9J($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "InfluxDB" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Influxdb extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9J, create_fragment$9J, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Inkscape.svelte generated by Svelte v3.23.2 */

        function create_fragment$9K(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.872.191c-.745-.011-1.464.278-1.993.804l-8.825 9.038c-3.343 3.34 2.164 3.061 4.154 4.325.922.602-2.955 1.371-2.164 2.164.771.793 4.65 1.521 5.422 2.293.771.791-1.564 1.627-.793 2.418.75.793 2.549.043 2.87 1.842.235 1.328 3.3.666 4.672-.471.854-.729-1.479-.729-.708-1.521 1.929-1.949 3.642-.875 4.349-2.676.387-.963-2.913-1.65-2.034-2.271 2.101-1.477 9.812-2.227 6.255-5.782L13.93.995c-.56-.521-1.295-.807-2.058-.804zm.075.859c.529.003 1.06.201 1.444.584l3.492 3.557c.323.321.323.986.129 1.178l-1.734-1.412-.343 2.077-1.435-.772-2.336 1.478-.771-3.105-1.242 2.698-3.107-.022c-.6 0-.514-.621.107-1.242 1.221-1.35 3.6-3.64 4.35-4.433.385-.396.915-.589 1.445-.584l.001-.002zm9.755 16.276c-.74.025-1.496.395-1.689 1.08 0 .449 3.492.707 3.301-.107-.141-.686-.87-1.002-1.611-.975v.002zM6.356 19.271c-1.008.059-2.088.791-1.232 1.512.791.686 1.992-.15 2.377-1.113-.24-.316-.686-.426-1.143-.398h-.002zm13.229.077c-.986.9.17 1.842 1.134 1.221.258-.173-.021-1.005-1.134-1.221z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9K($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Inkscape" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Inkscape extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9K, create_fragment$9K, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Insomnia.svelte generated by Svelte v3.23.2 */

        function create_fragment$9L(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.417 0 0 5.417 0 12s5.417 12 12 12 12-5.417 12-12S18.583 0 12 0zm0 2.478c5.256 0 9.522 4.266 9.522 9.522S17.256 21.522 12 21.522 2.478 17.256 2.478 12c0-.885.12-1.741.347-2.554a4.76 4.76 0 0 0 3.925 2.066 4.764 4.764 0 0 0 4.762-4.762 4.758 4.758 0 0 0-2.067-3.925A9.526 9.526 0 0 1 12 2.478Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9L($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Insomnia" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Insomnia extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9L, create_fragment$9L, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Instacart.svelte generated by Svelte v3.23.2 */

        function create_fragment$9M(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.629 9.619c1.421 1.429 2.58 3.766 1.917 5.152-1.778 3.715-15.04 10.226-16.169 9.1C.252 22.746 6.768 9.476 10.481 7.697c1.388-.66 3.724.51 5.152 1.92l-.005.014v-.012zm7.028-1.566c-.231-.855-.821-1.717-1.7-1.82-1.61-.186-4.151 2.663-3.971 3.339.181.69 3.766 1.875 5.1.915.691-.494.781-1.56.556-2.414l.015-.02zM17.666.158c1.198.324 2.407 1.148 2.551 2.382.261 2.259-3.732 5.819-4.68 5.564-.948-.251-2.618-5.284-1.269-7.162.695-.972 2.201-1.106 3.399-.788v.004h-.001z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9M($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Instacart" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Instacart extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9M, create_fragment$9M, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Instagram.svelte generated by Svelte v3.23.2 */

        function create_fragment$9N(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9N($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Instagram" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Instagram extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9N, create_fragment$9N, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Instapaper.svelte generated by Svelte v3.23.2 */

        function create_fragment$9O(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.766 20.259c0 1.819.271 2.089 2.934 2.292V24H6.301v-1.449c2.666-.203 2.934-.473 2.934-2.292V3.708c0-1.784-.27-2.089-2.934-2.292V0h11.398v1.416c-2.662.203-2.934.506-2.934 2.292v16.551z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9O($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Instapaper" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Instapaper extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9O, create_fragment$9O, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Instructables.svelte generated by Svelte v3.23.2 */

        function create_fragment$9P(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.4174.0004c-.1655-.0025-.319.0073-.4493.0363-.902.201-1.2372 1.1122-1.6211 1.9531-.1036.2255-.192.107-.5576.9754-1.1487-.137-2.5594-.1066-3.4065-.2041.1402.4845.8319.198 1.295.2041.7587.0061 1.5447.2011 2.1115.2042.0335.2102.2134.4414.25.6486.1188.6917.0764 1.3407-.1126 2.005-.1828.649-1.2492 1.1886-1.499 2.0448-.1037.3535.0118.6551-.1375 1.0909-.1097.137-.3256.1702-.475.2707-1.0572 1.1914-1.6729 3.178-1.9745 4.9026.7252.3382 1.3467.0185 1.7032.2714.2163.061.0916-.2255.2714-.2041.137.0213.1306.1828.2707.204-.1127 1.027.0673 1.7308.0673 2.7912 1.1152.4814 2.3768.399 3.9551.4112-.0182.2042.3868.9602.0578 1.4569.4875.4966-.2407 2.1783.7587 2.221-.332.4874-.5579 1.0785-.5457 1.9073-.2407.1066-.0396-.2316-.2041-.2041-1.691-.0427-2.6844-.3078-4.4943-.2042.5058.2072 1.4444.119 2.1787.2714.0792.0122.055.125.0672.2041.2956-.1401 1.1029-.0304 1.633 0-.2376.125.3325.2468.3416 0 .457.0701.8287.5852 1.2248.6797 1.3072.3138 2.0447-.6313 2.8613-1.2224.128.2681.7553.0152 1.1575 0-.3352-.198-1.1365-.134-1.499 0 .1218-.9629-.3534-1.3285-.8166-1.7032.189-.1067.3958-.1948.5451-.341.0183-1.3407-.0546-1.7948-.1368-2.9953.7252-.1493 1.7613-.2437 2.6572-.4082-.317.969-.1404 1.444-.2714 2.7238.1676.0823.399.101.6124.1375-.6704.3595-1.0573 1.8947-.2042 2.3823-.0761.1736-.3655.1344-.6123.1374.0091.3565.8498-.1221.7492.341.457-.3687 3.1811-.0394 4.2902.0673-.1188-.6094-1.453-.1192-2.0442-.5457.7648-.4876.7768-1.9618-.0673-2.3823.646-.4296.2683-2.1969.4755-3.1993.6186-.2682 1.5905-.1801 2.1115-.5458-.0152-.8714-.1825-1.5873-.341-2.3156.2164-.1493.7495-.3351 1.0206-.2041.1493-.0122.146-.174.137-.3416.0609-.1645.201.1526.4082.0673.0091-.8136-.3684-1.2249-.7493-1.9074-.5728-1.0238-1.3196-2.0295-2.453-2.453-.9538-1.6363-1.9711-3.2054-4.1528-3.6106-.1219-.3078-.049-.8135-.0672-1.2248.3016-.265.564-.573.5457-1.158.8288-.3535 2.1297.0852 2.928 0-.128-.4206-.8656-.1555-1.3623-.2042-.527-.0518-1.0481-.2803-1.499 0-.131-.387-.3533-1.1057-.591-.929-.1402-.3382-.1313-.8657-.0917-1.3836-.847-.1737-1.7762-.4385-2.7238-.5452-.4228-.048-1.0288-.1665-1.5253-.1737zm-.382.2374c1.5448.134 3.1656.1919 4.427.6124.2164 1.551-.085 2.9803.1375 4.6318-1.6484-.2803-3.5102-.6189-5.177-.3416.0793-1.6302.1463-3.434.6124-4.9026zM8.627.5092c-.0945 1.5387-.396 2.8426-.4083 4.6312-.323.2437-.6734.46-1.0908.6124-.0366-.5698.021-1.3403.1369-1.77.0975.1067.2652.143.4755.137.5545-.64.28-1.7428-.0673-2.5198.2803-.3991.4908-.8714.954-1.0908zm2.2626.7903c-.2944-.0043-.5763.0233-.8308.0964.3322.0061.7194-.037.954.0667-.4753.2072-.7955.5667-.7498 1.295.7282 1.0115 1.9712-.2254 1.2247-1.2248.4754-.0335 1.3378.3292 1.9746.2714-.6947-.1943-1.6894-.4917-2.5727-.5047zm.356.3535c.297.041.3246.751.2421 1.0284-.32.387-.9866.1405-1.0902-.2708.1615-.0853-.0248-.5212.2707-.4755-.0822.515.1649.701.5458.7498.0944-.131.1797-.2713.204-.4755-.0578-.2346-.2832-.3048-.4082-.4755.0644-.0464.1218-.0716.1726-.0797a.2142.2142 0 0 1 .0631-.0012zm-3.5726.4225c.1189.4175.2135 1.1727.0673 1.77-1.039-.0245-.7224-1.581-.0673-1.77zm3.1327 0c.2255.003.481-.0274.475.2042-.0366.0975-.1067.1645-.2042.204-.0853-.14-.3287-.1248-.2708-.4082zm1.6925.0238c-.2755.0209-.5396.2472-.535.7957.2407.1188.4021.3232.8165.2714.6685-.5656.1777-1.1018-.2815-1.067zm.0107.0429c.2986.0213.5146.119.475.4755-.2194-.0945-.2739-.3567-.475-.4755zm1.3617.1375c.393.4326.4144 1.7184-.2042 1.9073-.0243-.5667-.061-1.4412.2042-1.9073zm-1.4938.069c.0266.002.0497.0214.0649.0678-.189.1036-.009.4084.0702.4785-.2681.0396-.302-.1527-.3416-.3416.016-.0594.1267-.2109.2065-.2047zm.1321.135c.2133-.0304.3043.0606.2708.2709-.2133.0335-.3012-.0575-.2708-.2708zm-3.4064.8166c-.0792.0122-.0581.1249-.0673.2041 1.5266.1828 2.7729.6487 4.0861.5451-.2133-.3504-.7098-.1736-1.0206-.204-.9446-.0946-1.8924-.4537-2.8613-.475-.0793.0091-.1217-.0154-.137-.0702zm2.093 1.9014c.9318.0446 2.0293.469 2.5412.6183.1401.0396.3231-.0427.4755 0 .4844.134 1.1974.4724 1.499.6826.844.5911 1.4262 1.807 1.9747 2.7911.195.3535.5148.6095.6123.8867.3017.8593.3501 1.7671.7493 2.5198l.0732.341c.2163.7587.4269 1.8193.5457 2.453-3.0287.4297-5.872.7495-8.3096 1.0207-2.0232-.3291-4.1683-.1735-5.9934-.341-.3017-2.3036.3993-4.5952.2713-6.9474.0122-.192.2227-.1856.2714-.341-.1737-.0092-.3507-.0122-.3416-.2042.198-2.1054 2.4071-3.9675 4.6985-3.3368.2376-.0366.305-.1155.5457-.1369a2.8444 2.8444 0 0 1 .3868-.006zM9.894 8.9997a1.6087 1.6087 0 0 0-.3136.0226c-.2255.3474-.1552.6615-.137 1.1581 1.1142 1.1912 1.8694-1.134.4506-1.1807zm5.0633.0173c-1.3532.0321-.3819 2.6965.6837 1.3003.253-.8074-.1368-1.2554-.545-1.295a1.1653 1.1653 0 0 0-.1387-.0053zm-2.3609.0297c-.2254-.0106-.472.067-.7034.247-.0853.4174.0887.9444.3416 1.2248.518.0426.9107-.0429 1.1575-.2714.0943-.727-.2996-1.177-.7957-1.2004zm-7.3062.1095c.3595 1.0939-.0454 2.523-.0667 3.6779-.5667-.0915-1.0694-.2464-1.7032-.2708.329-1.3955.6638-2.7885 1.7699-3.407zm4.8847.0673a.264.264 0 0 1 .1523.0702c.1615.1615-.0121.3349 0 .5451-.2772.067-.2741-.006-.6123 0 .0487-.2529-.116-.2922-.0673-.5451.1943.0229.3695-.088.5273-.0702zm2.2995.003c.5982-.0527.9245.8043-.103.7498-.0761-.2194-.2739-.3172-.341-.5457.1538-.1314.306-.192.444-.2041zm2.5793.013c.2693-.001.52.1634.52.5327-.2345.2742-.4719.5575-.9533.4082-.0305-.1645.1215-.1496.0667-.3416-.1341.003-.085.1863-.2708.1375-.0857-.461.291-.7355.6374-.7368zm3.107.2583c1.0421.5028 1.6454 1.4442 2.1115 2.5198-.4966.0426-.7891-.1185-1.295-.0667-.1035-.5759-.4474-.9112-.4748-1.5663.1797-.003.4021.0362.4082-.1375-.0487-.262-.3507-.4692-.5457-.2041-.0091-.2408-.195-.3045-.2041-.5452zM4.879 9.702c-.0883.2894-.0607.5207.2714.545.1067-.1919-.0181-.28.0702-.545zm5.7227.204c.003.2073-.1432.2651-.2041.4083-.384.0214-.7133-.015-.7499-.341.3626.0762.6737.0912.954-.0672zm2.5864 0v.341c-.2712.125-1.2094.2804-.9534-.204.2468.3077.7675.0337.9534-.137zm2.3162.2042c-.0275.387-.762.582-.954.2041.4113.1097.7072.0122.954-.204zm-6.332 1.3652c.1279.5028-.1341.6338-.2042 1.0909.9263.067 1.9806-.0213 2.791-.003.0428-.061.0824-.1223 0-.1375H9.5109c2.5534-.5271 4.2109-.3652 7.014-.2708.0763.2133-.0186.1795.0667.341-1.6149.326-3.251-.402-4.8323.0673 1.5631-.0518 3.1962.1641 4.9026.2708.0365-.3474.0883-.8317 0-1.2248-.2468-.064-.07.2929-.2042.3416-1.8647-.1402-4.6772-.125-7.0813.2041-.0944-.0883-.0666-.2957-.0666-.4755 1.4595-.2468 4.305.253 5.4477-.2041-1.7002.1036-3.7235-.0122-5.5852 0zm6.5432.0637c-.3249-.0107-.6745.0136-.8909.003.3108.3016 1.2095.0152 1.633.204-.1173-.1507-.4172-.1964-.742-.207zm3.8957.6153c.3183.0018.6615.0695.7986.2048-.46-.1585-.911.1672-1.295-.1375.1234-.0457.3054-.0683.4964-.0673zm.1505.325c.2297-.0027.459.023.5779.0839-.2072.1432-1.0789.3626-1.1581 0 .1204-.0503.3506-.0813.5802-.084zm.9641.244c.2443-.0384.3716.3498.3636.6564-.2529.134-.4389-.3077-.4755-.6124.0397-.0244.077-.0386.112-.044zm-17.2756.044c.4083 0 1.3406.0668 1.7032.341-.588-.0945-1.3833.0216-1.7032-.341zm16.8894.1369c.2133.2681.25.4813.2714.8165-.262-.0549-.2836-.7099-.2714-.8165zm-.9504.0672h.2708c.006.3139.171.463.1374.8165-.387-.0213-.332-.4843-.4082-.8165zm.6094 0c.0396.2133.3197.542.1369.7493-.1067-.1463-.3106-.5482-.137-.7493zm-16.039.1298c.4297.0108.9446.1147 1.057.3451-.5455-.0883-1.134-.1336-1.6337-.2707.0914-.0538.3189-.081.5767-.0744zm-.25.3433c.1167.0012.2099.028.219.1423-.1493.1706-.0765.5575-.3416.6124 0-.1128-.1888-.0394-.204-.137.0944-.1766.2498-.2954.204-.6123a1.524 1.524 0 0 1 .1226-.0054zm-.3933.0054c-.0183.2529-.1069.4354-.2714.5451-.0213-.2925-.006-.5512.2714-.5451zm1.2247.1339c.1158.1371.0973.5514-.0672.6124-.1432-.0762-.274-.649.0672-.6124zm.4083.0702c.0152.125.1767.4507 0 .5452-.0214-.1189-.3139-.5238 0-.5452zm14.5738 2.0413c.2255.0244.1064.393.1369.6124-2.3797.582-4.5644.7128-7.1635 1.0997l-1.2158-.0089c-1.7916.131-4.171.1646-5.856-.2041-.0334-.2407-.1007-.4446-.0672-.7493 2.2822-.1676 4.6439.3136 6.9474.1369 2.526-.195 4.9512-.7831 7.2182-.8867zm-.4083.1369c-.0548.0365-.1096.0703-.204.0672.006.198.0239.3837.2707.341.0091-.1676.0126-.329-.0667-.4082zm-2.6572.3416c-.0152.2437.0979.3562.3416.341.0518-.061.0728-.152.0667-.2708-.0792-.0823-.2407-.0794-.4083-.0702zM5.97 16.582c-.0457.2285.116.25.2714.2714.0548-.061.0763-.1526.0702-.2714zm6.9474.0673c-.1006.2132-.0033.2772.1369.4082.1736-.006.1339-.2285.1339-.4082zm-4.1129.0743c-.057-.0037-.1187.0145-.1773.0625-.0152.2438.0972.3563.341.341.1348-.185.0074-.3923-.1637-.4035zm8.8113.1964c.0092.521-.0824.5822-.0702 1.1581-1.0207.0701-1.4718-.0978-2.3828-.1374.3108-.9111 1.5511-.8714 2.453-1.0207zm-5.5822.6826c.0457.2468.0947.4935.0673.8165-.8684.0275-1.7373-.222-2.5203-.0666-.0762-.2133-.0061-.1554 0-.4083.6033-.4022 1.9137-.2288 2.453-.3416zm3.9064.6636c.1382-.0064.3265.0284.451.153h-.204c-.5694-.0172-.4774-.1424-.247-.153zm1.3824.0036c.1326-.008.2384.0107.2262.1493-.0762.0914-.5362-.0058-.6124-.1368.0945.0304.2537-.0045.3862-.0125zm-6.395.2154c.1815.0066.3368.0398.4236.138-.2468-.003-.5362.0369-.6123-.1368a2.6671 2.6671 0 0 1 .1886-.0012zm5.2935.063c.4243-.0022.8604.043 1.261.2792-.9171-.2042-2.0204.11-2.453-.2708.355.0442.7677-.006 1.192-.0083zm-6.0756.1756c.6793-.0043 1.6155.0968 2.0222.378-.972-.125-1.743.0215-2.587-.341.1402-.0222.3384-.0355.5648-.037zm5.5144.1714c.6914.0055 1.3525.0443 1.8919.2065-.1158.1798-.009.5853-.137.7499-.6367-.067-1.828.128-2.5196 0-.0366-.3779.0361-.6432.0666-.954.2339-.0023.4676-.0042.698-.0024zm-6.0119.1363c.5729.1036 1.9195.189 2.5197.2744-.0883.4936.1676.9445 0 1.295-.5972.3534-1.5266.378-2.3828.4754-.1463-.5362-.3167-1.411-.1369-2.0448zm6.9474 1.0909c.9537-.0427 1.4072.7652 1.2914 1.4294-.2072 1.2036-2.5014 1.4865-3.132.475.009-.7161.0033-1.4503.5456-1.633.064.4905-.2193.591-.204.8867.0578 1.2096 2.2818 1.3774 2.4524.2713.131-.8562-.6213-.8993-.9534-1.4294zm-.7558.2404c.0436-.0153.0947.015.1036.0607.0036.0042.0088.0046.0119.0101.0365.07.043.1458.0583.222.0091.0457-.0217.0765-.0613.0887a.9213.9213 0 0 1-.2041.0333c-.061.003-.1189-.0612-.0762-.119.0548-.0762.0884-.161.125-.2524a.0721.0721 0 0 1 .0428-.0434zm1.0296.3053c.265.006.5516.4539.4755 1.0206-.2773.4875-1.5542.5269-1.5664.341.7953.0914 1.0362-.3714 1.3622-.7492.0214-.2743-.442-.4174-.2713-.6124zm-.3636.1654c.1848-.0061.3668.2504.4308.447-.3108.2102-.5.5453-.954.6123-.1706-.1676-.4478-.2345-.4082-.6123.4692-.0397.4177-.1583.7498.0672.1493-.1432-.0335-.195 0-.4082.058-.0724.12-.104.1816-.106zm-5.2912.31c.8866.0245 1.1762.6398 1.292 1.429.0304.1889-.2531.064-.2714.204.0792.0336.1554.073.2041.137-.46.8927-3.1687 1.4504-2.7238-.4083.07 1.1761 1.779.9509 2.2483.2714.2255-.9568-.4384-1.0389-.7492-1.633zm-.4755.5452c.088.0907.2554.1019.2755.2625a.313.313 0 0 1-.0012.0785c-.131.128-.171.0061-.3416 0 .0366-.1005-.079-.3532.0673-.341zm.545 0c1.4017.5515-.1582 2.0504-1.2247 1.2277-.0944-.265-.3105-.9659.0673-1.0908.1188.198.1612.4758.1369.817.2986.4724 1.3837.3046 1.4294-.2713-.2803-.0762-.1315-.4784-.4088-.6826zm.0673.4755c.0945.0884.0672.2957.0703.4785-.3322.0426-.71.2373-.8868-.1375.4175.0305.4905-.28.8165-.341zm8.503.532c-.0694-.005-.1785.0148-.3308.0834.393.1713.5394-.0684.3309-.0834Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9P($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Instructables" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Instructables extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9P, create_fragment$9P, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Intel.svelte generated by Svelte v3.23.2 */

        function create_fragment$9Q(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.07 10.8v3.877H5.837V9.804l2.547.002c1.08 0 1.449.764 1.449 1.456v3.415h-1.23v-3.408c0-.291-.149-.469-.513-.469H7.07zm8.389-.058c-.422 0-.748.216-.885.51-.077.167-.117.347-.118.53h1.898c-.023-.53-.263-1.04-.895-1.04zm-1.003 1.88c0 .629.393 1.095 1.094 1.095.544 0 .815-.15 1.131-.466l.762.729c-.487.481-1.001.773-1.902.773-1.18 0-2.31-.643-2.31-2.52 0-1.605.985-2.512 2.281-2.512 1.315 0 2.075 1.063 2.075 2.455v.443h-3.131v.003zm-2.268 2.047c-1.004 0-1.432-.699-1.432-1.391v-4.8h1.232v1.327h.928v.996h-.929v2.4c0 .284.135.44.429.44h.5v1.027h-.728zM4.739 9.131H3.497v-1.18h1.242v1.18zm.003 5.595c-.93-.088-1.246-.651-1.246-1.305V9.806H4.74v4.924l.002-.004zm14.805-.104c-.929-.09-1.243-.652-1.243-1.303V7.784h1.243v6.84-.002zm4.347-6.038C22.769 3.091 12.102 2.743 5.23 6.927v.462c6.865-3.528 16.604-3.508 17.491 1.55.296 1.675-.646 3.418-2.329 4.422v1.311c2.025-.742 4.105-3.147 3.502-6.088zm-12.496 9.61c-4.742.438-9.686-.251-10.377-3.957-.337-1.827.497-3.765 1.598-4.967v-.643C.632 10.37-.446 12.577.175 15.184c.792 3.345 5.035 5.239 11.509 4.609 2.563-.249 5.916-1.074 8.247-2.354v-1.816c-2.116 1.261-5.617 2.302-8.533 2.571zM20.984 8.15c0-.06-.037-.079-.116-.079h-.077v.17l.077.002c.079 0 .116-.025.116-.084V8.15zm.12.423h-.091c-.009 0-.018-.004-.021-.012l-.125-.213c-.003-.005-.013-.01-.019-.01h-.056v.212c0 .012-.009.025-.023.025h-.082c-.011 0-.021-.014-.021-.025v-.533c0-.029.012-.045.038-.048.05-.005.101-.006.152-.006.152 0 .246.046.246.188v.01c0 .09-.046.135-.114.158l.13.219c0 .006.005.012.005.018.002.007-.004.017-.019.017v.002-.002zm-.218-.709c-.226 0-.408.184-.408.41.001.227.186.409.411.408.225 0 .406-.182.409-.406-.002-.226-.185-.411-.412-.412zm0 .907c-.273 0-.495-.222-.495-.495s.222-.495.494-.495h.001c.271 0 .495.224.495.495 0 .274-.224.495-.495.495z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9Q($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Intel" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Intel extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9Q, create_fragment$9Q, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Intellijidea.svelte generated by Svelte v3.23.2 */

        function create_fragment$9R(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v24h24V0zm3.723 3.111h5v1.834h-1.39v6.277h1.39v1.834h-5v-1.834h1.444V4.945H3.723zm11.055 0H17v6.5c0 .612-.055 1.111-.222 1.556-.167.444-.39.777-.723 1.11-.277.279-.666.557-1.11.668a3.933 3.933 0 0 1-1.445.278c-.778 0-1.444-.167-1.944-.445a4.81 4.81 0 0 1-1.279-1.056l1.39-1.555c.277.334.555.555.833.722.277.167.611.278.945.278.389 0 .721-.111 1-.389.221-.278.333-.667.333-1.278zM2.222 19.5h9V21h-9z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9R($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "IntelliJ IDEA" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Intellijidea extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9R, create_fragment$9R, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Intercom.svelte generated by Svelte v3.23.2 */

        function create_fragment$9S(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21 0H3C1.343 0 0 1.343 0 3v18c0 1.658 1.343 3 3 3h18c1.658 0 3-1.342 3-3V3c0-1.657-1.342-3-3-3zm-5.801 4.399c0-.44.36-.8.802-.8.44 0 .8.36.8.8v10.688c0 .442-.36.801-.8.801-.443 0-.802-.359-.802-.801V4.399zM11.2 3.994c0-.44.357-.799.8-.799s.8.359.8.799v11.602c0 .44-.357.8-.8.8s-.8-.36-.8-.8V3.994zm-4 .405c0-.44.359-.8.799-.8.443 0 .802.36.802.8v10.688c0 .442-.36.801-.802.801-.44 0-.799-.359-.799-.801V4.399zM3.199 6c0-.442.36-.8.802-.8.44 0 .799.358.799.8v7.195c0 .441-.359.8-.799.8-.443 0-.802-.36-.802-.8V6zM20.52 18.202c-.123.105-3.086 2.593-8.52 2.593-5.433 0-8.397-2.486-8.521-2.593-.335-.288-.375-.792-.086-1.128.285-.334.79-.375 1.125-.09.047.041 2.693 2.211 7.481 2.211 4.848 0 7.456-2.186 7.479-2.207.334-.289.839-.25 1.128.086.289.336.25.84-.086 1.128zm.281-5.007c0 .441-.36.8-.801.8-.441 0-.801-.36-.801-.8V6c0-.442.361-.8.801-.8.441 0 .801.357.801.8v7.195z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9S($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Intercom" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Intercom extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9S, create_fragment$9S, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Internetarchive.svelte generated by Svelte v3.23.2 */

        function create_fragment$9T(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.61,24H1.39V22.91H22.61Zm-.8-3.18H2.23v1.51H21.81ZM21.58,3.66H2.1V5.75H21.58ZM11.84,0,1.64,2.39,2.23,3H21.46L22,2.39ZM3.71,20.21a3.44,3.44,0,0,0,1-.13c.16-1.74.25-4.9.25-6.87s-.09-5-.24-6.76a.18.18,0,0,0-.13-.15,3.56,3.56,0,0,0-.84-.1,3.69,3.69,0,0,0-.83.1.18.18,0,0,0-.13.15c-.16,1.76-.24,4.82-.24,6.76s.09,5.13.25,6.87A3.34,3.34,0,0,0,3.71,20.21Zm5.31,0a3.37,3.37,0,0,0,1-.13c.16-1.74.25-4.9.25-6.87s-.09-5-.24-6.76a.18.18,0,0,0-.13-.15A3.54,3.54,0,0,0,9,6.2a3.79,3.79,0,0,0-.84.1.18.18,0,0,0-.13.15c-.15,1.76-.24,4.82-.24,6.76s.09,5.13.25,6.87A3.36,3.36,0,0,0,9,20.21Zm6.15,0a3.37,3.37,0,0,0,1-.13c.16-1.74.25-4.9.25-6.87s-.08-5-.24-6.76A.17.17,0,0,0,16,6.3a3.54,3.54,0,0,0-.83-.1,3.62,3.62,0,0,0-.83.1.18.18,0,0,0-.14.15c-.15,1.76-.24,4.82-.24,6.76s.09,5.13.26,6.87A3.28,3.28,0,0,0,15.17,20.21Zm5.18,0a3.37,3.37,0,0,0,.95-.13c.16-1.74.25-4.9.25-6.87s-.08-5-.24-6.76a.18.18,0,0,0-.13-.15,3.54,3.54,0,0,0-.83-.1,3.79,3.79,0,0,0-.84.1.18.18,0,0,0-.13.15c-.15,1.76-.24,4.82-.24,6.76s.09,5.13.25,6.87A3.36,3.36,0,0,0,20.35,20.21Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9T($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Internet Archive" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Internetarchive extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9T, create_fragment$9T, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Internetexplorer.svelte generated by Svelte v3.23.2 */

        function create_fragment$9U(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.8 7.381c1.125-2.7 1.2-4.95-.15-6.3-1.5-1.499-5.1-1.05-8.924.75h-.45c-2.7 0-5.324.976-7.274 2.7-1.65 1.5-2.85 3.45-3.375 5.625.375-.45 2.475-2.925 4.875-4.275.075 0 .675-.375.675-.375-.075 0-1.2 1.125-1.425 1.35-5.25 5.4-8.324 13.574-5.924 15.973 1.574 1.575 4.424 1.2 7.724-.6 1.425.675 3 .975 4.724.975 2.25 0 4.35-.6 6.15-1.8 1.874-1.2 3.224-3.074 4.05-5.249h-5.85c-.75 1.425-2.475 2.4-4.275 2.4-2.55 0-4.65-2.1-4.724-4.5V13.83h15.298v-.225c0-.375.075-.825.075-1.124 0-1.8-.45-3.525-1.2-5.1zM2.477 22.38c-1.2-1.2-.824-3.524.6-6.299.675 1.875 1.8 3.525 3.225 4.725.45.375.975.75 1.5 1.05-2.4 1.274-4.35 1.5-5.325.524zm15.374-11.398H8.702v-.075c.15-2.325 2.324-4.35 4.874-4.35 2.4 0 4.35 1.875 4.5 4.35v.075zm4.574-4.2c-.45-.75-1.05-1.5-1.725-2.1a11.213 11.213 0 0 0-3.6-2.25c2.4-1.124 4.425-1.274 5.475-.224.825.975.75 2.624-.15 4.574 0 .075 0 .075 0 0 0 .075 0 .075 0 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9U($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Internet Explorer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Internetexplorer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9U, create_fragment$9U, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Invision.svelte generated by Svelte v3.23.2 */

        function create_fragment$9V(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.825 0H2.175C.975 0 0 .975 0 2.175v19.65C0 23.025.975 24 2.175 24h19.65c1.2 0 2.175-.975 2.175-2.175V2.175C24 .975 23.025 0 21.825 0zM8.02 4.667c.798 0 1.468.63 1.468 1.44 0 .82-.67 1.444-1.468 1.444v.027c-.803 0-1.454-.65-1.454-1.455s.65-1.455 1.455-1.455zm9.816 13.815c-1.484 0-2.204-.885-2.204-2.09 0-.346.044-.713.15-1.08l.71-2.545c.088-.28.11-.54.11-.775 0-.82-.5-1.315-1.296-1.315-1.013 0-1.68.727-2.025 2.13l-1.38 5.535H9.487l.432-1.74c-.708 1.166-1.695 1.885-2.91 1.885-1.467 0-2.157-.842-2.157-2.113.004-.365.047-.73.13-1.085v.002l1.1-4.49H4.375l.518-1.905h4.1l-1.62 6.405c-.105.41-.15.75-.15.986 0 .41.202.53.517.604.195.04 1.725.012 2.56-1.84l1.06-4.25H9.637l.52-1.875h3.72l-.48 2.16c.647-1.2 1.937-2.355 3.212-2.355 1.35 0 2.475.975 2.475 2.82 0 .534-.08 1.065-.24 1.575l-.69 2.476c-.06.254-.104.465-.104.66 0 .434.18.645.494.645s.735-.24 1.2-1.56l.943.36c-.555 1.964-1.576 2.774-2.85 2.774z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9V($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "InVision" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Invision extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9V, create_fragment$9V, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Invoiceninja.svelte generated by Svelte v3.23.2 */

        function create_fragment$9W(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.247 10.326a1.164 1.164 0 11-2.328 0 1.164 1.164 0 012.328 0zm-6.288 0a1.164 1.164 0 11-2.329 0 1.164 1.164 0 012.329 0zm-.14 13.52c-4.712-.98-8.227-4.257-9.482-8.842-.421-1.537-.421-4.49 0-6.027C1.506 4.709 4.73 1.485 8.997.316c1.538-.421 4.49-.421 6.028 0 4.267 1.169 7.492 4.393 8.66 8.66.24.874.294 1.43.294 3.014 0 1.584-.054 2.14-.293 3.014-1.17 4.271-4.439 7.536-8.661 8.65-1.391.367-3.916.46-5.206.192zm6.64-9.315c-3.047-1.348-4.054-1.737-4.5-1.737-.446 0-1.433.38-4.38 1.684-2.091.926-3.828 1.76-3.86 1.79h16.663zm-9.873-.361c1.621-.729 3.06-1.387 3.196-1.464.258-.145.337-.09-5.285-3.682-.56-.358-1.023-.698-1.025-.65V15.564a790.1 790.1 0 003.114-1.394zm14.078-2.194V8.417c0-.11-1.676.993-3.496 2.12-3 1.854-3.281 2.06-3.004 2.185 1.345.611 6.42 2.862 6.5 2.872zm-8.169.11c.545.125.643.104 1.226-.263.349-.22.655-.419.681-.442.026-.024-.05-.181-.167-.35-.118-.168-.215-.5-.215-.739V9.86l-.569.21c-.726.267-2.28.27-3 .005l-.556-.205.013.452c.007.26-.088.563-.225.715-.232.256-.22.276.45.726.64.432.725.455 1.23.327a2.349 2.349 0 011.132-.002zm-4.23-2.65c-.105-.113-2.97-.954-3.033-.891-.03.03.504.414 1.186.854l1.24.8.34-.344c.186-.188.307-.377.268-.42zm9.76-.373c.473-.306.8-.555.728-.555-.155 0-2.877.804-3.027.894-.057.034.033.229.2.433l.304.37.47-.293c.257-.162.854-.544 1.326-.85zm-1.636-.555c2.11-.59 3.867-1.102 3.904-1.139H3.59c.187.187 7.779 2.195 8.323 2.202.41.005 2.014-.376 4.476-1.063z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9W($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Invoice Ninja" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Invoiceninja extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9W, create_fragment$9W, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Iobroker.svelte generated by Svelte v3.23.2 */

        function create_fragment$9X(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0c-.61 0-1.201.044-1.787.133v3.285a8.943 8.943 0 013.574.004V.139A11.83 11.83 0 0012 0zM9.38.295C4.084 1.5.13 6.283.13 12 .129 18.628 5.44 24 12 24s11.871-5.372 11.871-12c0-5.717-3.953-10.499-9.246-11.705v3.34c3.575 1.113 6.18 4.44 6.18 8.365 0 4.83-3.949 8.76-8.8 8.76-4.85 0-8.804-3.93-8.804-8.76 0-3.924 2.605-7.247 6.18-8.365V.295zM12 4.137c-.616 0-1.212.068-1.783.2V19.53A7.887 7.887 0 0012 19.73c.616 0 1.211-.068 1.787-.2V4.343A7.65 7.65 0 0012 4.137Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9X($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ioBroker" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Iobroker extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9X, create_fragment$9X, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ionic.svelte generated by Svelte v3.23.2 */

        function create_fragment$9Y(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.922 7.027l-.103-.23-.169.188c-.408.464-.928.82-1.505 1.036l-.159.061.066.155a9.745 9.745 0 0 1 .75 3.759c0 5.405-4.397 9.806-9.806 9.806-5.409 0-9.802-4.397-9.802-9.802 0-5.405 4.402-9.806 9.806-9.806 1.467 0 2.883.319 4.2.947l.155.075.066-.155a3.767 3.767 0 0 1 1.106-1.453l.197-.159-.225-.117A11.905 11.905 0 0 0 12.001.001c-6.619 0-12 5.381-12 12s5.381 12 12 12 12-5.381 12-12c0-1.73-.361-3.403-1.078-4.973zM12 6.53A5.476 5.476 0 0 0 6.53 12 5.476 5.476 0 0 0 12 17.47 5.476 5.476 0 0 0 17.47 12 5.479 5.479 0 0 0 12 6.53zm10.345-2.007a2.494 2.494 0 1 1-4.988 0 2.494 2.494 0 0 1 4.988 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9Y($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ionic" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ionic extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9Y, create_fragment$9Y, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ios.svelte generated by Svelte v3.23.2 */

        function create_fragment$9Z(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.1 6.05C.486 6.05 0 6.53 0 7.13A1.08 1.08 0 0 0 1.1 8.21C1.72 8.21 2.21 7.73 2.21 7.13C2.21 6.53 1.72 6.05 1.1 6.05M8.71 6.07C5.35 6.07 3.25 8.36 3.25 12C3.25 15.67 5.35 17.95 8.71 17.95C12.05 17.95 14.16 15.67 14.16 12C14.16 8.36 12.05 6.07 8.71 6.07M19.55 6.07C17.05 6.07 15.27 7.45 15.27 9.5C15.27 11.13 16.28 12.15 18.4 12.64L19.89 13C21.34 13.33 21.93 13.81 21.93 14.64C21.93 15.6 20.96 16.28 19.58 16.28C18.17 16.28 17.11 15.59 17 14.53H15C15.08 16.65 16.82 17.95 19.46 17.95C22.25 17.95 24 16.58 24 14.4C24 12.69 23 11.72 20.68 11.19L19.35 10.89C17.94 10.55 17.36 10.1 17.36 9.34C17.36 8.38 18.24 7.74 19.54 7.74C20.85 7.74 21.75 8.39 21.85 9.46H23.81C23.76 7.44 22.09 6.07 19.55 6.07M8.71 7.82C10.75 7.82 12.06 9.45 12.06 12C12.06 14.57 10.75 16.2 8.71 16.2C6.65 16.2 5.35 14.57 5.35 12C5.35 9.45 6.65 7.82 8.71 7.82M.111 9.31V17.76H2.1V9.31H.11Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9Z($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "iOS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ios extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9Z, create_fragment$9Z, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ipfs.svelte generated by Svelte v3.23.2 */

        function create_fragment$9_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0L1.608 6v12L12 24l10.392-6V6zm-1.073 1.445h.001a1.8 1.8 0 002.138 0l7.534 4.35a1.794 1.794 0 000 .403l-7.535 4.35a1.8 1.8 0 00-2.137 0l-7.536-4.35a1.795 1.795 0 000-.402zM21.324 7.4c.109.08.226.147.349.201v8.7a1.8 1.8 0 00-1.069 1.852l-7.535 4.35a1.8 1.8 0 00-.349-.2l-.009-8.653a1.8 1.8 0 001.07-1.851zm-18.648.048l7.535 4.35a1.8 1.8 0 001.069 1.852v8.7c-.124.054-.24.122-.349.202l-7.535-4.35a1.8 1.8 0 00-1.069-1.852v-8.7c.124-.054.24-.122.35-.202z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "IPFS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ipfs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9_, create_fragment$9_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Issuu.svelte generated by Svelte v3.23.2 */

        function create_fragment$9$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.996 0A.998.998 0 0 0 0 .996V12c0 6.628 5.372 12 12 12s12-5.372 12-12S18.628 0 12 0H.996zm11.17 3.582a8.333 8.333 0 0 1 8.254 8.41 8.333 8.333 0 0 1-8.41 8.252c-4.597-.045-8.296-3.81-8.254-8.41.045-4.6 3.81-8.296 8.41-8.252zm-.031 2.27a6.107 6.107 0 0 0-6.155 6.046 6.109 6.109 0 0 0 6.05 6.163 6.099 6.099 0 0 0 6.154-6.047 6.107 6.107 0 0 0-6.041-6.162h-.008zm-.02 3.013a3.098 3.098 0 0 1 3.063 3.123 3.088 3.088 0 0 1-3.121 3.06l.002-.001a3.091 3.091 0 0 1 .056-6.182z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$9$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Issuu" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Issuu extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$9$, create_fragment$9$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/ItchDotIo.svelte generated by Svelte v3.23.2 */

        function create_fragment$a0(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.129 1.338c-1.047 0.622-3.109 2.991-3.129 3.612v1.029c0 1.304 1.219 2.45 2.325 2.45 1.329 0 2.436-1.101 2.436-2.408 0 1.307 1.069 2.408 2.398 2.408s2.364-1.101 2.364-2.408c0 1.307 1.137 2.408 2.466 2.408h0.024c1.329 0 2.466-1.101 2.466-2.408 0 1.307 1.035 2.408 2.364 2.408s2.398-1.101 2.398-2.408c0 1.307 1.107 2.408 2.436 2.408 1.107 0 2.325-1.146 2.325-2.45v-1.029c-0.020-0.621-2.082-2.991-3.129-3.612-3.254-0.114-5.51-0.134-8.871-0.133s-7.945 0.053-8.871 0.133zM9.506 7.815c-0.133 0.23-0.288 0.428-0.467 0.601l-0.001 0.001c-0.502 0.49-1.189 0.794-1.947 0.794-0.001 0-0.002 0-0.003 0-0.759 0-1.447-0.303-1.949-0.795l0 0c-0.182-0.178-0.32-0.368-0.446-0.59l-0.001 0c-0.126 0.222-0.302 0.412-0.485 0.59-0.502 0.491-1.19 0.794-1.949 0.794-0.001 0-0.002 0-0.003 0h0c-0.091 0-0.186-0.025-0.263-0.052-0.107 1.112-0.152 2.175-0.168 2.95l-0 0.004c-0.002 0.394-0.004 0.717-0.006 1.167 0.021 2.334-0.231 7.564 1.029 8.849 1.953 0.455 5.546 0.663 9.151 0.664h0.001c3.605-0.001 7.198-0.209 9.151-0.664 1.26-1.285 1.008-6.516 1.029-8.849-0.002-0.45-0.004-0.773-0.006-1.167l-0-0.004c-0.016-0.775-0.061-1.838-0.168-2.95-0.077 0.026-0.172 0.052-0.263 0.052-0.001 0-0.002 0-0.002 0-0.759 0-1.447-0.303-1.949-0.795l0.001 0c-0.182-0.178-0.358-0.368-0.485-0.59l-0.001-0c-0.127 0.222-0.265 0.412-0.446 0.59-0.502 0.491-1.19 0.795-1.948 0.795-0.001 0-0.002 0-0.003 0h0c-0.758 0-1.445-0.304-1.947-0.795-0.179-0.174-0.334-0.372-0.461-0.589l-0.007-0.013c-0.132 0.23-0.286 0.428-0.463 0.602l-0 0c-0.502 0.491-1.19 0.795-1.949 0.795-0.001 0-0.002 0-0.003 0h0c-0.026 0-0.053-0.001-0.079-0.002h-0.001c-0.026 0.001-0.053 0.002-0.080 0.002-0.001 0-0.002 0-0.003 0-0.759 0-1.447-0.303-1.949-0.795l0.001 0c-0.178-0.174-0.331-0.372-0.456-0.589l-0.007-0.013zM7.502 10.406l-0 0.001h0.001c0.794 0.002 1.498 0 2.372 0.953 0.687-0.072 1.406-0.108 2.125-0.107h0.001c0.719-0.001 1.437 0.035 2.125 0.107 0.873-0.953 1.578-0.952 2.372-0.953h0.001l-0-0.001c0.375 0 1.875 0 2.92 2.935l1.122 4.026c0.832 2.995-0.266 3.069-1.636 3.071-2.031-0.076-3.156-1.551-3.156-3.026-1.124 0.184-2.436 0.276-3.748 0.276h-0.001c-1.312 0-2.624-0.092-3.748-0.276 0 1.475-1.125 2.95-3.156 3.026-1.37-0.003-2.468-0.076-1.636-3.071l1.123-4.026c1.045-2.935 2.545-2.935 2.92-2.935zM12 12.713v0.001c-0.002 0.002-2.138 1.964-2.523 2.662l1.399-0.056v1.22c0 0.057 0.561 0.034 1.123 0.008h0.001c0.562 0.026 1.123 0.049 1.123-0.008v-1.22l1.399 0.056c-0.384-0.698-2.523-2.662-2.523-2.662v-0.001l-0 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a0($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Itch.io" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class ItchDotIo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a0, create_fragment$a0, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Itunes.svelte generated by Svelte v3.23.2 */

        function create_fragment$a1(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.979,24c-2.483,0-4.898-0.777-6.954-2.262h0c-2.59-1.872-4.3-4.644-4.814-7.807 c-0.514-3.162,0.228-6.336,2.091-8.937c1.864-2.604,4.627-4.321,7.78-4.835c3.148-0.514,6.307,0.233,8.896,2.104 c2.59,1.872,4.3,4.644,4.815,7.807c0.514,3.162-0.228,6.336-2.091,8.938c-1.865,2.604-4.628,4.321-7.78,4.835 C13.273,23.948,12.623,24,11.979,24z M5.505,21.074c2.411,1.742,5.353,2.438,8.284,1.96c2.936-0.479,5.509-2.079,7.246-4.504 c3.583-5.004,2.445-12.004-2.538-15.604c-2.411-1.742-5.353-2.438-8.284-1.96C7.278,1.446,4.704,3.045,2.968,5.47 C-0.616,10.474,0.523,17.474,5.505,21.074L5.505,21.074z M16.111,17.522c0.731-0.214,1.246-0.734,1.458-1.468l0.062-0.216 l0.008-5.787c0.006-4.334,0-5.814-0.024-5.895c-0.025-0.086-0.066-0.157-0.118-0.214c-0.077-0.048-0.17-0.073-0.276-0.073 c-0.073,0-0.325,0.035-0.56,0.078c-1.041,0.19-7.176,1.411-7.281,1.45C9.218,5.458,9.057,5.6,8.981,5.751L8.916,5.879 c0,0-0.031,9.071-0.078,9.173c-0.071,0.155-0.23,0.303-0.376,0.35c-0.069,0.022-0.343,0.084-0.609,0.137 c-1.231,0.245-1.688,0.421-2.075,0.801c-0.22,0.216-0.382,0.51-0.453,0.819c-0.067,0.295-0.045,0.737,0.051,1.006 c0.1,0.281,0.262,0.521,0.473,0.71c0.192,0.148,0.419,0.258,0.674,0.324c0.563,0.144,1.618-0.016,2.158-0.328 c0.226-0.131,0.516-0.404,0.667-0.629c0.06-0.089,0.15-0.268,0.2-0.399c0.176-0.456,0.181-8.582,0.204-8.684 c0.038-0.174,0.157-0.301,0.32-0.344c0.147-0.039,6.055-1.207,6.222-1.23c0.146-0.02,0.284,0.027,0.36,0.12 c0.045,0.024,0.083,0.056,0.109,0.096c0.048,0.071,0.051,0.213,0.058,2.785c0.008,2.961,0.012,2.892-0.149,3.079 c-0.117,0.136-0.263,0.189-0.864,0.311c-0.914,0.187-1.226,0.275-1.576,0.446c-0.437,0.213-0.679,0.447-0.867,0.836 c-0.133,0.275-0.182,0.481-0.182,0.754c0.001,0.489,0.169,0.871,0.55,1.245c0.035,0.034,0.069,0.066,0.104,0.097 c0.192,0.148,0.387,0.238,0.633,0.294C14.84,17.73,15.594,17.673,16.111,17.522z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a1($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "iTunes" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Itunes extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a1, create_fragment$a1, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Iveco.svelte generated by Svelte v3.23.2 */

        function create_fragment$a2(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.24 14.402h1.433c.12 0 .239-.1.239-.243V9.87a.243.243 0 0 0-.244-.242H.24a.237.237 0 0 0-.24.24v4.294c0 .169.148.239.24.239m2.566-4.424l1.01 3.737c.064.25.244.435.391.53.17.11.338.156.61.156h1.119c.474 0 .833-.294.963-.794l.91-3.62a.431.431 0 0 0 .014-.108.238.238 0 0 0-.24-.25h-.827a.24.24 0 0 0-.235.182l-.718 3.135c-.022.108-.076.131-.134.131a.117.117 0 0 1-.112-.1l-.762-3.11c-.02-.157-.122-.239-.242-.239H3.03c-.188 0-.254.17-.243.273.001.022.013.043.019.077m7.728 1.49l-.002-.413c0-.15.116-.25.24-.25h1.7a.24.24 0 0 0 .238-.24l.001-.695a.243.243 0 0 0-.244-.242H9.57c-.468 0-.948.364-.948 1.024v2.79c0 .602.508.959.945.959h2.93c.124 0 .249-.093.243-.265v-.69a.24.24 0 0 0-.24-.24h-1.7c-.159 0-.266-.093-.266-.243v-.397h1.494a.242.242 0 0 0 .238-.251v-.61a.24.24 0 0 0-.244-.238h-1.488zm5.511-.664a11.9 11.9 0 0 1 1.283 0 .238.238 0 0 0 .239-.239v-.005l.005-.762a.239.239 0 0 0-.217-.238 12.611 12.611 0 0 0-.893-.024c-.42 0-.833.022-1.237.069l.025-.002c-.879.07-1.595.72-1.756 1.57a5.162 5.162 0 0 0-.074.82c0 .27.02.527.058.776a1.943 1.943 0 0 0 1.63 1.622l-.026-.004a9.788 9.788 0 0 0 2.303.053.239.239 0 0 0 .216-.236l-.001.017.002-.766a.239.239 0 0 0-.239-.239h-.007c-.239.012-.479.012-.722.007a12.965 12.965 0 0 1-.61-.021.675.675 0 0 1-.588-.594 6.287 6.287 0 0 1-.022-1.131.678.678 0 0 1 .631-.673M24 12.05c.003-.434-.06-.83-.178-1.195a1.916 1.916 0 0 0-1.59-1.285 9.213 9.213 0 0 0-1.085-.062c-.406 0-.76.01-1.156.06a1.932 1.932 0 0 0-1.6 1.392 3.792 3.792 0 0 0 .029 2.172 1.906 1.906 0 0 0 1.596 1.306c.342.037.684.054 1.037.054.443 0 .805 0 1.232-.058.85-.153 1.452-.752 1.613-1.511.065-.282.1-.57.102-.873m-1.91-.02c0 .222-.01.434-.037.65a.677.677 0 0 1-.62.565 8.625 8.625 0 0 1-.541.007.674.674 0 0 1-.664-.576 5.302 5.302 0 0 1-.014-1.337.677.677 0 0 1 .625-.601 8.615 8.615 0 0 1 .532-.004c.353 0 .643.268.675.612.03.223.044.452.044.684");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a2($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "IVECO" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Iveco extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a2, create_fragment$a2, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jabber.svelte generated by Svelte v3.23.2 */

        function create_fragment$a3(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.597 11.737c0-.35-.065-.732-.268-1.025-.408-.588-1.283-.775-1.892-.405-.308.188-.48.515-.576.851-.191.668-.104 1.43.03 2.1.043.214.088.428.148.639.021.076.031.186.08.25.087.11.297.141.426.12.387-.065.291-.703.278-.974-.03-.634-.218-1.25-.036-1.881.076-.268.225-.568.494-.684.244-.105.49.023.586.261.156.385.117.83.215 1.23.033.137.07.272.131.399.018.037.043.113.094.108.126-.011.304-.22.398-.298.304-.25.616-.52.965-.705.165-.088.435-.23.603-.08a.612.612 0 0 1 .108.13c.198.31.002.55-.127.845-.166.38-.336.758-.577 1.098-.207.293-.49.549-.655.869-.107.205-.167.43-.123.663.036.188.181.301.373.257.143-.033.24-.156.322-.269.146-.202.281-.412.426-.615.28-.393.61-.76.846-1.183a3.41 3.41 0 0 0 .42-1.664c0-.474-.171-1.198-.723-1.298a.974.974 0 0 0-.326.01 1.432 1.432 0 0 0-.374.12 2.715 2.715 0 0 0-.818.637c-.146.16-.276.363-.449.495M9.078.016c-.435.058-.878.052-1.315.12-.838.129-1.64.389-2.425.703-.286.114-.568.241-.845.376-.103.05-.26.09-.343.17-.043.041-.039.139-.044.195-.014.156-.034.313-.05.47-.058.605-.1 1.229-.013 1.834.028.195.09.55.33.587.369.058.656-.397.837-.648.424-.586.905-1.132 1.6-1.394.817-.308 1.753-.381 2.618-.44 2.426-.167 5.078.277 6.865 2.064.254.254.495.524.7.82.8 1.159 1.223 2.477 1.427 3.86.096.65.161 1.308.013 1.955-.257 1.122-.932 2.1-1.706 2.931-.53.57-1.128 1.084-1.749 1.552-.347.261-.736.483-1.062.768-.375.329-.688.74-.925 1.179-.639 1.181-.81 2.602-.622 3.92.038.27.073.542.134.809.018.08.022.217.073.282.097.122.36.189.508.196.154.007.256-.11.294-.249.064-.236.026-.498-.012-.736-.076-.487-.147-.977-.125-1.471a3.71 3.71 0 0 1 1.026-2.425c.643-.673 1.512-1.061 2.243-1.625 1.474-1.136 2.794-2.668 3.301-4.492a5.194 5.194 0 0 0 .159-2.015c-.105-.849-.415-1.697-.708-2.497-.892-2.437-2.422-4.755-4.851-5.87-.964-.443-1.973-.645-3.016-.79-.49-.068-.98-.11-1.472-.132-.274-.012-.572-.042-.845-.006M5.277 15.796c-.473.068-.61.447-.523.876.112.548.543.965.97 1.295a6.03 6.03 0 0 0 3.884 1.238c.538-.023 1.124-.112 1.617-.34.265-.122.542-.563.181-.751a.59.59 0 0 0-.169-.051c-.157-.026-.333.041-.482.084-.263.075-.526.153-.797.196-.808.13-1.683-.055-2.352-.534-.542-.387-.98-.898-1.393-1.415-.253-.316-.482-.663-.936-.598M4.662 18.474c-.12.016-.259.011-.362.087-.215.158.022.476.135.62.328.417.76.763 1.192 1.068a7.832 7.832 0 0 0 4.03 1.442c.421.03.85 0 1.267-.07.152-.026.342-.037.482-.103.399-.186.284-.939-.072-1.106-.155-.073-.404.023-.567.046-.385.054-.771.06-1.158.05-1.015-.025-2.096-.338-2.98-.831a5.589 5.589 0 0 1-.966-.693c-.181-.16-.368-.42-.603-.502-.11-.037-.284-.023-.398-.008M4.903 20.73a.638.638 0 0 0-.413.236c-.078.088-.152.167-.197.278-.246.609.41 1.183.864 1.47.504.32 1.055.558 1.616.758 1.266.45 2.752.739 4.066.336.391-.12.778-.338 1.062-.634.16-.167.27-.419-.024-.526-.174-.063-.385.098-.543.162a4.57 4.57 0 0 1-1.158.312c-.527.064-1.001-.052-1.508-.179-.434-.108-.872-.217-1.291-.373a4.457 4.457 0 0 1-1.026-.513c-.094-.066-.206-.125-.282-.211-.25-.282-.439-.612-.707-.88-.116-.116-.281-.256-.459-.236");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a3($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jabber" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jabber extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a3, create_fragment$a3, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jamboard.svelte generated by Svelte v3.23.2 */

        function create_fragment$a4(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.143 0v7.877h7.783V0zm0 8.155v7.784h7.783V8.155zm-.28.005a7.926 7.923 0 0 0-7.789 7.917A7.926 7.923 0 0 0 12 24a7.926 7.923 0 0 0 7.918-7.78h-8.056Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a4($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jamboard" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jamboard extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a4, create_fragment$a4, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jameson.svelte generated by Svelte v3.23.2 */

        function create_fragment$a5(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.81 17.564c-.405 1.031-1.007 2.505-1.683 3.574 0 .012 0 .024.013.012.737-.59 1.486-1.732 1.891-2.763.258-.651.823-2.002 1.044-2.223.013-.013 0-.025-.012-.037-.43-.123-1.339-.234-1.867-2.236 0 0-2.678-9.985-3.046-11.385-.295-1.094-.037-1.757.356-2.199.012-.012 0-.025-.012-.012-.712.22-1.191 1.29-.86 2.505.369 1.388 3.01 11.226 3.01 11.226.171.651.405 1.167.663 1.536.258.368.614.638.97.712.037.012.086.012.123.012.012 0 .024.025.012.037-.025.013-.037.037-.061.062-.172.208-.357.65-.553 1.154zM14.352.024l.012.05v.012c-.59.405-1.167 1.486-.835 2.727.368 1.388 1.94 7.246 2.493 9.285l.602 2.223c.368 1.4.897 2.174 1.621 2.272 0 0 .012 0 .012.013l.025.049v.012c-.368.369-.676 1.265-1.069 2.1-.393.848-1.215 3.415-4.36 4.619-3.427 1.302-6.902.479-8.364-1.941-.958-1.572-.725-3.734.835-4.606 1.351-.761 2.813-.258 3.366.86.528 1.08.16 2.235-.27 2.616-.087.074 0 .233.208.368.909.627 1.953.59 2.948.062 1.277-.676 1.744-1.842 1.068-4.323-.54-2.04-2.972-11.08-3.34-12.48-.332-1.24-1.376-1.89-2.088-1.94 0 0-.013 0-.013-.012l-.012-.05s0-.012.012-.012L14.39 0s.012 0 .012.012zM9.795 20.083c.16.086.356.11.54.073.013 0 .013-.012.013-.012a3.249 3.249 0 0 0-.172-2.493c-.369-.75-.91-1.192-1.523-1.4-.013 0-.013.012-.013.012.393.27.725.639.958 1.105.443.91.43 1.88.16 2.629a.06.06 0 0 0 .025.073Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a5($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jameson" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jameson extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a5, create_fragment$a5, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jasmine.svelte generated by Svelte v3.23.2 */

        function create_fragment$a6(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.591 19.649h.771v-3.786h-.77zm-6.874-5.03l-.238-.733 3.6-1.17.238.735-3.6 1.17m4.645-5.762L7.138 5.796l.624-.453 2.224 3.062-.624.454m5.315.028l-.624-.454 2.225-3.062.624.453-2.225 3.063m4.592 5.78l-3.6-1.17.238-.734 3.6 1.17-.238.733M12 .001C5.383.001 0 5.384 0 11.998 0 18.617 5.383 24 12 24s12-5.382 12-12c0-6.617-5.383-12-12-12zm0 2.43c5.284 0 9.569 4.283 9.569 9.567 0 5.287-4.285 9.573-9.569 9.573-5.286 0-9.57-4.286-9.57-9.573 0-5.284 4.285-9.567 9.57-9.567m1.552 7.96l.575 1.768.747.242 4.736-1.538-.86-2.645-4.736 1.539-.462.635m.337 2.5l-1.504 1.093v.785l2.927 4.03 2.25-1.636-2.927-4.029-.746-.243m-2.275 1.093l-1.504-1.093-.747.243-2.927 4.029 2.25 1.635 2.928-4.029v-.785M9.873 12.16l.574-1.767-.462-.635-4.736-1.54-.86 2.646 4.737 1.54.747-.244m1.198-2.22h1.859l.462-.636v-4.98H10.61v4.98l.461.636");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a6($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jasmine" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jasmine extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a6, create_fragment$a6, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Java.svelte generated by Svelte v3.23.2 */

        function create_fragment$a7(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.851 18.56s-.917.534.653.714c1.902.218 2.874.187 4.969-.211 0 0 .552.346 1.321.646-4.699 2.013-10.633-.118-6.943-1.149M8.276 15.933s-1.028.761.542.924c2.032.209 3.636.227 6.413-.308 0 0 .384.389.987.602-5.679 1.661-12.007.13-7.942-1.218M13.116 11.475c1.158 1.333-.304 2.533-.304 2.533s2.939-1.518 1.589-3.418c-1.261-1.772-2.228-2.652 3.007-5.688 0-.001-8.216 2.051-4.292 6.573M19.33 20.504s.679.559-.747.991c-2.712.822-11.288 1.069-13.669.033-.856-.373.75-.89 1.254-.998.527-.114.828-.093.828-.093-.953-.671-6.156 1.317-2.643 1.887 9.58 1.553 17.462-.7 14.977-1.82M9.292 13.21s-4.362 1.036-1.544 1.412c1.189.159 3.561.123 5.77-.062 1.806-.152 3.618-.477 3.618-.477s-.637.272-1.098.587c-4.429 1.165-12.986.623-10.522-.568 2.082-1.006 3.776-.892 3.776-.892M17.116 17.584c4.503-2.34 2.421-4.589.968-4.285-.355.074-.515.138-.515.138s.132-.207.385-.297c2.875-1.011 5.086 2.981-.928 4.562 0-.001.07-.062.09-.118M14.401 0s2.494 2.494-2.365 6.33c-3.896 3.077-.888 4.832-.001 6.836-2.274-2.053-3.943-3.858-2.824-5.539 1.644-2.469 6.197-3.665 5.19-7.627M9.734 23.924c4.322.277 10.959-.153 11.116-2.198 0 0-.302.775-3.572 1.391-3.688.694-8.239.613-10.937.168 0-.001.553.457 3.393.639");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a7($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Java" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Java extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a7, create_fragment$a7, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Javascript.svelte generated by Svelte v3.23.2 */

        function create_fragment$a8(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0h24v24H0V0zm22.034 18.276c-.175-1.095-.888-2.015-3.003-2.873-.736-.345-1.554-.585-1.797-1.14-.091-.33-.105-.51-.046-.705.15-.646.915-.84 1.515-.66.39.12.75.42.976.9 1.034-.676 1.034-.676 1.755-1.125-.27-.42-.404-.601-.586-.78-.63-.705-1.469-1.065-2.834-1.034l-.705.089c-.676.165-1.32.525-1.71 1.005-1.14 1.291-.811 3.541.569 4.471 1.365 1.02 3.361 1.244 3.616 2.205.24 1.17-.87 1.545-1.966 1.41-.811-.18-1.26-.586-1.755-1.336l-1.83 1.051c.21.48.45.689.81 1.109 1.74 1.756 6.09 1.666 6.871-1.004.029-.09.24-.705.074-1.65l.046.067zm-8.983-7.245h-2.248c0 1.938-.009 3.864-.009 5.805 0 1.232.063 2.363-.138 2.711-.33.689-1.18.601-1.566.48-.396-.196-.597-.466-.83-.855-.063-.105-.11-.196-.127-.196l-1.825 1.125c.305.63.75 1.172 1.324 1.517.855.51 2.004.675 3.207.405.783-.226 1.458-.691 1.811-1.411.51-.93.402-2.07.397-3.346.012-2.054 0-4.109 0-6.179l.004-.056z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a8($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JavaScript" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Javascript extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a8, create_fragment$a8, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jbl.svelte generated by Svelte v3.23.2 */

        function create_fragment$a9(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 5.2645l2.0221 4.5892 2.0217-4.5892zm2.0221 7.601c.6982 0 1.2656-.5655 1.2656-1.2606 0-.6985-.5674-1.2618-1.2656-1.2618-.7003 0-1.2661.5633-1.2661 1.2618 0 .6951.5658 1.2607 1.2661 1.2607zm-1.0937 3.361c0 .9572.862 2.509 3.3142 2.509 2.4529 0 3.3154-1.1872 3.3154-2.509V5.2645H5.3693l.0011 11.3428c0 .6196-.5037 1.1392-1.1261 1.1392-.6231 0-1.1279-.5045-1.1279-1.124l-.0016-2.3108H.9284zm8.2885 2.3119V5.2645h4.3745c.8441 0 2.187.693 2.187 2.1628v2.2611c0 .6612-.5798 1.8328-1.4412 1.8328.8614 0 1.4412.7422 1.4412 1.3045v3.9788c0 .6767-.5463 1.7339-2.187 1.7339zm3.3802-7.559c.7955 0 .9944-.134.9944-2.2147 0-2.0801-.199-2.246-.9944-2.246h-1.1948v4.4575zm.9944 3.8108c0-2.0812 0-2.6906-.8636-2.6906h-1.3256v5.3482l1.3255.0027c.8636 0 .8636-.5807.8636-2.6603zm3.779 3.7482H24v-4.2267h-2.1886l.0016 2.3107c0 .6196-.5047 1.1241-1.1273 1.1241-.622 0-1.1273-.5045-1.1273-1.124V5.2644h-2.188Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a9($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JBL" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jbl extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a9, create_fragment$a9, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jcb.svelte generated by Svelte v3.23.2 */

        function create_fragment$aa(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.05 9.8643c.9723.0736 1.7257.3671 2.3545.6843v-1.31s-1.2577-.3162-2.4408-.368c-4.1256-.1849-5.295 1.4344-5.295 3.1292 0 1.6947 1.1694 3.3145 5.295 3.1296 1.1831-.0536 2.4408-.3694 2.4408-.3694v-1.3086c-.6193.3081-1.3826.6107-2.3545.683-1.6793.1272-2.6898-.6907-2.6898-2.1342 0-1.4448 1.0105-2.2613 2.6898-2.1354m7.685 4.1223c-.0513.0105-.1581.02-.215.02h-1.8005V12.376H20.52c.0568 0 .1636.01.2149.02a.8056.8056 0 01.6325.7951c0 .4162-.2872.721-.6325.796zm-2.0155-4.0374h1.6325c.059 0 .1454.0077.1772.0137.3376.0572.6256.3307.6256.7392 0 .409-.288.6815-.626.7392a1.571 1.571 0 01-.1773.0137h-1.6311V9.9506zm3.4994 1.9856v-.0364c.9133-.1331 1.4149-.726 1.4149-1.4199 0-.8828-.7343-1.3916-1.7293-1.4416-.0772-.0032-.203-.011-.3044-.011h-5.3323v5.9467h5.7548c1.13 0 1.9774-.6043 1.9774-1.5466 0-.8701-.7724-1.4222-1.781-1.4917zm-17.8644.6788c0 .8787-.5906 1.5311-1.6656 1.5311-.917 0-1.8174-.2726-2.6889-.6938V14.76s1.4021.383 3.191.383c2.9714 0 3.8374-1.125 3.8374-2.529V9.0266H4.3541v3.5876Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aa($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JCB" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jcb extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aa, create_fragment$aa, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jeep.svelte generated by Svelte v3.23.2 */

        function create_fragment$ab(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.056 12.325c-.021 1.07.21 1.637 1.09 1.637.882 0 1.008-.965 1.008-1.7 0-.734-.168-1.447-1.091-1.447-.567 0-.986.44-1.007 1.51m-1.784 4.47v-7.24h1.805v.826c.065-.14.11-.236.251-.406.122-.147.462-.566 1.364-.566.902 0 2.308.63 2.308 2.853 0 1.72-.84 2.98-2.287 2.98-.797 0-1.154-.278-1.364-.441a1.098 1.098 0 0 1-.251-.252v2.245h-1.826M16.03 11.55c0-.525-.294-1.028-.966-1.028-.65 0-.88.461-.88 1.028zm-1.091-2.203c1.531 0 2.874.587 2.874 3.294h-3.63c0 .86.357 1.217.986 1.217.63 0 .84-.504.84-.504h1.783c0 .776-1.07 1.826-2.685 1.805-1.847 0-2.749-1.364-2.749-2.77s.797-3.042 2.58-3.042m-4.741 2.203c0-.525-.293-1.028-.965-1.028-.65 0-.881.461-.881 1.028zM9.106 9.346c1.532 0 2.874.587 2.874 3.294H8.35c0 .86.357 1.217.987 1.217.629 0 .839-.504.839-.504h1.783c0 .776-1.07 1.826-2.685 1.805-1.847 0-2.749-1.364-2.749-2.77s.798-3.042 2.58-3.042m-4.972-2.14h1.952v5.12c0 .88-.378 2.727-3.085 2.727-2.706 0-3-1.72-3-2.686v-.944h1.888v.923c0 .567.378 1.091 1.091 1.091.714 0 1.154-.398 1.154-1.07V7.206Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ab($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jeep" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jeep extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ab, create_fragment$ab, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jekyll.svelte generated by Svelte v3.23.2 */

        function create_fragment$ac(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.073 24c-.348 0-.689-.063-1.02-.189-1.375-.525-2.104-2.02-1.726-3.402l-.015-.006.09-.226L12.399 2.01c.105-.27.057-.91.006-1.267-.016-.085-.016-.161.008-.24l.008-.023.006-.015V.458l.009-.019c.108-.292.45-.439 1.008-.439.673 0 1.602.21 2.551.573.797.307 1.523.689 2.033 1.075.602.45.842.854.707 1.2l-.031.045-.016.015c-.045.061-.09.12-.15.165-.314.271-.764.735-.84.945l-7.063 18.421-.016-.006c-.494.948-1.457 1.557-2.543 1.561H8.07l.003.006zm-2.187-3.718l-.02.05c-.447 1.201.162 2.557 1.364 3.018.271.105.551.154.837.154.971 0 1.83-.585 2.188-1.5l.027-.061 6.959-18.09c.146-.39.84-1.02.979-1.14l.016-.016c.012-.015.02-.015.02-.03 0-.06-.061-.27-.557-.645-.479-.36-1.154-.72-1.904-1.005-.868-.328-1.768-.539-2.368-.539-.39 0-.524.082-.545.126v.04c.016.104.147 1.035-.034 1.515l-6.962 18.12v.003zm8.95-11.507s-.964 1.109-1.843 1.509c-.88.398-1.529.293-2.32.756-.789.461-1.188 1.103-1.188 1.103L6.27 20.505c-.348.944.168 2.05 1.125 2.42.96.369 2.04-.12 2.412-1.056l5.029-13.094zM9.905 18.76c.104-.041.225 0 .266.105.042.104 0 .222-.105.264-.104.043-.225 0-.266-.104-.042-.097 0-.216.105-.265zm-1.014-1.802c-.152.068-.334 0-.397-.155-.07-.152 0-.334.154-.397.154-.07.335 0 .398.153.074.15.008.314-.155.39v.009zm.286-1.096c-.123-.288 0-.623.287-.758.285-.124.615 0 .75.285.121.289 0 .624-.285.757-.3.126-.629 0-.765-.285l.013.001zm2.426-2.258c.153-.074.335 0 .398.15.07.154 0 .336-.153.399-.155.07-.337 0-.399-.155-.074-.152 0-.334.154-.397v.003zm-1.293-1.379c.105-.042.226 0 .266.105.043.104 0 .226-.104.266-.104.042-.226 0-.265-.104-.044-.106.006-.227.103-.267zM13.681 1.14c.1-.261.993-.162 1.995.226.999.384 1.729.909 1.63 1.17-.104.264-.997.164-1.996-.221-1.005-.385-1.734-.91-1.632-1.176h.003z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ac($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jekyll" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jekyll extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ac, create_fragment$ac, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jenkins.svelte generated by Svelte v3.23.2 */

        function create_fragment$ad(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.873 24h-.975c-.025-.066-.049-.131-.07-.197-.215-.666-.594-1.49-.692-2.154-.146-.984.78-1.039 1.374-1.465.915-.66 1.635-1.025 2.627-1.621.295-.178 1.182-.623 1.281-.828.201-.408-.345-.982-.49-1.301-.225-.506-.345-.936-.376-1.434-.824-.131-1.455-.627-1.844-1.185-.63-.925-1.066-2.635-.525-3.936.045-.103.254-.305.285-.463.06-.309-.105-.72-.121-1.049-.06-1.692.285-3.15 1.426-3.66.463-1.84 2.113-2.453 3.673-3.367.581-.342 1.224-.562 1.89-.807 2.372-.877 6.028-.712 7.995.783.836.633 2.176 1.971 2.656 2.939 1.262 2.555 1.17 6.826.287 9.935-.121.421-.291 1.032-.533 1.533-.168.349-.689 1.05-.625 1.36.064.314 1.189 1.17 1.432 1.395.434.422 1.26.975 1.324 1.5.07.557-.248 1.336-.41 1.875-.217.721-.436 1.441-.654 2.131H2.871l.002.016zm11.104-3.541c-.545-.299-1.361-.621-2.065-.756-.869-.164-.779 1.188-.75 1.994.03.643.361 1.316.511 1.744.075.197.089.41.255.449.3.068 1.29-.326 1.575-.479.6-.328 1.064-.844 1.574-1.189.016-.17.016-.34.031-.508-.301-.148-.645-.258-1.096-.277.314-.15.75-.15 1.035-.332l.016-.193c-.496-.031-.689-.254-1.021-.436l-.065-.017zm7.455 2.936c.193-.619.359-1.221.465-1.752.059-.287.215-.918.178-1.176-.059-.459-.684-.799-1.004-1.086-.584-.525-.951-.975-1.561-1.469-.248.375-.779.615-.982.914 1.447-.689 1.709 2.625 1.141 3.689.09.33.391.451.514.736l-.086.166h1.289c.014 0 .031 0 .045.014l.001-.036zm-6.635-.012c-.049-.074-.1-.135-.15-.209l-.301.195h.451v.014zm2.771 0c.008-.209.018-.404.029-.598-.529.029-.824-.48-1.195-.527-.324-.045-.6.361-1.02.195-.096.105-.184.227-.285.316.154.18.295.375.424.584h.816c.014-.164.135-.285.299-.285.166 0 .285.121.285.27h.66l-.013.045zm2.116 0c-.314-.479-.947-.898-1.68-.555l-.031.541h1.711v.014zm-8.51 0l-.105-.344c-.225-.721-.359-1.26-.405-1.68-.914-.436-1.875-.871-2.654-1.426-.15-.105-1.109-1.35-1.23-1.305-1.739.676-3.359 1.859-4.814 2.984.256.557.48 1.141.69 1.74h8.505l.013.031zm8.265-2.113c-.029-.512-.164-1.561-.48-1.74-.66-.391-1.846.779-2.34.943.045.15.135.271.15.48.285-.074.645-.029.898.092-.299.029-.629.029-.824.164-.074.195.016.48-.029.764.689.197 1.5.303 2.385.332.164-.227.225-.645.211-1.082l.029.047zm-4.08-.36c-.045.375.045.51.119.943 1.26.391 1.035-1.74-.135-.959l.016.016zM8.761 19.5c-.45.457 1.271 1.082 1.814 1.115 0-.291.165-.564.135-.771-.649-.117-1.502-.041-1.945-.346l-.004.002zm5.565.215c0 .043-.061.029-.068.064.58.451 1.014.545 1.803.51.354-.262.67-.563 1.043-.807-.855.074-1.932.607-2.775.229l-.003.004zm3.42-17.727c-1.605-.906-4.35-1.591-6.076-.731-1.38.692-3.27 1.841-3.899 3.292.6 1.402-.166 2.686-.226 4.109-.018.758.36 1.42.391 2.243-.2.338-.825.38-1.26.356-.146-.729-.401-1.549-1.155-1.631-1.064-.115-1.845.765-1.891 1.684-.06 1.079.834 2.864 2.086 2.745.488-.046.608-.541 1.139-.541.285.57-.445.75-.523 1.155-.016.105.059.511.104.705.233.944.744 2.159 1.245 2.88.635.9 1.884 1.051 3.229 1.141.24-.525 1.125-.48 1.706-.346-.691-.27-1.336-.945-1.875-1.529-.615-.676-1.23-1.41-1.261-2.28 1.155 1.604 2.1 2.999 4.201 3.704 1.59.525 3.449-.254 4.664-1.109.51-.359.811-.93 1.17-1.439 1.35-1.936 1.98-4.71 1.846-7.395-.061-1.111-.061-2.221-.436-2.955-.389-.781-1.695-1.471-2.475-.781-.15-.764.629-1.229 1.545-.959-.66-.855-1.336-1.859-2.266-2.385l.017.067zm-4.164 12.908c.615 1.544 2.725 1.363 4.506 1.323-.084.194-.256.435-.465.515-.57.232-2.146.408-2.938-.012-.506-.271-.824-.873-1.102-1.227-.137-.172-.795-.608-.012-.609l.011.01zm.164-.871c.893.465 2.52.518 3.732.48.066.268.066.594.068.914-1.551.08-3.387-.304-3.795-1.395h-.005zm6.676-.585c-.473.9-1.145 1.897-2.539 1.928-.023-.284-.045-.735 0-.904 1.064-.103 1.727-.646 2.543-1.017l-.004-.007zm-.649-.667c-1.02.66-2.154 1.375-3.824 1.21-.352-.31-.486-1.001-.141-1.458.182.313.061.885.57.969.945.166 2.039-.578 2.73-.84.42-.712-.045-.975-.42-1.432-.781-.931-1.83-2.1-1.801-3.51.314-.225.346.345.391.449.404.961 1.424 2.176 2.174 3 .18.211.48.391.51.525.092.389-.254.854-.209 1.109l.02-.022zm-13.44-.675c-.314-.184-.393-.99-.768-1.01-.535-.03-.438 1.049-.436 1.679-.37-.329-.435-1.364-.164-1.89-.308-.15-.445.165-.618.285.22-1.59 2.34-.734 1.989.96l-.003-.024zM4.714 5.994c-.685.756-.54 2.174-.459 3.188 1.244-.785 2.898.06 2.883 1.395.595-.016.223-.744.115-1.215-.353-1.529.592-3.188.041-4.59-1.064.083-1.939.519-2.578 1.214l-.002.008zm9.12 1.113c.307.562.404 1.148.84 1.57.195.191.574.424.387.951-.045.121-.365.391-.551.45-.674.195-2.254.03-1.721-.81.563.015 1.314.359 1.732-.045-.314-.525-.885-1.53-.674-2.13l-.013.014zm6.199-.013h.068c.33.668.6 1.375 1.004 1.965-.27.629-2.053 1.19-2.023.057.389-.17 1.049-.035 1.395-.25-.193-.556-.48-1.006-.434-1.771l-.01-.001zm-6.928-1.617c-1.422-.33-2.131.592-2.56 1.553-.384-.094-.231-.615-.135-.883.255-.701 1.28-1.633 2.119-1.506.359.057.848.386.576.834v.002zM9.643 1.592c-1.56.44-3.56 1.574-4.2 2.974.495-.07.84-.321 1.33-.351.186-.016.428.074.641.015.424-.104.78-1.065 1.102-1.409.311-.346.685-.497.941-.811.166-.09.408-.074.42-.33-.074-.075-.15-.135-.233-.105v.017z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ad($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jenkins" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jenkins extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ad, create_fragment$ad, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jenkinsx.svelte generated by Svelte v3.23.2 */

        function create_fragment$ae(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.9988 3.4123c-.0652 0-.1328 0-.198.0024-1.7862.041-3.5242.5914-3.954 1.3566-1.7138.3259-3.1573 1.4314-3.9442 2.9304l-2.298-2.426-.1183 1.3977C1.31 6.35.4773 5.1286.0235 4.3778c-.1231.4442.2728 3.8864.3814 4.3306.1062.4369.8255 3.4398 1.376 3.389.0772-.0289.2244-.6348.4078-1.178l1.2601 2.344c.5866 2.3414 2.4863 4.1736 4.8616 4.666-.0507.2897-.0531.5866-.0338.8425.0507.6372.3017 1.6535 1.0428 1.7983a.8484.8484 0 00.3814-.0145c.4803-.128 1.021-.3982 1.5087-.6976.1255.058.263.0941.4103.0941h.7628a.973.973 0 00.4104-.0917c.4851.2994 1.0283.5673 1.5062.6977a.8482.8482 0 00.3814.0144c.741-.1448.9921-1.161 1.0428-1.7983.0193-.2535.017-.5528-.0338-.8425 2.3753-.4924 4.275-2.3246 4.8616-4.666l1.26-2.344c.1835.5432.3332 1.1467.408 1.178.5504.0508 1.2697-2.9521 1.376-3.389.1085-.4466.5044-3.8912.3813-4.333-.4538.7508-1.289 1.9746-1.4652 2.2956l-.1183-1.3976-2.298 2.426c-.7894-1.499-2.2329-2.6046-3.9443-2.9305-.4297-.7652-2.1677-1.3156-3.954-1.3566-.0651-.0024-.1303-.0024-.198-.0024zm0 .7483c1.9142.0169 3.8888.5962 3.7294 1.0283l-1.3445 3.6184c-.099.2631-.2317.5117-.5118.5117H10.1304c-.2824 0-.4152-.2486-.5117-.5117L8.2693 5.1865c-.1593-.4297 1.8153-1.0114 3.7295-1.026zM7.7697 5.3144a.3416.3416 0 00.0168.0531L9.1311 8.986c.169.4538.4538.8472.9921.8472h3.7512c.5383 0 .8231-.3934.992-.8472l1.3446-3.6185c.0073-.0169.0121-.0362.017-.053 2.281.5165 3.9997 2.566 3.9997 4.9967v1.4193c0 2.8146-2.0228 5.1754-4.6877 5.7065-.1086-.2366-.2704-.4345-.5045-.5552-.2776-.1448-.5842-.1328-.8714-.0217-.3018.1158-.6035.2775-.886.4345-.1424.0772-.2848.1593-.4248.239a.9548.9548 0 00-.4731-.1256h-.7628a.955.955 0 00-.4732.1255c-.14-.082-.2824-.1617-.4248-.239-.2824-.1569-.5817-.3186-.8859-.4344-.2872-.111-.5938-.1207-.8714.0217-.2341.1207-.3959.321-.5045.5552-2.6625-.531-4.6878-2.8919-4.6878-5.704v-1.4218c0-2.4308 1.7163-4.4802 3.9999-4.9968zm-7.389.4031L1.788 8.2931l.2583-1.948 1.6221 1.8563a5.6213 5.6213 0 00-.4103 2.1073v1.4218c0 .0821.0024.1618.0048.2438L1.8894 9.657l-.2245 1.4797C1.0011 9.2201.6535 7.7742.3808 5.7175zm23.2337 0c-.2679 2.0567-.6155 3.5026-1.2793 5.4192l-.227-1.4797-1.3734 2.3173c.0024-.082.0048-.1617.0048-.2438v-1.4218a5.5759 5.5759 0 00-.4128-2.1073l1.6222-1.8562.2582 1.948zM8.2694 9.8308c-.5432 0-1.038.2197-1.3929.577a1.9644 1.9644 0 00-.577 1.3952c0 .543.2198 1.038.577 1.3952.3549.3573.8473.577 1.3928.577.5456 0 1.038-.2197 1.3953-.577a1.9645 1.9645 0 00.5769-1.3952c0-.5432-.2221-1.038-.577-1.3952a1.9645 1.9645 0 00-1.3952-.577zm7.4612 0c-.5455 0-1.038.2197-1.3952.577a1.9644 1.9644 0 00-.5769 1.3952c0 .543.2221 1.038.577 1.3952.3572.3573.8496.577 1.3951.577.5432 0 1.038-.2197 1.3929-.577a1.9645 1.9645 0 00.577-1.3952c0-.5432-.2198-1.038-.577-1.3952-.3549-.3573-.8473-.577-1.3929-.577zm-7.4613.2559c.4756 0 .9028.1907 1.2142.502.3114.3115.502.7411.502 1.2143 0 .473-.193.9028-.502 1.2142a1.707 1.707 0 01-1.2142.502 1.7112 1.7112 0 01-1.2141-.502 1.7113 1.7113 0 01-.5022-1.2142c0-.4732.1908-.9028.5022-1.2142a1.7112 1.7112 0 011.2141-.5021zm7.4613 0c.4732 0 .9029.1907 1.2142.502.3114.3115.5022.7411.5022 1.2143 0 .473-.1908.9028-.5022 1.2142a1.707 1.707 0 01-1.2142.502 1.707 1.707 0 01-1.2141-.502 1.7113 1.7113 0 01-.5021-1.2142c0-.4732.1931-.9028.502-1.2142a1.707 1.707 0 011.2142-.5021zm-7.4613.3935c-.7314 0-1.3228.5913-1.3228 1.3228 0 .7314.5914 1.3228 1.3228 1.3228.7314 0 1.3252-.5914 1.3252-1.3228 0-.7315-.5938-1.3228-1.3252-1.3228zm7.4613 0c-.7314 0-1.3227.5913-1.3227 1.3228 0 .7314.5913 1.3228 1.3227 1.3228.7314 0 1.3229-.5914 1.3229-1.3228 0-.7315-.5915-1.3228-1.3229-1.3228zm-9.023 4.328l-.2535.2125c.35.3983 1.3445 1.3035 3.167 1.3035H14.3813c1.82 0 2.817-.9052 3.167-1.3035l-.2534-.2125c-.309.3525-1.2166 1.1877-2.9136 1.1877H9.6211c-1.6994 0-2.6046-.8352-2.9136-1.1877zm2.6914 2.4773c.0766-.0012.161.0146.2535.0501.2897.111.6662.3138 1.12.572a.9495.9495 0 00-.1206.466v.0627c-.2149-.0676-.507-.14-.8811-.2269.6204.391.432.2897.8497.4973-.4635.2752-.2535.1376-.898.6228.3935-.1304.7024-.2366.9294-.3283a.9562.9562 0 00.1496.4997c-.3693.2196-.8159.449-1.2335.56-.8393.2244-1.182-2.76-.169-2.7754zm5.2015 0c1.0115.0154.6708 2.9998-.1685 2.7754-.4152-.111-.8642-.3404-1.236-.56a.9854.9854 0 00.1497-.4708c.2173.0845.5045.1835.857.2994-.6252-.4683-.449-.3573-.8546-.5963v-.0483c.3621-.1786.21-.099.8063-.4755-.3331.0773-.601.1449-.8063.2052v-.041a.9494.9494 0 00-.1206-.466c.4562-.2582.8303-.461 1.12-.572.0923-.0355.1765-.0513.253-.0501");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ae($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jenkins X" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jenkinsx extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ae, create_fragment$ae, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jest.svelte generated by Svelte v3.23.2 */

        function create_fragment$af(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.251 11.82a3.117 3.117 0 0 0-2.328-3.01L22.911 0H8.104L11.1 8.838a3.116 3.116 0 0 0-2.244 2.988c0 1.043.52 1.967 1.313 2.536a8.279 8.279 0 0 1-1.084 1.244 8.14 8.14 0 0 1-2.55 1.647c-.834-.563-1.195-1.556-.869-2.446a3.11 3.11 0 0 0-.91-6.08 3.117 3.117 0 0 0-3.113 3.113c0 .848.347 1.626.903 2.182-.048.097-.097.195-.146.299-.465.959-.993 2.043-1.195 3.259-.403 2.432.257 4.384 1.849 5.489A5.093 5.093 0 0 0 5.999 24c1.827 0 3.682-.917 5.475-1.807 1.279-.632 2.599-1.292 3.898-1.612.48-.118.98-.187 1.508-.264 1.07-.153 2.175-.312 3.168-.89a4.482 4.482 0 0 0 2.182-3.091c.174-.994 0-1.994-.444-2.87.298-.48.465-1.042.465-1.647zm-1.355 0c0 .965-.785 1.75-1.75 1.75a1.753 1.753 0 0 1-1.085-3.126l.007-.007c.056-.042.118-.084.18-.125 0 0 .008 0 .008-.007.028-.014.055-.035.083-.05.007 0 .014-.006.021-.006.028-.014.063-.028.097-.042.035-.014.07-.027.098-.041.007 0 .013-.007.02-.007.028-.007.056-.021.084-.028.007 0 .02-.007.028-.007.034-.007.062-.014.097-.02h.007l.104-.022c.007 0 .02 0 .028-.007.028 0 .055-.007.083-.007h.035c.035 0 .07-.007.111-.007h.09c.028 0 .05 0 .077.007h.014c.055.007.111.014.167.028a1.766 1.766 0 0 1 1.396 1.723zM10.043 1.39h10.93l-2.509 7.4c-.104.02-.208.055-.312.09l-2.64-5.385-2.648 5.35c-.104-.034-.216-.055-.327-.076l-2.494-7.38zm4.968 9.825a3.083 3.083 0 0 0-.938-1.668l1.438-2.904 1.452 2.967c-.43.43-.743.98-.868 1.605H15.01zm-3.481-1.098c.034-.007.062-.014.097-.02h.02c.029-.008.056-.008.084-.015h.028c.028 0 .049-.007.076-.007h.271c.028 0 .049.007.07.007.014 0 .02 0 .035.007.027.007.048.007.076.014.007 0 .014 0 .028.007l.097.02h.007c.028.008.056.015.083.029.007 0 .014.007.028.007.021.007.049.014.07.027.007 0 .014.007.02.007.028.014.056.021.084.035h.007a.374.374 0 0 1 .09.049h.007c.028.014.056.034.084.048.007 0 .007.007.013.007.028.014.05.035.077.049l.007.007c.083.062.16.132.236.201l.007.007a1.747 1.747 0 0 1 .48 1.209 1.752 1.752 0 0 1-3.502 0 1.742 1.742 0 0 1 1.32-1.695zm-6.838-.049c.966 0 1.751.786 1.751 1.751s-.785 1.751-1.75 1.751-1.752-.785-1.752-1.75.786-1.752 1.751-1.752zm16.163 6.025a3.07 3.07 0 0 1-1.508 2.133c-.758.438-1.689.577-2.669.716a17.29 17.29 0 0 0-1.64.291c-1.445.355-2.834 1.05-4.182 1.717-1.724.854-3.35 1.66-4.857 1.66a3.645 3.645 0 0 1-2.154-.688c-1.529-1.056-1.453-3.036-1.272-4.12.167-1.015.632-1.966 1.077-2.877.028-.055.049-.104.077-.16.152.056.312.098.479.126-.264 1.473.486 2.994 1.946 3.745l.264.139.284-.104c1.216-.431 2.342-1.133 3.336-2.071a9.334 9.334 0 0 0 1.445-1.716c.16.027.32.034.48.034a3.117 3.117 0 0 0 3.008-2.327h1.167a3.109 3.109 0 0 0 3.01 2.327c.576 0 1.11-.16 1.57-.43.18.52.236 1.063.139 1.605z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$af($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jest" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jest extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$af, create_fragment$af, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jet.svelte generated by Svelte v3.23.2 */

        function create_fragment$ag(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.778 19.044c3.048-.498 4.755-.73 8.219-2.395L24 13.81c-3.228 3.225-9.249 5.146-15.07 5.098-.75-.01-1.948.017-2.246-.024 3.1.49 6.18.556 9.094.159M3.836 15.764c.75.003 1.805-.014 2.403-.394.535-.467.93-1.106 1.247-1.828l1.545-4.697-2.157.013-1.199 3.664c-.225 1.161-.943 1.566-1.483 1.483l-1.354-.097-.515 1.676 1.513.18m13.29-.104l1.672-5.074h2.44l.543-1.665-5.907-.01-.556 1.662H16.6l-1.73 5.077 2.257.01m-3.859-.024l.564-1.718h-3.204l.297-.909h2.668l.543-1.641h-2.661l.262-.81h3.08l.57-1.713-5.267.027-2.205 6.757 5.353.007m1.245-9.809c1.883-.072 3.743.083 5.969.277-2.192-.809-5.7-1.407-8.344-1.407-4.344 0-8.644 1.054-12.117 2.675L0 11.07c3.321-3.387 9.114-5.298 14.513-5.243");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ag($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JET" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jet extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ag, create_fragment$ag, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jetbrains.svelte generated by Svelte v3.23.2 */

        function create_fragment$ah(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0h24v24H0V0zm2.1 21h9v-1.5h-9V21zM3.3 6.9h.3c.7-.1 1.2-.7 1.2-1.5V3H3.7v2.5c0 .4-.1.5-.4.5-.3 0-.5-.1-.6-.3l-.7.6c.3.5.8.7 1.3.6zm5 0V6H6.2v-.6H8v-.9H6.2v-.6h2.1V3H5.1v4h3.2zm1.3 0h1.1v-3h1.2V3H8.5v.9h1.2v3zm-4 3.8c0-.5-.3-.9-.8-.9.4-.1.6-.5.6-.9 0-.2-.1-.5-.2-.7-.3-.3-.7-.4-1.1-.4h-2v3.9h2c.9 0 1.5-.4 1.5-1zm-2.5-2h.7c.3 0 .5.1.5.3 0 .3-.2.4-.5.4h-.7v-.7zm0 2.1v-.7h.8c.4 0 .6.1.5.3 0 .2-.2.4-.5.4h-.8zm7.4-3L9 11.3l-.6-.9c.5-.2.8-.7.8-1.2 0-.3-.1-.7-.3-.9-.4-.4-.9-.5-1.3-.5H5.7v3.9h1.1v-1.2h.5l.8 1.2H9.9l.3-.7h1.5l.3.7h1.2l-1.6-4h-1.1zm-3 1.9h-.7v-.9h.7c.3 0 .6.1.6.5 0 .2-.2.4-.6.4zm3.9.5h-.8l.4-1.1.4 1.1zm1.9 1.5h1.1V7.8h-1.1v3.9zm4-1.8l-1.6-2.1h-1v3.9h1.1V9.6l1.7 2.2h.9v-4h-1.1v2.1zm3.1-.6c-.5-.1-.7-.2-.7-.4 0-.1.1-.2.4-.2.4 0 .8.2 1.1.4l.6-.8c-.5-.4-1-.5-1.6-.5-.9 0-1.5.6-1.5 1.3 0 .8.6 1 1.5 1.2.5.1.7.2.7.4s-.2.3-.5.3c-.5 0-.9-.2-1.3-.5l-.6.7c.5.4 1.2.6 1.8.6 1 0 1.6-.5 1.6-1.3 0-.7-.6-1-1.5-1.2z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ah($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JetBrains" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jetbrains extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ah, create_fragment$ah, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jfrog.svelte generated by Svelte v3.23.2 */

        function create_fragment$ai(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.655 15.631l-1.268.353c.11.32.2.893.2 1.665v3.795h1.421v-4.015c.265-.32.552-.474.86-.474.156 0 .277.033.409.11l.386-1.312a1.05 1.05 0 00-.53-.122 1.22 1.22 0 00-.463.09c-.265.131-.596.43-.805.715 0-.32-.077-.573-.21-.805zM5.76 13.757h-.154v7.676h1.477v-3.398h1.864v-1.268H7.082v-1.764H9.41l.088-.673c-1.4-.1-2.668-.32-3.738-.573zm-3.452 8.7l.684.796c.662-.265 1.49-.86 1.71-1.81.077-.308.1-.506.1-1.51v-6.165H3.308v6.33c0 .828-.032 1.136-.142 1.423-.144.32-.486.695-.86.938zm13.422-3.892c0 1.346-.264 1.92-.871 1.92a.782.782 0 01-.717-.464c-.11-.286-.176-.773-.176-1.434 0-.563.055-.96.143-1.268.11-.353.386-.574.728-.574.254 0 .474.11.606.298.199.265.287.76.287 1.522zm.87 2.206c.465-.551.674-1.225.674-2.195 0-.916-.187-1.544-.617-2.073-.464-.574-1.06-.85-1.831-.85-1.456 0-2.426 1.18-2.426 2.967 0 1.787.96 2.934 2.426 2.934.827.01 1.367-.297 1.775-.783zm4.038-3.177c0 .52-.31.805-.86.805-.497 0-.828-.23-.828-.805 0-.529.31-.838.838-.838.53 0 .85.31.85.838zm2.503-1.213l-.585-.937c-.33.31-.727.485-1.113.485-.177 0-.276-.022-.662-.12a3.282 3.282 0 00-.97-.145c-1.38 0-2.272.75-2.272 1.92 0 .837.375 1.367 1.158 1.576-.32.077-.662.243-.816.43a.79.79 0 00-.166.52c0 .176.044.33.11.463a.68.68 0 00.31.275c.253.1.66.166 1.29.177.33 0 .529.01.595.01.386.023.584.09.739.166.143.089.253.287.253.508 0 .22-.132.44-.341.573-.188.132-.497.188-.894.188-.65 0-1.014-.243-1.014-.695 0-.2.022-.243.066-.364h-1.301c-.055.11-.122.265-.122.573 0 .386.144.717.442 1.004.485.474 1.279.606 2.04.606.838 0 1.654-.198 2.128-.727.298-.331.43-.695.43-1.17 0-.507-.143-.893-.463-1.212-.375-.364-.805-.497-1.632-.508l-.761-.01c-.143 0-.232-.056-.232-.133 0-.154.199-.288.563-.464.11.01.143.01.21.01 1.146 0 1.984-.705 1.984-1.686 0-.375-.11-.662-.32-.927.177.022.232.033.364.033.375 0 .673-.12.982-.419zM5.384 7.085c-1.764.43-2.966 1.279-2.966 2.25 0 .606.463 1.157 1.224 1.587a2.155 2.155 0 01-.353-1.157c.01-1.004.794-1.941 2.095-2.68zM24 10.889c0-.64-.397-1.224-1.059-1.709.055.2.1.397.1.596 0 1.82-2.548 3.385-6.165 4.036.408.044.827.066 1.268.066 3.23-.01 5.856-1.345 5.856-2.989zm-2.084-.992c0-.673-.574-1.29-1.555-1.798.23.276.353.574.353.883 0 1.62-3.44 2.933-7.698 2.933-4.246 0-7.698-1.312-7.698-2.933 0-.21.055-.408.165-.596-.683.452-1.07.97-1.07 1.522 0 1.753 3.916 3.176 8.747 3.176 4.83 0 8.756-1.445 8.756-3.187zM18.1 9.81c-1.786 1.147-7.279 1.588-9.639.11-1.853-1.158-1.213-3-6.518-7.036-.694-.53.133-1.092.651-.728.518.364.044.453 1.092 1.5 2.117 2.118 2.095.21 2.426.938.706 1.51 2.25 3.032 2.25 3.032 1.555 1.015 2.79 1.235 5.084-.32 1.456-.981.86 1.566 4.423-.275 1.3-.673 1.246-.22 2.569-2.063.55-.76 1.6.585.408.772-.474.078-1.28.596-1.621 1.412-.496 1.224-.287 2.128-1.125 2.658zM8.196 6.7c-.44-.199-.904-.95-1.08-1.246.496-.486.297-1.29.01-1.732-.275-.44-.617-.32-.98-.727-.376-.41.142-1.467.617-.651 1.775 3.055 2.944 1.786 4.39 1.599 1.39-.177 2.624.584 3-1.566.065-.353.407-.43.44.143.033.585.254 1.996 1.015 2.173.76.187 1.378-.177 1.555-.375.176-.2.275-.177.353.33.077.497.275 1.192 1.345.42 2.195-1.566 1.566-2.173 2.426-2.58.485-.232 1.257.518.144 1.08-1.588.805-1.754 1.797-2.757 2.426-1.688 1.059-1.17.044-3.882-.342-1.048-.143-1.38 1.015-2.195.684-1.864-.772-3.177-.618-4.4.364zm5.879-5.657c.066.463.143.452.309.485.165.044.375-.22.375-.463.01-.254-.11-.408-.353-.397-.254.01-.342.132-.331.375zm8.16.827c.2.187.728.066.85-.078.32-.352.33-.562.165-.805-.165-.231-.507-.198-.85.056-.341.253-.275.727-.164.827zm-.143 2.338c-.165.22-.176.386-.055.507.132.132.397.242.585.1.187-.155.187-.376.033-.563-.166-.2-.386-.2-.563-.044zM5.352 1.45c.253.077.374.32.584.044.11-.133.12-.32-.023-.52-.088-.12-.507-.21-.683-.032-.177.177-.01.464.121.508zM.178 1.295c.463.287.76.717 1.114.33.121-.131.264-.363.01-.826C1.117.457.511.325.301.457c-.22.12-.485.618-.121.838zM4.447 3.49c.143.154.397.143.551.055.144-.088.121-.32-.022-.518-.088-.122-.353-.188-.53 0-.176.187-.098.352 0 .463z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ai($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JFrog" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jfrog extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ai, create_fragment$ai, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jfrogbintray.svelte generated by Svelte v3.23.2 */

        function create_fragment$aj(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.617 22.316h18.766V24H2.617zm15.88-12.632l-5.655 5.655V3.249l1.744 1.743L15.79 3.79 12 0 8.21 3.79l1.204 1.203 1.744-1.804v12.15L5.504 9.686H7.97V8H2.617v5.354H4.3v-2.527L12 18.526l7.698-7.699v2.527h1.685V8H16.03v1.684z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aj($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JFrog Bintray" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jfrogbintray extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aj, create_fragment$aj, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jinja.svelte generated by Svelte v3.23.2 */

        function create_fragment$ak(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.719.668l-.08.039s-4.563 2.175-8.244 2.652c-1.854.24-4.555.481-6.965.62a65.475 65.475 0 01-3.254.117c-.917.005-1.63-.032-1.95-.11a20.19 20.19 0 01-2.4-.732l-.252-.1.346 1.172-.92.809.248.437.44.033 1.052.131.162.514.635.057.318 1.078.092.006s1.338.115 1.762.115c.365 0 .93-.041 1.072-.05l.024.396.287.054v.315l-.799.71.156.028c-.14.01-.227.018-.5.03-.429.017-.934.02-1.203-.018-.586-.086-.709-.086-.709-.086H2.98l-.122.13-.046.446h.152l.055 1.111 2.933-.113-.205 3.682-.02.347-2.242-.127-.02-.761h.538l.057-.42.464-.106.223-.312-2.111-.51-1.705.506.465.388h.166l.025.334.494.028v.763l-.611.157.19.404.105.068v.825h.343v3.296l-.566.086.098 1.247.334.056-.055 2.342 1.803.033-.32-2.303 1.982-.048-.139 1.087-.25 1.032 2.608.033.027-2.28 1.322-.119-.072 1.293-.063.99h1.633l-.053-2.3.176.027.067-1.392h-.243l-.058-.34-.131-1.29.049-1.364h.295v-1.182l-.364.027.04-.806.431-.043.022-.352.172-.025.51-.389-1.827-.375-1.709.379.285.469.239-.02.054-.004.034.442.41-.02.004.674-1.526-.035.053-.877.059-.926v-1.213l.048-1.152 3.485-.178 4.156-.24.033.674-.152 1.949-.063 1.693-1.32-.023-.006-1.018.574-.021.028-.373.27-.041-.012-.057.152-.01.29-.388-2.01-.471-1.987.426.258.45.14-.01v.089h.246v.402l.524.008-.006.856h-.527l-.014.505.187.022-.021.978.394.02-.044 3.615-.524.108.016.423h.176v.985h.289l-.07 1.205-.112 1.314 2.17.057-.069-1.172-.138-.848-.022-.593 1.325-.024-.041 1.002-.008 1.33 1.033.082 1.252-.05.533-.157-.25-.76-.053-1-.08-.583 1.233-.045-.057.742-.006 1.515.738.069.631-.016.416-.13-.187-1.424-.049-.862.25-.027.006-.895.08-.017-.027-.43h-.303l-.049-.527-.023-2.692.222-.006v-.902l.096.014v-.461l-.334-.027.006-.836.57-.051-.033-.362.26-.021-.024-.117.58-.29-2.056-.413-1.881.38.232.432.223-.02.014.077h.203l.011.426.547-.006.035.773-1.671-.012-.211-1.457-.178-.826-.145-1.469.075-.746 3.847-.293.012-1.316.201-.05-.023-.38-.239-.138h-.037l-.357.05-.793.116a62.16 62.16 0 01-1.625.216l-.191.02-.014-.178-.785-.41.006-.275.271-.008.02-.672c.09-.006.352-.024.771-.062.484-.045 1.04-.105 1.361-.18.597-.14 1.452-.281 1.452-.281l.076-.012.408-1.108.805-.234.066-.184 1.78-.492.306-.252-.717-1.564.047-.236.344-.18.297-.906-.252-.223zM14.826 6.73l-.01.526.407.017-.016.32-.789.518-.086.258-1.86.09.01-.184.112-.181.01-.153.001-.228.067-.156.031-.16v-.092l.08-.323 2.043-.252zm-5.181.461l-.043.264.199.234-.014.387.176.27-.047.328.025.035-1.847.074.02-.152-.653-.354-.022-.345.291-.014.028-.598 1.887-.129zm4.015 8.5l1.258.082-.05 1.938.183 1.541-1.34-.047-.05-3.514zm-10.226.084l2.16.112L5.4 17.17v1.219l.137.523-2.09.098-.013-3.235zm15.377.01v3.256l-1.291.094-.051-1.723-.158-1.592 1.5-.035zm-11.495.076l1.538.006.017 2.996-1.43.026-.076-.928-.006-1.047-.043-1.053Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ak($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jinja" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jinja extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ak, create_fragment$ak, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jira.svelte generated by Svelte v3.23.2 */

        function create_fragment$al(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.571 11.513H0a5.218 5.218 0 0 0 5.232 5.215h2.13v2.057A5.215 5.215 0 0 0 12.575 24V12.518a1.005 1.005 0 0 0-1.005-1.005zm5.723-5.756H5.736a5.215 5.215 0 0 0 5.215 5.214h2.129v2.058a5.218 5.218 0 0 0 5.215 5.214V6.758a1.001 1.001 0 0 0-1.001-1.001zM23.013 0H11.455a5.215 5.215 0 0 0 5.215 5.215h2.129v2.057A5.215 5.215 0 0 0 24 12.483V1.005A1.001 1.001 0 0 0 23.013 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$al($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jira" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jira extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$al, create_fragment$al, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jirasoftware.svelte generated by Svelte v3.23.2 */

        function create_fragment$am(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.323 11.33L13.001 1 12 0 4.225 7.775.67 11.33a.96.96 0 0 0 0 1.347l7.103 7.103L12 24l7.771-7.771.121-.121 3.431-3.431a.945.945 0 0 0 0-1.347zM12 15.551L8.449 12 12 8.453 15.548 12 12 15.551z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$am($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jira Software" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jirasoftware extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$am, create_fragment$am, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Johndeere.svelte generated by Svelte v3.23.2 */

        function create_fragment$an(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.9985 1.1609c-3.457.0002-6.9828.7454-10.2957 2.3475C.5331 6.3093 0 9.1929 0 12.0069c0 2.806.5258 5.6572 1.6956 8.4841 3.3292 1.61 6.8415 2.3481 10.3041 2.3481 3.4644 0 6.9774-.738 10.3029-2.348C23.4723 17.6637 24 14.8127 24 12.0068c0-2.814-.5345-5.6976-1.7034-8.4985-3.3123-1.602-6.8372-2.3473-10.2969-2.3475h-.0006zm0 .916c3.4185 0 6.6966.7568 9.5728 2.1054.9712 2.4297 1.5026 5.0671 1.5026 7.8246 0 2.7508-.5279 5.3856-1.496 7.8096-2.8779 1.3506-6.1578 2.1073-9.5794 2.1073-3.4197 0-6.6996-.7567-9.5775-2.1073-.967-2.424-1.4967-5.0586-1.4967-7.8096 0-2.7574.5304-5.3947 1.502-7.8246 2.8783-1.3487 6.155-2.1055 9.5722-2.1055zm-.0006.687c-3.1279 0-6.2393.6677-9.0219 1.9239-.8997 2.3398-1.3586 4.7996-1.3586 7.319 0 2.5135.4581 4.968 1.3532 7.3066 2.783 1.258 5.8979 1.9227 9.0273 1.9227 3.131 0 6.2453-.6647 9.0279-1.9227l.0041-.003-.0006-.0006c-.6049-.9957-1.4173-1.7997-1.4261-1.8073-.01-.005-.1691-.0544-.1691-.0544-1.7246-.53-2.8551-.9283-3.3548-1.1872-.6876-.3571-1.41-1.2241-1.4895-1.3216-.8061-.0608-1.4729-.0478-2.1145.0299l-.4087.0531c-.7793.1006-1.584.2073-2.3726.0807-.525-.086-1.0346-.2537-1.5749-.4296-.8324-.2726-1.685-.5524-2.6594-.5509H5.421l.0167.0347c.2214.4306 1.0958 1.7369 2.191 2.096.2416.058.4165.1223.4923.1816 0 .0026.4192.8556.5335 1.0862-.6814-.3094-2.789-1.3813-4.4894-3.4504v-.003c0-.0276-.044-.43-.0532-.518 1.0126-.3778 3.2927-.597 3.5496-.6214l.0186-.0018.0083-.0203c.1361-1.1996.4201-2.1597.9524-3.2109.0153-.0317.0245-.0608.0245-.086a.1175.1175 0 0 0-.0132-.052c-.0298-.0566-.1026-.0675-.1057-.0675L6.9946 9.219a222.297 222.297 0 0 0-.1678-.5126c1.1184-.416 2.4974-.8055 3.2867-.9769.1334-.213.1708-.3286.1708-.4678 0-.1181-.0569-.219-.1708-.2963-.5595-.3794-2.3215-.1508-4.104.533-.004-.0073-.0037-.0092-.009-.0168.3701-.2769 1.0317-.688 1.5223-.916l.0191-.0107-.006-.0185c-.133-.4509-1.0038-.796-1.1017-.8311.002-.0153.0039-.0252.0054-.037.8852-.0605 1.4727.3536 1.652.6488l.009.0143.0173-.0053c.1136-.0367.5135-.1639.9464-.2151l.0257-.0012-.0072-.0263c-.1422-.7583-.8658-1.2647-1.1125-1.4172.007-.0123.0093-.017.0162-.0257.8546.0661 1.6439.8023 1.8217 1.4244l.0047.0167.018.0018c.2294.008.5074.0332.6936.0645l.0192.0036.0071-.0161a1.3133 1.3133 0 0 0 .1034-.5174c0-.5602-.3164-1.1606-.7056-1.5403.0076-.0107.011-.0207.0209-.0299 1.1227.426 1.4082 1.2351 1.4082 1.9884 0 .5273-.1398 1.0297-.23 1.3497l-.0376.1326 1.7649-.2133c-.1682.213-.5309.5922-1.2547.9918 0-.0038-.7462-.095-.7462-.095l-.0192-.003-.0065.0192c-.0501.154-.487 1.5335-.4894 2.5476 0 .376.1068.6676.3167.8687.374.3599.9933.3801 1.4262.3633 1.8404-.0673 3.2765.0457 4.2731.3406l.0592.0161.009-.0137c.0619-.0953.1105-.272.1105-.5061 0-.4443-.1781-1.1067-.7762-1.8558.0065-.0053.0067-.0092.0144-.0149.099.0547 1.7136.9716 1.9292 2.3558-.0378.0146-.7737.315-.7737.315l.0239.0238c.6822.7143.9176 1.5776 1.1065 2.2686.1503.5476.3298.897.5676 1.1024.2757.2378 1.32.7366 1.6335.883.2607.3705.7092 1.0643 1.0343 1.6019a20.315 20.315 0 0 0 1.067-6.5077c0-2.5195-.46-4.9795-1.3586-7.3191-2.7818-1.2561-5.896-1.9239-9.0237-1.9239Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$an($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "John Deere" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Johndeere extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$an, create_fragment$an, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Joomla.svelte generated by Svelte v3.23.2 */

        function create_fragment$ao(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.719 14.759L14.22 17.26l-2.37 2.37-.462.466c-1.368 1.365-3.297 1.83-5.047 1.397-.327 1.424-1.604 2.49-3.13 2.49C1.438 23.983 0 22.547 0 20.772c0-1.518 1.055-2.789 2.469-3.123-.446-1.76.016-3.705 1.396-5.08l.179-.18 2.37 2.37-.184.181c-.769.779-.769 2.024 0 2.789.771.78 2.022.78 2.787 0l.465-.465 2.367-2.371 2.502-2.506 2.368 2.372zm.924 6.652c-1.822.563-3.885.12-5.328-1.318l-.18-.185 2.365-2.369.18.184c.771.768 2.018.768 2.787 0 .765-.765.769-2.01-.004-2.781l-.466-.465-2.365-2.37-2.502-2.503 2.37-2.369 2.499 2.505 2.367 2.37.464.464c1.365 1.36 1.846 3.278 1.411 5.021 1.56.224 2.759 1.56 2.759 3.18 0 1.784-1.439 3.21-3.209 3.21-1.545 0-2.851-1.096-3.135-2.565l-.013-.009zM6.975 9.461l2.508-2.505 2.37-2.369.462-.461C13.74 2.7 15.772 2.251 17.58 2.79c.212-1.561 1.555-2.775 3.179-2.775 1.772 0 3.211 1.437 3.211 3.209 0 1.631-1.216 2.978-2.79 3.186.519 1.799.068 3.816-1.35 5.234l-.182.184-2.369-2.369.184-.184c.769-.77.769-2.016 0-2.783-.766-.766-2.011-.768-2.781.003l-.462.461-2.37 2.369-2.505 2.502-2.37-2.366zm-2.653 2.647l-.461-.462C2.43 10.215 1.986 8.17 2.529 6.358 1.1 6.029.03 4.754.03 3.224.03 1.454 1.47.015 3.24.015c1.596 0 2.92 1.166 3.17 2.691 1.73-.405 3.626.065 4.979 1.415l.184.185-2.37 2.37-.183-.181c-.77-.765-2.016-.765-2.785 0-.771.781-.77 2.025-.005 2.79l.465.466 2.37 2.369 2.505 2.505-2.367 2.37-2.51-2.505-2.371-2.37v-.012z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ao($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Joomla" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Joomla extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ao, create_fragment$ao, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jpeg.svelte generated by Svelte v3.23.2 */

        function create_fragment$ap(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.559 20.407c-.63 0-1.08-.026-1.08-.026V17.22h1.073c1.19 0 1.95.33 1.95 1.426 0 .93-.329 1.76-1.943 1.76m.028-3.965H6.61V24h.87v-2.797h1.275c1.783 0 2.634-1.096 2.634-2.483 0-1.413-.871-2.279-2.8-2.279M13.37 20.571h3.063v-.812H13.37v-2.55h3.548v-.768H12.5v7.42h4.566v-.768H13.37zM21.485 19.938v.753h1.289v1.866c-.395.587-1.452.587-1.452.587-.805 0-1.454-.277-1.927-.838-.47-.558-.707-1.158-.707-2.06 0-.947.235-1.675.711-2.257.482-.583 1.15-.905 1.982-.905.427 0 .884.131 1.33.405l.538-.602c-.482-.396-1.096-.593-1.84-.593-1.11 0-2.005.361-2.656 1.08-.657.715-.99 1.668-.99 2.832s.305 2.043.9 2.745c.591.692 1.42 1.047 2.44 1.047.46 0 .932-.043 1.423-.197.378-.12.508-.216 1.075-.216v-3.647zM3.856 16.441h-.584v.768h.584v3.571c0 1.101.033 1.746-.345 2.124a1.267 1.267 0 01-.865.367c-1.362 0-1.412-1.091-1.412-1.091H.4c.08 1.942 2.362 1.813 2.362 1.813.607-.033 1.087-.233 1.462-.609.495-.499.507-1.422.507-2.192v-4.75zM17.352 0H3.063v14.282h8.266V8.271h6.023zM18.038 9.067h5.213v5.216h-5.213z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ap($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JPEG" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jpeg extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ap, create_fragment$ap, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jquery.svelte generated by Svelte v3.23.2 */

        function create_fragment$aq(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.534 5.874c-2.123 3.05-1.86 7.017-.237 10.256.037.079.078.154.118.229.023.052.049.1.077.149.013.028.031.057.047.083.026.052.054.102.081.152l.157.265c.029.049.057.097.09.146.055.094.12.187.177.281.026.039.05.078.079.117a6.36 6.36 0 0 0 .31.444c.078.107.156.211.24.315.027.038.057.076.085.114l.221.269c.027.031.054.067.083.099.098.118.202.233.306.349 0 .002.003.004.005.007a3.13 3.13 0 0 0 .424.44c.08.082.16.164.245.244l.101.097c.111.104.222.208.339.308.002 0 .003.002.005.003l.057.05c.102.089.205.178.31.26l.125.105c.085.068.173.133.26.2l.136.104c.093.07.192.139.287.207.035.025.07.05.106.073l.029.023.281.185.12.08c.147.094.293.183.438.271.042.021.084.044.123.068.108.062.22.125.329.183.06.034.122.063.184.094.075.042.153.083.233.125a.324.324 0 0 1 .056.023c.033.015.064.031.096.047.12.06.245.117.375.174.024.01.05.02.076.034.144.063.288.123.437.182.034.01.07.027.105.04.135.051.274.103.411.152l.05.018c.153.052.304.102.459.15.036.01.073.023.111.033.159.048.313.105.473.136 10.26 1.87 13.242-6.169 13.242-6.169-2.505 3.262-6.95 4.122-11.16 3.165-.156-.036-.312-.086-.469-.132a13.522 13.522 0 0 1-.567-.181l-.062-.024c-.136-.046-.267-.097-.4-.148a1.613 1.613 0 0 0-.11-.041c-.147-.059-.29-.12-.432-.183-.031-.01-.057-.024-.088-.036a23.41 23.41 0 0 1-.361-.17c-.037-.016-.07-.033-.106-.052-.094-.044-.188-.094-.28-.142a3.942 3.942 0 0 1-.187-.096c-.113-.06-.226-.125-.339-.187-.034-.024-.073-.044-.112-.066a15.902 15.902 0 0 1-.438-.269 2.104 2.104 0 0 1-.118-.079 6.002 6.002 0 0 1-.312-.206c-.035-.023-.067-.048-.103-.073a9.541 9.541 0 0 1-.294-.212c-.042-.034-.087-.066-.132-.1-.088-.069-.177-.135-.265-.208l-.118-.094a10.58 10.58 0 0 1-.334-.281.258.258 0 0 0-.037-.03l-.347-.316-.1-.094c-.082-.083-.166-.163-.25-.245l-.097-.1a9.07 9.07 0 0 1-.309-.323l-.015-.016c-.106-.116-.209-.234-.313-.354-.027-.031-.052-.064-.08-.097l-.226-.277a21.248 21.248 0 0 1-.34-.448C2.16 11.786 1.315 7.386 3.184 3.777M8.121 3.305c-1.539 2.209-1.452 5.163-.254 7.499a9.1 9.1 0 0 0 .677 1.132c.23.33.484.72.792.986.107.122.223.24.344.359l.09.09c.114.11.231.218.35.325l.015.013a9.855 9.855 0 0 0 .414.342c.034.023.063.05.096.073.14.108.281.212.427.315l.015.009c.062.045.128.086.198.13.028.018.06.042.09.06.106.068.21.132.317.197.017.007.032.016.048.023.09.055.188.108.282.157.033.02.065.035.099.054.067.033.133.068.197.102l.032.014c.135.066.273.128.408.19.034.013.063.024.092.038.111.048.224.094.335.137.05.017.097.037.144.052.102.038.209.073.31.108l.14.045c.146.045.294.104.448.129 7.92 1.313 9.754-4.787 9.754-4.787-1.651 2.376-4.846 3.508-8.251 2.624a8.03 8.03 0 0 1-.448-.13c-.048-.013-.09-.028-.136-.042-.104-.036-.211-.071-.312-.109l-.144-.054c-.112-.045-.226-.087-.335-.135-.034-.015-.065-.025-.091-.04-.14-.063-.281-.125-.417-.192l-.206-.107-.119-.06c-.092-.048-.177-.098-.265-.15a.62.62 0 0 1-.062-.034c-.106-.066-.216-.13-.317-.198-.034-.019-.065-.042-.097-.062l-.208-.136c-.144-.1-.285-.208-.427-.312-.032-.029-.063-.053-.094-.079-1.497-1.177-2.678-2.786-3.238-4.608-.59-1.894-.46-4.018.559-5.742M13.66 1.384c-.908 1.332-.995 2.986-.37 4.455.664 1.56 2.022 2.785 3.604 3.365.065.025.128.046.195.07l.088.027c.092.029.185.063.28.084 4.376.844 5.56-2.247 5.879-2.701-1.042 1.496-2.789 1.855-4.932 1.334a4.844 4.844 0 0 1-.516-.16 6.344 6.344 0 0 1-.617-.254 6.521 6.521 0 0 1-1.08-.66c-1.92-1.454-3.109-4.23-1.857-6.491");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aq($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "jQuery" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jquery extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aq, create_fragment$aq, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jrgroup.svelte generated by Svelte v3.23.2 */

        function create_fragment$ar(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.955 13.653h1.089c2.684 0 2.684-4.123 2.684-4.123s0-4.162-2.684-4.162H9.18v8.869c0 1.556-3.112 1.478-3.112 1.478s-3.073.116-3.073-1.478v-3.423H0v4.395c0 3.19 5.68 3.384 6.107 3.423.428 0 6.107-.194 6.107-3.423V8.363h7.896c.661 0 .661 1.167.661 1.167s0 1.167-.66 1.167h-6.069l5.952 7.702H24Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ar($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JR Group" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jrgroup extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ar, create_fragment$ar, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jsdelivr.svelte generated by Svelte v3.23.2 */

        function create_fragment$as(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.851 0L.811 4.02l1.56 14.7L11.85 24l9.6-5.28 1.74-14.76zm.062 4.622a6.668 6.75 0 0 1 2.666.572 12.507 12.507 0 0 0-2.59 1.95c-.045-.02-.092-.031-.138-.045a1.181 1.181 0 0 0-.346-.056c-.071 0-.141.01-.21.021a8.91 8.91 0 0 1-.615-2.318 6.668 6.75 0 0 1 1.171-.122 6.668 6.75 0 0 1 .062-.002zm-1.99.312a9.763 9.763 0 0 0 .69 2.504 1.213 1.213 0 0 0-.328.825 1.202 1.202 0 0 0 .18.63c-.937 1.294-1.656 2.803-1.905 4.31-.01.056-.013.11-.02.166-.282.09-.515.284-.656.54-.987-.333-1.885-.968-2.615-2.022a6.668 6.75 0 0 1-.026-.515 6.668 6.75 0 0 1 4.68-6.438zm5.507.709a6.668 6.75 0 0 1 2.53 2.9c-.377.953-1.049 1.892-1.893 2.727a1.242 1.242 0 0 0-.644-.184 1.243 1.243 0 0 0-.768.27c-.462-.354-.91-.737-1.318-1.168-.333-.35-.637-.73-.921-1.123.19-.215.31-.494.31-.802 0-.212-.061-.41-.159-.586 1.058-1.008 2.112-1.67 2.863-2.034zm-3.925 1.982a.624.624 0 0 1 .346.114.624.624 0 0 1 .292.524.624.624 0 0 1-.292.524.626.626 0 0 1-.346.113.634.634 0 0 1-.638-.637c0-.355.283-.638.638-.638zm-.441 1.771a1.205 1.205 0 0 0 .675.062c.036.05.075.097.112.148a11.438 11.438 0 0 0 .921 1.119 12.103 12.103 0 0 0 1.446 1.277c-.032.11-.054.224-.054.342a1.236 1.236 0 0 0 .066.38 9.91 9.91 0 0 1-2.118 1.042c-.087.029-.173.052-.261.078a7.735 7.735 0 0 1-1.87.332 1.15 1.15 0 0 0-.66-.773c.004-.024.005-.049.01-.073.219-1.333.873-2.73 1.733-3.934zm7.272.19a6.668 6.75 0 0 1 .245 1.786 6.668 6.75 0 0 1-.259 1.856 9.993 9.993 0 0 1-1.666-.63 1.243 1.243 0 0 0-.065-.713 9.434 9.434 0 0 0 1.745-2.3zm-2.913 2.101c.367 0 .657.291.657.658s-.291.657-.657.657c-.367 0-.658-.29-.658-.657s.29-.658.658-.658zm.837 1.59a10.79 10.79 0 0 0 1.802.688 6.668 6.75 0 0 1-6.149 4.157 6.668 6.75 0 0 1-.062-.004 6.668 6.75 0 0 1-.042 0c-.087-.042-.168-.08-.266-.129-.312-.154-.667-.352-.846-.5a3.796 3.796 0 0 1-1.294-2.03c.21-.111.38-.284.487-.495a8.428 8.428 0 0 0 1.96-.306 9.11 9.11 0 0 0 .513-.154 11.083 11.083 0 0 0 2.341-1.13c.205.143.452.23.719.23a1.248 1.248 0 0 0 .837-.328zm-10.707.116a5.761 5.761 0 0 0 2.212 1.298 1.146 1.146 0 0 0 .857.87 4.602 4.602 0 0 0 1.24 2.222 6.668 6.75 0 0 1-4.31-4.39zm3.327.464c.331 0 .595.263.595.596s-.264.595-.595.595a.59.59 0 0 1-.596-.595.591.591 0 0 1 .596-.596z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$as($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "jsDelivr" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jsdelivr extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$as, create_fragment$as, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jsfiddle.svelte generated by Svelte v3.23.2 */

        function create_fragment$at(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.9 3.602c-2.749 0-5.103 1.544-6.35 3.779-.536-.317-1.139-.54-1.806-.54-1.981 0-3.6 1.606-3.6 3.579 0 .263.063.513.118.762C.912 12.09 0 13.602 0 15.344c0 2.763 2.241 5.012 5.008 5.054a.421.421 0 00.008 0h14c2.746.017 4.984-2.206 4.984-4.937 0-1.946-1.153-3.602-2.799-4.41.003-.062.01-.115.01-.184 0-4.008-3.28-7.265-7.31-7.265zm0 .843c3.58 0 6.47 2.872 6.47 6.422 0 .115-.012.242-.02.387a.421.421 0 00.26.414 4.104 4.104 0 012.546 3.793 4.094 4.094 0 01-4.135 4.096.421.421 0 00-.003 0H5.02C2.702 19.52.844 17.653.844 15.344c0-1.545.834-2.883 2.08-3.62a.421.421 0 00.187-.49 2.701 2.701 0 01-.125-.814 2.741 2.741 0 012.758-2.736 2.75 2.75 0 011.686.576.421.421 0 00.636-.15A6.462 6.462 0 0113.9 4.444zm-5.33 6.877c-1.586 0-2.91 1.213-2.91 2.737 0 1.523 1.324 2.736 2.91 2.736 1.411 0 2.182-.931 2.496-1.266a.421.421 0 10-.613-.578c-.378.402-.819 1.002-1.883 1.002-1.162 0-2.068-.86-2.068-1.894 0-1.035.906-1.895 2.068-1.895.533 0 1.105.297 1.686.77.372.303.737.668 1.098 1.043a.421.421 0 00.085.123c.533.552 1.122 1.205 1.774 1.736.652.531 1.386.959 2.217.959 1.586 0 2.91-1.213 2.91-2.736 0-1.524-1.324-2.737-2.91-2.737-1.411 0-2.182.931-2.496 1.266a.421.421 0 10.613.578c.378-.402.819-1.002 1.883-1.002 1.162 0 2.068.86 2.068 1.895 0 1.034-.906 1.894-2.068 1.894-.533 0-1.105-.297-1.686-.77-.372-.303-.737-.67-1.098-1.044a.421.421 0 00-.085-.121c-.533-.552-1.122-1.208-1.774-1.739-.652-.53-1.386-.957-2.217-.957Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$at($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JSFiddle" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jsfiddle extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$at, create_fragment$at, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Json.svelte generated by Svelte v3.23.2 */

        function create_fragment$au(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.043 23.968c.479-.004.953-.029 1.426-.094a11.805 11.805 0 003.146-.863 12.404 12.404 0 003.793-2.542 11.977 11.977 0 002.44-3.427 11.794 11.794 0 001.02-3.476c.149-1.16.135-2.346-.045-3.499a11.96 11.96 0 00-.793-2.788 11.197 11.197 0 00-.854-1.617c-1.168-1.837-2.861-3.314-4.81-4.3a12.835 12.835 0 00-2.172-.87h-.005c.119.063.24.132.345.201.12.074.239.146.351.225a8.93 8.93 0 011.559 1.33c1.063 1.145 1.797 2.548 2.218 4.041.284.982.434 1.998.495 3.017.044.743.044 1.491-.047 2.229-.149 1.27-.554 2.51-1.228 3.596a7.475 7.475 0 01-1.903 2.084c-1.244.928-2.877 1.482-4.436 1.114a3.916 3.916 0 01-.748-.258 4.692 4.692 0 01-.779-.45 6.08 6.08 0 01-1.244-1.105 6.507 6.507 0 01-1.049-1.747 7.366 7.366 0 01-.494-2.54c-.03-1.273.225-2.553.854-3.67a6.43 6.43 0 011.663-1.918c.225-.178.464-.333.704-.479l.016-.007a5.121 5.121 0 00-1.441-.12 4.963 4.963 0 00-1.228.24c-.359.12-.704.27-1.019.45a6.146 6.146 0 00-.733.494c-.211.18-.42.36-.615.555-1.123 1.153-1.768 2.682-2.022 4.256-.15.973-.15 1.96-.091 2.95.105 1.395.391 2.787.945 4.062a8.518 8.518 0 001.348 2.173 8.14 8.14 0 003.132 2.23 7.934 7.934 0 002.113.54c.074.015.149.015.209.015zm-2.934-.398a4.102 4.102 0 01-.45-.228 8.5 8.5 0 01-2.038-1.534c-1.094-1.137-1.827-2.566-2.247-4.08a15.184 15.184 0 01-.495-3.172 12.14 12.14 0 01.046-2.082c.135-1.257.495-2.501 1.124-3.58a6.889 6.889 0 011.783-2.053 6.23 6.23 0 011.633-.9 5.363 5.363 0 013.522-.045c.029 0 .029 0 .045.03.015.015.045.015.06.03.045.016.104.045.165.074.239.12.479.271.704.42a6.294 6.294 0 012.097 2.502c.42.914.615 1.934.631 2.938.014 1.079-.18 2.157-.645 3.146a6.42 6.42 0 01-2.638 2.832c.09.03.18.045.271.075.225.044.449.074.688.074 1.468.045 2.892-.66 3.94-1.647.195-.18.375-.375.54-.585.225-.27.435-.54.614-.823.239-.375.435-.75.614-1.154a8.112 8.112 0 00.509-1.664c.196-1.004.211-2.022.149-3.026-.135-2.022-.673-4.045-1.842-5.724a9.054 9.054 0 00-.555-.719 9.868 9.868 0 00-1.063-1.034 8.477 8.477 0 00-1.363-.915 9.927 9.927 0 00-1.692-.598l-.3-.06c-.209-.03-.42-.044-.634-.06a8.453 8.453 0 00-1.015.016c-.704.045-1.412.16-2.112.337C5.799 1.227 2.863 3.566 1.3 6.67A11.834 11.834 0 00.238 9.801a11.81 11.81 0 00-.104 3.775c.12 1.02.374 2.023.778 2.977.227.57.511 1.124.825 1.648 1.094 1.783 2.683 3.236 4.51 4.24.688.39 1.408.69 2.157.944.226.074.45.15.689.21z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$au($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JSON" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Json extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$au, create_fragment$au, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jsonwebtokens.svelte generated by Svelte v3.23.2 */

        function create_fragment$av(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.2 0v6.456L12 8.928l1.8-2.472V0zm3.6 6.456v3.072l2.904-.96L20.52 3.36l-2.928-2.136zm2.904 2.112l-1.8 2.496 2.928.936 6.144-1.992-1.128-3.432zM17.832 12l-2.928.936 1.8 2.496 6.144 1.992 1.128-3.432zm-1.128 3.432l-2.904-.96v3.072l3.792 5.232 2.928-2.136zM13.8 17.544L12 15.072l-1.8 2.472V24h3.6zm-3.6 0v-3.072l-2.904.96L3.48 20.64l2.928 2.136zm-2.904-2.112l1.8-2.496L6.168 12 .024 13.992l1.128 3.432zM6.168 12l2.928-.936-1.8-2.496-6.144-1.992-1.128 3.432zm1.128-3.432l2.904.96V6.456L6.408 1.224 3.48 3.36Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$av($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JSON Web Tokens" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jsonwebtokens extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$av, create_fragment$av, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Julia.svelte generated by Svelte v3.23.2 */

        function create_fragment$aw(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.138 17.569a5.569 5.569 0 1 1-11.138 0 5.569 5.569 0 1 1 11.138 0zm6.431-11.138a5.569 5.569 0 1 1-11.138 0 5.569 5.569 0 1 1 11.138 0zM24 17.569a5.569 5.569 0 1 1-11.138 0 5.569 5.569 0 1 1 11.138 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aw($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Julia" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Julia extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aw, create_fragment$aw, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Jupyter.svelte generated by Svelte v3.23.2 */

        function create_fragment$ax(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.157 22.201A1.784 1.799 0 0 1 5.374 24a1.784 1.799 0 0 1-1.784-1.799 1.784 1.799 0 0 1 1.784-1.799 1.784 1.799 0 0 1 1.783 1.799zM20.582 1.427a1.415 1.427 0 0 1-1.415 1.428 1.415 1.427 0 0 1-1.416-1.428A1.415 1.427 0 0 1 19.167 0a1.415 1.427 0 0 1 1.415 1.427zM4.992 3.336A1.047 1.056 0 0 1 3.946 4.39a1.047 1.056 0 0 1-1.047-1.055A1.047 1.056 0 0 1 3.946 2.28a1.047 1.056 0 0 1 1.046 1.056zm7.336 1.517c3.769 0 7.06 1.38 8.768 3.424a9.363 9.363 0 0 0-3.393-4.547 9.238 9.238 0 0 0-5.377-1.728A9.238 9.238 0 0 0 6.95 3.73a9.363 9.363 0 0 0-3.394 4.547c1.713-2.04 5.004-3.424 8.772-3.424zm.001 13.295c-3.768 0-7.06-1.381-8.768-3.425a9.363 9.363 0 0 0 3.394 4.547A9.238 9.238 0 0 0 12.33 21a9.238 9.238 0 0 0 5.377-1.729 9.363 9.363 0 0 0 3.393-4.547c-1.712 2.044-5.003 3.425-8.772 3.425Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ax($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Jupyter" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Jupyter extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ax, create_fragment$ax, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Justeat.svelte generated by Svelte v3.23.2 */

        function create_fragment$ay(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.196.232a1.376 1.376 0 0 1 1.528 0 33.157 33.157 0 0 1 3.384 2.438s.293.203.301-.14a5.367 5.367 0 0 1 .079-1.329.606.606 0 0 1 .562-.39s1.329.066 2.173.179c.377.05.671.352.711.73 0 0 .543 3.62.665 4.925 0 0 .105.664 1.067 1.79 0 0 1.953 2.735 2.18 3.259 0 0 .454.946-.523 1.074 0 0-1.783.18-1.955.22a.446.446 0 0 0-.39.484s-.094 6.296-.555 9.32c0 0-.121 1.2-.782 1.173 0 0-1.833-.059-2.259-.047 0 0-.183 0-.156-.246 0 0 .934-9.817.301-14.78 0 0-.028-.64-.516-.782 0 0-.445-.18-.871.391a15.574 15.574 0 0 0-2.9 8.86s-.05 1.563.188 1.953c0 0 .148.274.907.336l.96.13s.176 0 .16.233c0 0-.218 2.88-.28 3.393a1.018 1.018 0 0 1-.071.34s-.035.098-.336.086c0 0-4.236-.03-4.713 0 0 0-.2 0-.242-.105-.043-.106-.294-3.717-.286-4.229a.255.255 0 0 1 .149-.25 2.548 2.548 0 0 0 1.172-1.871c.052-.548.06-1.098.024-1.646 0 0 .156-5.522.195-6.41 0 0 .031-.3-.36-.355a.364.364 0 0 0-.437.27v.03c0 .032-.274 3.643-.223 5.081 0 0 .094.942-.558.961 0 0-.634.095-.665-.69 0 0 .047-3.542.203-5.292a.39.39 0 0 0-.348-.391.39.39 0 0 0-.437.316.065.065 0 0 0 0 .031s-.274 3.39-.223 5.179c0 0 .078.868-.614.836 0 0-.578.066-.61-.704 0 0 .157-4.85.2-5.224A.39.39 0 0 0 6.647 9h-.039a.391.391 0 0 0-.418.325.167.167 0 0 0 0 .035s-.258 5.8-.223 7.503c0 0-.023 1.751 1.27 2.462 0 0 .192.11.196.277 0 0 .145 3.076.277 4.069 0 0 .047.238-.164.238L4.291 24a.67.67 0 0 1-.665-.633 72.876 72.876 0 0 1-.601-9.829.5.5 0 0 0-.391-.535S.969 12.85.566 12.749a.692.692 0 0 1-.422-1.02A33.497 33.497 0 0 1 11.197.232Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ay($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Just Eat" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Justeat extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ay, create_fragment$ay, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Justgiving.svelte generated by Svelte v3.23.2 */

        function create_fragment$az(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.716 9.925H15.33l-4.898 4.919h6.727c-.885 1.975-2.865 3.061-5.16 3.061-3.104 0-5.639-2.67-5.639-5.771C6.36 9.02 8.896 6.42 12 6.42c1.134 0 2.189.295 3.061.871l4.542-4.561C17.541 1.031 14.893 0 12 0 5.37 0 0 5.367 0 12c0 6.623 5.37 12 12 12s12-5.115 12-11.738c0-.896-.103-1.35-.284-2.337z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$az($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "JustGiving" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Justgiving extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$az, create_fragment$az, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kaggle.svelte generated by Svelte v3.23.2 */

        function create_fragment$aA(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.825 23.859c-.022.092-.117.141-.281.141h-3.139c-.187 0-.351-.082-.492-.248l-5.178-6.589-1.448 1.374v5.111c0 .235-.117.352-.351.352H5.505c-.236 0-.354-.117-.354-.352V.353c0-.233.118-.353.354-.353h2.431c.234 0 .351.12.351.353v14.343l6.203-6.272c.165-.165.33-.246.495-.246h3.239c.144 0 .236.06.285.18.046.149.034.255-.036.315l-6.555 6.344 6.836 8.507c.095.104.117.208.07.358");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aA($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kaggle" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kaggle extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aA, create_fragment$aA, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kahoot.svelte generated by Svelte v3.23.2 */

        function create_fragment$aB(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.486468 20.122872c-.102115.242867-.268302.649317-.374421.909245a6.1929584 6.2081525 0 01-.225253.511826c-.05606.07326-.298335.709532-.298335.782793.004.08832 2.290574 1.67297 2.413712 1.67297.07709 0 .574646-.26896.863971-.465662.06007-.04215.243273-.149533.404454-.242866.166187-.09032.387435-.222795.494556-.295053.110124-.06824.293329-.174623.416468-.234838.120135-.06021.217244-.132473.217244-.16258a1.7820022 1.7863743 0 00-.11513-.341218 26.389651 26.454397 0 01-.289325-.819925c-.09811-.29405-.272306-.80688-.38343-1.144083l-.208234-.606163h-2.733071zM3.8033473 1.1931548c-.3466858.0938338-1.7260133.4297052-2.7391887.6682354-.42177018.0964643-.83519765.1973136-.91398988.2236221L0 2.1271065V21.075351h.24842727c.1334833 0 .98165843.02631 1.87988993.05613.8991584.02981 1.7501145.05613 1.8882327.05613h.2521351l-.023174-3.297328L4.22141 14.5912l.5005624-.462153c1.2458441-1.156697 2.0337665-1.865271 2.0458171-1.835455.090843.271853.2447193.783116.3819106 1.245268.095477.317455.2169103.71296.2725284.876949.055619.164867.1455338.473554.2048598.691036.063034.21573.1260675.420937.1418259.455138.019466.03333.114017.342009.2132026.690158.098258.342886.1965171.660344.2169104.70156.018539.04034.1177248.35078.2159834.689281l.3985959 1.324196c.1177249.388488.283652.937459.370787 1.220712.0825.279748.189102.619126.2363773.754178l.090843.245544h1.8835982c1.485928 0 1.888232-.0114 1.888232-.04823 0-.04912-.153877-.597204-.472753-1.667959-.111236-.380596-.283653-.966398-.37913-1.305778a16.522267 15.630746 0 00-.228034-.7647c-.03152-.08243-.129775-.418304-.21691-.745406-.09084-.328857-.177051-.631402-.201152-.67262-.01946-.04122-.11031-.342888-.197445-.670866a9.7720906 9.2448012 0 00-.196517-.671745c-.01946-.04122-.111236-.343763-.197443-.671743a26.451015 25.023752 0 00-.255844-.876949c-.05099-.15259-.157584-.506876-.236376-.783116a145.16309 137.33028 0 00-.335562-1.156699c-.366153-1.2496523-.4727541-1.6223553-.4727541-1.6679565 0-.040339.9974171-1.0891713 3.6698651-3.8533159 1.403428-1.4557361 1.453484-1.508353 1.453484-1.56097 0-.040339-.232669-.137681-.725816-.3016705a6.8493623 6.4797793 0 01-.472753-.171882 7.54088 7.1339835 0 00-.516321-.1867904 9.0342245 8.546749 0 01-.512613-.190298 14.590467 13.803185 0 00-.551546-.1973136 14.852799 14.051361 0 01-.610871-.2236221c-.241011-.1052344-.279944-.1008493-.456994.0596328l-.571939.5147693-1.0993842.9883221c-.3782033.3393777-.7489903.6752494-.8277826.7462823-.0787922.0701553-.4690455.4253204-.8676414.7831158-.4013769.3586724-.9139899.8208246-1.1429509 1.0304156-.228034.205206-.8314897.7497918-1.3403948 1.2049286a52.790794 49.94227 0 00-.9909282.9076425c-.0667417.0701553-.0713765-.1122495-.0713765-3.9217178v-3.99539l-.086208.0035c-.050983 0-.2132025.037709-.3670791.074541zM17.208369.0662374c0 .03813608.04205.25089527.0921.47569743.111125.47971177.197221.88917287.336378 1.54651847.200225.9523984.460517 2.1516778.514578 2.3794907.03204.1274548.121136.5449445.200225.9283125.07809.383368.224252 1.0597816.317356 1.5083823.09711.44559.264297 1.2303904.375422 1.7412132.110124.5108228.271305 1.2765551.360405 1.702074.0901.425518.175197.815911.193217.870104.01802.05419.100113.437562.182205.851037.07909.414479.16018.788815.179201.831969.01702.04215.103116.433547.196221.870105.150169.74265.314353 1.501357.735827 3.462354.0931.444587.236265 1.101932.310348 1.458204.118133.565016.190214.788814.233262.722578.003-.007.07008-.493762.146165-1.07885.07809-.584084.153172-1.105946.168189-1.160139.01702-.05419.09611-.592113.174195-1.19928.08309-.607166.161181-1.164154.179202-1.237415.01802-.07326.10712-.684443.19622-1.354835.0901-.668385.172194-1.24444.182205-1.275551.01001-.03111.100112-.622221.200225-1.314691.09611-.692471.253284-1.7994214.350394-2.456767l.353397-2.4567664c.09711-.692471.186209-1.3116805.200225-1.3728989.06407-.3181352.385433-2.6273753.40045-2.8632168l.01402-.2709669-.635714-.1274548c-.350395-.0732615-1.047178-.2127592-1.54774-.31713165-.500562-.10437244-1.225377-.25089527-1.607807-.3291746-.381428-.07727574-.849955-.17361952-1.036164-.21275918a42.17739 42.280871 0 00-.946063-.19268757c-.332373-.06623635-.636715-.13548345-.668751-.15455149a.48053993.48171892 0 00-.207233-.03913966c-.110124 0-.14216.01505372-.14216.06623635z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aB($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kahoot" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kahoot extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aB, create_fragment$aB, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kaios.svelte generated by Svelte v3.23.2 */

        function create_fragment$aC(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.47 0a2.81 2.81 0 0 0-2.84 2.78v18.43A2.8 2.8 0 0 0 4.47 24a2.8 2.8 0 0 0 2.85-2.78V2.78A2.83 2.83 0 0 0 4.47 0zm9.4 8.54a2.8 2.8 0 0 0-3.89-.66 2.68 2.68 0 0 0-.68 3.8l8 11.15a2.81 2.81 0 0 0 3.88.66 2.68 2.68 0 0 0 .74-3.72l-.06-.09-7.98-11.14zm3.65-1.18a3.71 3.71 0 0 0 3.74-3.67A3.71 3.71 0 0 0 17.52.02a3.71 3.71 0 0 0-3.75 3.67 3.71 3.71 0 0 0 3.75 3.67z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aC($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "KaiOS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kaios extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aC, create_fragment$aC, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kakao.svelte generated by Svelte v3.23.2 */

        function create_fragment$aD(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.0743 10.4403l.655.4728-1.6101 2.0192 1.8647 2.2373-.646.5004-2.201-2.6924zm-2.2376 5.102H0V8.5121l.8367-.182zm20.944-4.3837c-.4364 0-.7715.1637-1.0049.4912-.2338.3274-.3505.8064-.3505 1.437 0 .6247.1167 1.096.3505 1.4143.2334.3183.5685.4775 1.0049.4775.4423 0 .7804-.1593 1.0143-.4775.2332-.3182.35-.7896.35-1.4142 0-.6307-.1168-1.1097-.35-1.4371-.234-.3275-.572-.4912-1.0143-.4912m0-.673c.691 0 1.234.2245 1.6277.673.3944.4488.5916 1.0915.5916 1.9283 0 .8244-.1955 1.4583-.5868 1.901-.3909.4422-.9356.6637-1.6325.6637-.691 0-1.234-.2215-1.6277-.6638-.3944-.4426-.5916-1.0765-.5916-1.901 0-.8367.1984-1.4794.5957-1.9282.3973-.4485.9385-.673 1.6236-.673m-5.534 4.4658a1.496 1.496 0 0 0 .3576-.0456 2.8804 2.8804 0 0 0 .3713-.1181 2.0066 2.0066 0 0 0 .3488-.1774 2.0778 2.0778 0 0 0 .2895-.2229v-1.1641h-.8693c-.441 0-.7626.0758-.9645.2274-.2025.1516-.3031.391-.3031.7185 0 .5214.2563.7822.7697.7822m-1.5704-.7458c0-.5032.1682-.887.5045-1.1504.337-.2638.826-.396 1.4691-.396h.964v-.3182c0-.77-.3393-1.155-1.0185-1.155-.2184 0-.447.0304-.6869.091-.2398.0608-.4594.1365-.659.2274l-.2457-.5913c.2487-.1394.517-.2469.8047-.323.2878-.0754.5685-.1136.8414-.1136 1.176 0 1.7646.6276 1.7646 1.8826v3.1833h-.6188l-.1-.5457c-.2488.2001-.5134.3547-.796.464-.2817.1092-.55.1637-.8046.1637-.4429 0-.7899-.1258-1.0416-.3775-.2515-.2517-.3772-.5987-.3772-1.0413m-1.6508-3.7653l.655.4728-1.6095 2.0192 1.864 2.2373-.6454.5004-2.201-2.6924zm-2.237 5.102h-.8367V8.5121l.8368-.182zm-4.4936-.5909c.1148 0 .2339-.0151.3576-.0456a2.8794 2.8794 0 0 0 .3713-.1181 1.9842 1.9842 0 0 0 .3488-.1774 2.0477 2.0477 0 0 0 .29-.2229v-1.1641h-.8698c-.4404 0-.762.0758-.9645.2274-.202.1516-.3031.391-.3031.7185 0 .5214.2563.7822.7697.7822m-1.5704-.7458c0-.5032.1682-.887.5052-1.1504.3363-.2638.826-.396 1.4684-.396h.9646v-.3182c0-.77-.3399-1.155-1.019-1.155-.218 0-.4471.0304-.6863.091-.2398.0608-.4595.1365-.6597.2274l-.2457-.5913c.2487-.1394.517-.2469.8053-.323.2878-.0754.5684-.1136.8408-.1136 1.1766 0 1.7646.6276 1.7646 1.8826v3.1833h-.6182l-.1001-.5457c-.2487.2001-.514.3547-.7958.464-.282.1092-.5501.1637-.8053.1637-.4423 0-.7893-.1258-1.041-.3775-.2516-.2517-.3778-.5987-.3778-1.0413Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aD($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kakao" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kakao extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aD, create_fragment$aD, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Karlsruherverkehrsverbund.svelte generated by Svelte v3.23.2 */

        function create_fragment$aE(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.91 6.089c-2.491 2.4-6.153 4.238-11.265 4.3l-.397 1.745h22.316L24 10.388H9.309c2.984-1.01 4.688-2.676 6.56-4.3zm10.45 6.721c-5.723.013-8.441 2.712-10.095 5.101h2.49c2.6-3.296 5.827-3.428 7.196-3.442zm-22.307.475L0 17.887h1.236l.488-2.173 1.097 2.173H4.27l-1.34-2.368 2.23-2.234H3.575l-1.723 1.869.436-1.87zm4.237 0l.509 4.602h1.517l2.63-4.602h-1.32l-1.852 3.463-.265-3.463zm4.89 0l.503 4.602h1.54l2.62-4.602h-1.32l-1.852 3.463-.268-3.463Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aE($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Karlsruher Verkehrsverbund" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Karlsruherverkehrsverbund extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aE, create_fragment$aE, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kaspersky.svelte generated by Svelte v3.23.2 */

        function create_fragment$aF(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.812 12.01c0 .909-.555 1.34-1.25 1.34H9.14v-.55h.392c.42 0 .7-.224.7-.795 0-.563-.265-.842-.712-.842-.43 0-.736.264-.736.83v2.284H8.2V10.69h.579V11h.08a.94.94 0 0 1 .777-.377c.641 0 1.176.466 1.176 1.387zm-3.804-.237l-.384-.039c-.303-.027-.462-.109-.462-.287 0-.21.205-.33.497-.33.302 0 .497.144.512.345h.555c-.023-.52-.423-.839-1.063-.839-.645 0-1.08.342-1.08.843 0 .42.264.691.866.75l.392.038c.237.023.396.07.396.299 0 .206-.147.354-.54.354-.36 0-.539-.164-.601-.385h-.601c.057.5.48.89 1.202.89.68 0 1.119-.358 1.119-.89-.004-.461-.31-.702-.808-.75zm6.044.753c-.089.21-.306.366-.617.366-.422 0-.737-.277-.737-.871 0-.566.29-.882.745-.882.404 0 .633.24.656.606h-1.04v.42h1.611v-.275c0-.766-.508-1.263-1.23-1.263-.672 0-1.317.46-1.317 1.394 0 .936.645 1.394 1.316 1.394.613 0 1.056-.38 1.192-.89zm-9.126-1.903c-.633 0-1.107.331-1.165.839h.621c.043-.186.213-.326.54-.326.419 0 .555.22.555.49v.908c-.237.271-.513.396-.788.396-.288 0-.485-.14-.485-.384 0-.238.155-.385.45-.385h.461v-.416h-.48c-.662 0-1.033.331-1.033.839 0 .474.356.831.946.831.33 0 .621-.132.84-.29h.08v.224h.579v-1.774c.016-.656-.43-.952-1.122-.952zM0 13.348h.579V9.712H0zm2.43-2.658h-.706L.883 11.8v.346l.864 1.202h.718L1.45 11.971zm20.93 0l-.473 1.051c-.117.253-.225.501-.26.669h-.082c-.035-.168-.148-.408-.264-.66l-.474-1.06h-.641l1.115 2.388-.551 1.202h.617L24 10.69zm-2.321 0h-.707l-.842 1.107v.345l.865 1.203h.719l-1.014-1.378zm-3.627 1.083l-.383-.039c-.304-.027-.462-.109-.462-.287 0-.21.205-.33.497-.33.302 0 .496.144.511.346h.555c-.023-.521-.422-.84-1.063-.84-.645 0-1.08.342-1.08.843 0 .42.265.691.866.75l.393.038c.236.023.396.07.396.299 0 .206-.148.354-.54.354-.361 0-.54-.164-.601-.385h-.603c.059.5.481.89 1.204.89.68 0 1.118-.358 1.118-.89 0-.461-.31-.702-.808-.75zm1.196 1.576h.578V9.712h-.578zM14.788 11h-.082v-.31h-.578v2.66h.578v-1.391c0-.473.218-.749.653-.749h.365v-.587h-.213c-.4 0-.571.153-.723.377z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aF($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kaspersky" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kaspersky extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aF, create_fragment$aF, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Katana.svelte generated by Svelte v3.23.2 */

        function create_fragment$aG(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm.016 22.762H12c-5.95-.009-10.765-4.84-10.756-10.789.009-5.95 4.839-10.766 10.789-10.757 5.943.009 10.756 4.829 10.756 10.773 0 5.95-4.823 10.773-10.773 10.773zm9.475-10.857a5.562 5.562 0 0 1-9.142 3.214 6.331 6.331 0 0 0 3.251-2.062l.104.169c.339.584.568 1.226.676 1.893a6.281 6.281 0 0 0-.349-2.656 6.328 6.328 0 0 0-8.94-8.63 5.563 5.563 0 0 1 7.418 6.256 6.334 6.334 0 0 0-3.425-1.762l.093-.175a5.53 5.53 0 0 1 1.304-1.533 6.31 6.31 0 0 0-2.122 1.636 6.327 6.327 0 0 0-3.016 12.044 5.564 5.564 0 0 1 1.713-9.562 6.33 6.33 0 0 0 .185 3.818h-.186a5.535 5.535 0 0 1-1.98-.36 6.295 6.295 0 0 0 2.471 1.025 6.328 6.328 0 0 0 8.513 2.758 6.319 6.319 0 0 0 3.432-6.073zm-11.018-1.443a5.582 5.582 0 0 1 3.6.998 5.584 5.584 0 0 1-2.667 2.618 5.57 5.57 0 0 1-.933-3.616z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aG($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Katana" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Katana extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aG, create_fragment$aG, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kde.svelte generated by Svelte v3.23.2 */

        function create_fragment$aH(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.881 0L9.89.382v16.435l3.949-.594V9.216l5.308 7.772 4.162-1.317-5.436-7.475 5.479-7.05L19.105.17 13.84 7.22zM4.834 4.005a.203.203 0 0 0-.123.059L3.145 5.63a.203.203 0 0 0-.03.248L4.949 8.9a7.84 7.84 0 0 0-.772 1.759l-3.367.7a.203.203 0 0 0-.162.199v2.215c0 .093.064.174.155.196l3.268.8a7.83 7.83 0 0 0 .801 2.03L2.98 19.683a.203.203 0 0 0 .027.254l1.566 1.567a.204.204 0 0 0 .249.03l2.964-1.8c.582.336 1.21.6 1.874.78l.692 3.325c.02.094.102.161.198.161h2.215a.202.202 0 0 0 .197-.155l.815-3.332a7.807 7.807 0 0 0 1.927-.811l2.922 1.915c.08.053.186.042.254-.026l1.567-1.566a.202.202 0 0 0 .03-.248l-1.067-1.758-.345.11a.12.12 0 0 1-.135-.047L17.371 15.8a6.347 6.347 0 1 1-8.255-8.674V5.488c-.401.14-.79.31-1.159.511l-.001-.002-2.99-1.96a.203.203 0 0 0-.132-.033Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aH($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "KDE" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kde extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aH, create_fragment$aH, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Keepassxc.svelte generated by Svelte v3.23.2 */

        function create_fragment$aI(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.378 0 0 5.378 0 12c0 6.623 5.378 12 12 12 6.623 0 12-5.377 12-12 0-6.622-5.377-12-12-12zm0 .791a11.203 11.203 0 0 1 11.209 11.21A11.202 11.202 0 0 1 12 23.208 11.203 11.203 0 0 1 .791 12 11.203 11.203 0 0 1 12.001.791zm0 1.871a9.356 9.356 0 0 0-1.705.162A1.746 1.746 0 0 0 12 4.95a1.746 1.746 0 0 0 1.706-2.126A9.342 9.342 0 0 0 12 2.662zM7.2 4a9.338 9.338 0 0 0-4.54 8 9.338 9.338 0 0 0 18.677 0 9.338 9.338 0 0 0-4.54-7.998 4.888 4.888 0 0 1-2.701 5.365l-.12 2.066 1.482 1.483-1.483 1.482.989.989-.989.988.12 1.857L12 20.328l-2.096-2.096V9.367A4.89 4.89 0 0 1 7.2 4zm3.4 6.543v6.99h.7v-6.99z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aI($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "KeePassXC" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Keepassxc extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aI, create_fragment$aI, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kentico.svelte generated by Svelte v3.23.2 */

        function create_fragment$aJ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v25h25V0H0zm14.5 8.8l3-3s2.2 1.3.9 2.6l-2.1 2.1c-1.2 1.1-2.9-.6-1.8-1.7zm-.8-3.3v3c0 1.5-2.5 1.5-2.5 0V4.3s2.5-.6 2.5 1.2zM8.4 6.7l2.1 2.1c1.1 1.1-.6 2.8-1.7 1.7l-3-3s1.3-2.1 2.6-.8zm-2.9 4.6h3c1.5 0 1.5 2.5 0 2.5H4.3c0-.1-.6-2.5 1.2-2.5zm5 4.9l-3 3s-2.2-1.3-.9-2.6l2.1-2.1c1.2-1.1 2.9.6 1.8 1.7zm3.2 4.5s-2.5.6-2.5-1.2v-3c0-1.5 2.5-1.5 2.5 0v4.2zm-1.2-6.4c-1 0-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8 1.8.8 1.8 1.8-.8 1.8-1.8 1.8zm4.1 4l-2.1-2.1c-1.1-1.1.6-2.8 1.7-1.7l3 3s-1.3 2.1-2.6.8zm2.9-4.6h-3c-1.5 0-1.5-2.5 0-2.5h4.2c0 .1.6 2.5-1.2 2.5z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aJ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kentico" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kentico extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aJ, create_fragment$aJ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Keras.svelte generated by Svelte v3.23.2 */

        function create_fragment$aK(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 0H0v24h24V0zM8.45 5.16l.2.17v6.24l6.46-6.45h1.96l.2.4-5.14 5.1 5.47 7.94-.2.3h-1.94l-4.65-6.88-2.16 2.08v4.6l-.19.2H7l-.2-.2V5.33l.17-.17h1.48z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aK($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Keras" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Keras extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aK, create_fragment$aK, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Keybase.svelte generated by Svelte v3.23.2 */

        function create_fragment$aL(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.446 21.371c0 .528-.428.953-.954.953-.525 0-.954-.425-.954-.953 0-.526.428-.954.953-.954.524 0 .951.431.951.955m5.922-.001c0 .528-.428.953-.955.953-.526 0-.952-.425-.952-.953 0-.526.423-.954.949-.954s.954.431.954.955M20.904 12.213l-.156-.204c-.046-.06-.096-.116-.143-.175-.045-.061-.094-.113-.141-.169-.104-.12-.209-.239-.319-.359l-.076-.08-.091-.099-.135-.131c-.015-.018-.032-.034-.05-.053-1.16-1.139-2.505-1.986-3.955-2.504l-.23-.078c.012-.027.024-.055.035-.083.41-1.064.367-2.223-.12-3.255-.491-1.035-1.356-1.8-2.438-2.16-.656-.216-1.23-.319-1.711-.305-.033-.105-.1-.577.496-1.848L10.663 0l-.287.399c-.33.455-.648.895-.945 1.328-.328-.345-.766-.552-1.245-.58L6.79 1.061h-.012c-.033-.003-.07-.003-.104-.003-.99 0-1.81.771-1.87 1.755l-.088 1.402v.003c-.061 1.029.727 1.915 1.755 1.979l1.002.061c-.065.84.073 1.62.405 2.306-1.346.562-2.586 1.401-3.66 2.484C.913 14.391.913 18.051.913 20.994v1.775l1.305-1.387c.266.93.652 1.807 1.145 2.615H5.06c-.833-1.114-1.419-2.426-1.68-3.848l1.913-2.03-.985 3.091 1.74-1.268c3.075-2.234 6.744-2.75 10.91-1.529 1.805.532 3.56.039 4.473-1.257l.104-.165c.091.498.141.998.141 1.496 0 1.563-.255 3.687-1.38 5.512h1.611c.776-1.563 1.181-3.432 1.181-5.512-.001-2.199-.786-4.421-2.184-6.274zM8.894 6.191c.123-1.002.578-1.949 1.23-2.97.025.05.054.097.084.144.264.398.713.625 1.199.605.217-.008.605.025 1.233.232.714.236 1.286.744 1.608 1.425s.349 1.442.079 2.149c-.173.445-.454.82-.806 1.109l-.408-.502-.002-.003c-.279-.341-.694-.535-1.134-.535-.335 0-.664.117-.925.33-.334.27-.514.66-.534 1.058-1.2-.541-1.8-1.643-1.628-3.041l.004-.001zm4.304 5.11l-.519.425c-.046.036-.095.053-.146.053-.066 0-.133-.03-.177-.085l-.111-.135c-.083-.1-.067-.25.034-.334l.51-.42-1.055-1.299c-.109-.133-.091-.33.044-.436.058-.048.126-.072.194-.072.091 0 .181.038.24.113l2.963 3.645c.109.135.09.33-.042.436-.039.029-.082.053-.126.063-.023.006-.045.009-.07.009-.09 0-.178-.04-.24-.113l-.295-.365-1.045.854c-.046.037-.1.055-.154.055-.068 0-.139-.03-.186-.09l-.477-.579c-.082-.102-.068-.252.035-.336l1.051-.857-.426-.533-.002.001zM7.753 4.866l-1.196-.075c-.255-.015-.45-.235-.435-.488l.09-1.401c.014-.245.216-.436.461-.436h.024l1.401.091c.123.006.236.06.317.152.083.094.123.21.116.336l-.007.101c-.32.567-.585 1.134-.773 1.72h.002zm12.524 11.481c-.565.805-1.687 1.081-2.924.718-3.886-1.141-7.396-.903-10.468.701l1.636-5.123-5.291 5.609c.099-3.762 2.453-6.966 5.758-8.311.471.373 1.034.66 1.673.841.16.044.322.074.48.102-.183.458-.119.997.21 1.407l.075.09c-.172.45-.105.975.221 1.374l.475.582c.266.325.659.513 1.079.513.321 0 .635-.111.886-.314l.285-.232c.174.074.367.113.566.113.113 0 .222-.01.33-.035.218-.05.424-.15.598-.291.623-.51.72-1.435.209-2.06l-1.67-2.056c.145-.117.281-.244.408-.381.135.037.271.078.4.12.266.097.533.198.795.315 1.005.445 1.954 1.1 2.771 1.897.029.03.059.055.085.083l.17.175c.038.039.076.079.111.12.079.085.16.175.239.267l.126.15c.045.053.086.104.13.16l.114.15c.04.051.079.102.117.154.838 1.149.987 2.329.404 3.157v.005zM7.719 4.115l-.835-.051.053-.835.834.051-.052.835z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aL($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Keybase" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Keybase extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aL, create_fragment$aL, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Keycdn.svelte generated by Svelte v3.23.2 */

        function create_fragment$aM(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.305 19.065c.226.01.454.04.667.12v-.003l.032.012 2.81-2.74.102.137c.146.2.3.38.464.56l.06.068c.043.043.077.086.12.13l.326.325.077.07.07.06c1.305 1.107 2.937 1.734 4.655 1.777 1.417.034 2.8-.326 4.01-1.04l.216.224c.25.266.507.533.756.8-1.495.96-3.23 1.442-5.017 1.4-2.01-.053-3.926-.774-5.463-2.063l.01-.016-1.803 1.777c.067.21.093.43.096.65 0 1.242-1.006 2.248-2.247 2.248S0 22.552 0 21.31c0-1.24 1.005-2.246 2.246-2.246h.058zM19.48 7.477c.885 1.452 1.323 3.127 1.28 4.828-.05 2.08-.833 4.063-2.208 5.618l.01.01 1.107 1.176c.446-.06.892.094 1.202.42.524.558.507 1.435-.052 1.967-.558.524-1.435.507-1.967-.052-.31-.326-.438-.782-.352-1.22-.514-.55-1.425-1.52-1.95-2.07l-.11-.12.128-.103c.335-.266.644-.558.928-.885 1.177-1.323 1.838-3.006 1.88-4.776.035-1.34-.283-2.653-.927-3.813l1.03-.98zM3.828 2.226c.395-.006.765.15 1.04.432.31.326.44.782.353 1.22L7.35 6.11l-.128.104c-.335.266-.644.558-.928.885-1.177 1.322-1.838 3.005-1.89 4.775-.034 1.34.283 2.654.928 3.822l-1.022.996c-.893-1.46-1.34-3.135-1.288-4.853.044-2.068.85-4.066 2.204-5.622L4.053 4.994c-.447.06-.893-.095-1.203-.42-.524-.56-.507-1.436.052-1.968.217-.204.497-.335.794-.37.044-.006.09-.007.133-.01zM21.753.442C22.993.442 24 1.448 24 2.69s-1.006 2.246-2.247 2.246c-.24.003-.474-.04-.7-.112l-.002.002-.033-.012-3.05 2.895-.102-.138c-.163-.215-.344-.43-.533-.627l-.034-.043-.266-.266-.12-.103-.077-.07-.06-.05-.077-.07c-1.297-1.09-2.92-1.71-4.62-1.752-1.418-.033-2.8.32-4.004 1.04l-.98-1.022c1.496-.962 3.23-1.443 5.017-1.4 2.01.052 3.927.773 5.464 2.07h.017l2.02-1.917c-.07-.216-.1-.443-.103-.67 0-1.242 1.006-2.248 2.247-2.248zM11.96 5.458c.254 0 .507.02.76.05 3.624.455 6.192 3.762 5.746 7.387-.455 3.625-3.762 6.193-7.387 5.747-3.626-.455-6.194-3.762-5.748-7.387.432-3.363 3.258-5.785 6.628-5.797zm-.1 2.84c-1.466.116-2.528 1.226-2.566 2.7.027 1.053.565 1.94 1.505 2.425l-.512 2.4h3.423l-.51-2.4c.935-.507 1.49-1.346 1.505-2.423-.02-1.522-1.198-2.668-2.706-2.706l-.14.004zm.052-.016h-.01H11.912z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aM($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "KeyCDN" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Keycdn extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aM, create_fragment$aM, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Khanacademy.svelte generated by Svelte v3.23.2 */

        function create_fragment$aN(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.724 4.973L13.418.328a3.214 3.214 0 0 0-2.828 0L2.276 4.973A3.05 3.05 0 0 0 .862 7.371v9.256a3.05 3.05 0 0 0 1.414 2.4l8.306 4.645a3.214 3.214 0 0 0 2.828 0l8.314-4.645a3.05 3.05 0 0 0 1.414-2.4V7.373a3.05 3.05 0 0 0-1.414-2.4zM12 4.921a2.571 2.571 0 1 1 .001 5.143A2.571 2.571 0 0 1 12 4.92zm3.094 13.627a9.119 9.119 0 0 1-3.103.549 8.972 8.972 0 0 1-3.076-.55 8.493 8.493 0 0 1-5.486-7.987v-.857c4.646.017 8.074 3.823 8.074 8.51v.198h.926v-.197c0-4.688 3.445-8.51 8.056-8.51.026.29.043.582.086.856a8.502 8.502 0 0 1-5.477 7.988z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aN($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Khan Academy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Khanacademy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aN, create_fragment$aN, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Khronosgroup.svelte generated by Svelte v3.23.2 */

        function create_fragment$aO(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.511 12.946H0v-2.615h.511v2.615zm.008-1.299l.791-1.316h.571l-.839 1.298.839 1.316h-.57l-.792-1.298zm3.11.238v1.061h-.511v-2.615h.511v1.061h.843v-1.061h.511v2.615h-.51v-1.061h-.844zm3.37 1.061h-.511v-2.615h.621c.198 0 .345.006.442.021a.787.787 0 0 1 .587.358.82.82 0 0 1 .117.439.806.806 0 0 1-.167.515.743.743 0 0 1-.453.269l.653 1.014h-.609l-.678-1.212-.002 1.211zm0-1.34h.114c.208 0 .365-.037.474-.112a.377.377 0 0 0 .161-.328c0-.139-.045-.241-.136-.307-.09-.066-.231-.099-.422-.099h-.191v.846zm8.51 1.34h-.502v-2.615h.485L16.574 12v-1.669h.502v2.615h-.475l-1.092-1.72v1.72zm2.962-1.313a1.353 1.353 0 0 1 .228-.765c.129-.189.292-.333.487-.435a1.358 1.358 0 0 1 1.141-.053 1.37 1.37 0 0 1 .731.729 1.413 1.413 0 0 1 .005 1.04c-.065.164-.159.31-.283.436a1.327 1.327 0 0 1-.963.413c-.195 0-.374-.035-.54-.105a1.27 1.27 0 0 1-.436-.309 1.34 1.34 0 0 1-.37-.951zm.535-.018a.854.854 0 0 0 .221.58.83.83 0 0 0 .274.201.765.765 0 0 0 .316.071.762.762 0 0 0 .576-.244.847.847 0 0 0 .232-.608.78.78 0 0 0-.235-.569.764.764 0 0 0-.564-.236.799.799 0 0 0-.582.235.775.775 0 0 0-.238.57zm3.389.522l.469-.001v.037c0 .11.028.198.085.263a.286.286 0 0 0 .227.099.32.32 0 0 0 .241-.092.347.347 0 0 0 .089-.25c0-.168-.12-.289-.36-.362a1.981 1.981 0 0 1-.074-.023c-.203-.063-.354-.154-.452-.27a.665.665 0 0 1-.147-.443c0-.245.068-.443.204-.591a.702.702 0 0 1 .544-.223c.212 0 .381.066.506.198s.196.318.21.555h-.464v-.022a.271.271 0 0 0-.076-.2.268.268 0 0 0-.198-.076c-.084 0-.15.026-.199.079s-.072.124-.072.214c0 .039.005.072.015.101.01.03.026.056.048.079.049.054.155.103.316.15.072.019.127.035.165.049.179.061.312.148.398.262s.13.259.13.436c0 .27-.075.485-.225.649a.768.768 0 0 1-.595.245.733.733 0 0 1-.566-.236c-.141-.16-.215-.369-.219-.627zm-5.032 1.337l-.07.077a.334.334 0 0 0-.103-.065.292.292 0 0 0-.111-.021.26.26 0 0 0-.2.084c-.054.056-.08.124-.08.205s.027.15.08.205c.054.056.12.084.2.084a.29.29 0 0 0 .189-.067v-.173h-.155v-.102h.266v.336a.619.619 0 0 1-.147.085.436.436 0 0 1-.152.028.383.383 0 0 1-.395-.395.4.4 0 0 1 .233-.363.428.428 0 0 1 .32-.002.332.332 0 0 1 .125.084zm1.091-.094h.143a.83.83 0 0 1 .099.006.247.247 0 0 1 .068.022c.032.017.058.043.076.076s.028.072.028.114a.182.182 0 0 1-.048.128.213.213 0 0 1-.128.067l.229.31-.106.045-.252-.365v.347l-.112.009.003-.759zm.113.1v.238h.04c.048 0 .085-.01.112-.032a.112.112 0 0 0 .04-.09.106.106 0 0 0-.037-.087.181.181 0 0 0-.111-.03h-.044v.001zm1.738-.119a.377.377 0 0 1 .256.095.403.403 0 0 1-.097.665.39.39 0 0 1-.161.032.395.395 0 0 1-.257-.095.404.404 0 0 1-.138-.302.4.4 0 0 1 .254-.371.402.402 0 0 1 .143-.024zm0 .104a.26.26 0 0 0-.2.084c-.054.056-.08.124-.08.205s.027.15.08.205c.054.056.12.083.201.083a.284.284 0 0 0 .281-.289.279.279 0 0 0-.282-.288zm1.563-.095v.426c0 .09.012.154.035.191.023.036.062.054.117.054s.096-.017.12-.052.037-.092.037-.172v-.436l.108-.01v.473c0 .061-.004.108-.013.141s-.025.061-.045.085a.216.216 0 0 1-.087.059.318.318 0 0 1-.115.022c-.09 0-.159-.026-.203-.076-.045-.05-.067-.128-.067-.231v-.461l.113-.013zm1.515.01h.199c.085 0 .151.019.196.058.045.039.067.096.067.169 0 .07-.026.125-.077.167a.335.335 0 0 1-.213.061.832.832 0 0 1-.057-.003h-.003v.297l-.112.009v-.758zm.112.1v.25l.031.004a.433.433 0 0 0 .037.001c.054 0 .096-.01.124-.032a.114.114 0 0 0 .043-.096c0-.044-.013-.076-.039-.097-.026-.021-.067-.031-.123-.031h-.073v.001zm-12.03-.704c-.897-.032-2.123-.442-2.377-1.033-.219-.538-.001-1.165 1.034-1.61.615-.256 1.544-.328 2.261-.262 1.016.093 1.985.618 1.986.621v.737l-.001.049s-.315-.285-.709-.515c-.371-.217-.71-.369-1.384-.431-.158-.014-.426-.05-.861.01-.176.025-.423.043-.981.288a2.342 2.342 0 0 0-.476.285 2.953 2.953 0 0 0-.223.201c-.159.199-.243.349-.203.62.046.204.137.332.399.527.114.085.127.084.177.11.469.243.843.332 1.378.399m.03-2.294c.9-.004 2.176.356 2.507.937.291.528.156 1.162-.817 1.646-.578.28-1.496.389-2.219.351-1.026-.053-2.062-.54-2.063-.541l-.098-.735-.006-.049s.352.272.776.487c.399.201.758.341 1.438.376.159.009.431.032.857-.044.172-.031.417-.059.94-.325a1.98 1.98 0 0 0 .632-.512c.132-.205.196-.358.12-.626-.074-.201-.181-.325-.467-.51-.124-.08-.137-.079-.191-.103-.5-.223-.884-.297-1.428-.343");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aO($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Khronos Group" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Khronosgroup extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aO, create_fragment$aO, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kia.svelte generated by Svelte v3.23.2 */

        function create_fragment$aP(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.258 8.935l-.03.027v.305l.03.028h.194c.072 0 .127.055.127.126v5.503c0 .07.055.126.122.126h1.4a.125.125 0 0 0 .126-.126V12.61c0-.056.03-.084.068-.084.054 0 .08.042.096.07l1.653 2.315c.055.083.152.139.219.139h1.665c.068 0 .16-.09.084-.195l-2.107-2.98-.026-.07.026-.082 1.762-2.608c.046-.076-.013-.18-.097-.18H7.989c-.072 0-.164.055-.223.139l-1.375 1.94c-.042.067-.088.07-.093.07h-.003a.066.066 0 0 1-.068-.07V9.06a.124.124 0 0 0-.127-.124zm11.252 0l-.026.027v.305l.026.028h.168c.068 0 .127.04.127.11l-.017.071-1.817 5.421v.01a.119.119 0 0 0 .017.093c.004.005.004.01.008.013a.127.127 0 0 0 .084.037h1.417c.068 0 .14-.056.169-.126l1.205-3.798s.017-.057.064-.057c.046 0 .058.057.058.057l1.223 3.798c.025.07.097.126.168.126h1.413a.11.11 0 0 0 .097-.052.14.14 0 0 0 .017-.09c0-.003-.005-.007-.005-.01l-1.968-5.88c-.03-.07-.097-.083-.169-.083zm-4.68 0l-.012.027v.305l.012.028h.194c.071 0 .127.055.127.126v5.503c0 .07.055.126.126.126h1.438a.125.125 0 0 0 .126-.126V9.06a.124.124 0 0 0-.126-.124zM22.592 12c0 2.902-4.751 5.264-10.594 5.264-5.843 0-10.594-2.362-10.594-5.264 0-2.901 4.751-5.263 10.594-5.263C17.84 6.737 22.592 9.1 22.592 12m-2.116-4.265c-2.268-1.132-5.278-1.757-8.478-1.757s-6.21.625-8.474 1.757C1.248 8.872 0 10.385 0 12c0 1.615 1.248 3.13 3.524 4.267 2.264 1.132 5.274 1.755 8.474 1.755s6.21-.623 8.478-1.755C22.748 15.129 24 13.615 24 12c0-1.615-1.252-3.128-3.524-4.265Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aP($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kia" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kia extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aP, create_fragment$aP, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kibana.svelte generated by Svelte v3.23.2 */

        function create_fragment$aQ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.04 23.99H4.18l9.88-11.86c4.23 2.76 6.98 7.04 6.98 11.86zm0-23.95H3.08v21.55z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aQ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kibana" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kibana extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aQ, create_fragment$aQ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kickstarter.svelte generated by Svelte v3.23.2 */

        function create_fragment$aR(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.168 0c-3.2 0-5.797 2.579-5.797 5.758v12.484C1.371 21.42 3.968 24 7.168 24c1.981 0 3.716-.978 4.768-2.479l.794.79c2.26 2.245 5.943 2.245 8.203 0a5.724 5.724 0 001.696-4.075 5.724 5.724 0 00-1.696-4.074l-2.182-2.168 2.182-2.156a5.724 5.724 0 001.696-4.074 5.724 5.724 0 00-1.696-4.074c-2.26-2.246-5.942-2.246-8.203 0l-.794.789A5.797 5.797 0 007.168 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aR($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kickstarter" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kickstarter extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aR, create_fragment$aR, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kik.svelte generated by Svelte v3.23.2 */

        function create_fragment$aS(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.482 16.752c-.01.688-.56 1.242-1.238 1.242-.689 0-1.23-.541-1.244-1.23h-.016v-6.243H9v-.029c0-.693.556-1.256 1.237-1.256s1.236.563 1.236 1.258v.045h.016v6.225h-.016l.009-.012zm11.137-4.889c.75 0 1.381.618 1.381 1.377 0 .76-.631 1.375-1.381 1.375-.766 0-1.395-.615-1.395-1.379 0-.766.615-1.381 1.379-1.381l.016.008zm-2.084 4.186c.121.195.193.432.193.686 0 .703-.553 1.26-1.244 1.26-.463 0-.869-.256-1.08-.631l-2.053-2.746-.631.586v1.635h-.014c-.039.652-.57 1.168-1.225 1.168-.674 0-1.221-.553-1.221-1.238v-.025h-.016v-9.45h.027v-.047c0-.69.551-1.253 1.23-1.253.674 0 1.225.562 1.225 1.253v.07h.016l.01 4.597 2.311-2.261c.229-.255.559-.405.928-.405.689 0 1.248.57 1.248 1.26 0 .346-.133.646-.344.871l.012.015-1.621 1.605 2.281 3.061-.016.016-.016-.027zm-13.246 0c.12.195.195.432.195.686 0 .703-.555 1.26-1.244 1.26-.466 0-.871-.256-1.081-.631l-2.054-2.746-.63.586v1.631H2.46c-.036.654-.57 1.17-1.221 1.17-.676 0-1.225-.555-1.225-1.238v-.027H0V7.29h.031c-.004-.015-.004-.029-.004-.044 0-.69.551-1.252 1.23-1.252.675 0 1.225.559 1.225 1.25v.07h.016l.01 4.6 2.311-2.261c.23-.255.562-.405.931-.405.687 0 1.245.57 1.245 1.26 0 .33-.131.646-.346.871l.016.015-1.627 1.605 2.271 3.061-.016.016-.004-.027z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aS($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kik" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kik extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aS, create_fragment$aS, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kirby.svelte generated by Svelte v3.23.2 */

        function create_fragment$aT(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.571 12l-2.857 1.48v.234h2.857V16H7.43v-2.286h2.857v-.25L7.429 12V9.143L12 11.598l4.571-2.455M12 0l10.286 5.999V18L12 24 1.714 18.001V6zM2.857 6.682v10.636L12 22.651l9.143-5.333V6.682L12 1.349Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aT($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kirby" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kirby extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aT, create_fragment$aT, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Klm.svelte generated by Svelte v3.23.2 */

        function create_fragment$aU(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.75 13.034H4.5l-2.25 2.257v-2.257H0v6.018h2.25v-2.257l2.25 2.257h3l-3.375-3.385zm3 0H7.5v6.018h6v-1.518H9.75zm10.5 0l-1.125 3.385L18 13.034h-3.75v6.018h2.25v-4.514l1.5 4.514h2.25l1.5-4.514v4.514H24v-6.018zM10.5 9.649c.725 0 1.313-.589 1.313-1.316s-.588-1.317-1.313-1.317-1.312.589-1.312 1.317.587 1.316 1.312 1.316zm1.688-1.316c0 .727.588 1.316 1.312 1.316.725 0 1.313-.589 1.313-1.316s-.588-1.317-1.313-1.317-1.312.589-1.312 1.317zm2.999 0c0 .727.588 1.316 1.312 1.316.725 0 1.313-.589 1.313-1.316s-.588-1.317-1.313-1.317-1.312.589-1.312 1.317zm-6.375 0c0-.727-.588-1.317-1.313-1.317s-1.312.589-1.312 1.317.588 1.316 1.313 1.316 1.312-.589 1.312-1.316zM7.5 10.025h9v1.505h-9zm4.125-2.821h.75v-.752h.75V5.7h-.75v-.753h-.75V5.7h-.75v.752h.75z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aU($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "KLM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Klm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aU, create_fragment$aU, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Klout.svelte generated by Svelte v3.23.2 */

        function create_fragment$aV(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 2.673v14.72h16.17L24 21.327V2.673H0zm9.827 8.42h-1.17l-2.88 4.054H2.35l3.94-5.265-3.638-5.07h3.336l2.66 3.885h1.18v2.397zm8.407 4.053l-2.88-4.053h-1.966v4.053h-2.73V4.812h2.734v3.885h1.965l2.658-3.885h3.33l-3.636 5.07 3.94 5.265h-3.416z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aV($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Klout" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Klout extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aV, create_fragment$aV, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Known.svelte generated by Svelte v3.23.2 */

        function create_fragment$aW(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 12c0 6.6-5.4 12-12 12S0 18.6 0 12 5.4 0 12 0s12 5.4 12 12zM12 1.8C6.3 1.8 1.8 6.3 1.8 12S6.3 22.2 12 22.2 22.2 17.7 22.2 12 17.7 1.8 12 1.8zm5.6 5.4l-.2.2c.1-.1.3-.2.4-.2h-.2zm.2 0h.5V5.3h-5.5v1.9h.9c.2 0 .3.1.3.3 0 .1 0 .2-.1.2l-3.8 3.8H10c-.1 0-.2-.1-.2-.2V7.9c0-.4.3-.7.7-.7h.8V5.3H5.4v1.9h.7c.4 0 .7.3.7.7v8.4c0 .4-.3.7-.7.7h-.7v2h5.9v-2h-.8c-.4 0-.7-.3-.7-.7v-1.4c0-.1 0-.2.1-.3l1.5-1.5s.1-.1.2-.1.2 0 .2.1l2.1 3.3v.2c0 .2-.1.3-.3.3h-.9v2H19v-2h-.7c-.2 0-.4-.1-.5-.3v-.1L14.1 11c0-.1-.1-.1-.1-.2s0-.2.1-.2l3.2-3.2c.2-.2.3-.2.5-.2z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aW($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Known" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Known extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aW, create_fragment$aW, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/KoFi.svelte generated by Svelte v3.23.2 */

        function create_fragment$aX(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aX($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Ko-fi" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class KoFi extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aX, create_fragment$aX, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kodi.svelte generated by Svelte v3.23.2 */

        function create_fragment$aY(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.03.047c-.226 0-.452.107-.669.324-.922.922-1.842 1.845-2.763 2.768-.233.233-.455.48-.703.695-.31.267-.405.583-.399.988.02 1.399.008 2.799.008 4.198 0 1.453-.002 2.907 0 4.36 0 .11.002.223.03.327.087.337.303.393.546.15 1.31-1.31 2.618-2.622 3.928-3.933l4.449-4.453c.43-.431.43-.905 0-1.336L12.697.37c-.216-.217-.442-.324-.668-.324zm7.224 7.23c-.223 0-.445.104-.65.309L14.82 11.37c-.428.429-.427.895 0 1.322l3.76 3.766c.44.44.908.44 1.346.002 1.215-1.216 2.427-2.433 3.644-3.647.182-.18.353-.364.43-.615v-.33c-.077-.251-.246-.436-.428-.617-1.224-1.22-2.443-2.445-3.666-3.668-.205-.205-.429-.307-.652-.307zM4.18 7.611c-.086.014-.145.094-.207.157L.209 11.572c-.28.284-.278.677.004.96l2.043 2.046c.59.59 1.177 1.182 1.767 1.772.169.168.33.139.416-.084.044-.114.062-.242.063-.364.004-1.283.004-2.567.004-3.851h-.002V8.184c0-.085-.01-.169-.022-.252-.019-.135-.072-.258-.207-.309a.186.186 0 0 0-.095-.012zm7.908 6.838c-.224 0-.447.106-.656.315L7.66 18.537c-.433.434-.433.899.002 1.334 1.215 1.216 2.43 2.43 3.643 3.649.18.18.361.354.611.433h.33c.244-.069.423-.226.598-.402 1.222-1.23 2.45-2.453 3.676-3.68.43-.43.427-.905-.004-1.338l-3.772-3.773c-.208-.208-.432-.311-.656-.31z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aY($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kodi" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kodi extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aY, create_fragment$aY, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Koding.svelte generated by Svelte v3.23.2 */

        function create_fragment$aZ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.8 0H23v6H1V0zm0 9H18v6H.7V9zm0 9H23v6H1v-6z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$aZ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Koding" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Koding extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$aZ, create_fragment$aZ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kofax.svelte generated by Svelte v3.23.2 */

        function create_fragment$a_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.38 12.94l.576-.5 1.273 1.698h1.835l-2.001-2.593 1.85-1.683h-1.82L1.38 11.545V9.862H0v4.276h1.38z M7.353 9.726c-1.455 0-2.683.5-2.683 2.274s1.228 2.274 2.683 2.274 2.684-.5 2.684-2.274-1.228-2.274-2.684-2.274zm0 3.593c-.728 0-1.228-.41-1.228-1.319 0-.894.5-1.319 1.228-1.319.743 0 1.228.425 1.228 1.32 0 .894-.5 1.318-1.228 1.318zM11.795 14.138v-1.653h2.365v-.925h-2.365v-.742h2.547v-.956h-3.926v4.276zM22.21 11.91l1.593-2.063h-1.638L21.407 11l-.758-1.153h-1.637l1.592 2.062-1.607 2.001-1.668-4.048h-1.683l-1.759 4.276h1.471l.243-.698h1.804l.242.698h2.896l.88-1.289.879 1.289H24zm-6.276.651l.576-1.622h.015l.577 1.622z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kofax" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kofax extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a_, create_fragment$a_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Komoot.svelte generated by Svelte v3.23.2 */

        function create_fragment$a$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.8 14.829l2.2-3.43 2.2 3.43 5.962 5.962A11.946 11.946 0 0 1 12 24c-3.043 0-5.935-1.14-8.162-3.209zM0 12C0 5.385 5.385 0 12 0c6.62 0 12 5.385 12 12 0 2.663-.855 5.175-2.469 7.284l-6.018-6.018c.15-.412.226-.839.226-1.27A3.743 3.743 0 0 0 12 8.257a3.743 3.743 0 0 0-3.739 3.739c0 .431.075.858.226 1.27l-6.018 6.018A11.865 11.865 0 0 1 0 12Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$a$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Komoot" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Komoot extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$a$, create_fragment$a$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kotlin.svelte generated by Svelte v3.23.2 */

        function create_fragment$b0(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.3 24l11.3-11.5L24 24zM0 0h12L0 12.5zM13.4 0L0 14v10l12-12L24 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b0($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kotlin" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kotlin extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b0, create_fragment$b0, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Krita.svelte generated by Svelte v3.23.2 */

        function create_fragment$b1(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.652.76a.625.625 0 00-.5.246c-.352.448-.035.898.362 1.262.206.189 1.77 1.794 3.428 3.527a11.054 11.054 0 011.815-1.983C3.667 2.515 1.694 1.266 1.461 1.1 1.201.914.917.762.652.76zm5.105 3.052c1.848 1.148 3.786 2.332 4.693 2.84 1.469.821 3.758 2.684 4.092 4.434.535.466 2.182 1.916 2.596 2.413.698-.211 1.518.133 2.06 1.12.866 1.583.227 3.747-1.968 4.988a5.42 5.42 0 01-.296.267l.296-.267c1.14-1.468-.714-2.44-1.175-3.864a2.06 2.06 0 01-.11-.78c-.533-.282-2.11-1.452-2.795-1.965-1.801.16-4.207-1.773-5.35-3.08-.7-.802-2.32-2.517-3.858-4.123a11.052 11.052 0 00-2.046 6.393A11.052 11.052 0 1012.948 1.136c-2.64.004-5.19.954-7.19 2.676zm8.71 7.552c-.515.126-.968.831-1.118 1.306-.038.115-.04.303.066.342.802.592 1.556 1.168 2.4 1.7.162-.393.746-.963 1.096-1.2zm-11.53 1.639c.812 1.898 5.798 7.17 12.06 2.695a2.07 2.07 0 00.114.715c.46 1.42 2.36 2.427 1.238 3.89-2.135 1.364-5 1.201-6.989.528-3.558-1.204-5.914-4.332-6.424-7.828zm13.782.7a.771.771 0 00-.065.049c-.004.003-.008.008-.011.008.003-.003.007-.008.01-.008.024-.015.044-.034.066-.048z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b1($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Krita" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Krita extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b1, create_fragment$b1, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ktm.svelte generated by Svelte v3.23.2 */

        function create_fragment$b2(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 15.735h3.354l.843-2.06 1.55 2.06h7.225l2.234-2.081-.372 2.081h2.83L20 13.675l-.32 2.06h3.052L24 9.99h-3.068l-2.486 2.191.48-2.19h-2.942l-3.209 3.216 1.342-3.938h4.907l.225-1.003H6.381l-.378 1.003h4.732l-1.994 5.054-1.572-2.066L9.886 9.99H7.612l-2.787 2.23.938-2.23H2.44L0 15.735Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b2($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "KTM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ktm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b2, create_fragment$b2, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kubernetes.svelte generated by Svelte v3.23.2 */

        function create_fragment$b3(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.204 14.35l.007.01-.999 2.413a5.171 5.171 0 0 1-2.075-2.597l2.578-.437.004.005a.44.44 0 0 1 .484.606zm-.833-2.129a.44.44 0 0 0 .173-.756l.002-.011L7.585 9.7a5.143 5.143 0 0 0-.73 3.255l2.514-.725.002-.009zm1.145-1.98a.44.44 0 0 0 .699-.337l.01-.005.15-2.62a5.144 5.144 0 0 0-3.01 1.442l2.147 1.523.004-.002zm.76 2.75l.723.349.722-.347.18-.78-.5-.623h-.804l-.5.623.179.779zm1.5-3.095a.44.44 0 0 0 .7.336l.008.003 2.134-1.513a5.188 5.188 0 0 0-2.992-1.442l.148 2.615.002.001zm10.876 5.97l-5.773 7.181a1.6 1.6 0 0 1-1.248.594l-9.261.003a1.6 1.6 0 0 1-1.247-.596l-5.776-7.18a1.583 1.583 0 0 1-.307-1.34L2.1 5.573c.108-.47.425-.864.863-1.073L11.305.513a1.606 1.606 0 0 1 1.385 0l8.345 3.985c.438.209.755.604.863 1.073l2.062 8.955c.108.47-.005.963-.308 1.34zm-3.289-2.057c-.042-.01-.103-.026-.145-.034-.174-.033-.315-.025-.479-.038-.35-.037-.638-.067-.895-.148-.105-.04-.18-.165-.216-.216l-.201-.059a6.45 6.45 0 0 0-.105-2.332 6.465 6.465 0 0 0-.936-2.163c.052-.047.15-.133.177-.159.008-.09.001-.183.094-.282.197-.185.444-.338.743-.522.142-.084.273-.137.415-.242.032-.024.076-.062.11-.089.24-.191.295-.52.123-.736-.172-.216-.506-.236-.745-.045-.034.027-.08.062-.111.088-.134.116-.217.23-.33.35-.246.25-.45.458-.673.609-.097.056-.239.037-.303.033l-.19.135a6.545 6.545 0 0 0-4.146-2.003l-.012-.223c-.065-.062-.143-.115-.163-.25-.022-.268.015-.557.057-.905.023-.163.061-.298.068-.475.001-.04-.001-.099-.001-.142 0-.306-.224-.555-.5-.555-.275 0-.499.249-.499.555l.001.014c0 .041-.002.092 0 .128.006.177.044.312.067.475.042.348.078.637.056.906a.545.545 0 0 1-.162.258l-.012.211a6.424 6.424 0 0 0-4.166 2.003 8.373 8.373 0 0 1-.18-.128c-.09.012-.18.04-.297-.029-.223-.15-.427-.358-.673-.608-.113-.12-.195-.234-.329-.349-.03-.026-.077-.062-.111-.088a.594.594 0 0 0-.348-.132.481.481 0 0 0-.398.176c-.172.216-.117.546.123.737l.007.005.104.083c.142.105.272.159.414.242.299.185.546.338.743.522.076.082.09.226.1.288l.16.143a6.462 6.462 0 0 0-1.02 4.506l-.208.06c-.055.072-.133.184-.215.217-.257.081-.546.11-.895.147-.164.014-.305.006-.48.039-.037.007-.09.02-.133.03l-.004.002-.007.002c-.295.071-.484.342-.423.608.061.267.349.429.645.365l.007-.001.01-.003.129-.029c.17-.046.294-.113.448-.172.33-.118.604-.217.87-.256.112-.009.23.069.288.101l.217-.037a6.5 6.5 0 0 0 2.88 3.596l-.09.218c.033.084.069.199.044.282-.097.252-.263.517-.452.813-.091.136-.185.242-.268.399-.02.037-.045.095-.064.134-.128.275-.034.591.213.71.248.12.556-.007.69-.282v-.002c.02-.039.046-.09.062-.127.07-.162.094-.301.144-.458.132-.332.205-.68.387-.897.05-.06.13-.082.215-.105l.113-.205a6.453 6.453 0 0 0 4.609.012l.106.192c.086.028.18.042.256.155.136.232.229.507.342.84.05.156.074.295.145.457.016.037.043.09.062.129.133.276.442.402.69.282.247-.118.341-.435.213-.71-.02-.039-.045-.096-.065-.134-.083-.156-.177-.261-.268-.398-.19-.296-.346-.541-.443-.793-.04-.13.007-.21.038-.294-.018-.022-.059-.144-.083-.202a6.499 6.499 0 0 0 2.88-3.622c.064.01.176.03.213.038.075-.05.144-.114.28-.104.266.039.54.138.87.256.154.06.277.128.448.173.036.01.088.019.13.028l.009.003.007.001c.297.064.584-.098.645-.365.06-.266-.128-.537-.423-.608zM16.4 9.701l-1.95 1.746v.005a.44.44 0 0 0 .173.757l.003.01 2.526.728a5.199 5.199 0 0 0-.108-1.674A5.208 5.208 0 0 0 16.4 9.7zm-4.013 5.325a.437.437 0 0 0-.404-.232.44.44 0 0 0-.372.233h-.002l-1.268 2.292a5.164 5.164 0 0 0 3.326.003l-1.27-2.296h-.01zm1.888-1.293a.44.44 0 0 0-.27.036.44.44 0 0 0-.214.572l-.003.004 1.01 2.438a5.15 5.15 0 0 0 2.081-2.615l-2.6-.44-.004.005z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b3($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kubernetes" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kubernetes extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b3, create_fragment$b3, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Kyocera.svelte generated by Svelte v3.23.2 */

        function create_fragment$b4(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.323 0L9.677 4.631h7.393V12l4.647-4.631V0zm2.747 12v7.369H9.677L14.323 24h7.394v-7.369zm0 0L9.677 4.631V19.37zm-7.393 7.369L2.283 12v7.369zM2.283 12l7.394-7.369H2.283Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b4($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Kyocera" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Kyocera extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b4, create_fragment$b4, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Labview.svelte generated by Svelte v3.23.2 */

        function create_fragment$b5(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.176 4.469a.817.817 0 00-.768.816v7.055a.816.816 0 001.182.73l7.058-3.527a.818.818 0 000-1.463L9.59 4.553a.808.808 0 00-.414-.084zm1.918 3.107h.638v.916h.916v.639h-.916v.918h-.638V9.13h-.918v-.639h.918v-.916zm-4.752 7.51v.367h.262c.086 0 .136.05.136.137v3.869h.41v-.273a2.6 2.6 0 00-.011-.256h.011s.281.603 1.028.603c.82 0 1.41-.646 1.41-1.635 0-.97-.522-1.642-1.361-1.642-.802 0-1.065.598-1.065.598H7.15s.012-.113.012-.256v-1.131c0-.267-.112-.381-.379-.381h-.441zm2.855 0v.387h.063c.118 0 .18.018.224.136l1.436 3.85h.467l1.437-3.85c.044-.118.105-.136.223-.136h.834v3.601h-.41v.385h1.25v-.385h-.418v-3.601h.418v-.387h-1.805c-.31 0-.404.056-.516.361l-1.076 2.942c-.08.223-.168.566-.168.566h-.011s-.088-.343-.168-.566L9.9 15.447c-.105-.298-.199-.361-.51-.361h-.193zm5.922 0v.387h.404v3.607c0 .268.112.379.38.379h1.89c.268 0 .379-.111.379-.379v-.435h-.404v.29c0 .094-.05.14-.137.14h-1.535c-.087 0-.137-.046-.137-.14v-1.484h1.64v-.387h-1.64v-1.591h1.492c.087 0 .137.043.137.136v.293h.41v-.435c0-.268-.112-.381-.379-.381h-2.5zM0 15.088v.385h.268c.086 0 .136.043.136.136v3.471c0 .268.112.379.38.379h1.81c.267 0 .379-.111.379-.379v-.435h-.41v.29c0 .094-.05.137-.137.137H.976c-.086 0-.136-.043-.136-.136v-3.47c0-.267-.112-.378-.38-.378H0zm18.334 0v.385h.076c.118 0 .197.018.229.136l1.002 3.85h.515l.897-3.047c.08-.28.156-.64.156-.64h.012s.067.366.142.646l.815 3.041h.515l1.008-3.85c.031-.118.106-.136.23-.136H24v-.385h-.193c-.311 0-.453.055-.528.36l-.76 3.015c-.055.224-.1.467-.1.467h-.01s-.039-.243-.1-.467l-.877-3.358h-.43l-.963 3.358c-.062.224-.12.467-.12.467h-.01s-.039-.243-.095-.467l-.757-3.016c-.075-.304-.219-.36-.53-.36h-.193zM4.637 16.256c-.274 0-1.02.094-1.02.53v.298h.404v-.2c0-.23.454-.273.61-.273.572 0 .808.23.808.883v.037h-.173c-.542 0-1.916.038-1.916 1.076 0 .622.54.926 1.062.926.784 0 1.046-.678 1.04-.678h.01s-.005.094-.005.23c0 .256.106.374.373.374h.43v-.367h-.262c-.087 0-.137-.044-.137-.137v-1.498c0-.672-.236-1.201-1.224-1.201zm3.527.387c.578 0 .988.49.988 1.255 0 .796-.452 1.262-1.006 1.262-.671 0-.996-.628-.996-1.256 0-.889.492-1.261 1.014-1.261zm-2.906 1.224h.181v.143c0 .54-.362 1.162-.959 1.162-.466 0-.695-.298-.695-.59 0-.703.982-.715 1.473-.715Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b5($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LabVIEW" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Labview extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b5, create_fragment$b5, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lamborghini.svelte generated by Svelte v3.23.2 */

        function create_fragment$b6(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.865 0a31.57 31.57 0 0 0-3.712.245l-.272.037-.338.046c-.073.009-.18.026-.236.038a3.7 3.7 0 0 1-.206.036 7.728 7.728 0 0 0-.265.043l-.265.048c-.193.034-.763.15-1.051.215-1.064.238-2.245.594-2.73.824-.343.163-.772.506-.93.743a2.157 2.157 0 0 0-.287.777c-.029.158-.032.23-.034.832-.003.728.009 1.223.044 1.865.166 3.019.696 5.54 1.686 8a20.797 20.797 0 0 0 2.635 4.81c1 1.363 2.12 2.572 3.395 3.67.769.66 1.737 1.405 2.076 1.595.386.217.82.234 1.19.047.3-.153 1.382-.974 2.113-1.604a24.361 24.361 0 0 0 3.119-3.27c.51-.645 1.541-2.254 1.977-3.085 1.622-3.09 2.549-6.883 2.651-10.812.03-.642.045-1.224.03-1.529a4.107 4.107 0 0 0-.017-.228l.001-.397-.165-.343a1.683 1.683 0 0 0-.383-.533c-.196-.205-.372-.321-.783-.519-.997-.48-2.338-.858-3.958-1.118a25.346 25.346 0 0 0-1.552-.216l-.404-.048a7.685 7.685 0 0 0-.41-.037 41.827 41.827 0 0 0-1.988-.12 21.41 21.41 0 0 0-.931-.011zm.167.83c3.34-.007 6.128.436 8.399 1.332.84.33.99.433 1.16.792.128.27.13.31.094 1.691-.197 7.59-2.8 13.219-8.113 17.541-.644.525-1.316 1.003-1.484 1.056-.083.026-.235-.033-.483-.187-.492-.305-1.718-1.303-2.54-2.068-1.352-1.255-2.707-2.937-3.63-4.506-1.97-3.344-2.993-7.244-3.114-11.866-.035-1.35-.032-1.392.096-1.662.17-.357.322-.462 1.13-.777C5.777 1.303 8.132.9 11.357.837c.228-.004.453-.007.675-.007zm-.941.708l-.045.003c-.2.024-.448.206-.567.422-.273.495-.22 1.592.096 1.974.123.15.188.176.421.176.155 0 .334-.04.407-.093.073-.052.19-.207.26-.345.184-.36.188-1.265.007-1.668-.116-.257-.333-.443-.538-.466l-.022-.002h-.02zm1.094.06l-.017 1.233a59.48 59.48 0 0 0-.01 1.184.346.346 0 0 0 .02.06c.025.005.089.009.173.009h.182v-.529c0-.506.005-.527.126-.509.1.015.162.126.307.543l.182.524h.44l-.194-.564-.193-.565.158-.151c.193-.186.253-.456.17-.767-.091-.347-.322-.467-.891-.468zm2.376.06c-.505 0-.733.383-.73 1.228 0 .558.084.91.264 1.113.208.233.66.274.945.084.154-.102.252-.416.255-.808 0-.104-.004-.186-.018-.244-.033-.094-.13-.106-.407-.133l-.235-.023c-.041.024-.044.08-.044.204v.04l.001.018c.006.118.035.138.146.138.118 0 .146.03.146.154 0 .355-.28.512-.49.276-.288-.324-.223-1.56.087-1.66.13-.042.345.115.345.251 0 .052.072.08.205.08.234 0 .26-.079.118-.358a.605.605 0 0 0-.588-.36zm-5.199.038a2.322 2.322 0 0 0-.327.014l-.353.038-.016 1.249-.016 1.249.428-.042c.235-.024.49-.074.569-.111.241-.118.378-.366.383-.695.003-.23-.025-.329-.123-.429-.126-.128-.126-.13-.015-.316a.685.685 0 0 0 .024-.697c-.083-.163-.263-.249-.554-.26zm6.287.074v2.51l.205.024.206.025v-.557c0-.617-.019-.594.427-.519l.22.038v.556c0 .48.014.561.103.585.26.069.253.1.236-1.202l-.016-1.243-.161-.019-.162-.019v.968l-.25-.036c-.41-.058-.397-.04-.397-.562 0-.345-.02-.482-.073-.482a1.04 1.04 0 0 1-.206-.037l-.096-.027zm-7.408.032l-.2.024c-.197.023-.204.034-.357.541-.085.285-.19.626-.232.758l-.077.24-.191-.629c-.105-.346-.212-.652-.238-.68-.025-.028-.128-.033-.228-.01l-.182.04V3.31c0 1.165.005 1.223.113 1.223a.64.64 0 0 0 .19-.03c.058-.023.074-.14.06-.437a6.524 6.524 0 0 1 0-.643c.018-.22.036-.188.248.446l.229.685.212-.768.212-.767.009.36a.236.236 0 0 1 .003.14l.005.173c.014.578.03.667.107.637a.672.672 0 0 1 .204-.036c.108 0 .113-.058.113-1.246zm4.292.14l.248.033c.352.049.5.296.325.541-.08.11-.456.2-.53.125-.023-.024-.043-.192-.043-.372zm-1.462.025c.083.004.163.07.227.2.132.268.122 1.21-.016 1.425-.133.207-.305.207-.438 0-.076-.118-.11-.309-.122-.703-.015-.464 0-.571.105-.74.076-.125.161-.185.244-.182zm-2.007.11h.194c.235 0 .335.09.335.304 0 .19-.08.265-.338.315l-.19.037v-.328zm8.497.005a.083.083 0 0 0-.031.023v2.48l.162.025c.089.013.181.029.206.033.024.005.044-.541.044-1.215 0-.673-.02-1.235-.044-1.25a1.238 1.238 0 0 0-.206-.064zM5.582 2.3a.699.699 0 0 0-.137.025c-.18.05-.182.058-.4 1.025-.12.536-.256 1.13-.3 1.322l-.081.348.186-.04a1.36 1.36 0 0 0 .224-.063c.02-.012.055-.17.078-.352.045-.37.041-.364.334-.42l.213-.041.07.302c.07.296.076.301.258.266a.944.944 0 0 0 .21-.057c.03-.025-.528-2.253-.577-2.304-.01-.01-.039-.014-.078-.011zm12.771.018v1.226c0 .942.017 1.228.074 1.229.04 0 .132.017.204.037.128.035.13.026.147-.694l.016-.73.322.817c.176.45.362.842.411.871.234.14.24.106.224-1.18l-.016-1.24-.162-.043-.162-.044v.668c-.002.767-.008.764-.36-.14-.258-.662-.341-.778-.562-.778zm-14.6.539c-.012 0-.105.03-.207.065l-.185.066v.31l.017.988c.008.47.02.845.046 1.182.011.004.024.002.04-.005.057-.023.321-.122.588-.222.456-.169.485-.19.485-.354 0-.095-.009-.174-.02-.174-.011 0-.174.054-.362.12a5.96 5.96 0 0 1-.362.12c-.011 0-.02-.472-.02-1.048 0-.577-.01-1.048-.02-1.048zm16.502 0c-.011 0-.02.562-.02 1.249v1.249l.19.062c.106.035.198.065.206.069.008.003.015-.557.015-1.246V2.987l-.185-.066a1.991 1.991 0 0 0-.206-.065zm-10.948.206c.263.01.427.297.279.568-.063.115-.14.159-.303.173l-.219.018v-.356c0-.311.015-.36.124-.389a.406.406 0 0 1 .119-.014zm-3.852.003l.078.322c.043.18.057.265.041.316a.05.05 0 0 1-.02.037.13.13 0 0 1-.025.02c-.141.091-.238.063-.2-.06.02-.062.056-.23.08-.374zm6.879 1.66c-.555.013-1.034.17-1.306.446-.243.247-.27.51-.068.645.255.169.673.22 2.168.268 1.368.044 1.532.06 1.77.177.292.145.419.333.41.61-.006.23-.157.477-.293.477-.229 0-.989-.194-1.526-.39a5.355 5.355 0 0 0-.661-.205l-.038-.003c-.144.004-.318.121-.818.551-.22.189-.61.454-.867.59-.834.443-1.091.794-1.207 1.649-.063.463-.14.648-.499 1.187-.298.448-.508 1.05-.51 1.457 0 .197-.07.511-.184.839-.15.433-.184.627-.195 1.122-.012.514-.035.64-.163.879-.093.172-.166.43-.192.674-.037.36-.067.426-.33.74-.159.188-.289.375-.289.415 0 .022-.025.07-.063.128-.008.038-.026.065-.049.068a1 1 0 0 1-.066.083c-.224.26-.334.559-.24.654.049.05.089.034.157-.064.129-.188.203-.165.144.044-.034.12-.028.186.019.207.088.039.422-.014.597-.095.092-.043.16-.153.21-.34.04-.153.114-.327.164-.386.055-.066.101-.265.116-.506.022-.352.051-.431.25-.688.13-.166.267-.437.321-.632.053-.188.137-.423.188-.522.377-.74.62-1.168.663-1.168.13 0 .234.284.234.64 0 .28.024.386.094.426.085.048.086.073.009.228a1.978 1.978 0 0 0-.128.35c-.057.24-.245.497-.442.6-.09.048-.286.208-.436.357-.216.214-.273.31-.272.467.001.264.086.402.185.3.118-.12.172-.085.13.085-.038.154-.032.158.158.12.243-.05.463-.193.504-.327.017-.056.054-.142.082-.191.029-.05.137-.274.242-.5.13-.28.273-.478.453-.628.144-.12.3-.313.348-.428.139-.338.543-.628.543-.388 0 .14-.228.564-.394.733-.209.213-.37.499-.37.657 0 .139.082.18.147.075.064-.106.137-.064.105.06a.334.334 0 0 0-.007.035c.01.03.025.055.045.075.025.007.06.01.112.01.302 0 .587-.174.63-.385a1.5 1.5 0 0 1 .152-.375c.074-.124.1-.242.076-.341-.04-.161.068-.577.15-.577.06 0 .274.447.328.69a.823.823 0 0 0 .156.308c.108.121.155.128.683.098.547-.031.573-.04.715-.217.106-.134.156-.285.18-.547.042-.462.242-.776.7-1.104l.342-.244.084.134c.047.073.147.289.223.479.128.316.133.368.065.64-.041.164-.057.354-.036.423.022.07-.007.256-.065.42l-.045.128-.009.056a.61.61 0 0 0-.014.152l.103.11c.157.172.266.193.316.062.044-.12.155-.116.155.005 0 .127.115.08.248-.1.102-.14.103-.165.016-.416-.052-.148-.081-.315-.067-.371.014-.057 0-.219-.032-.36a2.63 2.63 0 0 1 .011-1.095c.057-.278.05-.339-.083-.63-.081-.177-.136-.334-.123-.347.014-.014.125.015.248.064.57.228 1.015.176 1.286-.15l.138-.167a.154.154 0 0 0 .004-.028l-.329-.03a6.802 6.802 0 0 1-.225-.025c-.199-.033-.286-.105-.604-.389-.294-.262-.304-.282-.273-.516.019-.139-.01-.442-.067-.701-.092-.422-.092-.483-.006-.784.051-.18.093-.407.093-.503 0-.29-.158-.736-.345-.973a1.535 1.535 0 0 1-.238-.462 1.843 1.843 0 0 0-.208-.458c-.136-.204-.14-.229-.059-.425a1.74 1.74 0 0 0 .086-.538c0-.287-.025-.359-.191-.551-.36-.418-.53-.457-2.25-.508-1.985-.06-2.297-.136-1.989-.483.126-.142.332-.138.76.014.469.166 1.042.207 1.377.099.288-.093.293-.088-.206-.194-.08-.017-.147-.06-.147-.097 0-.013.008-.022.021-.029.009-.018.051-.022.13-.013.036.002.078.006.128.013.769.104.897.112.897.053 0-.097-.516-.297-1.055-.408a3.533 3.533 0 0 0-.79-.074zm.213.491a.86.86 0 0 1 .232.054l.254.092-.182.003-.024.001-.031-.002a.627.627 0 0 1-.262-.05c-.103-.067-.08-.103.013-.098Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b6($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Lamborghini" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lamborghini extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b6, create_fragment$b6, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Landrover.svelte generated by Svelte v3.23.2 */

        function create_fragment$b7(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.57 12.094h-1.226l-.024.074.051.047c.05.05.05.117.004.25l-.86 2.488h.782l.336-.984h.27l.292.984h.79l-.372-1.012c.215-.039.324-.097.434-.199.148-.133.25-.328.336-.601.12-.41.047-.641-.031-.762-.11-.164-.34-.285-.782-.285zm.07 1.035c-.046.121-.1.14-.171.168-.047.02-.149.016-.242.016h-.375l.199-.61h.457c.133 0 .191.094.191.172a.852.852 0 0 1-.058.254zm-7.492 1.453c.313-.332.598-1.238.594-1.71-.004-.481-.32-.825-.976-.825h-.086c-.54 0-.844.148-1.098.418-.316.332-.61 1.238-.602 1.71.004.481.32.825.977.825h.098c.535 0 .84-.148 1.093-.418zm-.335-1.012c-.098.282-.172.461-.286.582-.09.094-.207.16-.476.16-.211 0-.328-.09-.328-.253 0-.11.027-.27.14-.582.098-.282.172-.461.29-.582.09-.094.206-.16.48-.16.21 0 .332.09.332.253-.012.11-.04.27-.153.582zm-3.79-2.101l-1.945.008.852-2.485c.047-.133.047-.199-.004-.25l-.047-.066.023-.098h.973l-.742 2.203h1.129zm5.848-2.852l.746-.012-.969 2.833h-.718l-.367-1.848-.622 1.848h-.718l.847-2.465c.047-.133.047-.18-.004-.23l-.046-.067.023-.098h1.008l.297 1.574zm1.856 3.477l-1.57 2.86h-.97l-.117-2.49c-.007-.14-.027-.198-.101-.25l-.078-.05.035-.074h.87l.052 2.062h.023l1.043-2.062h.813zM5.53 13.828H3.637l.261-.687 2.153-.688-.094.23-1.488.489H5.78zm9.942-2.734c.316-.332.601-1.219.59-1.692-.008-.48-.32-.824-.977-.824h-1.14l-.024.098.047.062c.05.051.05.121.004.254l-.852 2.492h1.254c.54 0 .844-.12 1.098-.39zm-.809-1.813h.305c.21 0 .328.086.332.25 0 .106-.028.258-.137.567-.098.28-.172.433-.285.55-.09.094-.207.133-.48.133h-.25zm.672 4.453l-.164.563h1.117l-.23.656h-1.91l.851-2.48c.047-.13.047-.2-.004-.254l-.05-.063.027-.105h2.047l-.239.656h-1.086l-.156.469h1.004l-.215.562h-.992zm3.133-3.382l-2.153.714.094-.242 1.492-.512H16.59l.246-.703h1.898zM8.035 12.094H6.801l-.024.074.051.047c.055.05.055.117.008.25l-.86 2.488h.79l.336-.988.265.004.297.988h.79l-.372-1.012c.215-.039.324-.097.43-.195.152-.137.254-.328.34-.605.125-.41.046-.637-.032-.762-.117-.168-.343-.29-.785-.29zm.07 1.035c-.046.121-.105.14-.175.168-.047.02-.149.015-.242.015h-.375l.207-.609h.453c.136 0 .191.094.191.172a1.195 1.195 0 0 1-.059.254zm.645-4.55l-.023.097.039.047c.062.058.03.129-.184.48l-1.348 2.235h.829l.355-.61h.86l.007.61h.75l-.164-2.86zm-.008 1.687l.488-.891h.028l.015.89zm14.184 1.507a1.8 1.8 0 0 0-.067-.375c-.004-.015-.007-.039-.015-.062a1.62 1.62 0 0 0-.04-.129l-.042-.117c-.465-1.207-1.766-2.133-2.836-2.684C17.57 7.187 14.629 6.703 12 6.703h-.008c-2.637 0-5.57.484-7.93 1.703-1.324.684-3.007 1.906-3.007 3.574 0 1.372 1.14 2.457 2.28 3.16.04.048.08.067.114.09.04.024.074.055.114.075.039.023.078.05.117.07.043.023.086.05.125.074.086.047.172.094.254.137 2.359 1.219 5.296 1.687 7.933 1.687 2.633 0 5.57-.468 7.93-1.687 1.328-.684 3.008-1.922 3.008-3.586 0-.05 0-.102-.004-.156a.213.213 0 0 0 0-.07zM12 17.012c-5.898 0-10.707-2.403-10.707-5.008C1.293 9.383 6.102 7 12 7c5.898 0 10.707 2.383 10.707 5.004 0 2.613-4.809 5.008-10.707 5.008zm8.418-9.535C17.906 6.18 14.808 5.672 12 5.672c-2.809 0-5.906.508-8.418 1.805C1.859 8.363 0 9.883 0 12c0 2.117 1.86 3.637 3.582 4.523 2.512 1.297 5.61 1.805 8.418 1.805 2.809 0 5.906-.508 8.418-1.805C22.141 15.633 24 14.117 24 12c0-2.117-1.86-3.637-3.582-4.523zm2.922 4.66c0 .023-.004.047-.004.066a3.233 3.233 0 0 1-.047.34c-.25 1.266-1.351 2.453-3.172 3.395-2.16 1.117-5.043 1.734-8.117 1.734-2.883 0-5.594-.54-7.703-1.527-.14-.067-.274-.137-.41-.204C1.809 14.867.664 13.47.664 12.004c0-1.465 1.145-2.863 3.223-3.938 2.16-1.113 5.043-1.73 8.117-1.73 3.074 0 5.953.617 8.113 1.73 2.078 1.075 3.227 2.473 3.227 3.938-.004.043-.004.086-.004.133zm0 0");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b7($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Land Rover" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Landrover extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b7, create_fragment$b7, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Laravel.svelte generated by Svelte v3.23.2 */

        function create_fragment$b8(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.644 5.43c.009.032.014.065.014.099v5.15c0 .135-.073.26-.189.326l-4.323 2.49v4.934c0 .135-.072.258-.188.326L9.931 23.95c-.021.012-.043.02-.066.027-.008.002-.016.008-.024.01-.063.018-.13.018-.192 0-.011-.002-.02-.008-.029-.012-.021-.008-.043-.014-.063-.025L.534 18.755c-.117-.068-.189-.191-.189-.326V2.974c0-.033.005-.066.014-.098.003-.012.01-.021.014-.032.006-.02.014-.04.023-.058.004-.013.015-.022.023-.033.012-.016.021-.031.033-.045.012-.01.025-.018.037-.027.014-.012.027-.024.041-.034h.001L5.044.05c.115-.067.259-.067.375 0l4.512 2.597h.002c.015.01.027.021.041.033.012.009.025.018.037.027.013.014.021.029.033.045.008.011.02.021.025.033.011.019.017.038.024.058.003.011.011.021.013.032.01.031.014.064.014.098v9.652l3.76-2.164V5.527c0-.033.005-.066.014-.098.003-.011.009-.021.013-.032.007-.02.014-.039.024-.059.007-.012.018-.021.025-.033.012-.015.021-.03.033-.043.012-.012.025-.02.037-.028.014-.011.026-.023.041-.032h.001l4.513-2.598c.116-.067.259-.067.375 0l4.513 2.598c.016.01.027.021.042.031.012.01.025.018.036.028.013.014.022.029.034.044.008.012.019.021.024.033.011.02.018.039.024.059.006.011.012.022.015.033zm-.74 5.032V6.179l-1.578.908-2.182 1.256v4.283l3.76-2.164zm-4.511 7.75v-4.287l-2.146 1.225-6.127 3.498v4.326l8.273-4.762zM1.095 3.624v14.588l8.273 4.762v-4.326l-4.322-2.445-.002-.003h-.002c-.014-.01-.025-.021-.04-.031-.011-.01-.024-.018-.035-.027l-.001-.002c-.013-.012-.021-.025-.031-.039-.01-.012-.021-.023-.028-.037h-.002c-.008-.014-.013-.031-.02-.047-.006-.016-.014-.027-.018-.043-.004-.018-.006-.037-.008-.057-.002-.014-.006-.027-.006-.041V5.789l-2.18-1.257-1.578-.908zM5.231.81l-3.76 2.164 3.76 2.164 3.758-2.164L5.231.81zm1.956 13.505l2.182-1.256V3.624l-1.58.909-2.182 1.256v9.435l1.58-.909zM18.769 3.364l-3.76 2.164 3.76 2.163 3.759-2.164-3.759-2.163zm-.376 4.979l-2.182-1.256-1.579-.908v4.283l2.182 1.256 1.579.908V8.343zm-8.65 9.654l5.514-3.148 2.756-1.572-3.757-2.163-4.324 2.489-3.941 2.27 3.752 2.124z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b8($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Laravel" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Laravel extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b8, create_fragment$b8, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Laravelhorizon.svelte generated by Svelte v3.23.2 */

        function create_fragment$b9(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.486 3.516C15.8-1.171 8.202-1.172 3.516 3.513A11.963 11.963 0 0 0 0 11.998a11.975 11.975 0 0 0 4.2 9.13h.01a12 12 0 0 0 16.274-.642c4.687-4.685 4.688-12.283.002-16.97zM16 13.998c-4 0-4-4-8-4-2.5 0-3.44 1.565-4.765 2.74H3.23a8.801 8.801 0 0 1 17.54-1.48c-1.33 1.175-2.27 2.74-4.77 2.74z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b9($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Laravel Horizon" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Laravelhorizon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b9, create_fragment$b9, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Laravelnova.svelte generated by Svelte v3.23.2 */

        function create_fragment$ba(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.333 4.319C16.56.386 9.453.632 4.973 5.057a7.571 7.571 0 0 0 0 10.8c3.018 2.982 7.912 2.982 10.931 0a3.245 3.245 0 0 0 0-4.628 3.342 3.342 0 0 0-4.685 0 1.114 1.114 0 0 1-1.561 0 1.082 1.082 0 0 1 0-1.543 5.57 5.57 0 0 1 7.808 0 5.408 5.408 0 0 1 0 7.714c-3.881 3.834-10.174 3.834-14.055 0a9.734 9.734 0 0 1-.015-13.87C5.596 1.35 8.638 0 12 0c3.75 0 7.105 1.68 9.333 4.319zm-.714 16.136A12.184 12.184 0 0 1 12 24a12.18 12.18 0 0 1-9.333-4.319c4.772 3.933 11.88 3.687 16.36-.738a7.571 7.571 0 0 0 0-10.8c-3.018-2.982-7.912-2.982-10.931 0a3.245 3.245 0 0 0 0 4.628 3.342 3.342 0 0 0 4.685 0 1.114 1.114 0 0 1 1.561 0 1.082 1.082 0 0 1 0 1.543 5.57 5.57 0 0 1-7.808 0 5.408 5.408 0 0 1 0-7.714c3.881-3.834 10.174-3.834 14.055 0a9.734 9.734 0 0 1 .03 13.855z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ba($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Laravel Nova" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Laravelnova extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ba, create_fragment$ba, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/LastDotFm.svelte generated by Svelte v3.23.2 */

        function create_fragment$bb(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.599 17.211l-.881-2.393s-1.433 1.596-3.579 1.596c-1.9 0-3.249-1.652-3.249-4.296 0-3.385 1.708-4.596 3.388-4.596 2.418 0 3.184 1.568 3.845 3.578l.871 2.751c.871 2.672 2.523 4.818 7.285 4.818 3.41 0 5.722-1.045 5.722-3.801 0-2.227-1.276-3.383-3.635-3.935l-1.757-.384c-1.217-.274-1.577-.771-1.577-1.597 0-.936.736-1.487 1.952-1.487 1.323 0 2.028.495 2.147 1.679l2.749-.33c-.225-2.479-1.937-3.494-4.745-3.494-2.479 0-4.897.936-4.897 3.934 0 1.873.902 3.058 3.185 3.605l1.862.443c1.397.33 1.863.916 1.863 1.713 0 1.021-.992 1.441-2.869 1.441-2.779 0-3.936-1.457-4.597-3.469l-.901-2.75c-1.156-3.574-3.004-4.896-6.669-4.896C2.147 5.327 0 7.879 0 12.235c0 4.179 2.147 6.445 6.003 6.445 3.108 0 4.596-1.457 4.596-1.457v-.012z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bb($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Last.fm" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class LastDotFm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bb, create_fragment$bb, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lastpass.svelte generated by Svelte v3.23.2 */

        function create_fragment$bc(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.629,6.857c0-0.379,0.304-0.686,0.686-0.686C23.693,6.171,24,6.483,24,6.857 v10.286c0,0.379-0.304,0.686-0.686,0.686c-0.379,0-0.686-0.312-0.686-0.686V6.857z M2.057,10.286c1.136,0,2.057,0.921,2.057,2.057 S3.193,14.4,2.057,14.4S0,13.479,0,12.343S0.921,10.286,2.057,10.286z M9.6,10.286c1.136,0,2.057,0.921,2.057,2.057 S10.736,14.4,9.6,14.4s-2.057-0.921-2.057-2.057S8.464,10.286,9.6,10.286z M17.143,10.286c1.136,0,2.057,0.921,2.057,2.057 S18.279,14.4,17.143,14.4s-2.057-0.921-2.057-2.057S16.007,10.286,17.143,10.286z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bc($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LastPass" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lastpass extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bc, create_fragment$bc, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Latex.svelte generated by Svelte v3.23.2 */

        function create_fragment$bd(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.176 2.813c.233.42.477.779.73 1.09h-.002a2.313 2.313 0 0 0-.357-.026 2.702 2.702 0 0 0-.791.13c.494.415.912.717 1.281.95.905.294 1.912.782 2.77 1.328.429.273.812.543 1.113.78.301.236.567.471.621.574.054.102-.001.139-.082.06-.081-.078-.302-.319-.6-.553a14.203 14.203 0 0 0-1.107-.775c-.775-.49-1.982-.96-2.715-1.414-.57-.182-1.182-.207-1.902.135.526.33.967.568 1.353.746 1.104.155 2.259.695 3.225 1.308.483.308.905.616 1.22.868.158.125.29.237.39.328.098.09.176.155.198.21.03.074-.02.104-.085.057-.032-.022-.085-.102-.182-.191a7.475 7.475 0 0 0-.385-.326c-.312-.25-.73-.553-1.21-.858-.894-.561-2.233-1.012-3.175-1.396-.601-.11-1.223-.06-1.904.389.449.2.837.35 1.182.464-.566.02-1.128.197-1.676.717.477.118.885.198 1.244.25-.44.09-.87.3-1.289.72.324.07.616.123.883.163-.329.159-.64.406-.924.783.373.03.703.042 1 .043-.36.166-.696.428-.996.85.533.026.979.024 1.363.002-.422.172-.812.464-1.144.969a11.66 11.66 0 0 0 1.629-.077l-.008.002c.99-.073 2.3.127 2.965.848.052.057-.024.118-.073.074-.648-.58-1.494-.827-2.892-.922-.544.15-1.047.447-1.461 1.075.535.007.981-.011 1.365-.047-.47.255-.871.643-1.137 1.304.483-.091.888-.19 1.237-.293-.363.265-.669.636-.873 1.194.324-.072.611-.146.87-.221a2.52 2.52 0 0 0-.513 1.096c.351-.13.655-.256.926-.38h.002c.283-.23.71-.457 1.289-.622.506-.145 1.082-.284 1.652-.301a3.63 3.63 0 0 1 .244 0c.1.003.063.104.006.103-.728-.008-1.302.132-1.873.295a9.8 9.8 0 0 0-1.318.526 2.5 2.5 0 0 0-.551 1.191c.495-.198.899-.388 1.238-.568-.311.333-.543.76-.635 1.357a11.794 11.794 0 0 0 1.442-.744c-.432.362-.764.844-.879 1.588a10.81 10.81 0 0 0 1.766-.957c-.184.372-.281.807-.235 1.35.762-.585 1.245-1.056 1.604-1.473a2.67 2.67 0 0 0 .076.885c.449-.772.897-1.093 1.353-1.358-.563.37-.464.671-.464 1.014.683-.72 1.636-1.483 1.927-1.961-.39.585-.547 1.14-.65 1.629-1.994 1.055-3.21 1.33-4.57 1.752.528.194 1.095.383.861.652l-.625.623c.399-.124.805-.3 1.158-.058-.034.327-.448.493-.8.683.62-.224.756-.173.92-.12.08.391-.203.602-.387.86 1.565-1.19 3.606-2.128 5.045-2.521 2.022-.681 4.632-1.39 5.341-3.117.235-.946.478-1.905.707-2.842-.111-.035-.245-.063-.35-.133a.655.655 0 0 1-.234-.299c-.252.066-.441.031-.56-.088-.118-.117-.168-.294-.203-.49-.204.042-.364.017-.47-.076-.114-.102-.17-.26-.198-.443l-.006-.041.037-.014a.84.84 0 0 0 .3-.195.256.256 0 0 0 .071-.225l-.006-.037.03-.016c.163-.093.346-.168.43-.279a.277.277 0 0 0 .05-.21.886.886 0 0 0-.154-.36l-.028-.04.04-.027c.118-.09.246-.176.31-.257.032-.041.046-.077.045-.11 0-.033-.015-.071-.065-.119l-.097-.094.135.006c.212.009.396-.006.539-.053a.5.5 0 0 0 .296-.224.455.455 0 0 1-.005-.074.455.455 0 0 1 .455-.455.455.455 0 0 1 .455.455.455.455 0 0 1-.022.132c.184.016.359.008.524-.064l.037-.012c.236-.084.333.045.72-.459-1.69-2.191-4.158-.632-4.978 1.625-.21.577-1.405.577-1.752-.002-1.37-2.95-5.531-6.067-9.072-7.216zm.732 1.091c.252-.009 1.13.453 1.31.52a23.6 23.6 0 0 1 1.567.967c.505.336.961.663 1.274.902.156.12.277.218.351.285.037.034.064.057.08.082a.079.079 0 0 1 .01.022.056.056 0 0 1-.004.045c-.01.02-.03.03-.043.03a.075.075 0 0 1-.027 0c-.057.001-.202-.163-.496-.415a23.427 23.427 0 0 0-2.758-1.826c-.504-.28-.956-.54-1.264-.612zM1.766 6.691c.812 0 1.89.365 2.931.92C5.74 8.168 6.74 8.83 7.223 9.39c.066.076-.019.123-.077.068-.52-.496-1.462-1.206-2.498-1.758-.637-.336-2.148-1.005-2.882-1.008zm-.428.967c1.116.015 2.348.446 3.432.996.541.275 1.024.57 1.396.832.372.263.673.523.734.657.062.133-.019.13-.086.054a4.404 4.404 0 0 0-.705-.627 11.496 11.496 0 0 0-1.384-.824c-.963-.482-2.284-.926-3.387-1.088zm.162.815c.066-.003.133 0 .201.006.822.071 1.719.366 2.533.748 1.087.509 2.035 1.157 2.434 1.666.035.045-.011.133-.078.064-.428-.44-1.32-1.132-2.397-1.637C3.28 8.9 1.91 8.45.93 8.541c.188-.024.373-.061.57-.068zm16.541.013c-.365.475-.53.425-.701.465.093.431.35.587.586.772 2.02-.372 4.29-.274 6.08-.225l-5.963-1.01-.002-.002zm-.803.494c-.19.077-.387.079-.584.06a.455.455 0 0 1-.39.224.455.455 0 0 1-.414-.268.616.616 0 0 1-.301.21 1.57 1.57 0 0 1-.492.054c.02.035.054.067.054.103a.275.275 0 0 1-.07.174c-.073.093-.188.172-.295.25a.946.946 0 0 1 .149.361.388.388 0 0 1-.07.284c-.106.14-.287.211-.438.295a.374.374 0 0 1-.092.267.886.886 0 0 1-.297.197c.027.157.074.283.154.354.086.076.212.104.426.049l.055-.016.01.055c.034.207.088.386.187.484.1.099.243.135.502.055l.049-.016.015.05a.53.53 0 0 0 .21.282c.087.06.25.112.36.147.798-.868 1.525-1.772 1.884-2.86-.225-.176-.508-.335-.612-.795zM1.44 9.348a6.683 6.683 0 0 1 2.77.64c.92.43 1.658.939 1.975 1.307.074.087-.02.122-.073.074a8.186 8.186 0 0 0-1.947-1.29c-.904-.416-2.196-.646-3.16-.718.145-.01.29-.014.435-.013zm.432.816c.61.02 1.24.155 1.807.352.756.262 1.42.614 1.746.98.044.05-.005.13-.072.07-.349-.304-.962-.694-1.707-.953-.575-.195-1.616-.367-2.27-.396.196-.021.293-.06.496-.053zm.893 1.781c.05 0 .103.004.156.008.424.034.886.133 1.342.406.043.026.049.136-.05.09-.856-.402-1.327-.489-2.458-.308.338-.113.652-.199 1.01-.196zm.416.784c.3.004.613.062.998.216.044.018.08.126-.033.094-.857-.243-1.167-.328-2.288.104.281-.229.62-.367 1.022-.403.1-.009.2-.013.3-.011zm1.459.681c.156 0 .311.009.46.026.053.005.055.102-.007.1a7.9 7.9 0 0 0-1.838.114c-.243.046-.422.044-1.404.46.286-.234.795-.451 1.386-.56.444-.08.934-.142 1.403-.14zm1.336.906c.035-.005.105.084.017.1-.73.136-1.244.268-1.795.455-.216.074-.579.207-1.242.588.259-.269.655-.494 1.213-.684a10.65 10.65 0 0 1 1.807-.459zm.31.508c.075-.012.099.087.022.102-1.217.24-1.76.556-2.541 1.144.503-.523 1.296-1.05 2.52-1.246zm.596.447a.095.095 0 0 1 .03 0c.06.011.069.089-.009.1-.872.13-1.479.555-2.257 1.332.295-.494 1.006-1.242 2.236-1.432zm.371.391c.046-.005.116.073.025.1-.193.056-.433.15-.67.3-.182.118-.302.202-.6.508.112-.245.299-.435.546-.591.246-.157.507-.293.699-.317z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bd($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LaTeX" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Latex extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bd, create_fragment$bd, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Launchpad.svelte generated by Svelte v3.23.2 */

        function create_fragment$be(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.999 18.676l-4.432-2.556-4.783 2.764V24l9.215-5.324zM11.216 24v-5.119l-4.785-2.762-4.43 2.557L11.216 24zm.779-6.475l4.789-2.765V9.236l-4.785-2.76-4.783 2.76v5.527l4.781 2.761-.002.001zM1.22 6.682v10.641l4.432-2.559V9.239L1.219 6.68l.001.002zm19.615 1.121l-2.484 1.436v5.522l4.43 2.559V6.678l-1.946 1.125zM2.001 5.324l4.435 2.559 4.781-2.762V.003L2.001 5.324zm15.566 2.559l4.434-2.559L12.782 0v5.121l4.785 2.762z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$be($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Launchpad" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Launchpad extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$be, create_fragment$be, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lbry.svelte generated by Svelte v3.23.2 */

        function create_fragment$bf(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.3493 14.1894l.169-1.0651-1.0315-.1775.0676-.4142 1.4456.245-.2365 1.4795zm.152-5.495v1.1921l-11.7338 7.211-8.8425-4.3367.0169-.6677 8.7918 4.3282 11.1759-6.8644v-.4904L12.3592 3.9773.5917 11.2561v3.2547l11.142 5.5119 11.6322-7.135.33.5074-11.9284 7.3038L0 14.8828v-3.9563L12.3254 3.301z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bf($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LBRY" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lbry extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bf, create_fragment$bf, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Leaflet.svelte generated by Svelte v3.23.2 */

        function create_fragment$bg(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.69 0c-.355.574-8.432 4.74-10.856 8.649-2.424 3.91-3.116 6.988-2.237 9.882.879 2.893 2.559 2.763 3.516 3.717.958.954 2.257 2.113 4.332 1.645 2.717-.613 5.335-2.426 6.638-7.508 1.302-5.082.448-9.533-.103-11.99A35.395 35.395 0 0 0 17.69 0zm-.138.858l-9.22 21.585-.574-.577Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bg($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Leaflet" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Leaflet extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bg, create_fragment$bg, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Leanpub.svelte generated by Svelte v3.23.2 */

        function create_fragment$bh(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.19 5.284c-.806-.454-2.93-1.478-5.652-1.478-2.445 0-3.837.751-4.538 1.234-.701-.483-2.093-1.235-4.538-1.235-2.723 0-4.846 1.025-5.651 1.479L0 20.194h.054a6.933 6.933 0 002.957-.673c1.032-.487 2.66-1.06 4.602-1.06 2.364 0 3.71 1.056 4.387 1.733.678-.677 2.023-1.732 4.387-1.732 1.943 0 3.57.572 4.602 1.06a6.933 6.933 0 002.957.672H24zM20.934 17.78a12.167 12.167 0 00-2.875-.801c-.558-.081-1.12-.122-1.674-.122-1.571 0-2.991.392-4.22 1.165l-.166.103-.165-.103c-1.23-.773-2.65-1.165-4.222-1.165-.552 0-1.115.04-1.673.122-.949.137-1.916.407-2.875.801l-1.218.501L3.3 6.321l.108-.048c1.225-.542 2.797-.865 4.205-.865 1.745 0 3.22.556 4.387 1.652 1.168-1.096 2.642-1.652 4.386-1.652 1.409 0 2.98.323 4.206.865l.108.048 1.453 11.961zm-4.085-1.328a11.99 11.99 0 00-.464-.009c-1.627 0-3.103.402-4.386 1.194-1.283-.792-2.759-1.194-4.387-1.194-.572 0-1.155.043-1.732.126-.983.143-1.983.421-2.973.829l-.565.232 1.34-11.025c1.159-.492 2.618-.783 3.93-.783 1.705 0 3.131.562 4.24 1.672L12 7.64l.146-.146c1.07-1.07 2.433-1.629 4.055-1.669z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bh($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Leanpub" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Leanpub extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bh, create_fragment$bh, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Leetcode.svelte generated by Svelte v3.23.2 */

        function create_fragment$bi(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.102 17.93l-2.697 2.607c-.466.467-1.111.662-1.823.662s-1.357-.195-1.824-.662l-4.332-4.363c-.467-.467-.702-1.15-.702-1.863s.235-1.357.702-1.824l4.319-4.38c.467-.467 1.125-.645 1.837-.645s1.357.195 1.823.662l2.697 2.606c.514.515 1.365.497 1.9-.038.535-.536.553-1.387.039-1.901l-2.609-2.636a5.055 5.055 0 0 0-2.445-1.337l2.467-2.503c.516-.514.498-1.366-.037-1.901-.535-.535-1.387-.552-1.902-.038l-10.1 10.101c-.981.982-1.494 2.337-1.494 3.835 0 1.498.513 2.895 1.494 3.875l4.347 4.361c.981.979 2.337 1.452 3.834 1.452s2.853-.512 3.835-1.494l2.609-2.637c.514-.514.496-1.365-.039-1.9s-1.386-.553-1.899-.039zM20.811 13.01H10.666c-.702 0-1.27.604-1.27 1.346s.568 1.346 1.27 1.346h10.145c.701 0 1.27-.604 1.27-1.346s-.569-1.346-1.27-1.346z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bi($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LeetCode" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Leetcode extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bi, create_fragment$bi, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lenovo.svelte generated by Svelte v3.23.2 */

        function create_fragment$bj(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.254 11.421a.81.81 0 00-.815.866.839.839 0 00.827.867.816.816 0 00.815-.867A.838.838 0 0020.254 11.421zM13.744 11.421a.81.81 0 00-.815.866.839.839 0 00.827.867.816.816 0 00.815-.867A.838.838 0 0013.744 11.421zM6.733 11.369a.786.786 0 00-.651.307.987.987 0 00-.171.736L7.388 11.8A.709.709 0 006.733 11.369z M0,8v8H24V8Zm5.006,5.827H2.227v-4h.857v3.224H5.006Zm1.817-.621a1.289,1.289,0,0,0,.884-.326l.534.411a2.025,2.025,0,0,1-1.431.588A1.594,1.594,0,1,1,6.717,10.7a1.543,1.543,0,0,1,1.216.5,1.671,1.671,0,0,1,.37.86l-2.162.9A.937.937,0,0,0,6.823,13.206Zm4.883.621h-.845V12.075a.679.679,0,0,0-.712-.651.66.66,0,0,0-.7.651v1.752H8.606V10.748h.846v.441h0a1.278,1.278,0,0,1,1-.493,1.185,1.185,0,0,1,1.25,1.222Zm1.984.052a1.593,1.593,0,1,1,1.66-1.592A1.6,1.6,0,0,1,13.69,13.879Zm2.8-.053-1.267-3.078h.966l.764,2.1.764-2.1h.966l-1.267,3.078Zm3.711.053a1.593,1.593,0,1,1,1.66-1.592A1.6,1.6,0,0,1,20.2,13.879Zm2-.418H22.06v.366h-.085v-.366h-.137v-.077H22.2Zm.541.366h-.082v-.315l-.137.213H22.51l-.136-.213v.315h-.082v-.443h.09l.134.21.134-.21h.088Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bj($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Lenovo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lenovo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bj, create_fragment$bj, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Letsencrypt.svelte generated by Svelte v3.23.2 */

        function create_fragment$bk(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.197 24H5.804a.965.965 0 0 1-.962-.962V13.87c0-.529.433-.962.962-.962h1.164v-1.482c0-2.775 2.258-5.032 5.032-5.032s5.032 2.258 5.032 5.032v1.482h1.164c.529 0 .962.433.962.962v9.168a.965.965 0 0 1-.962.962zm-5.569-5.072A1.274 1.274 0 0 0 12 16.544a1.275 1.275 0 0 0-.628 2.384v1.242a.628.628 0 1 0 1.256 0v-1.242zm-2.774-6.02h4.293v-1.482c0-1.183-.963-2.146-2.146-2.146s-2.146.963-2.146 2.146v1.482zM4.547 11.542h-2.99a.878.878 0 1 1 0-1.756h2.99a.878.878 0 1 1 0 1.756zM6.654 6.838a.87.87 0 0 1-.557-.2L3.732 4.693a.878.878 0 1 1 1.116-1.357l2.365 1.945a.878.878 0 0 1-.559 1.556zM12 4.77a.878.878 0 0 1-.878-.878V.878a.878.878 0 1 1 1.756 0v3.014A.878.878 0 0 1 12 4.77zM17.346 6.838a.877.877 0 0 1-.559-1.556l2.365-1.945a.878.878 0 0 1 1.116 1.357l-2.365 1.945a.876.876 0 0 1-.557.2zM22.443 11.542h-3.019a.878.878 0 1 1 0-1.756h3.019a.878.878 0 1 1 0 1.756z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bk($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Let’s Encrypt" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Letsencrypt extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bk, create_fragment$bk, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Letterboxd.svelte generated by Svelte v3.23.2 */

        function create_fragment$bl(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.29 16.752V7.2H6.546V4.8h6.328v2.4h-1.746v9.574h3.925v-2.618h2.839V19.2H6.545v-2.448h1.746zM0 12c0 6.628 5.372 12 12 12s12-5.372 12-12S18.628 0 12 0 0 5.372 0 12z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bl($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Letterboxd" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Letterboxd extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bl, create_fragment$bl, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lg.svelte generated by Svelte v3.23.2 */

        function create_fragment$bm(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.286 6.714a5.286 5.286 0 100 10.572 5.287 5.287 0 000-10.572zm0 .86c.05 0 .156 0 .21.002v.413a14.622 14.621 0 00-.21-.003A3.986 3.986 0 002.45 9.161a3.982 3.982 0 00-1.175 2.836c0 1.072.417 2.08 1.175 2.836a3.986 3.986 0 002.836 1.175 4.02 4.019 0 004.003-3.741v-.06H6.551v-.41h2.981l.177-.001v.201a4.394 4.394 0 01-1.294 3.128 4.4 4.4 0 01-3.13 1.296c-1.18 0-2.29-.46-3.13-1.296a4.394 4.394 0 01-1.293-3.128 4.43 4.43 0 014.424-4.425zm16.063.878c-2.21 0-3.372 1.207-3.372 3.508 0 2.29 1.05 3.53 3.36 3.53 1.06 0 2.099-.27 2.663-.665v-3.316h-2.74v1.274h1.285v1.195c-.237.09-.7.181-1.14.181-1.42 0-1.894-.722-1.894-2.188 0-1.398.45-2.222 1.872-2.222.79 0 1.24.248 1.613.722l.982-.902c-.598-.857-1.647-1.117-2.63-1.117zm-8.413.102v6.834h4.85v-1.33h-3.27V8.553zM3.598 9.677a.635.635 0 110 1.27.635.635 0 010-1.27zm1.478.002h.42v4.22h1.052v.414H5.076z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bm($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LG" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lg extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bm, create_fragment$bm, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lgtm.svelte generated by Svelte v3.23.2 */

        function create_fragment$bn(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.008 4.866c-2.914 0-5.377.679-6.995 2.11-.05-.088-.085-.163-.141-.253-.17-.273-.328-.583-.828-.89a2.699 2.699 0 0 0-1.014-.387 2.14 2.14 0 0 0-.47-.001l.099-.013c-.91 0-1.442.546-1.788 1.016-.344.47-.566.999-.71 1.577-.285 1.155-.289 2.651.81 3.767.575.588 1.251.863 1.863 1.027.118.032.223.04.336.063.399 1.892 1.58 3.492 3.158 4.381v.001h.002c.929.522 1.81.761 2.472 1.014.924.357 1.9.751 3.036.85l.06.006h.15c1.306 0 2.296-.527 3.152-.855.655-.25 1.54-.482 2.477-1.008a6.156 6.156 0 0 0 1.196-.88 6.759 6.759 0 0 0 1.967-3.45 3.913 3.913 0 0 0 2.19-1.15c1.098-1.115 1.094-2.611.809-3.766-.144-.578-.366-1.106-.71-1.577-.345-.47-.879-1.016-1.788-1.016l.1.013a2.14 2.14 0 0 0-.472.002 2.695 2.695 0 0 0-1.01.385c-.499.307-.658.616-.827.888-.055.089-.09.163-.139.249-1.617-1.426-4.076-2.103-6.985-2.103zm.023 1.37c3.557 0 6.013 1.065 7.057 2.97.63-.243 1.093-1.89 1.612-2.209.42-.26.665-.195.665-.195.95 0 1.93 2.797.712 4.032-.644.657-1.83.842-2.422.795-.045 1.906-1.155 3.626-2.624 4.45-.748.42-1.552.64-2.296.924-.921.352-1.786.763-2.662.763h-.092c-.872-.076-1.74-.407-2.662-.763-.744-.285-1.548-.51-2.296-.93-1.46-.824-2.571-2.54-2.616-4.445-.587.05-1.788-.132-2.436-.794-1.217-1.235-.238-4.032.712-4.032 0 0 .246-.064.666.195.521.321.987 1.984 1.62 2.214C6.013 7.3 8.47 6.236 12.032 6.236zm-3.876 2.33a3.053 3.053 0 1 0 0 6.105 3.053 3.053 0 0 0 0-6.105zm7.751 0a3.052 3.052 0 1 0 0 6.105 3.052 3.052 0 0 0 0-6.105zM8.591 10.28a1.357 1.357 0 0 1 0 2.713 1.356 1.356 0 0 1-1.313-1.694.57.57 0 0 0 1.098-.216.57.57 0 0 0-.547-.57 1.35 1.35 0 0 1 .762-.233zm6.888 0a1.357 1.357 0 0 1 0 2.713 1.356 1.356 0 0 1-1.314-1.694.57.57 0 1 0 .552-.785 1.35 1.35 0 0 1 .762-.234zM11.52 14.93c-.239.02-.377.146-.377.476 0 .21.138.365.378.365a.143.143 0 0 0 .033-.282c-.022-.005-.13-.044-.13-.136 0-.093 0-.125.183-.15.078-.012.116-.105.092-.18-.024-.075-.094-.1-.18-.093zm1.023 0c-.085-.006-.156.018-.18.093-.024.075.015.168.093.18.182.025.182.057.182.15 0 .092-.107.131-.13.136a.143.143 0 0 0 .033.282c.24 0 .379-.155.379-.365 0-.33-.139-.456-.377-.476z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bn($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LGTM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lgtm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bn, create_fragment$bn, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Liberapay.svelte generated by Svelte v3.23.2 */

        function create_fragment$bo(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.32 0A2.321 2.321 0 0 0 0 2.32v19.36A2.321 2.321 0 0 0 2.32 24h19.36A2.32 2.32 0 0 0 24 21.68V2.32A2.32 2.32 0 0 0 21.68 0zm9.208 3.98l-2.27 9.405a2.953 2.953 0 0 0-.073.539.853.853 0 0 0 .09.432.7.7 0 0 0 .334.302c.157.077.378.126.661.147l-.49 2.008c-.772 0-1.38-.1-1.82-.3-.441-.203-.757-.477-.947-.826a2.391 2.391 0 0 1-.278-1.2c.005-.452.068-.933.188-1.445l2.074-8.67zm3.9 3.888c.61 0 1.135.092 1.576.277.44.185.802.438 1.085.76.283.32.493.696.629 1.126.136.43.204.89.204 1.379v.001c0 .794-.13 1.52-.392 2.179a5.16 5.16 0 0 1-1.086 1.706 4.84 4.84 0 0 1-1.665 1.118c-.648.267-1.353.4-2.114.4-.37 0-.74-.033-1.11-.098l-.735 2.956H9.403l2.71-11.298c.435-.13.934-.248 1.494-.351a10.045 10.045 0 0 1 1.821-.155zm-.31 2.041a4.67 4.67 0 0 0-.98.098l-1.143 4.752c.185.044.413.065.685.065.425 0 .812-.079 1.16-.237a2.556 2.556 0 0 0 .89-.661c.244-.283.435-.623.571-1.02a4.03 4.03 0 0 0 .204-1.315c0-.468-.104-.865-.31-1.192-.207-.326-.566-.49-1.077-.49z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bo($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Liberapay" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Liberapay extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bo, create_fragment$bo, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Librarything.svelte generated by Svelte v3.23.2 */

        function create_fragment$bp(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.4 4.78v-.43l-.03-.46c0-.13-.05-.33-.14-.6-.09-.26-.13-.49-.13-.69a.4.4 0 0 1 .17-.33l.35-.28a.94.94 0 0 1 .61-.18c.16 0 .41.02.77.07.31 0 .54-.07.7-.2l.37-.26c.17-.14.26-.29.26-.46 0-.29-.16-.52-.48-.7A2.52 2.52 0 0 0 11.63 0l-1.36.1c-.31 0-.9.07-1.77.21-.87.15-1.54.22-2.03.22-.2 0-.54-.04-1.02-.12A7.61 7.61 0 0 0 4.3.3l-.75.24c-.26.08-.38.2-.38.35l.06.3c.14.28.34.5.6.65l.27.14c.13.04.24.06.33.06.11 0 .28 0 .5-.03a1 1 0 0 1 .5.13l.37.33c.18.2.3.4.38.58.08.18.12.35.12.5 0 .12-.02.3-.07.57-.04.26-.06.47-.06.62 0 .2.05.49.15.86.1.37.15.68.15.92-.03.38-.04.75-.04 1.12v1.12c0 .29.03.66.07 1.12.04.46.07.83.07 1.1l-.07 1.37-.03 2.21-.1 1.81c0 .25.04.56.13.96.09.4.13.71.13.95 0 .25-.03.55-.1.93a3.56 3.56 0 0 0-.07 1.32c.03.17.03.3 0 .4a.8.8 0 0 1-.18.37l-.31.38c-.2.24-.43.43-.67.56-.24.13-.59.2-1.03.23-.45.02-.77.11-.97.28-.2.16-.3.29-.3.38 0 .57.53.85 1.6.85l.23-.03 1.92-.2c.32-.02.7-.03 1.12-.03h.4l1.2.03h3.2l.88-.08c.28-.03.53-.05.75-.05.29 0 .69.07 1.2.22.51.14.94.19 1.3.14l.38-.1c.24-.06.46-.1.69-.1l.45.06c.27.03.5.05.68.05.09 0 .24-.03.47-.07.55-.11.94-.32 1.16-.63.16-.22.24-.42.24-.62a5.27 5.27 0 0 1-.1-1.35c.1-.22.23-.44.36-.66.11-.29.2-.68.24-1.17.04-.5.08-.83.11-.99.04-.16.13-.42.29-.76.15-.34.23-.63.23-.87 0-.26-.06-.5-.17-.7-.1-.19-.25-.29-.43-.29-.11 0-.29.1-.53.3-.11.09-.2.25-.29.5-.07.23-.14.4-.18.49-.27.4-.53.78-.8 1.15a5.4 5.4 0 0 0-.33.62c-.23.47-.4.78-.54.96a4.3 4.3 0 0 1-.53.5c-.11.08-.22.2-.32.34s-.24.37-.41.68l-.57.3-.4.1c-.13.01-.31.07-.53.16-.23.08-.4.14-.5.16-.11.02-.26.03-.44.03-.2 0-.5-.03-.9-.1-.4-.06-.72-.1-.96-.1l-.7.04c-.8 0-1.4-.43-1.77-1.29a9.37 9.37 0 0 1-.48-4.67c.05-.36.08-.64.08-.86v-2.3l.03-.76c.03-.31.04-.53.04-.66a3.05 3.05 0 0 0-.17-1.06 1.77 1.77 0 0 1-.13-.56c0-.1.02-.26.06-.46.05-.2.07-.35.07-.46l-.03-.99c-.03-.42-.04-.75-.04-.99 0-.28.05-.63.14-1.05.09-.42.13-.76.13-1.02z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bp($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LibraryThing" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Librarything extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bp, create_fragment$bp, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Libreoffice.svelte generated by Svelte v3.23.2 */

        function create_fragment$bq(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.365 0a.597.597 0 00-.555.352.582.582 0 00.128.635l4.985 4.996a.605.605 0 00.635.133.59.59 0 00.363-.53V.577A.605.605 0 0021.335 0zM2.661 0a.59.59 0 00-.582.59v22.82a.59.59 0 00.582.59h18.67a.59.59 0 00.59-.59V8.716a.59.59 0 00-.17-.42L13.674.182a.59.59 0 00-.42-.181zm.59 1.184h9.754l7.733 7.77v13.863H3.251z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bq($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LibreOffice" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Libreoffice extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bq, create_fragment$bq, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Libuv.svelte generated by Svelte v3.23.2 */

        function create_fragment$br(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.534 19.21c-.573.117-1.183.506-1.656.594-1.044.193-1.66.007-1.108-.22.8-.332 3.44-.415 3.716-2.374.276-1.96.083-2.843-.055-3.34a7.179 7.179 0 0 0-.351-.891 3.633 3.633 0 0 0-.134-.523 1.66 1.66 0 0 1-.074-.228s-.034-.241.076-.476c.098-.208.433-.659.456-1.095v-.08a.762.762 0 0 0-.008-.087l-.002-.026a.802.802 0 0 0-.374-.542c-.123-.082-.29-.107-.382-.224.073-.23.306-.313.404-.501.06-.167.011-.343-.081-.503-.178-.2-.528-.372-.842-.49-.393-.147-.792-.264-1.062-.475-.285-.152-.477-.445-.302-.833a.703.703 0 0 0 .064-.3v-.028c-.001-.02-.004-.037-.006-.055a.538.538 0 0 0-.008-.042l-.006-.024-.008-.027c-.072-.243-.453-.31-.59-.323-.307-.027-.506-.111-.67-.163.132.069.264.16.433.228.106.044.26.07.389.112 0 0 .239.048.304.214a.59.59 0 0 1 0 .403l-.01.027c-.024.073-.05.143-.056.215-.022.286.153.434.246.673.167.159.406.324.736.473.298.134.653.215.874.348.127.077.36.263.354.399-.004.104-.195.245-.272.348-.056.074-.083.171-.132.24-.043.069-.099.112-.162.112-.083 0-.271.032-.147.041.124.01.446.161.446.161.435.18.727.514.567.99-.134.399-.442.732-.463 1.17-.023.467.19.85.218 1.22.046.623-.043 1.051-.164 1.52-.056.218-.086.434-.136.647-.213.906-.76 1.299-1.5 1.718-.322.181-.666.516-1.01.622-.056.017-.141-.009-.192 0-.317.057-.602.215-.927.274-.306.057-.628.03-.991.121-.184.066-.42.165-.559.223-.213.097-.422.199-.631.3l-.693.396s-.386.224.042.059c.344-.134 1.527-.722 1.031-.377-.342.172-.527.416-.83.624 0 0-1.016.504-1.169.645-.167.155-.372.069-.507.22a1.19 1.19 0 0 1-.49.332c-.138.046-.294.35-.506.506-.211.156-.671.11-1.076.285a2.373 2.373 0 0 1-.824.177c-.04.004-.08.006-.116.007H9.56a1.553 1.553 0 0 1-.556-.096c-.169-.062-.231-.03-.193-.01.038.02.148.124.148.124-.472 0-.601-.315-.819-.548.1-.014.381.055.238-.028-.283-.135-.827-.145-.838-.47-.008-.255.11-.2.11-.2.197.346.809.38 1.254.375.83-.01 1.393-.466 1.937-.723a9.87 9.87 0 0 0 .382-.246v.004c.171-.112.345-.22.492-.355.256-.236.429-.543.655-.804a.697.697 0 0 1 .146-.153c.064-.06.132-.115.208-.164l.003.006.03-.02-.006-.01c.548-.311 1.058-.655 1.489-1.072l.003-.005c.062-.056.386-.418.542-.593.185-.246.318-.557.395-.87.028-.114.01-.251.054-.374.069-.19.242-.36.355-.548.117-.195.195-.408.273-.622.341-.938.736-1.685 1.473-2.191.355-.244.787-.402 1.037-.772a1.665 1.665 0 0 1-.703.408c-.811.267-1.338.95-1.603 1.385a5.167 5.167 0 0 0-.477 1.22 4.06 4.06 0 0 0-.355-1.395c-.16-.37-.303-.761-.6-.996 0 0-.011.001-.058-.027-.046-.027.767-.048.767-.048.143.006.287.026.434.045a.373.373 0 0 1 .103.006c.447.079.91-.088 1.2-.298.15-.11.412-.197.628-.256.004-.01.025-.02.08-.03 0 0 .33-.104.682-.2a3.27 3.27 0 0 0 .533-.175.779.779 0 0 0 .187-.162c.104-.127.106-.28.192-.498.085-.217.216-.386.218-.573.006-.611-.573-1.098-1.2-.772.617-.16 1.056.142.982.723-.092.716-1.172 1.248-1.829 1.518-.26.107-.565.243-.873.274-.443.045-.846-.05-1.227-.025-.49.032-.815.291-1.228.324-.355.028-.307-.212-.615-.239-.063-.036-.257 0-.45-.01-.532.14-.874-.103-1.309-.299-.314-.141-.648-.27-.982-.299-.838-.07-1.348.046-2.033-.027-.193-.02-.594-.045-.784-.116-.593-.222-1.047-.141-1.69-.15-.469-.007-.903-.032-1.196.02-.08.014-.16.034-.245.05-.628.109-1.583.166-1.555.721.046-.032.033-.118.109-.124-.003.102-.006.204.027.274-.365-.01-.58-.262-.573-.548.012-.487.796-.69 1.337-.822.542-.13 1.105-.284 1.5-.348-.947.139-1.95.228-2.673.572a.778.778 0 0 1-.021-.108c-.058-.263-.183-.666-.27-1.058-.102-.451.055-1.242.055-1.242l.004.004c.065-.402.148-.58.228-.821.172-.513.726-.674 1.114-.723a1.742 1.742 0 0 0-.668.901c-.017.137-.03.264-.039.377.294-.914 1.113-1.256 1.113-1.256l.262-.283-.003.013c.452-.438 1.05-.777 1.809-.798.383-.01.845.09.844.466 0 .212-.167.392-.393.491a.311.311 0 0 0 .183-.019l.235-.263c.078-.192.07-.435-.06-.581.346-.296.884.036.845.428.101-.085.163-.247.094-.375.465-.273.726.39 1.194.235-.044-.133-.27-.106-.338-.217.612-.087 1.15.128 1.764.08.038.033.08.066.124.1-1.149.126-.215.126-.215.126.147-.014.5-.038.638-.014.225.04.37-.014.569-.092.004.009.024.008.036-.014.103-.041.222-.086.373-.127a.98.98 0 0 0 .174-.042l.024-.005.004-.004c.079-.027.153-.06.216-.09.58-.279 1.06-.934 1.554-1.278.819-.569 1.595.134 2.165.59l-.004.006c.143.098.332.218.537.344.537.233 1.245.437 1.623.811.302.299.405.684.535 1.083.122.373.357.702.49 1.12a.163.163 0 0 0 .05-.092c-.004-.036-.01-.073 0-.097l.008.007a1.047 1.047 0 0 0-.043-.249c-.112-.229-.309-.49-.285-.693 0 0 .697.36 1.488.718.273.123.522.326.74.559l.063-.002a.136.136 0 0 0-.004.065c.384.43.657.944.752 1.24a4.416 4.416 0 0 0 .16.412h.001c.014.025.023.05.032.074.115.247.227.448.258.503.1.124.181.285.268.42a11.375 11.375 0 0 1-2.465 8.17c-.09.011-.214.032-.378.066zm-.718 1.12c-.549.18-1.11.516-1.467.55-1.076.102-1.27-.376-.41-.455.325-.03.805-.067 1.188-.248.564-.269 1.142-.529 1.528-.722-.264.306-.544.598-.839.875zm-11.735.052c-.092.03-.092-.015-.092-.015s-.165-.236-.19-.456c-.026-.218.03-.412.084-.44.055-.03.067.097.112.256.045.16.268.49.268.49.032.067-.09.134-.182.165zm.575.1c-.105.036-.105-.016-.105-.016s-.189-.269-.217-.519c-.03-.247.036-.468.099-.5.063-.035.076.11.127.29.051.183.307.558.307.558.036.077-.105.153-.211.188zm.194-.697c-.036-.313.048-.593.129-.636.08-.043.098.14.162.37.065.231.39.706.39.706.046.098-.134.194-.27.238-.135.044-.134-.02-.134-.02s-.24-.34-.277-.658zm4.669-3.587c.056-.05.116.056.226.176.11.122.5.313.5.313.063.046-.062.162-.164.232-.1.07-.117.03-.117.03s-.287-.136-.396-.321c-.108-.183-.106-.379-.05-.43zm-.924.492c.069-.065.143.073.281.229.14.16.631.414.631.414.08.06-.076.21-.203.3-.127.091-.148.038-.148.038s-.359-.182-.495-.423c-.136-.237-.136-.493-.066-.558zm-.825 1.11c-.122-.256-.111-.52-.04-.584.07-.064.138.083.266.255.131.175.602.467.602.467.075.067-.084.215-.212.301-.128.087-.147.03-.147.03s-.344-.21-.469-.47zm-.754.63c-.102-.269-.075-.54-.003-.6.073-.06.128.097.24.28.115.189.55.522.55.522.069.075-.094.214-.224.292-.129.078-.142.018-.142.018s-.318-.24-.421-.512zm-1.017 1.654c-.136.041-.134-.021-.134-.021s-.23-.331-.257-.637c-.026-.304.066-.574.148-.614.082-.041.094.136.15.358.059.225.37.686.37.686.043.094-.14.186-.277.228zm.275-1.059c-.066-.304-.002-.59.08-.642.082-.054.116.124.205.34.089.218.48.646.48.646.058.09-.125.21-.267.273-.14.062-.145-.004-.145-.004s-.286-.305-.353-.613zm3.688-7.155s.08.013.043.126c-.035.112-.042.46.066.61.11.15-.075.093-.219-.059-.144-.15-.246-.43-.215-.619 0 0-.008-.08.325-.058zm-.51.921c.176.195-.092.143-.316-.049-.223-.191-.406-.565-.39-.834 0 0-.022-.11.447-.13 0 0 .114.007.079.17-.033.163.006.65.18.843zm-1.19 1.016c1.017.067 1.747-.286 2.264-.647.136-.095.316-.326.546-.174-.098.203-.358.337-.573.448-.377.195-.712.365-1.146.473.732-.112 1.253-.417 1.8-.697.068.14.143.423.192.662h.008s.05.133.034.264c.003.063-.01.116-.055.146a.23.23 0 0 1-.055.052c-.2.13-.794.42-1.27.455-.016 0-.03.003-.046.004l-.035.01-.001-.006c-.432.05-.711.228-.16.137.553-.091 1.736-.292 1.305-.13h.002c-.538.21-1.245.415-1.938.348-.448-.043-.91-.263-1.31-.473-.397-.21-.775-.485-1.2-.573-.323-.067-.59.027-.873.075-.188.032-.45.108-.563-.01-.048-.056-.01-.115-.01-.115.108-.266.421-.423.682-.498.819-.235 1.611.198 2.401.25zm.23-.891c.171.248-.126.148-.353-.105-.227-.253-.38-.71-.323-1.017 0 0-.01-.13.529-.08 0 0 .129.025.066.206-.064.182-.09.747.08.996zm-1.084-.119c.169.283-.146.159-.376-.132-.23-.29-.367-.802-.284-1.136 0 0-.002-.144.58-.064 0 0 .137.035.057.232-.08.196-.145.818.023 1.1zm-1.12-.156c.172.286-.147.164-.38-.13-.234-.292-.376-.812-.293-1.155 0 0-.003-.145.585-.072 0 0 .14.034.059.236-.08.2-.143.836.029 1.121zm-1.027.323c.212.37-.159.213-.441-.166-.283-.379-.472-1.053-.397-1.5 0 0-.011-.19.662-.099 0 0 .161.042.081.306-.08.263-.116 1.089.095 1.46zm-1.09-.275c.211.323-.16.2-.441-.128-.282-.328-.467-.927-.389-1.332 0 0-.01-.171.665-.12 0 0 .162.032.08.272-.082.24-.125.985.085 1.308zm-1.154-.376c.149.277-.14.154-.345-.133-.205-.285-.318-.787-.232-1.115 0 0 .002-.14.54-.058 0 0 .127.035.046.226-.08.193-.158.802-.009 1.08zm-.88-.24c.14.221-.114.125-.303-.102-.189-.227-.308-.628-.248-.892 0 0-.005-.113.46-.053 0 0 .11.026.05.182-.06.154-.1.644.04.865zm-.925.16c.17.248-.126.149-.353-.105-.227-.254-.38-.71-.322-1.017 0 0-.01-.13.528-.08 0 0 .129.025.066.206-.064.182-.09.747.081.996zm-.746-.066c.175.195-.093.143-.316-.049-.224-.191-.407-.565-.39-.834 0 0-.023-.111.446-.13 0 0 .115.007.08.17-.034.163.005.65.18.843zm10.24 10.242c-.516.179-1.435.627-2.173 1.003-.177.008-.354.012-.533.012C5.69 23.423.577 18.31.577 12c0-4.888 3.07-9.057 7.387-10.688.022.02.045.04.07.058.048.039.129.059.17.109.057.067.033.203.058.287.075.259.235.497.501.691.04.029.114.043.148.08.074.085.052.227.108.324.06.102.16.226.284.321.067.052.169.08.232.143.052.05.066.14.103.216.1.204.362.44.488.653a.47.47 0 0 1 .041.088c.053.108.18.338.353.444 0 0 .018.319.336.682-.644-.035-1.265-.399-1.743-.037-.138-.15-.58-.269-.77-.058-.139-.242-.88-.398-1.025-.014-1.053-.472-2.325.202-2.734.878a2.86 2.86 0 0 0-.214.114 1.196 1.196 0 0 0-1.102.187c-.417.301-.853 1.65-.778 2.584.008.1.198.336.266.81.068.469.12.623.12.623-.093.162-.204.234-.219.423-.033.41.318.632.646.842.117.054.249.093.392.099.087.137.42.6.973.6l.04-.001c.211.177.431.225.28.006a.442.442 0 0 1-.034-.059.88.88 0 0 0 .334.13c.002 0 .054.013.097.013.015 0 .06 0 .076-.035s-.016-.072-.027-.084c-.044-.051-.094-.184-.131-.307.04.074.084.144.134.205.262.322.63.475.425.154a.957.957 0 0 1-.122-.392.95.95 0 0 0 .562.33c.235.223.528.315.352.077a.574.574 0 0 1-.091-.225c.142.17.382.389.676.389h.027c.202.136.371.158.22-.038a.692.692 0 0 1-.117-.33c.134.272.39.646.834.767.003 0 .08.022.143.022.049 0 .08-.013.094-.04.022-.038-.006-.083-.016-.098a1.094 1.094 0 0 1-.078-.16c.2.117.346.127.191-.063a.746.746 0 0 1-.14-.379c.108.29.329.695.764.96.003.002.081.04.168.04a.25.25 0 0 0 .112-.026.101.101 0 0 0 .053-.067c.022-.09-.063-.22-.071-.23a1.88 1.88 0 0 1-.134-.35l.003.003c.315.254.723.371.471.118-.153-.154-.212-.417-.217-.632.092.257.315.704.778.792.003 0 .075.014.128.014.029 0 .064-.003.077-.031.005-.012.007-.032-.014-.055a.817.817 0 0 1-.11-.251c.022.016.044.034.067.049.224.147.489.224.523.176.072.06.184.136.337.204.014.032.028.065.04.098 0 0 .07.198.098.305-.363-.094-.984-.276-1.446-.174-.365.08-1.317.606-1.086.976a.17.17 0 0 0 .057.056l.014.005a.962.962 0 0 0 .42.075l.061-.001a2.74 2.74 0 0 0 .442-.07c.254-.084.482-.034.482-.034l-.004.003c.181.02.372.084.569.185.212.107.5.285.573.373.132.16-.07.532-.146.761l-.013.042-.005.019a1.63 1.63 0 0 1-.039.1.42.42 0 0 1-.033-.047c-.072-.121-.11-.228-.148-.179-.038.05-.04.244.032.427a.496.496 0 0 0 .026.055c-.082.15-.182.307-.287.458a1.218 1.218 0 0 1-.204-.234c-.093-.16-.142-.3-.19-.235-.048.064-.05.322.042.565a.86.86 0 0 0 .123.213 5.25 5.25 0 0 1-.307.352 1.736 1.736 0 0 1-.276-.345c-.089-.178-.135-.33-.185-.265-.05.065-.06.338.024.603.034.108.094.207.152.287a16.61 16.61 0 0 1-.345.32 1.455 1.455 0 0 1-.178-.284c-.079-.192-.116-.355-.17-.293-.052.063-.075.347-.005.63.018.07.045.137.075.199-.12.107-.235.209-.34.3a1.261 1.261 0 0 1-.072-.183c-.062-.23-.085-.419-.146-.36-.061.056-.114.361-.069.685.004.032.01.062.017.093l-.03.026c-.069.06-.144.132-.222.21a1.239 1.239 0 0 1-.042-.164c-.04-.24-.045-.43-.108-.385-.062.045-.137.34-.122.67.002.051.008.103.017.155-.091.103-.182.209-.267.313A2.156 2.156 0 0 1 8 19.008c-.045-.25-.055-.45-.119-.401-.058.044-.122.312-.115.623-.064.047-.147.264-.15.51a.935.935 0 0 0 .035.246c-.042.058-.114.099-.164.17-.261.365-.155.8.409.896.173.532.61.79 1.282.797.09 0 .185-.03.273-.025.1.007.182.047.273.05.49.015.746-.14 1.118-.25.278-.08.564-.106.737-.173.265-.104.39-.389.6-.523.079-.05.226-.074.355-.15.11-.064.204-.18.3-.224.085-.038.225-.03.328-.074.17-.075.36-.235.573-.35a16.92 16.92 0 0 1 1.282-.622c.227-.1.467-.333.6-.348.158-.018.341.113.464.1.25.297.338.713.327 1.248.015.001.004.132.004.132s.087 1.148-1.705 1.768zM7.583.205c.188.052.397.159.197.477-.122-.131-.164-.304-.197-.477zm.358.42c.06-.105 0-.159.032-.222.539.07.585.448.352.984-.359-.121-.455-.361-.523-.605C7.86.72 7.904.69 7.94.625zm.588.106c.502.221.58.776.234 1.499a.94.94 0 0 1-.278-.274c-.053-.082-.127-.216-.11-.326.01-.075.07-.177.1-.261.089-.244.123-.463.054-.638zm2.403 2.105c-.009-.026.01-.025.031-.045.75.152.81.884.487 1.435-.152.261-.302.399-.536.326-.194-.06-.22-.217-.314-.324.382-.556.375-.966.332-1.392zm-.866-.55c-.004-.068-.016-.144.011-.21a.74.74 0 0 1 .27.07c.422.223.596 1.018.351 1.486-.105.2-.211.298-.408.241-.317-.09-.409-.45-.537-.599.346-.368.326-.692.313-.988zM9.05 1.287l.02-.01c.825.29 1.299.84.549 1.85-.286-.144-.447-.335-.521-.552-.044-.127-.078-.143-.048-.3.064-.341.085-.717 0-.988zm3.201 4.238l-.052.024c-.1.051-.206.082-.306.1-.62-.134-.807-.84-.807-.84.58-.256.907-.99.7-1.393.006-.015.02-.012.033-.01.263.117.54.311.673.522.256.399.331 1 .119 1.482-.095.022-.156.044-.232.07a.543.543 0 0 0-.04.012l-.07.026-.007.003-.011.004zm1-.501l-.122.104c-.036.068-.145.158-.284.217.11-.335.124-.691.132-.955.228.119.38.282.468.467l-.087.075a.62.62 0 0 0-.163-.194c.032.093.05.188.057.286zM12 .577c5.596 0 10.251 4.023 11.232 9.335a1.862 1.862 0 0 0-.358-.198c-.28-1.248-.882-2.037-2.118-2.487-.414-.151-.807-.326-1.216-.504.024-1.328-1.52-1.3-2.482-1.984-.418-.298-.893-.848-1.371-.95-.926-.197-1.495.448-2.042.899-.134-.146-.335-.29-.627-.42 0 0-.522-.744-.765-.884a.123.123 0 0 1-.034-.026c-.134-.063-.303-.098-.422-.177-.117-.077-.14-.26-.257-.348a1.08 1.08 0 0 0-.225-.122c-.095-.038-.256-.03-.351-.083-.117-.064-.127-.272-.211-.376a.842.842 0 0 0-.408-.273c-.08-.026-.198-.028-.27-.066-.079-.043-.098-.177-.16-.26-.143-.192-.384-.341-.66-.439-.06-.02-.139-.02-.182-.05-.051-.034-.057-.119-.088-.184C9.945.718 10.956.577 12 .577zm11.343 10.068c-.116-.199-.223-.39-.263-.559.08.052.148.11.212.172.02.128.036.257.051.387zM12 0a12 12 0 0 0-3.55.535.27.27 0 0 0-.044-.062c-.103-.1-.226-.177-.482-.112A.647.647 0 0 0 7.52.11l-.006.01c.025.233.058.468.235.629l-.003.028C3.22 2.494 0 6.87 0 12c0 6.628 5.372 12 12 12 6.627 0 12-5.372 12-12S18.627 0 12 0zM5.9 6.312s-.471.107-.6.942c0 0-.022.42.11.328-.111-.506.37-.735.48-.787.155-.069.283-.046.293.086.01.142-.152.205-.2.352.172-.098.558-.326.518-.623-.03-.218-.235-.412-.6-.298zm6.206.512c-.81-.475-2.907-.393-3.4-.43-.484-.038-.726.579-.726.579-.007.13.1-.02.1-.02.317-.57.595-.466.595-.466 1.003.293 1.182 1.767 1.224 2.108.041.34.127.119.127.119.097-.848-.52-1.882-.65-2.015-.13-.131-.007-.206.408-.09 1.247.35 1.364 2.349 1.44 2.59.075.242.122.01.122.01-.17-1.837-.868-2.29-1.054-2.543-.077-.105.554-.12.831.06 1.568 1.013 1.392 2.953 1.534 2.676.143-.283-.395-2.038-1.15-2.636-.152-.119.524.09.773.319 1.18 1.09 1.324 2.271 1.415 2.612.09.34.133.225.133.225.016-1.155-.899-2.617-1.722-3.098zm2.274-.804c.174-.094.379-.707.8-.452.314.189.463.236.463.236s-.219.062-.319.226-.218.29-.566.239c-.366-.055-.433.003-.617.033 0 0 .065-.187.239-.282zm-.673.49c.269.059.516.163.764.324.275.179.573.507.983.474.13-.01.368-.137.463-.2.12-.078.404-.263.328-.547-.034-.126-.184-.147-.273-.25-.124-.143-.12-.283-.218-.448.216.044.34.172.572.2a3.983 3.983 0 0 0-1.31-.797c.04-.022.065-.113.192-.15.115-.033.484.024.246-.025-.24-.067-.389.002-.546.1-.362.226-.656.745-1.037.971-.165.099-.327.076-.464.25.089.177.18.072.3.099zm2.838-.323c-.09.052.057.1.082.125.104.102.336.29.409.448.15.323.103.817-.164.996-.18.12-1.06.449-1.446.448-1.083-.001-1.193-1.191-1.855-1.594.012.114.095.353.19.476.372.486.727 1.487 1.773 1.32.37-.059 1.061-.314 1.339-.488.301-.188.525-.909.218-1.308-.138-.178-.467-.405-.546-.423z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$br($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "libuv" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Libuv extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$br, create_fragment$br, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lighthouse.svelte generated by Svelte v3.23.2 */

        function create_fragment$bs(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0l5.5 3.5v5H20v3h-2.25l2 12.5H4.25l2-12.5H4v-3h2.5V3.53zm2.94 13.25l-6.22 2.26L8 20.04l7.5-2.75zM12 3.56L9.5 5.17V8.5h5V5.15Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bs($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Lighthouse" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lighthouse extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bs, create_fragment$bs, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Line.svelte generated by Svelte v3.23.2 */

        function create_fragment$bt(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.365 9.863c.349 0 .63.285.63.631 0 .345-.281.63-.63.63H17.61v1.125h1.755c.349 0 .63.283.63.63 0 .344-.281.629-.63.629h-2.386c-.345 0-.627-.285-.627-.629V8.108c0-.345.282-.63.63-.63h2.386c.346 0 .627.285.627.63 0 .349-.281.63-.63.63H17.61v1.125h1.755zm-3.855 3.016c0 .27-.174.51-.432.596-.064.021-.133.031-.199.031-.211 0-.391-.09-.51-.25l-2.443-3.317v2.94c0 .344-.279.629-.631.629-.346 0-.626-.285-.626-.629V8.108c0-.27.173-.51.43-.595.06-.023.136-.033.194-.033.195 0 .375.104.495.254l2.462 3.33V8.108c0-.345.282-.63.63-.63.345 0 .63.285.63.63v4.771zm-5.741 0c0 .344-.282.629-.631.629-.345 0-.627-.285-.627-.629V8.108c0-.345.282-.63.63-.63.346 0 .628.285.628.63v4.771zm-2.466.629H4.917c-.345 0-.63-.285-.63-.629V8.108c0-.345.285-.63.63-.63.348 0 .63.285.63.63v4.141h1.756c.348 0 .629.283.629.63 0 .344-.282.629-.629.629M24 10.314C24 4.943 18.615.572 12 .572S0 4.943 0 10.314c0 4.811 4.27 8.842 10.035 9.608.391.082.923.258 1.058.59.12.301.079.766.038 1.08l-.164 1.02c-.045.301-.24 1.186 1.049.645 1.291-.539 6.916-4.078 9.436-6.975C23.176 14.393 24 12.458 24 10.314");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bt($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LINE" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Line extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bt, create_fragment$bt, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Linewebtoon.svelte generated by Svelte v3.23.2 */

        function create_fragment$bu(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.023 15.26c.695 0 1.014-.404 1.014-1.051 0-.551-.308-1.01-.984-1.01-.58 0-.912.404-.912 1.016 0 .543.32 1.045.882 1.045zM10.135 15.447c.764 0 1.113-.443 1.113-1.154 0-.604-.338-1.109-1.082-1.109-.637 0-1.002.445-1.002 1.115 0 .597.352 1.148.971 1.148zM24 10.201l-3.15.029.83-9.686L1.958 3.605l1.686 6.248H0l3.734 11.488 8.713-1.283v3.396l10.113-4.641L24 10.201zm-9.104-3.594c0-.049.039-.092.088-.094l1.879-.125.446-.029c.524-.035 1.634.063 1.634 1.236 0 .83-.619 1.184-.619 1.184s.75.189.707 1.092c0 1.602-1.943 1.389-1.943 1.389l-.225-.006-1.908-.053a.089.089 0 0 1-.086-.09l.027-4.504zm-3.675.243c0-.047.039-.09.088-.092l3.064-.203a.08.08 0 0 1 .087.08v.943c0 .049-.039.09-.087.092l-1.9.08a.094.094 0 0 0-.088.09l-.005.394a.083.083 0 0 0 .086.084l1.646-.066a.082.082 0 0 1 .086.084l-.02 1.012a.089.089 0 0 1-.089.086h-1.63a.089.089 0 0 0-.088.088v.416c0 .047.039.088.088.088l1.87.033a.09.09 0 0 1 .087.09v.951a.084.084 0 0 1-.087.084l-3.063-.123a.09.09 0 0 1-.087-.09l.042-4.121zm-6.01.312l.975-.064a.101.101 0 0 1 .105.08l.458 2.205c.01.047.027.047.039 0l.576-2.281a.132.132 0 0 1 .108-.09l.921-.061a.108.108 0 0 1 .109.078l.564 2.342c.012.047.029.047.041 0l.6-2.424a.131.131 0 0 1 .108-.092l.996-.064c.048-.004.077.031.065.078l-1.09 4.104a.113.113 0 0 1-.109.082l-1.121-.031a.12.12 0 0 1-.109-.086l-.535-1.965c-.012-.047-.033-.047-.045 0l-.522 1.934a.12.12 0 0 1-.11.082l-1.109-.031a.123.123 0 0 1-.108-.088l-.873-3.618c-.011-.047.019-.088.066-.09zm-.288 9.623v-3.561a.089.089 0 0 0-.087-.088l-1.252-.029a.095.095 0 0 1-.091-.09l-.046-1.125a.082.082 0 0 1 .083-.086l4.047.096c.048 0 .087.041.085.088l-.022 1.088a.093.093 0 0 1-.089.088l-1.139.004a.09.09 0 0 0-.087.088v3.447c0 .049-.039.09-.087.092l-1.227.07a.08.08 0 0 1-.088-.082zm2.834-2.379c0-1.918 1.321-2.482 2.416-2.482s2.339.73 2.339 2.316c0 1.9-1.383 2.482-2.416 2.482-1.033.001-2.339-.724-2.339-2.316zm5.139-.115c0-1.746 1.166-2.238 2.162-2.238s2.129.664 2.129 2.107c0 1.729-1.259 2.26-2.198 2.26s-2.093-.68-2.093-2.129zm7.259 1.711a.175.175 0 0 1-.139-.064l-1.187-1.631c-.029-.039-.053-.031-.053.018v1.67c0 .047-.039.09-.086.092l-1.052.061a.082.082 0 0 1-.087-.082l.039-3.842c0-.047.039-.086.088-.084l.881.02a.2.2 0 0 1 .137.074l1.293 1.902c.027.041.051.033.051-.014l.032-1.846a.087.087 0 0 1 .089-.086l.963.029c.047 0 .085.041.083.09l-.138 3.555a.097.097 0 0 1-.091.092l-.823.046zM16.258 8.23l.724-.014s.47.018.47-.434c0-.357-.411-.33-.411-.33l-.782.008a.09.09 0 0 0-.088.088v.598a.083.083 0 0 0 .087.084zM16.229 10.191h.99c.024 0 .35-.051.35-.404 0-.293-.229-.402-.441-.398l-.898.029a.089.089 0 0 0-.087.09v.596a.086.086 0 0 0 .086.087z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bu($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LINE WEBTOON" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Linewebtoon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bu, create_fragment$bu, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lineageos.svelte generated by Svelte v3.23.2 */

        function create_fragment$bv(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.6453 12.0573a2.404 2.404 0 00-1.803.7993l-.1382-.054a17.801 17.801 0 00-2.8667-.8594 4.8078 4.8078 0 00-9.6156 0h-.1322a17.7469 17.7469 0 00-2.7645.8353l-.1382.0541a2.404 2.404 0 10.5589 1.0697 16.599 16.599 0 012.5782-.7752 4.8078 4.8078 0 009.3572 0 16.557 16.557 0 012.5782.7692 2.404 2.404 0 102.3859-1.839zM2.414 15.6633a1.202 1.202 0 111.202-1.202 1.202 1.202 0 01-1.202 1.202zm9.6156 0a3.6059 3.6059 0 113.6059-3.606 3.6059 3.6059 0 01-3.6059 3.606zm9.6157 0a1.202 1.202 0 111.202-1.202 1.202 1.202 0 01-1.202 1.202zm-7.8127-3.606a1.803 1.803 0 11-1.803-1.8029 1.803 1.803 0 011.803 1.803Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bv($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LineageOS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lineageos extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bv, create_fragment$bv, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Linkedin.svelte generated by Svelte v3.23.2 */

        function create_fragment$bw(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bw($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LinkedIn" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Linkedin extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bw, create_fragment$bw, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Linode.svelte generated by Svelte v3.23.2 */

        function create_fragment$bx(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22 10.68a.15.15 0 00-.07-.15l-3.26-1.82a.14.14 0 00-.14 0l-2.77 1.69a.17.17 0 00-.07.13v1.45l-1.13-.74a.14.14 0 00-.15 0l-1.62 1-.07-1.64a.19.19 0 00-.07-.12L11 9.39l1.51-.78a.16.16 0 00.08-.14l-.27-6.27a.16.16 0 00-.08-.13L8 0h-.1L2.08 1.81A.16.16 0 002 2l1.27 6.23a.22.22 0 000 .08L5.1 9.69l-1.26.6a.16.16 0 00-.08.17l1 4.7a.18.18 0 000 .07L6 16.37l-.8.49a.15.15 0 00-.06.16l.75 3.64a.11.11 0 000 .07l3 3.22a.14.14 0 00.2 0l3.92-3.12a.16.16 0 00.06-.12L13 18.59l1.32 1.1a.14.14 0 00.18 0l3.14-2.51a.24.24 0 00.06-.11l.09-1.57 1 .67a.14.14 0 00.17 0l2.57-2a.14.14 0 00.05-.1zm-9.62.15l.07 1.57.12 2.78-4.23 2.87-.66-4.53zm-.35-8.42l.25 5.91-5 2.59-.9-6.32zM3.54 8.12L2.33 2.26l3.74 2.32.93 6.2-1.58-1.2zM5 15.05l-.88-4.26 3.28 2.74.6 4.38-1.68-1.62zm1.14 5.51l-.65-3.14 2.89 2.85.47 3.16zm3 3l-.49-3.33 4-2.87.14 3.28zM13 18.2v-1.08a.16.16 0 00-.05-.11l-1.13-.92 1-.7a.14.14 0 00.06-.12v-.26l1.39 1.06v3.21zm4.44-1.2l-2.86 2.28v-3.22l3.07-2.2zm1.29-1.21l-.9-.63.09-1.59a.11.11 0 000-.06.1.1 0 000-.05l-1.93-1.27V10.8l3 1.89zm2.55-1.86L19 15.74l.26-3.06L21.69 11z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bx($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Linode" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Linode extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bx, create_fragment$bx, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Linux.svelte generated by Svelte v3.23.2 */

        function create_fragment$by(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.504 0c-.155 0-.315.008-.48.021-4.226.333-3.105 4.807-3.17 6.298-.076 1.092-.3 1.953-1.05 3.02-.885 1.051-2.127 2.75-2.716 4.521-.278.832-.41 1.684-.287 2.489a.424.424 0 00-.11.135c-.26.268-.45.6-.663.839-.199.199-.485.267-.797.4-.313.136-.658.269-.864.68-.09.189-.136.394-.132.602 0 .199.027.4.055.536.058.399.116.728.04.97-.249.68-.28 1.145-.106 1.484.174.334.535.47.94.601.81.2 1.91.135 2.774.6.926.466 1.866.67 2.616.47.526-.116.97-.464 1.208-.946.587-.003 1.23-.269 2.26-.334.699-.058 1.574.267 2.577.2.025.134.063.198.114.333l.003.003c.391.778 1.113 1.132 1.884 1.071.771-.06 1.592-.536 2.257-1.306.631-.765 1.683-1.084 2.378-1.503.348-.199.629-.469.649-.853.023-.4-.2-.811-.714-1.376v-.097l-.003-.003c-.17-.2-.25-.535-.338-.926-.085-.401-.182-.786-.492-1.046h-.003c-.059-.054-.123-.067-.188-.135a.357.357 0 00-.19-.064c.431-1.278.264-2.55-.173-3.694-.533-1.41-1.465-2.638-2.175-3.483-.796-1.005-1.576-1.957-1.56-3.368.026-2.152.236-6.133-3.544-6.139zm.529 3.405h.013c.213 0 .396.062.584.198.19.135.33.332.438.533.105.259.158.459.166.724 0-.02.006-.04.006-.06v.105a.086.086 0 01-.004-.021l-.004-.024a1.807 1.807 0 01-.15.706.953.953 0 01-.213.335.71.71 0 00-.088-.042c-.104-.045-.198-.064-.284-.133a1.312 1.312 0 00-.22-.066c.05-.06.146-.133.183-.198.053-.128.082-.264.088-.402v-.02a1.21 1.21 0 00-.061-.4c-.045-.134-.101-.2-.183-.333-.084-.066-.167-.132-.267-.132h-.016c-.093 0-.176.03-.262.132a.8.8 0 00-.205.334 1.18 1.18 0 00-.09.4v.019c.002.089.008.179.02.267-.193-.067-.438-.135-.607-.202a1.635 1.635 0 01-.018-.2v-.02a1.772 1.772 0 01.15-.768c.082-.22.232-.406.43-.533a.985.985 0 01.594-.2zm-2.962.059h.036c.142 0 .27.048.399.135.146.129.264.288.344.465.09.199.14.4.153.667v.004c.007.134.006.2-.002.266v.08c-.03.007-.056.018-.083.024-.152.055-.274.135-.393.2.012-.09.013-.18.003-.267v-.015c-.012-.133-.04-.2-.082-.333a.613.613 0 00-.166-.267.248.248 0 00-.183-.064h-.021c-.071.006-.13.04-.186.132a.552.552 0 00-.12.27.944.944 0 00-.023.33v.015c.012.135.037.2.08.334.046.134.098.2.166.268.01.009.02.018.034.024-.07.057-.117.07-.176.136a.304.304 0 01-.131.068 2.62 2.62 0 01-.275-.402 1.772 1.772 0 01-.155-.667 1.759 1.759 0 01.08-.668 1.43 1.43 0 01.283-.535c.128-.133.26-.2.418-.2zm1.37 1.706c.332 0 .733.065 1.216.399.293.2.523.269 1.052.468h.003c.255.136.405.266.478.399v-.131a.571.571 0 01.016.47c-.123.31-.516.643-1.063.842v.002c-.268.135-.501.333-.775.465-.276.135-.588.292-1.012.267a1.139 1.139 0 01-.448-.067 3.566 3.566 0 01-.322-.198c-.195-.135-.363-.332-.612-.465v-.005h-.005c-.4-.246-.616-.512-.686-.71-.07-.268-.005-.47.193-.6.224-.135.38-.271.483-.336.104-.074.143-.102.176-.131h.002v-.003c.169-.202.436-.47.839-.601.139-.036.294-.065.466-.065zm2.8 2.142c.358 1.417 1.196 3.475 1.735 4.473.286.534.855 1.659 1.102 3.024.156-.005.33.018.513.064.646-1.671-.546-3.467-1.089-3.966-.22-.2-.232-.335-.123-.335.59.534 1.365 1.572 1.646 2.757.13.535.16 1.104.021 1.67.067.028.135.06.205.067 1.032.534 1.413.938 1.23 1.537v-.043c-.06-.003-.12 0-.18 0h-.016c.151-.467-.182-.825-1.065-1.224-.915-.4-1.646-.336-1.77.465-.008.043-.013.066-.018.135-.068.023-.139.053-.209.064-.43.268-.662.669-.793 1.187-.13.533-.17 1.156-.205 1.869v.003c-.02.334-.17.838-.319 1.35-1.5 1.072-3.58 1.538-5.348.334a2.645 2.645 0 00-.402-.533 1.45 1.45 0 00-.275-.333c.182 0 .338-.03.465-.067a.615.615 0 00.314-.334c.108-.267 0-.697-.345-1.163-.345-.467-.931-.995-1.788-1.521-.63-.4-.986-.87-1.15-1.396-.165-.534-.143-1.085-.015-1.645.245-1.07.873-2.11 1.274-2.763.107-.065.037.135-.408.974-.396.751-1.14 2.497-.122 3.854a8.123 8.123 0 01.647-2.876c.564-1.278 1.743-3.504 1.836-5.268.048.036.217.135.289.202.218.133.38.333.59.465.21.201.477.335.876.335.039.003.075.006.11.006.412 0 .73-.134.997-.268.29-.134.52-.334.74-.4h.005c.467-.135.835-.402 1.044-.7zm2.185 8.958c.037.6.343 1.245.882 1.377.588.134 1.434-.333 1.791-.765l.211-.01c.315-.007.577.01.847.268l.003.003c.208.199.305.53.391.876.085.4.154.78.409 1.066.486.527.645.906.636 1.14l.003-.007v.018l-.003-.012c-.015.262-.185.396-.498.595-.63.401-1.746.712-2.457 1.57-.618.737-1.37 1.14-2.036 1.191-.664.053-1.237-.2-1.574-.898l-.005-.003c-.21-.4-.12-1.025.056-1.69.176-.668.428-1.344.463-1.897.037-.714.076-1.335.195-1.814.12-.465.308-.797.641-.984l.045-.022zm-10.814.049h.01c.053 0 .105.005.157.014.376.055.706.333 1.023.752l.91 1.664.003.003c.243.533.754 1.064 1.189 1.637.434.598.77 1.131.729 1.57v.006c-.057.744-.48 1.148-1.125 1.294-.645.135-1.52.002-2.395-.464-.968-.536-2.118-.469-2.857-.602-.369-.066-.61-.2-.723-.4-.11-.2-.113-.602.123-1.23v-.004l.002-.003c.117-.334.03-.752-.027-1.118-.055-.401-.083-.71.043-.94.16-.334.396-.4.69-.533.294-.135.64-.202.915-.47h.002v-.002c.256-.268.445-.601.668-.838.19-.201.38-.336.663-.336zm7.159-9.074c-.435.201-.945.535-1.488.535-.542 0-.97-.267-1.28-.466-.154-.134-.28-.268-.373-.335-.164-.134-.144-.333-.074-.333.109.016.129.134.199.2.096.066.215.2.36.333.292.2.68.467 1.167.467.485 0 1.053-.267 1.398-.466.195-.135.445-.334.648-.467.156-.136.149-.267.279-.267.128.016.034.134-.147.332a8.097 8.097 0 01-.69.468zm-1.082-1.583V5.64c-.006-.02.013-.042.029-.05.074-.043.18-.027.26.004.063 0 .16.067.15.135-.006.049-.085.066-.135.066-.055 0-.092-.043-.141-.068-.052-.018-.146-.008-.163-.065zm-.551 0c-.02.058-.113.049-.166.066-.047.025-.086.068-.14.068-.05 0-.13-.02-.136-.068-.01-.066.088-.133.15-.133.08-.031.184-.047.259-.005.019.009.036.03.03.05v.02h.003z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$by($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Linux" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Linux extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$by, create_fragment$by, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Linuxfoundation.svelte generated by Svelte v3.23.2 */

        function create_fragment$bz(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.8 9.6v9.6h9.6V24H0V9.6h4.8zM24 0v24h-7.2v-4.8h2.4V4.8H4.8v2.4H0V0h24z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bz($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Linux Foundation" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Linuxfoundation extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bz, create_fragment$bz, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Linuxmint.svelte generated by Svelte v3.23.2 */

        function create_fragment$bA(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 1.693v4.193h1.828c1.276 0 1.502.865 1.502 2.058l.01 7.412c0 3.84 3.44 6.951 7.68 6.951h10.464c1.342 0 2.516-.83 2.516-2.108V8.706c0-3.84-3.44-6.95-7.683-6.95h-4.405v-.013L0 1.693zm5.723 2.566h2.102V14.82c0 1.413.984 2.51 2.139 2.51l7.17.03c1.496 0 2.661-1.01 2.661-2.206l-.012-5.607a1.2 1.2 0 0 0-.386-.91 1.224 1.224 0 0 0-.917-.384c-.374 0-.65.12-.918.384a1.2 1.2 0 0 0-.386.91v4.798h-2.223V9.548c0-.364-.124-.648-.389-.91a1.208 1.208 0 0 0-.917-.384c-.366 0-.647.12-.914.384-.265.262-.39.546-.39.91v4.798H10.12V9.548c0-.95.36-1.792 1.042-2.466a3.445 3.445 0 0 1 2.485-1.022c.937 0 1.752.345 2.413.97a3.448 3.448 0 0 1 2.42-.97c.954 0 1.803.348 2.485 1.022a3.385 3.385 0 0 1 1.041 2.466l.009 5.991c-.105 1.004-.539 1.894-1.28 2.637h-.002a4.367 4.367 0 0 1-3.174 1.314H9.574v-.038c-.976-.103-1.846-.519-2.57-1.217-.845-.825-1.281-1.846-1.281-3.01V4.26z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bA($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Linux Mint" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Linuxmint extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bA, create_fragment$bA, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Litecoin.svelte generated by Svelte v3.23.2 */

        function create_fragment$bB(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0a12 12 0 1012 12A12 12 0 0012 0zm-.2617 3.6777h2.584a.3425.3425 0 01.33.4356l-2.0312 6.918 1.9062-.582-.4082 1.3847-1.9238.5605-1.248 4.213h6.6757a.3425.3425 0 01.3282.4374l-.582 2a.4586.4586 0 01-.4395.3301H6.7324l1.7227-5.8223-1.9063.5801.42-1.3613 1.9101-.58 2.4219-8.1798a.4557.4557 0 01.4375-.334Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bB($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Litecoin" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Litecoin extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bB, create_fragment$bB, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Livejournal.svelte generated by Svelte v3.23.2 */

        function create_fragment$bC(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.09 14.696c-1.512.664-2.726 1.885-3.381 3.399l4.27.883-.886-4.282h-.003zM2.475 8.317L0 5.85C1.125 3.237 3.216 1.14 5.823 0h.006l2.469 2.463c1.368-.591 2.876-.921 4.463-.921C18.967 1.542 24 6.569 24 12.771 24 18.973 18.967 24 12.761 24 6.551 24 1.52 18.976 1.52 12.771c0-1.591.355-3.081.952-4.451l9.143 9.114c1.125-2.613 3.218-4.71 5.823-5.85l-9.135-9.12h-.008c-2.606 1.14-4.695 3.24-5.823 5.85l.003.003z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bC($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LiveJournal" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Livejournal extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bC, create_fragment$bC, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Livestream.svelte generated by Svelte v3.23.2 */

        function create_fragment$bD(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.987 6.248l.041.002.039.006.04.011.039.015.038.02.039.022.035.03.035.029.037.045.046.045.03.045.044.045.075.119.029.06.029.075.03.074.031.074.028.074.029.09.029.09.03.09.031.089.029.104.028.104.031.105.03.104.029.104.029.104.03.12.03.118.029.135.015.12.029.134.03.134.017.135.028.149.015.148.015.149.031.149.015.149.016.148.015.165.015.164.015.163.015.165.015.164.016.179.015.343.016.179.015.179.015.18.015.18.015.193.015.193.015.193.016.195.015.193v.388l.016.209.015.209v.403l.015.208v.611l.015.419.015.625v1.269l.015.373.03.269.046.179.043.119.047.104.059.09.045.044.045.045.044.045.062.029.089.046.089.029.096.03.142.029.193.011.269-.016h.1v2.253l-.239.029-.566.026-.61-.029-.448-.067-.344-.089-.254-.089-.237-.119-.236-.15-.208-.184-.134-.134-.136-.149-.17-.269-.15-.313-.119-.342-.082-.403-.054-.456-.015-.508v-1.938l-.015-.418v-.865l-.015-.402v-.287l-.016-.199v-.397l-.015-.194v-.193l-.008-.193-.015-.194-.014-.179-.003-.18-.015-.179-.015-.183v-.178l-.015-.18-.017-.179-.012-.179-.014-.17-.017-.17-.015-.164-.015-.169-.015-.16-.014-.163-.015-.164-.017-.15-.015-.148-.016-.158-.015-.141-.015-.135-.044-.278-.016-.134-.015-.135-.03-.125-.026-.135-.029-.118-.03-.12-.031-.119-.034-.103-.029-.104-.025-.103-.045-.09-.029-.104-.029-.089-.022-.09-.029-.089-.031-.09-.03-.074-.029-.076-.029-.074-.03-.059-.03-.061-.029-.06-.044-.06-.03-.045-.036-.045-.031-.044-.041-.03-.028-.029-.046-.03-.028-.015-.046-.016-.049-.012-.044-.016-.03-.015h-.03 2.552l-.051.031zM.008 3.082l1.169.021 1.089.026.97.015.851.03.73.029.642.029.567.03.506.029.463.046.418.044.387.046.357.044.329.046.313.044.283.061.27.059.252.059.24.06.223.06.209.06.194.075.194.059.179.074.163.076.166.074.148.074.164.074.148.09.135.09.135.09.119.088.119.09.119.09.119.09.104.09.104.104.104.09.105.104.09.104.09.104.104.105.09.104.09.104.074.104.09.105.074.119.074.104.074.119.075.12.074.119.074.12.06.119.061.119.074.119.06.119.06.119.06.119.06.12.045.118.048.12.06.135.05.118.06.135.06.119.044.119.061.135.054.135.044.119.051.134.045.12.045.133.045.135.045.135.045.134.044.135.03.134.045.135.039.135.029.133.039.135.029.135.041.134.029.134.045.135.029.119.045.135v.014l.029.12.031.127.029.134.029.135.03.119.03.135.029.133.045.12.029.134.03.119.03.135.029.119.029.119.03.12.03.119.029.12.03.119.03.119.029.119.029.119.03.119.03.119.014.12.03.104.046.223.029.105.029.104.03.104.022.104.029.104.016.104.029.104.03.104.015.104.029.105.03.09.03.097.015.089.03.09.015.09.015.089.015.09.015.075.016.09.015.085.016.075.014.074.016.078.024.074.015.074.015.075.015.068.016.06.023.074.023.061.016.065.015.06.016.06.015.06.015.06.015.06.015.045.03.051.015.045.015.045.016.044.029.046.015.044.038.075.015.038.03.061.015.029.015.03.015.029.016.03.015.015.015.015.015.015.016.015.015.016.029.016.016.004.015.015h.03-7.027l-.051-.015-.057-.016-.057-.014-.06-.016-.06-.015h-.016l-.052-.024-.056-.015-.057-.031-.061-.03-.044-.029-.06-.03-.045-.029-.061-.03-.044-.045-.044-.045-.061-.045-.045-.045-.06-.044-.06-.06-.06-.056-.044-.06-.061-.054-.06-.045-.06-.06-.061-.06-.044-.06-.062-.005-.059-.06-.045-.068-.054-.065-.119-.148-.059-.075-.045-.074-.061-.09-.059-.074-.061-.09-.06-.075-.06-.088-.06-.09-.06-.09-.061-.09-.059-.09-.061-.09-.06-.089-.06-.104-.059-.09-.046-.104-.06-.105-.06-.104-.06-.105-.061-.104-.059-.104-.06-.104-.06-.104-.061-.104-.059-.104-.061-.104-.059-.104-.061-.119-.06-.12-.06-.119-.061-.12-.059-.119-.061-.119-.059-.119-.06-.119-.135-.028-.049-.126-.059-.123-.061-.123-.059-.125-.064-.125-.06-.127-.06-.119-.064-.119-.06-.119-.063-.119-.06-.119-.06-.15-.06-.134-.063-.119-.063-.12-.06-.134-.063-.119-.061-.135-.06-.119-.06-.135-.06-.134-.06-.134-.058-.134-.059-.135-.061-.119-.059-.134-.059-.133-.059-.135-.06-.135-.06-.134-.119-.268-.06-.149-.06-.12-.059-.134-.061-.12-.06-.119-.073-.118-.06-.135-.074-.12-.06-.118-.074-.12-.061-.119-.059-.12-.06-.119-.06-.119-.059-.137-.12-.239-.06-.119-.061-.119-.074-.119-.074-.119-.135-.229-.058-.119-.074-.11-.076-.12-.059-.112-.061-.104-.125-.208-.074-.106-.061-.103-.058-.105-.061-.089-.06-.105-.063-.104-.066-.09-.059-.09-.074-.09-.076-.088-.059-.089-.075-.09-.088-.117-.067-.076-.069-.078-.059-.074-.058-.1-.074-.074-.066-.06-.075-.069-.062-.065-.075-.081-.065-.06-.065-.06-.068-.058-.067-.053-.069-.045-.07-.045L.672 3.4l-.075-.046-.06-.044-.074-.044-.067-.03-.068-.03-.07-.03-.071-.03-.068-.031-.059-.023L0 3.086h.008v-.004z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bD($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Livestream" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Livestream extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bD, create_fragment$bD, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Llvm.svelte generated by Svelte v3.23.2 */

        function create_fragment$bE(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.83 2.976l-.085.095a16.246 16.246 0 00-1.19 1.487 5.773 5.773 0 00-.446.719 2.88 2.88 0 00-.249.597.497.497 0 00-.033.177v.004a.297.297 0 00-.21.29.3.3 0 00.187.284c.038.371.08 1.142.07 2.2l-.004.142a8.002 8.002 0 01-.434 2.327c-.016-.01-.03-.014-.04-.013-.03.003-.111.12-.19.251-.058.09-.119.195-.154.291a.37.37 0 00-.03.14.249.249 0 00.01.088c.01.037.022.058.022.058a6.837 6.837 0 01-.003.007.144.144 0 00-.028.067l-.012.029a6.837 6.837 0 01-.258.527l-.077.142a6.837 6.837 0 01-.07.115.157.157 0 00-.022-.014.16.16 0 00-.113.024c-.047.035-.151.194-.498.368-.118.059-.226.093-.32.114a14.102 14.102 0 00.248-2.07 5.072 5.072 0 00-.064-1.057c.003-.01.003-.017.003-.017l-.005.01a4.345 4.345 0 00-.104-.458 3.554 3.554 0 00-.724-1.385c-.631-.754-1.496-1.14-2.256-1.165l-.125-.002c0-.008 0-.015.002-.022.021-.098.024-.127-.087-.032a.872.872 0 00-.057.054c-.053.001-.101.004-.146.007a.716.716 0 01-.003-.108c.004-.076.024-.127-.087-.032a.553.553 0 00-.142.167c-.05.008-.08.015-.08.015l.045-.002-.047.008c-.016-.042-.053-.105-.048-.16.01-.118.043-.14-.037-.065-.098.09-.202.226-.22.299l-.096.03c-.018-.018-.074-.07-.086-.178-.013-.11-.012-.166-.08-.051a1.14 1.14 0 00-.13.349c-.032.015-.063.03-.093.046a.27.27 0 01-.057-.173c-.005-.144.04-.261-.067-.068a1.634 1.634 0 00-.146.406c-.036.025-.071.051-.105.079a2.7 2.7 0 01-.008-.17c-.002-.142.021-.295-.067-.025-.026.079-.053.192-.07.321-.404.385-.65.917-.644 1.572v.007c-.001.117.005.228.014.33.02.238.057.438.107.605-.095.13-.103.689-.01.818.073.104.496.35.586.399a.367.367 0 01.094.093c.115.188.115.567.027.762-.107.238.107.285.285.32.178.036.415-.023.463-.118.047-.095-.154-.309-.237-.748-.084-.439.13-.474.13-.474s.095.024.237.249c.11.175.227.313.336.413a.727.727 0 01-.201.172c.12.005.24-.051.304-.087a.77.77 0 00.071.045 1.015 1.015 0 01-.05.05.506.506 0 00.108-.022.295.295 0 00.084.022c.155.012.57-.368.57-.439 0-.018-.015-.04-.038-.063-.042-.045-.12-.1-.207-.177a1.03 1.03 0 01-.11-.116.723.723 0 01-.141-.374v-.01l-.003-.031s.007-.007.016-.02v.004l.004-.01c.052-.08.15-.379-.47-1.078a3.045 3.045 0 00-.924-.706c-.042-.472.15-.913.626-1.13l-.005.005.008-.006c.227-.102.517-.155.877-.136.69.036 1.22.359 1.59.845.514.712.738 1.78.575 2.856-.068.065-.055.075-.013.077a4.616 4.616 0 01-.055.273l-.027.015c-.123.074-.071.073 0 .092l-.006.02c-.02.065-.043.13-.066.193a.956.956 0 00-.087.03c-.135.053-.08.06-.012.091l.044.022c-.032.08-.066.16-.101.237a.746.746 0 00-.08.017c-.142.036-.088.05-.024.09a.52.52 0 01.04.027 6.784 6.784 0 01-.107.214.76.76 0 00-.153.025c-.14.036-.087.05-.023.09.034.02.06.041.081.059a8.022 8.022 0 01-.095.165l-.023.036a.59.59 0 00-.206.024c-.142.036-.088.05-.024.09a.67.67 0 01.104.079 8.61 8.61 0 01-.126.18.514.514 0 00-.23-.005c-.144.02-.092.04-.033.086.068.053.101.099.118.118l-.062.084c-.044-.058-.149-.124-.246-.193a.85.85 0 00-.29-.13c-.048 0-.199.268-1.017.197-.819-.071-.87-.15-.942-.15-.07 0-.223.057-.228.059l-.034-.02a11.031 11.031 0 01-.972-.674c-.464-.37-.72-.647-.72-.647s.137-.125-.047-.284a3.32 3.32 0 00-.338-.277 2.157 2.157 0 00-.242-.166 3.57 3.57 0 01-.088-.127 11.486 11.486 0 01-.363-.628 10.456 10.456 0 01-.25-.527c-.16-.36-.27-.682-.346-.964a5.621 5.621 0 01-.148-.923 2.257 2.257 0 01.004-.242.411.411 0 00.158-.323.411.411 0 00-.358-.407c-.204-.427-.982-1.477-3.882-3.68l-.127-.098.005.004-.036-.027c2.954 2.53 3.53 3.519 3.682 3.932a.411.411 0 00-.027.033 18.692 18.692 0 00-.018-.013c.018 0 .025-.005.025-.005s-.672-.546-1.787-1.23c-1.119-.687-1.749-.849-1.88-.877l-.027-.006s.206.19.174.285c-.01.032-.168.022-.421.028a3.948 3.948 0 00-.725.07 4.1 4.1 0 00-1.567.63C.237 7.783-.001 8.4-.001 8.4s.55-.768 1.58-1.305c-.014.337-.047 1.969.445 4.12.531 2.32 1.531 4.487 1.614 4.665.004.178.016.272.016.272s.148-1.79.756-3.647c.175.283.758 1.117 2.076 2.096 1.628 1.21 2.37 1.536 2.4 1.548.001.157.005.24.005.24s.005-.1.018-.263c.044-.065.298-.43.552-.67a3.58 3.58 0 01.54-.435c.032.11.063.204.093.276-.02-.097-.036-.19-.052-.282.107.01.538.066 1.206.393.343.168.609.395.798.595a.167.167 0 00-.014.006s.123.112.269.403a2.416 2.416 0 00-.73.084 2.913 2.913 0 00-.098-.189.484.484 0 00-.039-.135c-.027-.061-.095-.1-.164-.14a.397.397 0 00-.104-.073.225.225 0 01-.055-.073c-.084-.184-.798.012-.942.18-.175.204-.209.464-.14.608.021.045.07.082.138.11.002.221.137.75.404 1.134a4.964 4.964 0 01-.108-.667c-.009-.16 0-.274.015-.35.047.328.174.684.577 1.125-.248-.54-.22-.862-.195-1.144l.009-.044.006-.001c.036.263.142.534.482.964a.412.412 0 01-.014-.028l.014.021a1.626 1.626 0 01-.167-1.03l.008-.003c.046.03.091.07.134.126.128.172.188.349.212.47a.528.528 0 00.067.384c-.245.179-.485.346-.72.501-.23.149-.49.313-.757.47-.14.08-.279.158-.414.23l-.135-.077h.002l-.008-.004c-.97-.559-1.69-.932-2.518-1.082-.931-.167-1.787.283-1.983 1.082a1.284 1.284 0 00.552 1.38l.012.008c.013.01.026.017.04.026l.06.036h.002c.192.11.424.191.691.237l.028.005h.006a3.5 3.5 0 00.412.044c.975.047 2.156-.408 3.323-.982.1.054.202.108.306.166 2.547 1.403 4.098 1.585 6.154.728-.502.151-1.208.356-2.094.344a.05.05 0 00-.02-.006l.001.006a5.461 5.461 0 01-.648-.05v-.001l-.03-.003v-.003a.267.267 0 00-.001.002 6.25 6.25 0 01-1.556-.436 7.793 7.793 0 01-.745-.362 57.07 57.07 0 01-1.006-.569c.348-.178.692-.363 1.026-.545.355-.189.672-.362.918-.5l.009-.004.007-.001s.083-.018.16-.042c.17-.052.41-.149.695-.283.028.117.095.215.195.253.235.091.407.027.522-.102l.018-.01.047-.037c.05-.03.107-.067.156-.09a1.14 1.14 0 01.053-.022c.04-.01.078-.023.116-.037l.033-.01c-.145.297-.091.581-.091.581.043-.371.22-.608.392-.715.064-.027.13-.05.2-.067.064 0 .116.023.144.07.07.12.217.194.364.226.024.15-.045.404-.4.866l.09-.062.004-.003.072-.053c.143-.108.252-.21.334-.305a.97.97 0 00.191-.305c.012.2-.043.507-.311 1.036 0 0 .317-.276.514-.63.006.191-.01.443-.063.785.345-.673.325-1.085.239-1.326l-.01-.036a.433.433 0 00-.01-.065l.042-.057c.118-.166-.048-.344-.154-.415-.06-.04-.2-.154-.454-.157-.225-.27-.51-.15-.958.145a1.297 1.297 0 01-.166.093.725.725 0 00-.055-.117c.16-.096.326-.199.494-.308.317-.207.553-.416.728-.615.51-.517.69-1.02 1.21-1.446l-.013.001.06-.032c.854-.458 1.307-.547 1.339-.553l-.003.128.018-.125a1.795 1.795 0 01.481.344 2.12 2.12 0 01.362.487l.044.301s0-.117-.01-.33c.153-.152 1.02-1.044 1.724-2.467.694-1.404.944-2.523 1.017-2.924a18.19 18.19 0 01.665 2.466s-.002-.133-.031-.374c.097-.336.516-1.872.627-3.756.1-1.681-.065-2.78-.14-3.174.648.537.995 1.307.995 1.307s-.04-.163-.188-.437l.02.027s-.236-.455-.644-.905a6.45 6.45 0 00-.157-.172c-.432-.459-.854-.617-1.17-.672-.1-.02-.203-.03-.308-.03h-.019c-.125-.003-.201.002-.207-.026-.02-.095.11-.285.11-.285s-.177.046-.554.33c-.23.167-.52.41-.853.76a13.69 13.69 0 00-.89.995l-.075.095a.203.203 0 00-.023-.017c.076-.331.362-1.118 1.788-3.112zM11.92 14.09a.351.351 0 01.012.006l-.012-.006zm-.263 2.606c.088.044.19.106.303.194h-.005a.484.484 0 00-.155.07.956.956 0 01-.126-.224l-.017-.04zm-4.855 1.57c.132 0 .276.014.432.048l.02.005.017.004c.11.027.223.062.337.102l.057.021c.191.074.395.156.611.248.32.139.619.277.838.375l.183.088c-.221.106-.424.196-.577.261-1.014.416-1.83.536-2.338.391-.945-.269-.76-1.536.42-1.542z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bE($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LLVM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Llvm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bE, create_fragment$bE, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lmms.svelte generated by Svelte v3.23.2 */

        function create_fragment$bF(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.714 0A1.71 1.71 0 000 1.714v20.572C0 23.236.765 24 1.714 24h20.572A1.71 1.71 0 0024 22.286V1.714A1.71 1.71 0 0022.286 0zM12 3l9 5.143v10.286l-3 1.714-3-1.714V15l3-1.714V9.857L12 6.43 6 9.857v3.429L9 15v3.429l-3 1.714-3-1.714V8.143Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bF($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LMMS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lmms extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bF, create_fragment$bF, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Logitech.svelte generated by Svelte v3.23.2 */

        function create_fragment$bG(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 5.098a1.35 1.35 0 0 1-1.35 1.35 1.35 1.35 0 0 1-1.352-1.35 1.35 1.35 0 0 1 1.351-1.351A1.35 1.35 0 0 1 24 5.097zM16.549 18.31a2.289 2.289 0 0 1-2.322-2.322H12.2c0 2.449 1.9 4.264 4.306 4.264s4.348-1.857 4.348-4.264H18.87c-.043 1.351-1.056 2.322-2.322 2.322zm5.108-2.828h1.984V7.377h-1.984zM0 15.483h1.984V4H0v11.483zm7.135-8.359c-2.449 0-4.307 1.858-4.307 4.264a4.27 4.27 0 0 0 4.307 4.306c2.406 0 4.306-1.858 4.306-4.264S9.583 7.124 7.135 7.124zm0 6.628c-1.31 0-2.322-1.013-2.322-2.364a2.289 2.289 0 0 1 2.322-2.322 2.289 2.289 0 0 1 2.321 2.322c0 1.309-.97 2.364-2.321 2.364zm13.635-4.77V7.377h-2.828c-.464-.21-.929-.253-1.393-.253-2.449 0-4.348 1.858-4.348 4.306 0 2.449 1.9 4.264 4.306 4.264s4.306-1.858 4.306-4.264c0-.844-.254-1.604-.676-2.195zm-4.221 4.77c-1.309 0-2.322-1.013-2.322-2.364a2.289 2.289 0 0 1 2.322-2.322 2.289 2.289 0 0 1 2.322 2.322c0 1.309-1.056 2.364-2.322 2.364Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bG($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Logitech" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Logitech extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bG, create_fragment$bG, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Logmein.svelte generated by Svelte v3.23.2 */

        function create_fragment$bH(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.372 0 0 5.373 0 12s5.372 12 12 12 12-5.373 12-12S18.628 0 12 0zM5.379 4.768h1.74c.147 0 .288.004.424.01a.376.376 0 01.303.152.684.684 0 01.11.364c.007.149.01.31.01.484v12.093c0 .176.004.37.01.587.006.216-.024.377-.091.485-.054.094-.174.17-.363.222a.754.754 0 01-.304.02 2.533 2.533 0 00-.323-.02H5.702c-.149 0-.286-.006-.415-.02a.572.572 0 01-.314-.12.48.48 0 01-.12-.304 4.164 4.164 0 01-.02-.424V6.203c0-.188-.004-.41-.01-.667-.007-.255.024-.437.09-.545a.595.595 0 01.264-.202c.04 0 .078-.004.11-.01a.536.536 0 01.092-.011zm10.527 3.687c.201-.008.386-.001.548.019.565.032 1.053.144 1.464.338.539.257.963.634 1.273 1.133.095.148.168.307.222.475.055.169.11.34.164.515.026.108.042.21.05.304.005.094.023.19.05.284 0 .08.007.134.02.16.027.19.04.385.04.587v5.661c0 .257-.004.503-.01.738-.008.237-.105.39-.294.456a.91.91 0 01-.283.04h-1.415c-.163 0-.307-.01-.435-.03a.418.418 0 01-.293-.173.613.613 0 01-.09-.313 8.825 8.825 0 01-.01-.416v-4.426c0-.5-.02-.961-.06-1.386-.042-.424-.163-.785-.365-1.082a1.427 1.427 0 00-.668-.51c-.186-.095-.488-.156-.827-.156-.397 0-.74.083-.912.207-.139.057-.26.124-.362.197-.433.31-.688.762-.77 1.354-.08.594-.123 1.261-.123 2.002v4.125c0 .121-.02.223-.06.304a.42.42 0 01-.323.262c-.149.027-.33.04-.545.04H10.88c-.15 0-.297-.006-.446-.02-.148-.013-.256-.06-.323-.142-.095-.12-.139-.294-.131-.525.006-.23.009-.446.009-.647V9.6c0-.147.004-.282.01-.403a.507.507 0 01.112-.305.24.24 0 01.132-.09c.06-.02.124-.037.191-.05h.102c.068-.014.138-.022.212-.022h1.06c.109 0 .214.005.316.012.1.006.19.023.271.05.095.04.16.1.193.181.03.072.03.147.054.24.056.23.118.486.291.508.08.01.159-.025.224-.09.031-.022.114-.11.14-.144.095-.114.28-.278.388-.346.078-.058.142-.1.202-.136.192-.134.483-.261.832-.36.014-.006.028-.012.042-.016.112-.036.225-.062.342-.077l.159-.029c.224-.038.442-.06.643-.068Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bH($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "LogMeIn" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Logmein extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bH, create_fragment$bH, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Logstash.svelte generated by Svelte v3.23.2 */

        function create_fragment$bI(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.6 7.2V24c-5.2 0-10.8-4-10.8-9.3V0h3.6c3.8 0 7.2 3.4 7.2 7.2zm2.4 6V24h7.2V13.2z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bI($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Logstash" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Logstash extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bI, create_fragment$bI, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Loom.svelte generated by Svelte v3.23.2 */

        function create_fragment$bJ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.4 4.64C18.02 1.82 15.15 0 12 0 8.76 0 5.98 1.89 4.64 4.6 1.82 5.98 0 8.85 0 12c0 3.24 1.89 6.02 4.6 7.36C5.98 22.18 8.85 24 12 24c3.24 0 6.02-1.89 7.36-4.61C22.18 18.02 24 15.15 24 12c0-3.24-1.89-6.02-4.6-7.36zM12 1.5c1.99 0 3.87.89 5.13 2.37-.45-.08-.91-.12-1.38-.12-3.34 0-6.21 1.99-7.52 4.86h-.01v.03C7.76 9.67 7.5 10.8 7.5 12c0 .46.04.93.12 1.38-1.47-1.26-2.37-3.14-2.37-5.13C5.25 4.53 8.28 1.5 12 1.5zM12 9c.89 0 1.71.18 2.49.48.33.81.51 1.65.51 2.52 0 .89-.18 1.72-.48 2.49-.81.33-1.65.51-2.52.51-.89 0-1.72-.18-2.49-.48C9.18 13.71 9 12.87 9 12c0-.89.18-1.73.48-2.49C10.29 9.18 11.13 9 12 9zM1.5 12c0-1.99.89-3.87 2.37-5.13-.08.45-.12.91-.12 1.38 0 3.34 1.99 6.21 4.86 7.52v.01h.03c1.03.46 2.16.72 3.36.72.47 0 .93-.04 1.38-.12-1.26 1.47-3.14 2.37-5.13 2.37-3.72 0-6.75-3.03-6.75-6.75zM12 22.5c-1.99 0-3.87-.89-5.13-2.37.45.07.91.12 1.38.12 3.34 0 6.21-1.99 7.52-4.86l.02-.03c.46-1.03.72-2.16.72-3.36 0-.47-.04-.93-.12-1.38 1.47 1.26 2.37 3.14 2.37 5.13-.01 3.72-3.04 6.75-6.76 6.75zm8.13-5.37c.08-.45.12-.92.12-1.38 0-3.35-1.99-6.21-4.86-7.52-.02-.02-.02-.02-.03-.02-1.03-.45-2.16-.71-3.36-.71-.47 0-.93.04-1.38.12 1.26-1.47 3.14-2.37 5.13-2.37 3.72 0 6.75 3.03 6.75 6.75 0 1.99-.89 3.87-2.37 5.13z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bJ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Loom" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Loom extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bJ, create_fragment$bJ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Loop.svelte generated by Svelte v3.23.2 */

        function create_fragment$bK(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12,0C5.371,0,0,5.371,0,12s5.371,12,12,12s12-5.371,12-12C24.011,5.371,18.629,0,12,0z M12.7,22.611 C6.837,22.611,2.089,17.863,2.089,12S6.837,1.389,12.7,1.389S23.311,6.137,23.311,12S18.563,22.611,12.7,22.611z M7.045,3.413 c-4.747,2.735-6.366,8.795-3.632,13.542c2.735,4.737,8.806,6.366,13.542,3.632c4.747-2.735,6.366-8.806,3.632-13.542 C17.852,2.297,11.792,0.678,7.045,3.413z M16.868,19.034c-4.08,2.352-9.287,0.952-11.639-3.118 c-2.352-4.08-0.952-9.287,3.118-11.639c4.08-2.352,9.287-0.952,11.639,3.118C22.337,11.464,20.948,16.682,16.868,19.034z  M5.229,8.084c-2.166,3.741-0.875,8.532,2.866,10.687c3.741,2.166,8.532,0.875,10.698-2.866s0.875-8.532-2.866-10.687 C12.175,3.063,7.384,4.343,5.229,8.084z M18.071,14.702c-1.827,3.161-5.863,4.244-9.025,2.417 c-3.161-1.827-4.244-5.863-2.418-9.025s5.863-4.244,9.025-2.418C18.815,7.493,19.898,11.541,18.071,14.702z M6.093,12 c0,3.271,2.647,5.918,5.918,5.918s5.918-2.647,5.918-5.918s-2.647-5.918-5.918-5.918C8.74,6.082,6.093,8.729,6.093,12z  M16.704,11.3c0,2.593-2.1,4.693-4.693,4.693s-4.693-2.1-4.693-4.693s2.1-4.693,4.693-4.693C14.593,6.607,16.704,8.707,16.704,11.3 z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bK($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Loop" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Loop extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bK, create_fragment$bK, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lospec.svelte generated by Svelte v3.23.2 */

        function create_fragment$bL(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.23 0v24h15.541v-8.4004h-7.1719v3.5996H11.402V0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bL($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Lospec" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lospec extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bL, create_fragment$bL, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lua.svelte generated by Svelte v3.23.2 */

        function create_fragment$bM(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.38 10.377l-.272-.037c-.048.344-.082.695-.101 1.041l.275.016c.018-.34.051-.682.098-1.02zM4.136 3.289l-.184-.205c-.258.232-.509.48-.746.734l.202.188c.231-.248.476-.49.728-.717zM5.769 2.059l-.146-.235c-.296.186-.586.385-.863.594l.166.219c.27-.203.554-.399.843-.578zM1.824 18.369c.185.297.384.586.593.863l.22-.164c-.205-.271-.399-.555-.58-.844l-.233.145zM1.127 16.402l-.255.104c.129.318.274.635.431.943l.005.01.245-.125-.005-.01c-.153-.301-.295-.611-.421-.922zM.298 9.309l.269.063c.076-.332.168-.664.272-.986l-.261-.087c-.108.332-.202.672-.28 1.01zM.274 12.42l-.275.01c.012.348.04.699.083 1.043l.273-.033c-.042-.336-.069-.68-.081-1.02zM.256 14.506c.073.34.162.682.264 1.014l.263-.08c-.1-.326-.187-.658-.258-.99l-.269.056zM11.573.275L11.563 0c-.348.012-.699.039-1.044.082l.034.273c.338-.041.68-.068 1.02-.08zM23.221 8.566c.1.326.186.66.256.992l.27-.059c-.072-.34-.16-.682-.262-1.014l-.264.081zM17.621 1.389c-.309-.164-.627-.314-.947-.449l-.107.252c.314.133.625.281.926.439l.128-.242zM15.693.572c-.332-.105-.67-.199-1.01-.277l-.063.268c.332.076.664.168.988.273l.085-.264zM6.674 1.545c.298-.15.606-.291.916-.418L7.486.873c-.317.127-.632.272-.937.428l-.015.008.125.244.015-.008zM23.727 11.588l.275-.01a11.797 11.797 0 0 0-.082-1.045l-.273.033c.041.338.068.682.08 1.022zM13.654.105c-.346-.047-.696-.08-1.043-.098l-.014.273c.339.018.683.051 1.019.098l.038-.273zM9.544.527l-.058-.27c-.34.072-.681.16-1.014.264l.081.262c.325-.099.659-.185.991-.256zM1.921 5.469l.231.15c.185-.285.384-.566.592-.834l-.217-.17c-.213.276-.417.563-.606.854zM.943 7.318l.253.107c.132-.313.28-.625.439-.924l-.243-.128c-.163.307-.314.625-.449.945zM18.223 21.943l.145.234c.295-.186.586-.385.863-.594l-.164-.219c-.272.204-.557.4-.844.579zM21.248 19.219l.217.17c.215-.273.418-.561.607-.854l-.23-.148c-.186.285-.385.564-.594.832zM19.855 20.715l.184.203c.258-.23.51-.479.746-.732l-.201-.188c-.23.248-.477.488-.729.717zM22.359 17.504l.244.129c.162-.307.314-.625.449-.945l-.254-.107a11.27 11.27 0 0 1-.439.923zM23.617 13.629l.273.039c.049-.346.082-.695.102-1.043l-.275-.014c-.018.338-.051.682-.1 1.018zM23.156 15.621l.264.086c.107-.332.201-.67.279-1.01l-.268-.063c-.077.333-.169.665-.275.987zM22.453 6.672c.154.303.297.617.424.932l.256-.104c-.131-.322-.277-.643-.436-.953l-.244.125zM8.296 23.418c.331.107.67.201 1.009.279l.062-.268c-.331-.076-.663-.168-.986-.273l-.085.262zM10.335 23.889c.345.049.696.082 1.043.102l.014-.275c-.339-.018-.682-.051-1.019-.098l-.038.271zM17.326 22.449c-.303.154-.613.297-.926.424l.104.256c.318-.131.639-.275.947-.434l.004-.002-.123-.246-.006.002zM4.613 21.467c.274.213.562.418.854.605l.149-.23c-.285-.184-.565-.385-.833-.592l-.17.217zM12.417 23.725l.009.275c.348-.014.699-.041 1.045-.084l-.035-.271c-.336.041-.68.068-1.019.08zM6.37 22.604c.307.162.625.314.946.449l.107-.254c-.313-.133-.624-.279-.924-.439l-.129.244zM3.083 20.041c.233.258.48.51.734.746l.188-.201c-.249-.23-.49-.477-.717-.729l-.205.184zM14.445 23.475l.059.27c.34-.074.68-.162 1.014-.266l-.082-.262c-.325.099-.659.185-.991.258zM21.18.129A2.689 2.689 0 1 0 21.18 5.507 2.689 2.689 0 1 0 21.18.129zM15.324 15.447c0 .471.314.66.852.66.67 0 1.297-.396 1.297-1.016v-.645c-.23.107-.379.141-1.107.24-.735.109-1.042.306-1.042.761zM12 2.818c-5.07 0-9.18 4.109-9.18 9.18 0 5.068 4.11 9.18 9.18 9.18 5.07 0 9.18-4.111 9.18-9.18 0-5.07-4.11-9.18-9.18-9.18zm-2.487 13.77H5.771v-6.023h.769v5.346h2.974v.677zm4.13 0h-.619v-.67c-.405.57-.811.793-1.446.793-.843 0-1.38-.463-1.38-1.182v-3.271h.686v3c0 .52.347.85.893.85.719 0 1.181-.578 1.181-1.461v-2.389h.686v4.33zm-.53-8.393c0-1.484 1.205-2.689 2.689-2.689s2.688 1.205 2.688 2.689-1.203 2.688-2.688 2.688-2.689-1.203-2.689-2.688zm5.567 7.856v.52c-.223.059-.33.074-.471.074-.34 0-.637-.238-.711-.57-.381.406-.918.637-1.471.637-.877 0-1.422-.463-1.422-1.248 0-.527.256-.916.76-1.123.266-.107.414-.141 1.389-.264.545-.066.719-.191.719-.48v-.182c0-.412-.348-.645-.967-.645-.645 0-.957.24-1.016.77h-.693c.041-1 .686-1.404 1.734-1.404 1.066 0 1.627.412 1.627 1.182v2.412c0 .215.133.338.373.338.041-.002.074-.002.149-.017z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bM($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Lua" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lua extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bM, create_fragment$bM, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lubuntu.svelte generated by Svelte v3.23.2 */

        function create_fragment$bN(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.373 0 .001 5.374.001 12.001c0 .154.003.307.009.46 3.832-2.705 10.368-7.163 11.987-7.28.537-.68 2.37-1.22 2.704-1.209l-.957 1.198s-.03 1.224-.388 1.462c3.34 2.233 4.944 10.262 5.626 15.126A11.98 11.98 0 0024 12.001C24 5.374 18.629 0 12 0zm-.593 10.842c-.899.027-2.743 2.712-4.825 5.588-1.001 1.382-2.035 2.823-2.988 4.134A11.96 11.96 0 0012 24c2.347 0 4.537-.672 6.386-1.837-1.423-4.35-4.128-11.299-6.897-11.315a.394.394 0 00-.082-.006zM4.679 11.94c-.823-.007-2.86.701-4.607 1.375.178 1.632.681 3.166 1.447 4.535.35-.53.716-1.077 1.08-1.61 1.386-2.038 2.729-3.838 2.413-4.21-.056-.062-.171-.09-.333-.09zm2.165 1.025c-.664.1-3.064 3.09-4.97 5.478.31.487.653.948 1.028 1.384 1.96-3.21 4.153-6.707 4.035-6.851a.16.16 0 00-.093-.011Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bN($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Lubuntu" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lubuntu extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bN, create_fragment$bN, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lufthansa.svelte generated by Svelte v3.23.2 */

        function create_fragment$bO(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24,12c0-6.648-5.352-12-12-12C5.376,0,0,5.352,0,12c0,6.624,5.376,12,12,12C18.648,24,24,18.624,24,12z M23.136,12c0,6.12-4.992,11.136-11.136,11.136C5.88,23.136,0.864,18.121,0.864,12C0.864,5.856,5.88,0.864,12,0.864 C18.144,0.864,23.136,5.856,23.136,12z M16.248,11.28c-0.264,0-0.6,0-1.032,0.024l0.312-0.528h0.504c1.8,0,3.144,0.096,4.368,0.312 l0.552-0.528c-1.368-0.24-3.024-0.384-4.704-0.384H15.84l0.264-0.504h0.456c1.752,0,3.336,0.144,4.872,0.432l0.576-0.552 c-1.728-0.336-3.576-0.503-5.568-0.503c-0.849,0.003-1.698,0.043-2.544,0.12c-0.96,2.063-2.496,3.264-4.224,3.24 C9,12.384,8.159,12.097,7.08,11.52l-1.008-0.576l0.312-0.288l2.328,1.008l0.504-0.384L4.512,9.144l-0.72,0.552L2.112,9l0.024,0.696 c2.256,1.032,3.192,1.608,5.568,3.312c3.096,2.208,5.856,3.408,9.696,4.176l1.008-0.96h-0.24c-2.544,0-4.824-0.84-6.144-2.256 c1.104-0.672,2.471-0.983,4.368-0.983c0.504,0,1.224,0.047,1.896,0.119l0.576-0.552c-0.9-0.11-1.805-0.166-2.712-0.168 c-0.609-0.001-1.217,0.023-1.824,0.072l0.432-0.528c0.511-0.03,1.024-0.046,1.536-0.048c1.272,0,2.112,0.048,3.072,0.192 l0.552-0.528C18.912,11.377,17.52,11.28,16.248,11.28z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bO($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Lufthansa" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lufthansa extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bO, create_fragment$bO, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lumen.svelte generated by Svelte v3.23.2 */

        function create_fragment$bP(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.652 0a.75.75 0 0 0-.342.072l-4.878 2.23a.75.75 0 1 0 .624 1.366l4.878-2.23A.75.75 0 0 0 11.652 0zm5.624.354a.75.75 0 0 0-.341.074L6.428 5.306a.75.75 0 0 0 .632 1.362L17.566 1.79a.75.75 0 0 0-.29-1.436zm0 3.002a.75.75 0 0 0-.341.074L6.428 8.308A.75.75 0 0 0 7.06 9.67l10.506-4.88a.75.75 0 0 0-.29-1.435zm0 3.002a.75.75 0 0 0-.341.074L6.428 11.31a.75.75 0 0 0 .632 1.361l10.506-4.878a.75.75 0 0 0-.29-1.435zm.009 3.002a.75.75 0 0 0-.342.07l-3.753 1.688a.75.75 0 0 0-.442.685v3.518a.75.75 0 0 0 .001.047h-1.503a.75.75 0 0 0 0-.047v-2.58a.75.75 0 0 0-.761-.761.75.75 0 0 0-.74.761v2.58a.75.75 0 0 0 .002.047h-.94a.461.461 0 0 0-.47.555l.19 1.14a.687.687 0 0 0 .656.556h2.28l-2.537.476a.375.375 0 1 0 .139.737l6.003-1.126a.375.375 0 0 0 .307-.41.625.625 0 0 0 .092-.232l.19-1.141a.461.461 0 0 0-.47-.555h-.94a.75.75 0 0 0 .002-.047v-3.033l3.31-1.49a.75.75 0 0 0-.274-1.438zm-2.292 9.384a.375.375 0 0 0-.063.007l-6.004 1.126a.375.375 0 1 0 .139.737l6.003-1.125a.375.375 0 0 0-.075-.745zm0 1.876a.375.375 0 0 0-.063.008l-6.004 1.125a.375.375 0 1 0 .139.737l6.003-1.125a.375.375 0 0 0-.075-.745zm-.743 1.876a.375.375 0 0 0-.064.006l-4.471.751a.375.375 0 1 0 .124.74l4.472-.75a.375.375 0 0 0-.061-.747z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bP($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Lumen" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lumen extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bP, create_fragment$bP, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Lyft.svelte generated by Svelte v3.23.2 */

        function create_fragment$bQ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 11.122v-3.512h-1.253c-0.524-2.76-3.424-4.575-6.34-3.483-1.624 0.606-2.944 2.546-2.944 4.282v7.981h0.14c0.003 0 0.003 0 0.006 0s0.003 0 0.006 0c0.904-0.038 1.75-0.421 2.38-1.077 0.632-0.659 0.981-1.522 0.981-2.432h1.463v-3.515h-1.463v-0.966c0-0.375 0.199-0.726 0.527-0.907 0.899-0.501 1.815 0.143 1.815 0.995v3.22c0 1.273 0.48 2.456 1.352 3.331 0.834 0.834 1.964 1.314 3.179 1.352 0 0 0.003 0 0.003 0s0 0 0.003 0v0h0.143v-3.512c0 0 0 0 0 0-0.656-0.003-1.171-0.53-1.171-1.171v-0.585zM3.512 13.463v-9.366h-3.512v8.78c0 2.412 1.592 3.512 3.073 3.512v0c0.442 0 0.884-0.102 1.279-0.287 0.059-0.026 0.152-0.085 0.152-0.085s-0.088-0.094-0.126-0.135c-0.562-0.641-0.866-1.472-0.866-2.42zM9.073 12.375c0 0.146-0.070 0.287-0.19 0.369-0.471 0.331-0.981-0.003-0.981-0.451v-4.683h-3.512v5.854c0 1.613 1.314 2.927 2.927 2.927 0.697 0 1.373-0.249 1.902-0.702-0.056 0.433-0.293 0.79-0.691 1.039-0.372 0.234-0.858 0.357-1.402 0.357-0.562 0-1.133-0.132-1.651-0.38 0 0-0.094-0.044-0.211-0.111v3.12c0.781 0.316 1.639 0.483 2.467 0.483 1.311 0 2.508-0.41 3.372-1.156 0.969-0.834 1.481-2.055 1.481-3.527v-7.902h-3.512z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bQ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Lyft" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Lyft extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bQ, create_fragment$bQ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Maas.svelte generated by Svelte v3.23.2 */

        function create_fragment$bR(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.383 0 0 5.384 0 12s5.383 12 12 12 12-5.384 12-12S18.617 0 12 0zM6.343 6.257h11.314c.284 0 .514.23.514.515v.685c0 .285-.23.515-.514.515H6.343a.515.515 0 0 1-.515-.515v-.685c0-.284.23-.515.515-.515zm0 3.257h11.314c.284 0 .514.23.514.515v.685c0 .285-.23.515-.514.515H6.343a.515.515 0 0 1-.515-.515v-.685c0-.284.23-.515.515-.515zm0 3.257h11.314c.284 0 .514.23.514.515v.685c0 .285-.23.515-.514.515H6.343a.515.515 0 0 1-.514-.515v-.685c0-.284.23-.515.514-.515zm0 3.258h11.314c.284 0 .514.23.514.513v.687c0 .284-.23.515-.514.515H6.343a.515.515 0 0 1-.514-.515v-.687c0-.284.23-.513.514-.513z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bR($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MAAS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Maas extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bR, create_fragment$bR, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Macys.svelte generated by Svelte v3.23.2 */

        function create_fragment$bS(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.015.624L9.19 9.293H0l7.445 5.384-2.819 8.673L12 17.986l7.422 5.393-2.835-8.713L24 9.292h-9.162L12.015.622v.002z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bS($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Macy’s" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Macys extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bS, create_fragment$bS, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Magento.svelte generated by Svelte v3.23.2 */

        function create_fragment$bT(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 24l-4.455-2.572v-12l2.97-1.715v12.001l1.485.902 1.485-.902V7.713l2.971 1.715v12L12 24zM22.391 6v12l-2.969 1.714V7.713L12 3.43 4.574 7.713v12.001L1.609 18V6L12 0l10.391 6z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bT($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Magento" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Magento extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bT, create_fragment$bT, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Magisk.svelte generated by Svelte v3.23.2 */

        function create_fragment$bU(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.857 14.458s.155.921-.034 2.952c-.236 2.546.97 6.59.97 6.59s1.645-4.052 1.358-6.67c-.236-2.152.107-2.904.034-2.803-1.264 1.746-2.328-.069-2.328-.069zM13.939 16.643c.206 1.591-.023 2.462-.32 4.164-.15.861 3.068-2.589 4.302-4.645.206-.343-1.18 1.337-2.551.137-.951-.832-1.114-1.085-1.853-1.808-.249-.244.277 1.014.423 2.151zM10.427 14.618c-.739.723-.903.976-1.853 1.808-1.371 1.2-2.757-.48-2.551-.137 1.234 2.057 4.452 5.506 4.302 4.645-.297-1.703-.526-2.574-.32-4.164.147-1.137.673-2.395.423-2.151zM13.593 11.779c1.504.434 2.088 2.523 3.606 2.781.314.053.667.148 1.079.128.77-.037 1.744-.472 3.045-2.318.385-.546-.955 3.514-4.313 3.563-2.46.036-2.747-2.408-4.387-2.482-.592-.027-.629-1.156-.629-1.156s.706-.774 1.598-.517zM10.407 11.767c-1.504.434-2.088 2.523-3.606 2.781-.314.053-.667.148-1.079.128-.77-.037-1.744-.472-3.045-2.318-.385-.546.955 3.514 4.313 3.563 2.46.036 2.747-2.408 4.387-2.482.592-.027.629-1.156.629-1.156s-.706-.774-1.598-.517zM16.033 11.747c1.513 1.146 1.062 2.408 1.911 2.048 2.859-1.212 2.359-7.434 2.128-6.682-1.303 4.242-4.143 4.48-6.876 2.528-.534-.381 1.985 1.459 2.837 2.105zM10.793 9.641C8.06 11.592 5.22 11.355 3.917 7.113c-.231-.752-.731 5.469 2.128 6.682.849.36.398-.902 1.911-2.048.852-.646 3.371-2.486 2.837-2.105zM16.319 10.225c3.3-.136 3.909-5.545 3.65-4.885-1.165 2.963-5.574 1.848-5.995 3.718-.083.367.747 1.233 2.345 1.167zM10.015 9.058c-.421-1.87-4.831-.755-5.995-3.718-.259-.66.35 4.749 3.65 4.885 1.599.066 2.428-.8 2.345-1.167zM13.768 8.234s1.794-.964 3.33-1.384c1.435-.393 2.512-1.359 2.631-2.38.089-.76-1.11-2.197-1.11-2.197s-.841 2.334-1.945 3.501c-1.201 1.27-.745 1.099-2.906 2.46zM7.315 5.774C6.211 4.607 5.37 2.273 5.37 2.273S4.171 3.709 4.26 4.47c.12 1.021 1.196 1.987 2.631 2.38 1.536.421 3.33 1.384 3.33 1.384-2.162-1.361-1.705-1.19-2.906-2.46zM13.55 8.086c1.943-1.594 2.976-3.673 4.657-5.949.317-.429-1.419-1.465-2.105-1.533S14.84 3.057 14.775 4.54c-.059 1.354-1.486 3.761-1.224 3.547zM9.214 4.539C9.149 3.056 8.573.535 7.887.603S5.465 1.707 5.782 2.136c1.681 2.276 2.713 4.356 4.657 5.949.261.214-1.165-2.193-1.224-3.547zM13.745 2.937c.137-1.098.631-1.9 1.613-2.574-.868-.29-1.591-.526-1.968-.217s-1.403 1.342-1.266 3.023.007 7.962.305 7.846c.16-4.302 1.522-5.538 1.316-8.077zM11.559 11.014c.297.116.167-6.165.305-7.846S10.976.454 10.598.145C10.221-.164 9.499.072 8.63.362c.983.674 1.476 1.476 1.613 2.574-.206 2.539 1.156 3.775 1.316 8.077z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bU($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Magisk" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Magisk extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bU, create_fragment$bU, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/MailDotRu.svelte generated by Svelte v3.23.2 */

        function create_fragment$bV(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.585 5.267c1.834 0 3.558.811 4.824 2.08v.004c0-.609.41-1.068.979-1.068h.145c.891 0 1.073.842 1.073 1.109l.005 9.475c-.063.621.64.941 1.029.543 1.521-1.564 3.342-8.038-.946-11.79-3.996-3.497-9.357-2.921-12.209-.955-3.031 2.091-4.971 6.718-3.086 11.064 2.054 4.74 7.931 6.152 11.424 4.744 1.769-.715 2.586 1.676.749 2.457-2.776 1.184-10.502 1.064-14.11-5.188C-.977 13.521-.847 6.093 5.62 2.245 10.567-.698 17.09.117 21.022 4.224c4.111 4.294 3.872 12.334-.139 15.461-1.816 1.42-4.516.037-4.498-2.031l-.019-.678c-1.265 1.256-2.948 1.988-4.782 1.988-3.625 0-6.813-3.189-6.813-6.812 0-3.659 3.189-6.885 6.814-6.885zm4.561 6.623c-.137-2.653-2.106-4.249-4.484-4.249h-.09c-2.745 0-4.268 2.159-4.268 4.61 0 2.747 1.842 4.481 4.256 4.481 2.693 0 4.464-1.973 4.592-4.306l-.006-.536z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bV($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mail.Ru" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class MailDotRu extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bV, create_fragment$bV, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mailchimp.svelte generated by Svelte v3.23.2 */

        function create_fragment$bW(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.98 11.341c.165-.021.332-.021.497 0 .089-.205.104-.558.024-.942-.12-.571-.28-.917-.613-.863-.333.054-.346.468-.226 1.039.067.321.186.596.319.766zM15.12 11.793c.239.105.385.174.442.114.037-.038.026-.11-.03-.203-.118-.193-.36-.388-.617-.497a1.677 1.677 0 0 0-1.634.196c-.16.117-.31.28-.29.378.008.032.031.056.087.064.132.015.591-.217 1.12-.25.374-.023.684.094.922.199zm-.48.274c-.31.05-.481.152-.591.247-.094.082-.152.173-.152.237l.024.057.051.02c.07 0 .228-.064.228-.064a1.975 1.975 0 0 1 1-.104c.155.018.23.028.263-.026.01-.015.023-.049-.008-.1-.073-.118-.387-.317-.814-.266zM17.015 13.073c.21.104.442.063.518-.09.076-.155-.034-.364-.245-.467-.21-.104-.442-.063-.518.09-.076.155.034.364.245.467zm1.355-1.186c-.171-.003-.314.185-.317.421-.004.235.131.428.302.431.171.003.314-.185.318-.42.003-.235-.132-.428-.303-.432zM6.866 16.13c-.042-.053-.112-.037-.18-.021a.646.646 0 0 1-.16.022.347.347 0 0 1-.292-.148c-.078-.12-.073-.299.012-.504l.04-.092c.138-.308.368-.825.11-1.317-.194-.37-.511-.602-.892-.65a1.145 1.145 0 0 0-.983.355c-.379.418-.438.988-.364 1.19.027.073.069.094.099.098.065.009.16-.038.22-.2l.017-.052c.026-.085.076-.243.157-.37a.688.688 0 0 1 .953-.2c.266.175.368.5.255.811-.059.161-.154.468-.133.72.043.512.357.717.638.74.274.01.466-.145.514-.258.03-.066.005-.107-.01-.125v.001zM22.691 15.194c-.01-.037-.078-.286-.172-.586l-.19-.51c.375-.563.381-1.066.332-1.35-.054-.353-.2-.654-.496-.964-.295-.312-.9-.63-1.75-.868l-.445-.124c-.002-.018-.023-1.053-.043-1.497-.013-.32-.041-.822-.196-1.315-.185-.669-.507-1.253-.91-1.627 1.11-1.152 1.803-2.422 1.801-3.511-.003-2.095-2.571-2.73-5.736-1.416l-.67.285a666.1 666.1 0 0 0-1.23-1.207C9.376-2.65-1.905 9.912 1.701 12.964l.789.668a3.885 3.885 0 0 0-.22 1.793c.085.84.517 1.644 1.218 2.266.665.59 1.54.965 2.389.964 1.403 3.24 4.61 5.228 8.37 5.34 4.034.12 7.42-1.776 8.84-5.182.093-.24.486-1.317.486-2.267 0-.956-.539-1.352-.882-1.352zm-16.503 2.55a1.94 1.94 0 0 1-.374.027c-1.218-.033-2.534-1.131-2.665-2.435-.145-1.44.59-2.548 1.89-2.81a2.22 2.22 0 0 1 .547-.04c.729.04 1.803.6 2.048 2.191.217 1.408-.128 2.843-1.446 3.068zm-1.36-6.08c-.81.157-1.524.617-1.96 1.252-.261-.218-.747-.64-.833-.804-.697-1.325.76-3.902 1.778-5.357C6.33 3.159 10.268.437 12.093.931c.296.084 1.278 1.224 1.278 1.224s-1.823 1.013-3.514 2.426c-2.278 1.757-3.999 4.311-5.03 7.083zm12.787 5.542a.072.072 0 0 0 .042-.071.067.067 0 0 0-.074-.06s-1.908.283-3.711-.379c.196-.639.718-.408 1.508-.344a11.01 11.01 0 0 0 3.64-.394c.816-.235 1.888-.698 2.722-1.356.28.618.38 1.298.38 1.298s.217-.039.399.073c.171.106.297.326.211.895-.175 1.063-.626 1.926-1.384 2.72a5.698 5.698 0 0 1-1.663 1.244 7.018 7.018 0 0 1-1.085.46c-2.858.935-5.784-.093-6.727-2.3a3.582 3.582 0 0 1-.19-.522c-.401-1.455-.06-3.2 1.007-4.299.065-.07.132-.153.132-.256 0-.087-.055-.178-.102-.243-.373-.542-1.666-1.466-1.406-3.254.186-1.285 1.308-2.189 2.353-2.135l.265.015c.453.027.848.085 1.222.101.624.027 1.185-.064 1.85-.619.224-.187.404-.35.708-.401.032-.005.111-.034.27-.026a.892.892 0 0 1 .456.146c.533.355.608 1.215.636 1.845.016.36.059 1.228.074 1.478.034.57.183.65.486.75.17.057.329.099.562.164.705.199 1.123.4 1.387.659.158.161.23.333.253.497.084.608-.47 1.359-1.938 2.041-1.605.746-3.55.935-4.895.785l-.471-.053c-1.076-.145-1.689 1.247-1.044 2.201.416.615 1.55 1.015 2.683 1.015 2.6 0 4.598-1.111 5.341-2.072l.06-.085c.036-.055.006-.085-.04-.054-.607.416-3.304 2.069-6.19 1.571 0 0-.35-.057-.67-.182-.254-.099-.786-.344-.85-.891 2.328.721 3.793.039 3.793.039zm-3.688-.436l.001.001v-.002zM9.473 6.74c.895-1.036 1.996-1.936 2.982-2.441.034-.017.07.02.052.053-.079.142-.23.447-.277.677a.04.04 0 0 0 .061.042c.614-.419 1.681-.868 2.618-.925.04-.003.06.049.027.074-.154.119-.293.258-.411.413a.04.04 0 0 0 .031.064c.657.005 1.584.235 2.188.575.04.023.012.102-.034.092-.914-.21-2.41-.37-3.964.01-1.387.339-2.446.862-3.218 1.425-.04.029-.086-.023-.055-.06z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bW($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MailChimp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mailchimp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bW, create_fragment$bW, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Makerbot.svelte generated by Svelte v3.23.2 */

        function create_fragment$bX(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.055 7.328c-.604-1.428-1.47-2.714-2.569-3.813C19.382 2.414 18.1 1.551 16.672.944 15.189.315 13.619 0 12 0c-1.62 0-3.19.318-4.672.945-1.428.604-2.711 1.47-3.813 2.57C2.414 4.615 1.551 5.9.943 7.328.315 8.81 0 10.38 0 12c0 1.619.318 3.189.945 4.671.604 1.429 1.47 2.714 2.569 3.814 1.103 1.1 2.386 1.964 3.813 2.57C8.81 23.686 10.38 24 12 24c1.619 0 3.189-.314 4.671-.944 1.429-.601 2.711-1.471 3.814-2.564 1.1-1.095 1.964-2.386 2.57-3.811.63-1.47.944-3.045.944-4.665 0-1.619-.314-3.18-.944-4.664v-.024zM12 22.335C6.293 22.335 1.665 17.707 1.665 12S6.293 1.665 12 1.665 22.335 6.293 22.335 12 17.707 22.335 12 22.335zm3.242-18.214H8.757c-.922 0-1.7.324-2.333.975-.635.644-.953 1.425-.953 2.334v10.182c0 .449.135.81.4 1.095.267.269.615.42 1.051.42.445 0 .805-.135 1.079-.405.272-.271.409-.63.409-1.08V7.08h2.141v10.529c0 .445.131.806.391 1.08.259.273.611.411 1.059.411.446 0 .799-.138 1.059-.411.26-.274.39-.635.39-1.08V7.08h2.142v10.529c0 .445.135.806.408 1.08.275.273.635.411 1.08.411.435 0 .783-.141 1.05-.423.268-.28.401-.638.401-1.069V7.426c0-.91-.318-1.688-.953-2.336-.633-.648-1.41-.975-2.334-.975v.006z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bX($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MakerBot" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Makerbot extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bX, create_fragment$bX, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Man.svelte generated by Svelte v3.23.2 */

        function create_fragment$bY(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.979 14.943h2.05L15.46 18.7h-2.054l-.263-.409h-2.278l-.264.41H8.548zm1.025 1.568l-.458.711h.916l-.458-.712zM0 17.372C0 10.704 5.372 5.3 12 5.3s12 5.405 12 12.073c0 .449-.024.892-.072 1.328H22.58c.054-.435.082-.878.082-1.328 0-5.924-4.774-10.726-10.662-10.726-5.889 0-10.661 4.802-10.661 10.726 0 .45.027.893.08 1.328H.073A12.254 12.274 0 0 1 0 17.372zm2.237-2.43h1.83l1.22 1.228 1.22-1.227h1.831V18.7H6.363v-1.38l-1.075 1.082-1.076-1.082v1.38H2.237v-3.757zm13.42 0h1.927l2.17 1.62v-1.62h1.975V18.7h-1.942l-2.156-1.605V18.7h-1.975Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bY($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MAN" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Man extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bY, create_fragment$bY, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Manageiq.svelte generated by Svelte v3.23.2 */

        function create_fragment$bZ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.096.1l-.001.001A11.547 11.547 0 00.538 11.658c0 2.069.548 4.005 1.496 5.683l2.869-2.867a7.676 7.676 0 01-.54-2.816c0-4.261 3.47-7.73 7.732-7.73 4.261 0 7.732 3.469 7.732 7.73 0 4.262-3.47 7.732-7.732 7.732a7.67 7.67 0 01-2.6-.459L6.597 21.83a11.514 11.514 0 005.499 1.388c2.316 0 4.468-.686 6.275-1.856l2.393 2.392L24 20.512l-2.349-2.349a11.51 11.51 0 002-6.505C23.651 5.368 18.644.26 12.393.1c-.08-.003-.18 0-.297 0zm-.001 9.34c-1.226 0-2.215.991-2.215 2.217 0 1.225.99 2.216 2.215 2.216a2.215 2.215 0 100-4.432zm-4.241 3.368l-.214.214L0 20.662l3.239 3.24 7.855-7.856z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$bZ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "ManageIQ" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Manageiq extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$bZ, create_fragment$bZ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Manjaro.svelte generated by Svelte v3.23.2 */

        function create_fragment$b_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v24h6.75V6.75h8.625V0H0zm8.625 8.625V24h6.75V8.625h-6.75zM17.25 0v24H24V0h-6.75z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Manjaro" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Manjaro extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b_, create_fragment$b_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mapbox.svelte generated by Svelte v3.23.2 */

        function create_fragment$b$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.372 0 0 5.372 0 12s5.372 12 12 12 12-5.372 12-12S18.628 0 12 0zm5.696 14.943c-4.103 4.103-11.433 2.794-11.433 2.794S4.94 10.421 9.057 6.304c2.281-2.281 6.061-2.187 8.45.189s2.471 6.168.189 8.45zm-4.319-7.91l-1.174 2.416-2.416 1.174 2.416 1.174 1.174 2.416 1.174-2.416 2.416-1.174-2.416-1.174-1.174-2.416z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$b$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mapbox" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mapbox extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$b$, create_fragment$b$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mariadb.svelte generated by Svelte v3.23.2 */

        function create_fragment$c0(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.157 4.412c-.676.284-.79.31-1.673.372-.65.045-.757.057-1.212.209-.75.246-1.395.75-2.02 1.59-.296.398-1.249 1.913-1.249 1.988 0 .057-.65.998-.915 1.32-.574.713-1.08 1.079-2.14 1.59-.77.36-1.224.524-4.102 1.477-1.073.353-2.133.738-2.367.864-.852.449-1.515 1.036-2.203 1.938-1.003 1.32-.972 1.313-3.042.947a12.264 12.264 0 00-.675-.063c-.644-.05-1.023.044-1.332.334L0 17.193l.177.088c.094.05.353.234.561.398.215.17.461.347.55.391.088.044.17.088.183.101.012.013-.089.17-.228.353-.435.581-.593.871-.574 1.048.019.164.032.17.43.17.517-.006.826-.056 1.261-.208.65-.233 2.058-.94 2.784-1.4.776-.5 1.717-.998 1.956-1.042.082-.02.354-.07.594-.114.58-.107 1.464-.095 2.587.05.108.013.373.045.6.064.227.025.43.057.454.076.026.012.474.037.998.056.934.026 1.104.007 1.3-.189.126-.133.385-.631.498-.985.209-.643.417-.921.366-.492-.113.966-.322 1.692-.713 2.411-.259.499-.663 1.092-.934 1.395-.322.347-.315.36.088.315.619-.063 1.471-.397 2.096-.82.827-.562 1.647-1.691 2.19-3.03.107-.27.22-.22.183.083-.013.094-.038.315-.057.498l-.031.328.353-.202c.833-.48 1.414-1.262 2.127-2.884.227-.518.877-2.922 1.073-3.976a9.64 9.64 0 01.271-1.042c.127-.429.196-.555.48-.858.183-.19.625-.555.978-.808.72-.505.953-.75 1.187-1.205.208-.417.284-1.13.132-1.357-.132-.202-.284-.196-.763.006Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c0($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MariaDB" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mariadb extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c0, create_fragment$c0, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mariadbfoundation.svelte generated by Svelte v3.23.2 */

        function create_fragment$c1(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.475 4.031c-.369.013-.262.179-1.06.376-.805.198-1.78.077-2.646.441-2.267.95-2.634 4.624-5.335 6.045-1.77 1-3.576 1.229-5.19 1.735-1.295.52-2.101.864-3.051 1.683-.737.635-.917 1.252-1.687 2.05-.782 1.062-3.744.118-4.506 1.45.402.26.634.332 1.34.24-.146.276-1.074.64-.906 1.048 0 0 2.245.409 4.137-.733.882-.359 1.71-1.119 3.08-1.301 1.777-.236 3.778.373 5.925.544-.444.877-.902 1.395-1.391 2.119-.152.163.13.307.65.209.937-.232 1.615-.483 2.289-.949.878-.606 1.256-1.16 1.997-2.039.644 1.032 2.914 1.26 3.38.367-.867-.367-1.052-2.277-.755-3.101.35-.786.603-1.896.886-2.928.256-.93.413-2.349.718-3.075.365-.903 1.073-1.185 1.605-1.664.532-.479 1.06-.878 1.045-1.974-.006-.356-.19-.553-.525-.543zm-.573.445c.09.307.231.448.841.504-.089.774-.606 1.196-1.183 1.602-.509.356-1.066.7-1.424 1.258-.367.57-.951 2.23-1.52 4.159-.492 1.668-1.065 2.807-2.276 3.807-.15-.36.17-.568.03-.897-.175.496-.558 1.218-.789 1.66-.76 1.454-2.019 2.63-3.901 2.962.893-1.21 1.787-2.543 1.896-4.627-.4.087-.432 1.164-1.078 1.56-.415.045-.995-.05-1.573-.12-1.726-.203-3.465-.282-5.087.24-1.105.353-2.356 1.447-3.292 1.853-1.1.478-1.477.515-2.869.473-.174-.234 1.002-.536.936-1.047-.536-.058-.848.071-1.314-.14a.707.707 0 01.223-.24c.854-.59 3.278-.14 3.927-.777.401-.392.663-.804.935-1.204.265-.388.538-.765.953-1.105.154-.125.394-.341.571-.463.709-.484 1.51-.831 2.373-1.133 1.174-.413 2.361-.552 3.613-1.03.774-.296 1.508-.576 2.193-1.088.162-.121.407-.326.55-.465 2.22-2.192 2.361-5.177 5.415-5.49.37-.038.672-.026.948-.034.317-.01.597-.047.902-.218zm-.15.197c-.017 0-.049.015-.093.056-.265.272-.79.884-.98 1.454-.05.155.048.11.082.01.189-.584.788-1.226.971-1.42.045-.052.051-.099.02-.1zm.08.133c-.017.002-.046.022-.084.069-.224.306-.657.77-.766 1.36-.027.16.064.103.082-.001.106-.605.608-1.11.763-1.327.037-.058.036-.105.006-.101zm.098.12c-.017.004-.044.026-.077.076-.199.325-.46.699-.519 1.295-.013.162.073.097.083-.008.052-.612.379-1.032.515-1.262.032-.06.028-.107-.002-.1zm.107.091c-.018.005-.042.03-.071.082-.169.34-.328.6-.334 1.2.002.163.08.09.081-.015 0-.614.22-.925.335-1.166.026-.063.018-.11-.011-.1zm-2.064.294c-.526.013-.837.242-.938.68.432.375 1.338.074 1.177-.672a2.218 2.218 0 00-.24-.008Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c1($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MariaDB Foundation" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mariadbfoundation extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c1, create_fragment$c1, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Markdown.svelte generated by Svelte v3.23.2 */

        function create_fragment$c2(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.27 19.385H1.73A1.73 1.73 0 010 17.655V6.345a1.73 1.73 0 011.73-1.73h20.54A1.73 1.73 0 0124 6.345v11.308a1.73 1.73 0 01-1.73 1.731zM5.769 15.923v-4.5l2.308 2.885 2.307-2.885v4.5h2.308V8.078h-2.308l-2.307 2.885-2.308-2.885H3.46v7.847zM21.232 12h-2.309V8.077h-2.307V12h-2.308l3.461 4.039z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c2($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Markdown" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Markdown extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c2, create_fragment$c2, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Marketo.svelte generated by Svelte v3.23.2 */

        function create_fragment$c3(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.146 0v24l6.134-4.886V3.334zM13.293 18.758l-4.939 2.157V2.086l4.939 1.462zM1.721 18.205l3.78-.999V5.188l-3.762-.606z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c3($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Marketo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Marketo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c3, create_fragment$c3, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Marriott.svelte generated by Svelte v3.23.2 */

        function create_fragment$c4(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.802 11.083l-1.178 2.41c-.8 1.425-1.931 3.167-3.646 3.603-.668.232-1.255.023-1.9-.023L0 20.476a1.626 1.626 0 0 0 .59.386c3.647 1.39 5.122-.1 8.722-8.238l3.403 7.249h4.53l-2.14-4.893 1.213-2.53 3.345 7.311 4.337.027-7.59-16.677-3.475 1.738 2.738 6.222-1.201 2.445L9.45 2.678l-3.7 1.877Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c4($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Marriott" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Marriott extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c4, create_fragment$c4, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Maserati.svelte generated by Svelte v3.23.2 */

        function create_fragment$c5(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.243 17.475h-1.521c0 .894.58 1.301 1.505 1.098v-1.098zm.063-3.326c0-.22.11-3.09.8-5.349.737-2.478 2.243-3.953 2.133-4.094-.094-.141-1.317.11-2.259.753-.988.674-1.96 1.804-1.882 1.882.047.047.377-.22.973-.455.643-.235.925-.188.925-.188s-1.067 1.757-1.584 3.64c-.44 1.584-.675 3.638-.69 3.827zm-12.612 0c-.016-.22-.11-3.09-.8-5.349-.737-2.478-2.243-3.953-2.133-4.094.094-.141 1.317.11 2.243.753.988.674 1.96 1.804 1.882 1.882-.047.047-.376-.22-.972-.455-.643-.235-.91-.188-.91-.188s1.067 1.757 1.584 3.64c.44 1.584.675 3.638.675 3.827zm5.412-11.137c.612-1.192.721-2.98.878-3.012.141.031.267 1.82.863 3.012.565 1.13 1.788 2.07 1.726 2.196-.079.141-.77-.204-1.098-.36-.55-.252-.989-.456-.989-.456s-.22 2.855.47 5.49c.566 2.15 1.93 4.11 2.056 4.283H13.27c-.047-.094-.11-.189-.157-.267-.47-.831-.816-1.553-1.13-2.792-.33 1.24-.674 1.96-1.145 2.792a1.49 1.49 0 0 1-.157.267h-1.74c.125-.173 1.49-2.134 2.054-4.283.69-2.62.47-5.49.47-5.49s-.439.204-.988.455c-.345.157-1.02.502-1.113.377-.047-.126 1.176-1.083 1.74-2.212M5.742 17.475h1.522c0 .894-.58 1.301-1.522 1.098zm8.455.69c-.69.643-.69 1.788-.69 1.788H10.51s0-1.145-.69-1.788c-.487-.455-1.083-.55-1.083-.55-.392-.078-.392-.125-.392-.14h7.357s0 .062-.392.14a2.2 2.2 0 0 0-1.114.55M5.004 14.54h13.945v.534H5.004zm.016 1.961h13.945v.518H5.02zm.674-.988H18.29v.533H5.694zm4.69 6.321h3.2V24h-3.2zm-.517-1.459h4.235v1.051H9.867Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c5($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Maserati" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Maserati extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c5, create_fragment$c5, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mastercard.svelte generated by Svelte v3.23.2 */

        function create_fragment$c6(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.343 18.031c.058.049.12.098.181.146-1.177.783-2.59 1.238-4.107 1.238C3.32 19.416 0 16.096 0 12c0-4.095 3.32-7.416 7.416-7.416 1.518 0 2.931.456 4.105 1.238-.06.051-.12.098-.165.15C9.6 7.489 8.595 9.688 8.595 12c0 2.311 1.001 4.51 2.748 6.031zm5.241-13.447c-1.52 0-2.931.456-4.105 1.238.06.051.12.098.165.15C14.4 7.489 15.405 9.688 15.405 12c0 2.31-1.001 4.507-2.748 6.031-.058.049-.12.098-.181.146 1.177.783 2.588 1.238 4.107 1.238C20.68 19.416 24 16.096 24 12c0-4.094-3.32-7.416-7.416-7.416zM12 6.174c-.096.075-.189.15-.28.231C10.156 7.764 9.169 9.765 9.169 12c0 2.236.987 4.236 2.551 5.595.09.08.185.158.28.232.096-.074.189-.152.28-.232 1.563-1.359 2.551-3.359 2.551-5.595 0-2.235-.987-4.236-2.551-5.595-.09-.08-.184-.156-.28-.231z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c6($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MasterCard" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mastercard extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c6, create_fragment$c6, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mastodon.svelte generated by Svelte v3.23.2 */

        function create_fragment$c7(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.193 7.879c0-5.206-3.411-6.732-3.411-6.732C18.062.357 15.108.025 12.041 0h-.076c-3.068.025-6.02.357-7.74 1.147 0 0-3.411 1.526-3.411 6.732 0 1.192-.023 2.618.015 4.129.124 5.092.934 10.109 5.641 11.355 2.17.574 4.034.695 5.535.612 2.722-.15 4.25-.972 4.25-.972l-.09-1.975s-1.945.613-4.129.539c-2.165-.074-4.449-.233-4.799-2.891a5.499 5.499 0 0 1-.048-.745s2.125.52 4.817.643c1.646.075 3.19-.097 4.758-.283 3.007-.359 5.625-2.212 5.954-3.905.517-2.665.475-6.507.475-6.507zm-4.024 6.709h-2.497V8.469c0-1.29-.543-1.944-1.628-1.944-1.2 0-1.802.776-1.802 2.312v3.349h-2.483v-3.35c0-1.536-.602-2.312-1.802-2.312-1.085 0-1.628.655-1.628 1.944v6.119H4.832V8.284c0-1.289.328-2.313.987-3.07.68-.758 1.569-1.146 2.674-1.146 1.278 0 2.246.491 2.886 1.474L12 6.585l.622-1.043c.64-.983 1.608-1.474 2.886-1.474 1.104 0 1.994.388 2.674 1.146.658.757.986 1.781.986 3.07v6.304z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c7($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mastodon" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mastodon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c7, create_fragment$c7, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Materialdesign.svelte generated by Svelte v3.23.2 */

        function create_fragment$c8(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.377 0 0 5.377 0 12s5.377 12 12 12 12-5.377 12-12S18.623 0 12 0zm0 .75c2.871 0 5.482 1.082 7.469 2.85H4.53A11.197 11.197 0 0 1 12 .75zm-7.186 3.6h14.372L12 18.723 4.814 4.35zM3.6 4.53V19.47A11.197 11.197 0 0 1 .75 12c0-2.87 1.082-5.481 2.85-7.468zm16.8 0A11.197 11.197 0 0 1 23.25 12c0 2.871-1.082 5.482-2.85 7.469V4.53zM4.35 5.1l7.275 14.55H4.35V5.1zm15.3 0v14.55h-7.275L19.651 5.1zM4.533 20.4H19.469A11.197 11.197 0 0 1 12 23.25a11.197 11.197 0 0 1-7.468-2.85z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c8($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Material Design" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Materialdesign extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c8, create_fragment$c8, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Materialdesignicons.svelte generated by Svelte v3.23.2 */

        function create_fragment$c9(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0h7.2v2.4h9.6V0H24v7.2h-2.4v9.6H24V24h-7.2v-2.4H7.2V24H0v-7.2h2.4V7.2H0V0m16.8 7.2V4.8H7.2v2.4H4.8v9.6h2.4v2.4h9.6v-2.4h2.4V7.2h-2.4M2.4 2.4v2.4h2.4V2.4H2.4m16.8 0v2.4h2.4V2.4h-2.4M2.4 19.2v2.4h2.4v-2.4H2.4m16.8 0v2.4h2.4v-2.4z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c9($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Material Design Icons" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Materialdesignicons extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c9, create_fragment$c9, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/MaterialUi.svelte generated by Svelte v3.23.2 */

        function create_fragment$ca(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 2.475v10.39l3 1.733V7.67l6 3.465 6-3.465v3.465l-6 3.463v3.464l6 3.463 9-5.195V9.402l-3 1.733v3.463l-6 3.464-3-1.732 6-3.465V2.475L9 7.67 0 2.475zm24 0l-3 1.73V7.67l3-1.732V2.474Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ca($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Material-UI" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class MaterialUi extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ca, create_fragment$ca, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mathworks.svelte generated by Svelte v3.23.2 */

        function create_fragment$cb(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.323 16.248C3.13 15.354 1.64 14.31 0 13.118l5.814-2.236 2.385 1.789c-1.789 2.087-2.981 2.832-3.876 3.578zm15.95-6.26c-.447-1.193-.745-2.385-1.193-3.578-.447-1.342-.894-2.534-1.64-3.578-.298-.447-.894-1.491-1.64-1.491-.149 0-.298.149-.447.149-.447.149-1.043 1.043-1.193 1.64-.447.745-1.342 1.938-1.938 2.683-.149.298-.447.596-.596.745-.447.298-.894.745-1.491 1.043-.149 0-.298.149-.447.149-.447 0-.745.298-1.043.447-.447.447-.894 1.043-1.342 1.491 0 .149-.149.298-.298.447l2.236 1.64c1.64-1.938 3.578-3.876 4.919-7.602 0 0-.447 4.025-4.025 8.348-2.236 2.534-4.025 3.876-4.323 4.174 0 0 .596-.149 1.193.149 1.193.447 1.789 2.087 2.236 3.279.298.894.745 1.64 1.043 2.534 1.193-.298 1.938-.745 2.683-1.491s1.491-1.64 2.236-2.385c1.342-1.64 2.981-3.727 5.068-2.683.298.149.745.447.894.596.447.298.745.596 1.193 1.043.745.596 1.043 1.043 1.64 1.342-1.491-2.981-2.534-5.963-3.727-9.093z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cb($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mathworks" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mathworks extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cb, create_fragment$cb, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Matrix.svelte generated by Svelte v3.23.2 */

        function create_fragment$cc(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.632.55v22.9H2.28V24H0V0h2.28v.55zm7.043 7.26v1.157h.033c.309-.443.683-.784 1.117-1.024.433-.245.936-.365 1.5-.365.54 0 1.033.107 1.481.314.448.208.785.582 1.02 1.108.254-.374.6-.706 1.034-.992.434-.287.95-.43 1.546-.43.453 0 .872.056 1.26.167.388.11.716.286.993.53.276.245.489.559.646.951.152.392.23.863.23 1.417v5.728h-2.349V11.52c0-.286-.01-.559-.032-.812a1.755 1.755 0 0 0-.18-.66 1.106 1.106 0 0 0-.438-.448c-.194-.11-.457-.166-.785-.166-.332 0-.6.064-.803.189a1.38 1.38 0 0 0-.48.499 1.946 1.946 0 0 0-.231.696 5.56 5.56 0 0 0-.06.785v4.768h-2.35v-4.8c0-.254-.004-.503-.018-.752a2.074 2.074 0 0 0-.143-.688 1.052 1.052 0 0 0-.415-.503c-.194-.125-.476-.19-.854-.19-.111 0-.259.024-.439.074-.18.051-.36.143-.53.282-.171.138-.319.337-.439.595-.12.259-.18.6-.18 1.02v4.966H5.46V7.81zm15.693 15.64V.55H21.72V0H24v24h-2.28v-.55z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cc($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Matrix" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Matrix extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cc, create_fragment$cc, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mattermost.svelte generated by Svelte v3.23.2 */

        function create_fragment$cd(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.081 0C7.048-.034 2.339 3.125.637 8.153c-2.125 6.276 1.24 13.086 7.516 15.21 6.276 2.125 13.086-1.24 15.21-7.516 1.727-5.1-.172-10.552-4.311-13.557l.126 2.547c2.065 2.282 2.88 5.512 1.852 8.549-1.534 4.532-6.594 6.915-11.3 5.321-4.708-1.593-7.28-6.559-5.745-11.092 1.031-3.046 3.655-5.121 6.694-5.67l1.642-1.94A4.87 4.87 0 0 0 12.08 0zm3.528 1.094a.284.284 0 0 0-.123.024l-.004.001a.33.33 0 0 0-.109.071c-.145.142-.657.828-.657.828L13.6 3.4l-1.3 1.585-2.232 2.776s-1.024 1.278-.798 2.851c.226 1.574 1.396 2.34 2.304 2.648.907.307 2.302.408 3.438-.704 1.135-1.112 1.098-2.75 1.098-2.75l-.087-3.56-.07-2.05-.047-1.775s.01-.856-.02-1.057a.33.33 0 0 0-.035-.107l-.006-.012-.007-.011a.277.277 0 0 0-.229-.14z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cd($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mattermost" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mattermost extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cd, create_fragment$cd, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Matternet.svelte generated by Svelte v3.23.2 */

        function create_fragment$ce(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.229 4.18l-4.066 2.327V1.826L11.993 0 8.827 1.83v4.677L4.78 4.17 1.606 6v3.664L5.657 12l-4.054 2.343V18l3.165 1.831 4.044-2.338v4.681L11.983 24l3.174-1.831v-4.676l4.052 2.327 3.173-1.829v-3.646L18.339 12l4.058-2.336V6l-3.164-1.82h-.004zm.373 3.429V5.715l1.639.942v1.905l-1.636-.953h-.003zm1.638 9.286l-6.075-3.504 1.65-.945L21.239 15v1.896l.001-.001zm-6.827-3.95L12.763 12l6.452-3.726 1.641.944-6.446 3.727h.003zM3.134 9.219l1.641-.944L11.228 12l-1.639.945-6.455-3.726zm5.69 4.17l-6.075 3.508V15l4.435-2.555 1.641.945v-.001zM2.749 8.564V6.66l1.64-.945v1.898l-1.64.951zm9.627 0V1.55l1.641.937V7.61l-1.641.953v.001zm-2.402-.96V2.493l1.64-.944v7.004l-1.64-.949zm8.866-1.889v1.898l-6.456 3.734V9.442l6.456-3.727zm-7.228 3.724v1.897L5.153 7.609V5.715l6.46 3.721-.001.003zm-2.403 6.513l-4.435 2.555-1.64-.944 6.074-3.508v1.897zm.765-2.343l1.64-.945v7.453l-1.64.959v-7.467zm3.656 8.115l-1.639.954-1.64-.951 1.64-.946 1.639.946v-.003zm.394-.657l-1.648-.95v-7.441l1.648.944v7.458-.011zm6.831-3.504l-1.641.944-4.425-2.555v-1.897l6.075 3.508h-.009z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ce($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Matternet" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Matternet extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ce, create_fragment$ce, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Maytag.svelte generated by Svelte v3.23.2 */

        function create_fragment$cf(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.167 9.864c-.714 0-1.193.194-1.513.465-.65.55-.648 1.373-.648 1.627 0 .297.025 1.285.61 1.784.338.286.72.396 1.312.396.62 0 .962-.407.962-.407h.026s.065.102.179.196c.105.085.256.16.256.16h.358s-.026-.249-.026-.716v-.662c0-.093.027-.159.081-.198a.483.483 0 0 1 .236-.073v-.31h-1.803v.31c.066 0 .272.008.348.056.077.048.15.09.15.262v.418c0 .134.036.266.036.266-.226.213-.731.242-.954.16-.343-.126-.532-.321-.532-1.635 0-.36-.025-1.078.281-1.409.178-.192.47-.23.678-.23.38 0 .622.11.794.47.075.159.246.561.246.561h.325l-.056-1.282c-.206-.082-.57-.209-1.346-.209zM.015 9.902v.345c.423 0 .582.077.582.287v2.843c0 .139-.05.238-.15.295-.099.056-.248.084-.447.084v.349h1.56v-.349c-.202 0-.344-.029-.428-.087-.083-.058-.125-.158-.125-.3v-2.7h.037l1.195 3.436h.579l1.047-3.435h.045v2.776c0 .108-.012.212-.118.268-.078.043-.274.042-.354.042v.349h3.526v-.349c-.09.002-.326-.016-.416-.054-.096-.04-.212-.159-.081-.58l.142-.462h1.303l.121.38c.15.465.195.595.078.66-.103.056-.303.056-.387.056v.349h2.064v-.35c-.045-.002-.158.002-.259-.07-.12-.096-.18-.268-.212-.367a68.88 68.88 0 0 1-.874-2.836 16.625 16.625 0 0 1-.155-.58H7.163l-1.03 3.099c-.08.24-.173.47-.28.6-.116.142-.297.155-.42.155-.279 0-.376-.05-.376-.31v-2.912c0-.21.16-.287.583-.287v-.345H3.659l-.749 2.623h-.037l-.878-2.623zm9.229 0v.345c.149 0 .262.017.33.049a.393.393 0 0 1 .171.192 74.949 74.949 0 0 1 1.026 2.23v.752a.281.281 0 0 1-.035.149.227.227 0 0 1-.113.087.709.709 0 0 1-.203.04 3.98 3.98 0 0 1-.283.01v.349h2.288v-.351a3.448 3.448 0 0 1-.14-.007.701.701 0 0 1-.212-.043.243.243 0 0 1-.118-.09.263.263 0 0 1-.037-.148v-.848l.816-1.78c.063-.147.167-.367.263-.434.096-.068.213-.064.41-.066.3-.002.357.04.405.104.042.057.052.184.051.363v2.669c0 .098-.053.17-.158.215a1.213 1.213 0 0 1-.403.064v.352h2.273v-.352a1.216 1.216 0 0 1-.403-.064c-.105-.045-.158-.117-.158-.215v-2.67c0-.178.009-.303.048-.358.047-.068.104-.108.404-.108.243 0 .338.006.413.066.12.096.21.31.275.457l.176.386h.294l-.067-1.345h-4.583v.349c.138 0 .272.02.315.113.058.125-.012.398-.167.786-.225.564-.389.956-.389.956H11.7l-.562-1.223c-.132-.287-.198-.464-.198-.53 0-.055.01-.105.33-.105v-.346zm8.309 0l-1.029 3.099c-.08.24-.167.44-.273.57a.468.468 0 0 1-.321.175v.359h1.424v-.349c-.09.002-.325-.016-.416-.054-.096-.04-.212-.159-.081-.58L17 12.66h1.3l.123.38c.15.465.194.595.077.66-.103.056-.303.056-.387.056v.349h2.065v-.35c-.046-.002-.159.002-.26-.07-.12-.096-.18-.268-.212-.367a70.46 70.46 0 0 1-.874-2.836c-.066-.24-.118-.424-.155-.58zm-10.247.66h.027l.475 1.761h-1.08zm10.39 0h.027l.475 1.761h-1.08Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cf($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Maytag" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Maytag extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cf, create_fragment$cf, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mazda.svelte generated by Svelte v3.23.2 */

        function create_fragment$cg(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.999 12.876c-.036 0-.105-.046-.222-.26a7.531 7.531 0 00-1.975-2.353A8.255 8.255 0 007.7 9.065a17.945 17.945 0 00-.345-.136c-1.012-.4-2.061-.813-3.035-1.377A8.982 8.982 0 014 7.362c.194-.34.42-.665.67-.962a6.055 6.055 0 011.253-1.131 7.126 7.126 0 011.618-.806c1.218-.434 2.677-.647 4.458-.649 1.783.002 3.241.215 4.459.65a7.097 7.097 0 011.619.805c.471.319.892.699 1.253 1.13.25.298.475.623.67.963-.103.064-.212.129-.32.192-.976.564-2.023.977-3.037 1.376l-.345.136a8.26 8.26 0 00-2.1 1.198 7.519 7.519 0 00-1.975 2.354c-.117.213-.187.259-.224.259m0 7.072c-1.544-.002-2.798-.129-3.83-.387-1.013-.252-1.855-.64-2.576-1.188a5.792 5.792 0 01-1.392-1.537 7.607 7.607 0 01-.81-1.768 10.298 10.298 0 01-.467-2.983c0-.674.047-1.313.135-1.901 1.106.596 2.153.895 3.08 1.16l.215.06c1.29.371 2.314.857 3.135 1.488.475.368.89.793 1.23 1.264.369.508.663 1.088.877 1.725.096.289.2.468.403.468.207 0 .308-.18.405-.468a6.124 6.124 0 012.107-2.988c.82-.632 1.845-1.118 3.135-1.489l.216-.06c.926-.265 1.973-.564 3.078-1.16.09.589.136 1.227.136 1.9 0 .458-.046 1.664-.465 2.984a7.626 7.626 0 01-.809 1.768 5.789 5.789 0 01-1.396 1.537c-.723.548-1.565.936-2.574 1.188-1.035.258-2.288.385-3.833.387m9.692-14.556c-1.909-2.05-4.99-2.99-9.692-2.995-4.7.005-7.781.944-9.69 2.994C.89 6.913 0 9.018 0 11.874c0 1.579.39 5.6 3.564 7.676 1.9 1.242 4.354 2.046 8.435 2.052 4.083-.006 6.536-.81 8.437-2.052C23.609 17.474 24 13.452 24 11.874c0-2.848-.897-4.968-2.31-6.483Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cg($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mazda" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mazda extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cg, create_fragment$cg, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mcafee.svelte generated by Svelte v3.23.2 */

        function create_fragment$ch(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 4.843L1.608.033v19.124L12 23.967l10.392-4.81V.033zm6.155 11.594l-6.126 2.835-6.127-2.835V6.704l6.127 2.834 6.126-2.834z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ch($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "McAfee" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mcafee extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ch, create_fragment$ch, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mcdonalds.svelte generated by Svelte v3.23.2 */

        function create_fragment$ci(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.243 3.006c2.066 0 3.742 8.714 3.742 19.478H24c0-11.588-3.042-20.968-6.766-20.968-2.127 0-4.007 2.81-5.248 7.227-1.241-4.416-3.121-7.227-5.231-7.227C3.031 1.516 0 10.888 0 22.476h3.014c0-10.763 1.658-19.47 3.724-19.47 2.066 0 3.741 8.05 3.741 17.98h2.997c0-9.93 1.684-17.98 3.75-17.98Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ci($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "McDonald's" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mcdonalds extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ci, create_fragment$ci, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mdnwebdocs.svelte generated by Svelte v3.23.2 */

        function create_fragment$cj(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v24h24V0zm10.564 4.969c.667-.047 1.001.066 1.59.242l.436.13.152.046.557.17c.365.099.748.105 1.115.017a2.033 2.033 0 011.48.174c.409.233.684.648.737 1.115.048.413.288.78.648.989.537.293 1.096.538 1.672.736.407.156.815.331 1.219.488.2.077.377.203.514.37a.87.87 0 01.197.49c.025.359.068.722.086 1.084h-.002c.028.5-.08.997-.317 1.439-.087.165-.183.321-.263.486a.616.616 0 01-.635.367.417.417 0 00-.277.09c-.246.161-.497.32-.75.471-.35.193-.77.216-1.141.06a5.36 5.36 0 00-1.908-.351 2.11 2.11 0 00-1.7.775 2.62 2.62 0 00-.38.77c-.223.55-.414 3.838-.414 4.676 0 0-3.161-.615-6.13-3.653l.774-2.03H5.4l1.754-1.856H4.14l1.752-1.858H3.029l3.188-3.383a7.349 7.349 0 013.549-1.95c.318-.055.576-.089.798-.104z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cj($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MDN Web Docs" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mdnwebdocs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cj, create_fragment$cj, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mediafire.svelte generated by Svelte v3.23.2 */

        function create_fragment$ck(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.13 7.171c-.496.42 2.943-.458 2.6 1.239-.332 1.633-3.62-.343-7.223-.176-1.594.073-3.054.53-3.985 1.668.973-1.108 2.901-.844 2.398-.081-1.172 1.776-3.376.497-4.92 3.975.185-.4.685-1.196 2.843-1.526 1.586-.242 4.214-.016 5.054 1.297.924 1.444-3.759 1.28-1.167 1.573 3.593.406 6.299 3.31 9.813 3.311 4.55 0 7.422-2.324 7.457-6.146.063-6.923-9.101-8.318-12.87-5.134zm6.768 7.554c-1.195-.033-2.404-.512-3.364-.98-2.365-1.155-3.338-1.553-3.338-1.608 0-.067 1.42.484 3.813-.789 1.383-.735 1.432-1.377 2.89-1.505 1.73-.152 2.962 1.13 2.962 2.478 0 1.349-1.222 2.453-2.963 2.404z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ck($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MediaFire" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mediafire extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ck, create_fragment$ck, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mediatemple.svelte generated by Svelte v3.23.2 */

        function create_fragment$cl(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.839 10.145v.57h.034c1.021-.615 2.07-.666 2.7-.666 1.695 0 2.28.479 2.49.66.39-.225 1.229-.676 2.685-.676 2.896 0 2.896 1.141 2.896 1.59v2.7H13.32v-2.384c0-.494 0-1.045-1.24-1.045-.612 0-1.242.187-1.463.46-.206.234-.291.446-.291.964v2.021H8.001v-2.303c0-.711.015-1.14-1.206-1.14-.615 0-1.242.162-1.48.405-.186.185-.307.379-.307.996v2.04H2.67v-4.2h2.16l.009.008zm16.431.929h-1.69v1.68c0 .593 0 .786.691.786.328 0 .618-.037.929-.096l.07-.009.22.854c-.817.15-1.711.166-1.966.166-.76 0-1.742-.111-2.105-.425-.309-.255-.346-.506-.346-1.141v-1.82h-1.145v-.877h1.144v-.827l2.52-.65v1.479h1.696v.877l-.018.003zM1.54 16.71C.615 15.313 0 13.65 0 11.979 0 10.005.775 8.4 1.561 7.27h.936c-.695 1.54-1.168 2.85-1.168 4.752 0 2.182.774 3.865 1.125 4.627.012 0 .034.045.034.061H1.54zm20.919-9.42C23.385 8.688 24 10.35 24 12.021c0 1.971-.776 3.58-1.561 4.709h-.936c.694-1.541 1.17-2.85 1.17-4.752 0-2.184-.777-3.863-1.129-4.629-.012-.01-.031-.049-.031-.06h.946z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cl($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MediaTemple" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mediatemple extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cl, create_fragment$cl, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Medium.svelte generated by Svelte v3.23.2 */

        function create_fragment$cm(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0v24h24V0H0zm19.938 5.686L18.651 6.92a.376.376 0 0 0-.143.362v9.067a.376.376 0 0 0 .143.361l1.257 1.234v.271h-6.322v-.27l1.302-1.265c.128-.128.128-.165.128-.36V8.99l-3.62 9.195h-.49L6.69 8.99v6.163a.85.85 0 0 0 .233.707l1.694 2.054v.271H3.815v-.27L5.51 15.86a.82.82 0 0 0 .218-.707V8.027a.624.624 0 0 0-.203-.527L4.019 5.686v-.27h4.674l3.613 7.923 3.176-7.924h4.456v.271z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cm($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Medium" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Medium extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cm, create_fragment$cm, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Meetup.svelte generated by Svelte v3.23.2 */

        function create_fragment$cn(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.9805.5547a.518.518 0 00-.1055.0117c-.2873.0619-.4704.3437-.4082.6309.0619.2868.344.47.6309.4082a.5327.5327 0 00.4082-.6328c-.0542-.251-.2782-.4206-.5254-.418zm6.455.6387a.9836.9836 0 00-.5136.1425c-.4698.2818-.6237.8898-.3418 1.3594.2822.4696.8919.6216 1.3613.3399.4698-.2821.6217-.8901.3399-1.3594a.9919.9919 0 00-.8458-.4824zm-3.0292 2.2363c-.9744.0047-1.9565.292-2.8204.8887-.8745.6041-1.4965 1.436-1.8476 2.3593-.5085.0689-1.0096.239-1.461.5508-1.4918 1.0307-1.886 3.0391-.9394 4.5625-1.2846 1.1762-1.5815 3.1356-.6055 4.6485.579.897 1.4882 1.437 2.4649 1.5976.018.732.238 1.466.6855 2.1133 1.224 1.7709 3.6526 2.2157 5.4238.9922.0677-.047.1198-.1061.1836-.1563.9872.8809 2.4708 1.0255 3.6075.2403.6065-.4189.9929-1.0292 1.162-1.6914.8895.0326 1.7956-.1935 2.584-.7383 1.8916-1.3067 2.3995-3.8615 1.1895-5.789.9713-.819 1.1798-2.2514.4336-3.3087-.3327-.4718-.8028-.7806-1.3164-.9336.0752-.984-.1704-1.9979-.7754-2.873-1.1792-1.7058-3.3327-2.3315-5.1953-1.6563a5.1058 5.1058 0 00-2.7735-.8066zm-5.6036.8164a.7589.7589 0 00-.4238.1348c-.3447.2383-.4317.7097-.1934 1.0546.2384.3447.7116.4317 1.0567.1934a.7574.7574 0 00.1933-1.0547.7581.7581 0 00-.6328-.3281zM20.797 6.617a.8419.8419 0 00-.4707.1505.8453.8453 0 101.1758.2148.8452.8452 0 00-.7051-.3652zm-8.1504 1.0274c.0629.0004.1244.0053.1816.0137.2286.0336.3655.119.4512.1875.1682.1342.2726.2412.4316.3926.2394.2275.4132.089.5332.0195.208-.1209.3692-.2181.9844-.207.6332.011 1.3626.2366 1.5137 1.3164.1682 1.1994-1.9656 4.2891-1.8164 5.7226.1054 1.0103 1.8146.2987 1.959 1.2207.1872 1.197-2.1353.752-2.666.4922-.832-.4077-1.337-1.3399-1.1211-2.2597.1612-.6882 1.7-3.4979 1.7578-3.9297.0587-.4404-.1773-.477-.3242-.4844-.1895-.0098-.3394.0808-.5254.3613-.1692.2558-2.082 4.0856-2.248 4.3985-.2969.5594-.6698.6938-1.045.6738-.5472-.0285-.7978-.3206-.7188-.8477.0467-.31 1.2594-3.0491 1.3223-3.4765.0387-.2643-.0132-.5452-.2754-.6797-.2625-.1346-.5713.0704-.664.2266-.128.2154-1.8482 4.7065-2.0313 5.039-.3168.576-.6508.7594-1.1523.7832-1.1862.0562-2.0656-.919-1.6778-2.1152.173-.5328 1.3159-4.5716 1.8946-5.5996C7.799 8.2015 8.8782 7.676 9.627 8c.3878.1679.9252.4377 1.084.5078.366.1622.7594-.2776.914-.4121.1549-.1345.3017-.2765.4902-.3574.1412-.0605.3426-.0947.5313-.0938zm10.8808 2.0567a.4683.4683 0 00-.0937.0117.4671.4671 0 00-.3594.5547.4696.4696 0 00.5567.3594c.2523-.0546.414-.3044.3593-.5567a.4696.4696 0 00-.4629-.3691zm-22.5195.8105a.9972.9972 0 00-.832.4336c-.3123.4553-.1977 1.0784.2578 1.3906.4555.3123 1.0783.1956 1.3906-.2597s.1977-1.0765-.2578-1.3887a.9992.9992 0 00-.5586-.1758zm21.295 2.0938a.635.635 0 00-.127.0136.6268.6268 0 00-.4805.7461.6278.6278 0 00.7461.4825c.3393-.0733.5558-.407.4824-.7461a.6295.6295 0 00-.621-.4961zM4.0624 18.703a.453.453 0 00-.0918.0117c-.2507.0543-.4117.3018-.3574.5528.054.251.302.4097.5527.3554a.4644.4644 0 00.3555-.5527.4655.4655 0 00-.459-.3672zm13.6758 1.5508a1.0444 1.0444 0 00-.584.1856c-.4758.3287-.5945.9813-.2656 1.457.3288.4756.9809.5943 1.457.2656.4758-.3287.5945-.9814.2656-1.457a1.0444 1.0444 0 00-.873-.4512zm-6.338 1.9004a.6427.6427 0 00-.3593.1152.6456.6456 0 00-.164.8985.6457.6457 0 00.8984.164.6456.6456 0 00.164-.8984.646.646 0 00-.539-.2793Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cn($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Meetup" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Meetup extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cn, create_fragment$cn, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mega.svelte generated by Svelte v3.23.2 */

        function create_fragment$co(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.372 0 0 5.372 0 12s5.372 12 12 12 12-5.372 12-12S18.628 0 12 0zm6.23 16.244a.371.371 0 0 1-.373.372H16.29a.371.371 0 0 1-.372-.372v-4.828c0-.04-.046-.06-.08-.033l-3.32 3.32a.742.742 0 0 1-1.043 0l-3.32-3.32c-.027-.027-.08-.007-.08.033v4.828a.371.371 0 0 1-.372.372H6.136a.371.371 0 0 1-.372-.372V7.757c0-.206.166-.372.372-.372h1.076a.75.75 0 0 1 .525.22l4.13 4.13a.18.18 0 0 0 .26 0l4.13-4.13c.14-.14.325-.22.525-.22h1.075c.206 0 .372.166.372.372z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$co($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MEGA" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mega extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$co, create_fragment$co, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mendeley.svelte generated by Svelte v3.23.2 */

        function create_fragment$cp(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.973 9.191h.019a2.349 2.349 0 011.5 4.155 1.803 1.803 0 01-.854.451 2.342 2.342 0 01-.647.092h-.019c-.224 0-.441-.033-.647-.092a1.808 1.808 0 01-.854-.451 2.34 2.34 0 01-.849-1.806 2.352 2.352 0 012.351-2.349m-9.948 9.45c1.262.158 2.382-.76 2.501-2.052a2.438 2.438 0 00-.213-1.233c-1.768-3.879 6.955-3.968 5.481-.307l-.01.016c-.697 1.115-.319 2.563.839 3.232.426.248.898.35 1.359.33.461.02.933-.082 1.359-.33 1.158-.67 1.536-2.117.839-3.232l-.01-.016c-1.474-3.661 7.25-3.572 5.48.307a2.44 2.44 0 00-.212 1.233c.12 1.292 1.239 2.21 2.502 2.052a2.339 2.339 0 001.421-.735s.587-.487.578-1.729c-.008-1.013-.578-1.574-.578-1.574a2.206 2.206 0 00-1.81-.644c-1.619-.036-1.859-1.304-1.402-3.694.168-.424.241-.878.226-1.332a3.408 3.408 0 00-2.125-3.287c-.039-.017-.078-.03-.118-.046a1.51 1.51 0 00-.134-.046 3.407 3.407 0 00-3.994 1.449c-.815.895-1.184 1.438-2.022 1.438-.797 0-1.208-.543-2.022-1.438a3.404 3.404 0 00-4.127-1.404c-.04.016-.079.029-.119.046A3.407 3.407 0 003.59 8.932c-.016.454.058.908.225 1.332.457 2.391.217 3.658-1.401 3.694-.793-.085-1.385.242-1.983.841-.6.598-.55 2.2 0 2.899.399.509.94.861 1.594.943");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cp($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mendeley" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mendeley extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cp, create_fragment$cp, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mercedes.svelte generated by Svelte v3.23.2 */

        function create_fragment$cq(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.005 0c6.623 0 12 5.377 12 12s-5.377 12-12 12-12-5.377-12-12 5.377-12 12-12zM3.25 17.539a10.357 10.357 0 0 0 8.755 4.821c3.681 0 6.917-1.924 8.755-4.821l-8.755-3.336-8.755 3.336zm10.663-6.641l7.267 5.915A10.306 10.306 0 0 0 22.365 12c0-5.577-4.417-10.131-9.94-10.352l1.488 9.25zm-2.328-9.25C6.062 1.869 1.645 6.423 1.645 12c0 1.737.428 3.374 1.185 4.813l7.267-5.915 1.488-9.25z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cq($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mercedes" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mercedes extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cq, create_fragment$cq, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Messenger.svelte generated by Svelte v3.23.2 */

        function create_fragment$cr(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 11.64C0 4.95 5.24 0 12 0s12 4.95 12 11.64-5.24 11.64-12 11.64c-1.21 0-2.38-.16-3.47-.46a.96.96 0 0 0-.64.05L5.5 23.92a.96.96 0 0 1-1.35-.85l-.07-2.14a.97.97 0 0 0-.32-.68A11.39 11.39 0 0 1 0 11.64zm8.32-2.19l-3.52 5.6c-.35.53.32 1.14.82.75l3.79-2.87c.26-.2.6-.2.87 0l2.8 2.1c.84.63 2.04.4 2.6-.48l3.52-5.6c.35-.53-.32-1.13-.82-.75l-3.79 2.87c-.25.2-.6.2-.86 0l-2.8-2.1a1.8 1.8 0 0 0-2.61.48z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cr($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Messenger" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Messenger extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cr, create_fragment$cr, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Meteor.svelte generated by Svelte v3.23.2 */

        function create_fragment$cs(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 .234l21.912 20.537s.412.575-.124 1.151c-.535.576-1.236.083-1.236.083L0 .234zm6.508 2.058l17.01 15.638s.413.576-.123 1.152c-.534.576-1.235.083-1.235.083L6.508 2.292zM1.936 6.696l17.01 15.638s.412.576-.123 1.152-1.235.082-1.235.082L1.936 6.696zm10.073-2.635l11.886 10.927s.287.401-.087.805-.863.058-.863.058L12.009 4.061zm-8.567 7.737l11.886 10.926s.285.4-.088.803c-.375.403-.863.059-.863.059L3.442 11.798zm14.187-5.185l5.426 4.955s.142.188-.044.377c-.185.188-.428.027-.428.027l-4.954-5.358v-.001zM6.178 17.231l5.425 4.956s.144.188-.042.377-.427.026-.427.026l-4.956-5.359z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cs($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Meteor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Meteor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cs, create_fragment$cs, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Metrodelaciudaddemexico.svelte generated by Svelte v3.23.2 */

        function create_fragment$ct(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3.965 8.704V24H.008V6.864h2.097c1.066 0 1.86.774 1.86 1.84m2.366-1.84c.268.521.521 1.315.521 1.84V24h3.685V8.704a1.784 1.784 0 0 0-1.84-1.84M17.4 24V8.704a1.795 1.795 0 0 0-1.844-1.84h-2.382c.269.521.269 1.315.269 1.84V24M.008 3.953V0h15.549c4.75 0 8.435 3.953 8.435 8.704V24h-3.685V8.704a4.735 4.735 0 0 0-4.75-4.75z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ct($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Metro de la Ciudad de México" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Metrodelaciudaddemexico extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ct, create_fragment$ct, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Metrodemadrid.svelte generated by Svelte v3.23.2 */

        function create_fragment$cu(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 4.74L0 12l12 7.26L24 12 12 4.74zm0 2.905l3.45 2.087h-6.9L12 7.645zM7.2 10.64h.786l.606 1.77.564-1.77h.79v2.568h-.524l-.006-1.82-.627 1.82h-.432l-.632-1.805v1.805h-.526V10.64zm5.275.148h.51l.001.559h.371v.343h-.37v.92c0 .174.041.215.212.215a.69.69 0 0 0 .158-.014v.4a1.907 1.907 0 0 1-.298.018c-.313 0-.584-.073-.584-.443V11.69h-.307v-.341h.307v-.559zm5.222.303l1.5.908-1.5.908v-1.816zM6.3 11.094v1.812L4.8 12l1.498-.906zm8.455.203a.345.345 0 0 1 .11.017v.475a.81.81 0 0 0-.18-.018c-.37 0-.5.27-.5.598v.842h-.508v-1.863h.48l.006.345a.653.653 0 0 1 .592-.396zm1.127 0c.58 0 .957.39.957.982s-.377.98-.957.98c-.578 0-.953-.39-.953-.98 0-.593.375-.98.953-.982zm-4.738.002c.628 0 .932.532.896 1.103v.004h-1.334c.015.325.172.473.455.473.204 0 .368-.126.4-.24h.446c-.141.439-.445.625-.863.625-.581 0-.942-.407-.942-.98 0-.56.382-.985.942-.985zm-.012.383c-.322 0-.416.252-.422.396h.824c-.045-.262-.156-.396-.402-.396zm4.75 0c-.343 0-.445.3-.445.597 0 .295.102.596.445.596.349 0 .45-.3.45-.596 0-.3-.104-.597-.45-.597zM8.55 14.268h6.9L12 16.355l-3.451-2.087z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cu($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Metro de Madrid" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Metrodemadrid extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cu, create_fragment$cu, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Metrodeparis.svelte generated by Svelte v3.23.2 */

        function create_fragment$cv(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.708 18.099c-.202.152-.44.228-.714.228-.242 0-.471-.076-.688-.228-.218-.152-.327-.373-.327-.66V9.626h-.023l-2.984 6.057a1.453 1.453 0 0 1-.385.505c-.145.112-.337.168-.578.168-.24 0-.433-.056-.577-.168a1.442 1.442 0 0 1-.385-.505L8.063 9.627H8.04v7.811a.748.748 0 0 1-.339.66 1.23 1.23 0 0 1-.7.229c-.275 0-.508-.076-.702-.228-.193-.152-.29-.373-.29-.66V6.958c0-.304.096-.589.29-.853.192-.264.537-.396 1.036-.396.37 0 .655.084.856.252.2.169.38.421.542.757l3.277 6.754h.024l3.253-6.754c.16-.336.342-.588.543-.757.2-.168.485-.252.855-.252.498 0 .844.132 1.036.396.193.265.29.55.29.854v10.478c0 .288-.101.509-.302.66zm-5.732 4.156c5.658 0 10.279-4.64 10.279-10.327 0-5.62-4.603-10.183-10.279-10.183-5.674 0-10.23 4.536-10.23 10.183 0 5.59 4.715 10.327 10.23 10.327zm0 1.745C5.495 24 0 18.48 0 11.928 0 5.315 5.34 0 11.976 0 18.613 0 24 5.34 24 11.928 24 18.577 18.6 24 11.976 24Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cv($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Métro de Paris" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Metrodeparis extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cv, create_fragment$cv, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/MicroBit.svelte generated by Svelte v3.23.2 */

        function create_fragment$cw(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.857 5.143A6.865 6.865 0 000 12a6.864 6.864 0 006.857 6.857h10.287A6.863 6.863 0 0024 12c0-3.781-3.075-6.857-6.856-6.857zm0 2.744h10.287A4.117 4.117 0 0121.257 12a4.119 4.119 0 01-4.113 4.116H6.857A4.12 4.12 0 012.743 12a4.118 4.118 0 014.114-4.113zm10.168 2.729a1.385 1.385 0 10.003 2.77 1.385 1.385 0 00-.003-2.77zm-10.166 0a1.385 1.385 0 10-.003 2.771 1.385 1.385 0 00.003-2.77Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cw($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "micro:bit" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class MicroBit extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cw, create_fragment$cw, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/MicroDotBlog.svelte generated by Svelte v3.23.2 */

        function create_fragment$cx(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.4 17.7c-2 2.6-1 4.8-.3 5.9.3.4-.1.4-.3.4a6 6 0 0 1-4-2.7c-.2-.1-.3-.2-.5-.1-1.4.4-2.8.7-4.3.6C5.4 21.8 0 17 0 11 0 5 5.4 0 12 0s12 4.9 12 11c0 2.5-1 4.8-2.6 6.7zM12 14l3.2 2.2a.4.4 0 0 0 .6-.4L14.6 12l3.1-2.4a.4.4 0 0 0-.2-.6h-3.9l-1.3-3.8a.4.4 0 0 0-.6 0L10.4 9h-4a.4.4 0 0 0-.1.7l3 2.4-1 3.7a.4.4 0 0 0 .5.4L12 14z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cx($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Micro.blog" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class MicroDotBlog extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cx, create_fragment$cx, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microgenetics.svelte generated by Svelte v3.23.2 */

        function create_fragment$cy(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.008 6c2.595 0 4.31 1.263 5.583 2.726l.248.293c.082.101.164.2.242.3.434.569.809 1.146 1.17 1.674.24.356.465.693.689 1.008l.227.32c.074.105.148.211.24.31.928 1.171 1.889 1.9 3.283 1.991.195-.845.301-1.721.301-2.621s-.105-1.776-.301-2.621c-1.395.091-2.355.819-3.301 1.991-.18-.246-.357-.51-.555-.796-.375-.566-.809-1.208-1.32-1.845 1.006-1.169 2.25-2.175 3.932-2.557C20.453 2.49 16.523 0 12.008 0c-4.5 0-8.44 2.49-10.49 6.173 1.681.384 2.923 1.388 3.931 2.556.086.09.168.18.249.285l.237.3c.479.615.914 1.245 1.305 1.845l.555.826.24.329c.074.104.165.21.239.315 1.051 1.439 2.115 2.43 3.75 2.43 1.65 0 2.701-.99 3.765-2.43l.375.555c.451.66.932 1.38 1.455 2.055-1.273 1.471-3 2.73-5.595 2.73-2.594 0-4.304-1.275-5.579-2.73l-.24-.3-.24-.3c-.435-.57-.81-1.154-1.17-1.68-.239-.36-.465-.69-.689-1.006l-.226-.33c-.074-.104-.149-.21-.24-.314C2.664 10.2 1.703 9.465.309 9.375c-.195.849-.3 1.725-.3 2.625s.102 1.776.29 2.621c1.398-.091 2.355-.819 3.295-1.991.172.246.354.51.544.796.375.566.806 1.208 1.313 1.845-1.009 1.169-2.253 2.175-3.93 2.557C3.566 21.51 7.494 24 12.008 24c4.515 0 8.441-2.49 10.49-6.173-1.68-.384-2.922-1.388-3.93-2.556-.086-.09-.17-.18-.25-.285l-.236-.3c-.48-.615-.916-1.245-1.305-1.845L16.223 12c-.074-.111-.154-.225-.23-.33-.078-.111-.154-.219-.232-.325-1.051-1.44-2.1-2.431-3.75-2.431s-2.699.99-3.75 2.431l-.375-.56c-.436-.669-.916-1.38-1.456-2.059C7.703 7.263 9.383 6 12.008 6");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cy($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microgenetics" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microgenetics extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cy, create_fragment$cy, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoft.svelte generated by Svelte v3.23.2 */

        function create_fragment$cz(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zm12.6 0H12.6V0H24v11.4z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cz($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoft extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cz, create_fragment$cz, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftacademic.svelte generated by Svelte v3.23.2 */

        function create_fragment$cA(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.056 23.992c-4.018-2.966-10.695-8.022-19-9.125l3.55-3.472c10.19 3.935 15.45 12.597 15.45 12.597zM.48 18.437l2.77-2.217C11.334 18.208 18.19 24 18.19 24 15.303 22.37 7.113 18.36.48 18.437zm2.543-8.042l9.25-8.23 1.992 1.153L9.78 8.41c4.83 3.983 10.19 8.22 9.71 15.127C14.734 16.799 9.127 11.98 3.024 10.395zm7.907-2.131L18.035 0c3.791 3.1 5.91 7.913 5.91 10.513-.309 3.322-3.558 11.35-3.858 12.236-.225-2.007 1.434-5.56-9.157-14.485z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cA($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Academic" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftacademic extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cA, create_fragment$cA, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftaccess.svelte generated by Svelte v3.23.2 */

        function create_fragment$cB(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15 .75q1.605 0 3.21.176.282.035.815.111.534.076 1.178.211.645.135 1.318.328.674.194 1.225.457.55.264.902.598.352.334.352.744v17.25q0 .41-.352.744-.351.334-.902.598-.55.263-1.225.457-.673.193-1.318.328-.644.135-1.178.217-.533.082-.814.105-1.606.176-3.211.176-1.617 0-3.21-.176-.282-.023-.815-.105-.534-.082-1.178-.217-.645-.135-1.318-.328-.674-.194-1.225-.457-.55-.264-.902-.598Q6 21.035 6 20.625V18H.996q-.41 0-.703-.293T0 17.004V6.996q0-.41.293-.703T.996 6H6V3.375q0-.41.352-.744.351-.334.902-.598.55-.263 1.225-.457.673-.193 1.318-.328.644-.135 1.178-.21.533-.077.814-.112Q13.383.75 15 .75zm0 1.5q-.762 0-1.7.053-.937.052-1.904.181-.966.13-1.88.346-.914.217-1.618.545.727.34 1.635.557.908.216 1.863.34.956.123 1.887.175.932.053 1.717.053t1.717-.053q.931-.052 1.887-.176.955-.123 1.863-.34.908-.216 1.635-.556-.704-.328-1.618-.545-.914-.217-1.88-.346-.967-.129-1.905-.181Q15.762 2.25 15 2.25zM4.723 14.145h2.543l.597 1.793h2.004l-2.87-7.876H5.038l-2.906 7.876h1.992zM22.5 20.379v-3.55q-.773.339-1.729.562-.955.222-1.962.357-1.008.135-1.993.193Q15.832 18 15 18q-.855 0-1.705-.053-.85-.052-1.693-.146-.27.199-.598.199H7.5v2.379q.34.27.914.48.574.211 1.272.364.697.152 1.459.252.761.1 1.482.164.72.064 1.342.088.62.023 1.031.023.41 0 1.031-.023.621-.024 1.342-.088.72-.065 1.482-.164.762-.1 1.46-.252.697-.153 1.27-.364.575-.21.915-.48zm0-5.227v-4.324q-.773.34-1.729.563-.955.222-1.962.357-1.008.135-1.993.193Q15.832 12 15 12q-.75 0-1.5-.041t-1.5-.111v4.5q.75.082 1.5.117t1.5.035q.434 0 1.055-.023.62-.024 1.33-.088.709-.065 1.459-.164.75-.1 1.441-.252.692-.153 1.272-.352.58-.2.943-.469zm0-6V4.828q-.773.34-1.729.563-.955.222-1.962.357-1.008.135-1.993.193Q15.832 6 15 6q-.832 0-1.816-.059-.985-.058-1.993-.193-1.007-.135-1.962-.357-.956-.223-1.729-.563V6h3.504q.41 0 .703.293t.293.703v3.352q.75.082 1.5.117t1.5.035q.434 0 1.055-.023.62-.024 1.33-.088.709-.065 1.459-.164.75-.1 1.441-.252.692-.153 1.266-.352.574-.2.949-.469zm-17.32 3.47l.808-2.45.785 2.45Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cB($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Access" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftaccess extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cB, create_fragment$cB, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftazure.svelte generated by Svelte v3.23.2 */

        function create_fragment$cC(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.483 21.3H24L14.025 4.013l-3.038 8.347 5.836 6.938L5.483 21.3zM13.23 2.7L6.105 8.677 0 19.253h5.505v.014L13.23 2.7z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cC($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Azure" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftazure extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cC, create_fragment$cC, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftedge.svelte generated by Svelte v3.23.2 */

        function create_fragment$cD(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.86 17.86q.14 0 .25.12.1.13.1.25t-.11.33l-.32.46-.43.53-.44.5q-.21.25-.38.42l-.22.23q-.58.53-1.34 1.04-.76.51-1.6.91-.86.4-1.74.64t-1.67.24q-.9 0-1.69-.28-.8-.28-1.48-.78-.68-.5-1.22-1.17-.53-.66-.92-1.44-.38-.77-.58-1.6-.2-.83-.2-1.67 0-1 .32-1.96.33-.97.87-1.8.14.95.55 1.77.41.82 1.02 1.5.6.68 1.38 1.21.78.54 1.64.9.86.36 1.77.56.92.2 1.8.2 1.12 0 2.18-.24 1.06-.23 2.06-.72l.2-.1.2-.05zm-15.5-1.27q0 1.1.27 2.15.27 1.06.78 2.03.51.96 1.24 1.77.74.82 1.66 1.4-1.47-.2-2.8-.74-1.33-.55-2.48-1.37-1.15-.83-2.08-1.9-.92-1.07-1.58-2.33T.36 14.94Q0 13.54 0 12.06q0-.81.32-1.49.31-.68.83-1.23.53-.55 1.2-.96.66-.4 1.35-.66.74-.27 1.5-.39.78-.12 1.55-.12.7 0 1.42.1.72.12 1.4.35.68.23 1.32.57.63.35 1.16.83-.35 0-.7.07-.33.07-.65.23v-.02q-.63.28-1.2.74-.57.46-1.05 1.04-.48.58-.87 1.26-.38.67-.65 1.39-.27.71-.42 1.44-.15.72-.15 1.38zM11.96.06q1.7 0 3.33.39 1.63.38 3.07 1.15 1.43.77 2.62 1.93 1.18 1.16 1.98 2.7.49.94.76 1.96.28 1 .28 2.08 0 .89-.23 1.7-.24.8-.69 1.48-.45.68-1.1 1.22-.64.53-1.45.88-.54.24-1.11.36-.58.13-1.16.13-.42 0-.97-.03-.54-.03-1.1-.12-.55-.1-1.05-.28-.5-.19-.84-.5-.12-.09-.23-.24-.1-.16-.1-.33 0-.15.16-.35.16-.2.35-.5.2-.28.36-.68.16-.4.16-.95 0-1.06-.4-1.96-.4-.91-1.06-1.64-.66-.74-1.52-1.28-.86-.55-1.79-.89-.84-.3-1.72-.44-.87-.14-1.76-.14-1.55 0-3.06.45T.94 7.55q.71-1.74 1.81-3.13 1.1-1.38 2.52-2.35Q6.68 1.1 8.37.58q1.7-.52 3.58-.52Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cD($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Edge" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftedge extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cD, create_fragment$cD, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftexcel.svelte generated by Svelte v3.23.2 */

        function create_fragment$cE(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23 1.5q.41 0 .7.3.3.29.3.7v19q0 .41-.3.7-.29.3-.7.3H7q-.41 0-.7-.3-.3-.29-.3-.7V18H1q-.41 0-.7-.3-.3-.29-.3-.7V7q0-.41.3-.7Q.58 6 1 6h5V2.5q0-.41.3-.7.29-.3.7-.3zM6 13.28l1.42 2.66h2.14l-2.38-3.87 2.34-3.8H7.46l-1.3 2.4-.05.08-.04.09-.64-1.28-.66-1.29H2.59l2.27 3.82-2.48 3.85h2.16zM14.25 21v-3H7.5v3zm0-4.5v-3.75H12v3.75zm0-5.25V7.5H12v3.75zm0-5.25V3H7.5v3zm8.25 15v-3h-6.75v3zm0-4.5v-3.75h-6.75v3.75zm0-5.25V7.5h-6.75v3.75zm0-5.25V3h-6.75v3Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cE($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Excel" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftexcel extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cE, create_fragment$cE, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftexchange.svelte generated by Svelte v3.23.2 */

        function create_fragment$cF(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 7.875q0 .293-.117.58t-.317.486L20.496 12l3.07 3.059q.2.199.317.486.117.287.117.58V21q0 .316-.117.586-.117.27-.322.475-.206.205-.475.322-.27.117-.586.117h-4.875q-.293 0-.58-.117t-.486-.317l-3.059-3.07-3.059 3.07q-.199.2-.486.317-.287.117-.58.117H4.5q-.316 0-.586-.117-.27-.117-.475-.322-.205-.206-.322-.475Q3 21.316 3 21v-3H.996q-.41 0-.703-.293T0 17.004V6.996q0-.41.293-.703T.996 6H3V3q0-.316.117-.586.117-.27.322-.475.206-.205.475-.322.27-.117.586-.117h4.875q.293 0 .58.117t.486.317l3.059 3.07 3.059-3.07q.199-.2.486-.317.287-.117.58-.117H22.5q.316 0 .586.117.27.117.475.322.205.206.322.475Q24 2.684 24 3zM4.5 3v3h6.504q.41 0 .703.293t.293.703V5.625L9.375 3zM3.375 15.938h5.25v-1.583h-3.41v-1.593h3.047V11.18H5.215V9.656H8.46V8.062H3.375zm19.125.187L19.875 13.5h-3.691q-.247 0-.463.094-.217.094-.375.252-.159.158-.252.375-.094.216-.094.463v3.691L17.625 21H22.5zm0-8.25V3h-4.875L13.5 7.125v2.191q0 .774-.404 1.424-.405.65-1.096.99v5.274q0 .41-.293.703t-.703.293H4.5v3h4.875l4.125-4.125v-2.191q0-.563.21-1.05.212-.486.575-.849t.85-.574Q15.62 12 16.184 12h2.191Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cF($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Exchange" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftexchange extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cF, create_fragment$cF, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftoffice.svelte generated by Svelte v3.23.2 */

        function create_fragment$cG(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.53 4.306V19.67q0 .807-.471 1.433-.472.627-1.253.85l-6.888 1.974q-.136.037-.291.055-.155.019-.292.019-.397 0-.72-.105-.322-.106-.657-.292l-4.505-2.544q-.248-.137-.391-.366-.143-.23-.143-.515 0-.434.304-.738.304-.305.739-.305h5.832V4.964l-4.38 1.563q-.534.187-.857.658-.322.472-.322 1.03v8.079q0 .496-.248.912-.249.416-.683.651l-2.072 1.13q-.286.148-.571.148-.497 0-.844-.347-.348-.347-.348-.844V6.564q0-.62.33-1.19.328-.572.874-.882L11.07.285q.248-.136.534-.21.285-.075.57-.075.212 0 .38.031.167.031.365.093l6.888 1.899q.384.111.7.329.317.217.547.52.23.305.353.67.125.367.125.764zM19.943 19.67V4.306q0-.273-.161-.478-.162-.204-.422-.279l-3.388-.93q-.397-.112-.794-.23-.397-.118-.794-.217v19.681l4.976-1.427q.26-.074.422-.28.161-.204.161-.477Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cG($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Office" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftoffice extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cG, create_fragment$cG, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftonedrive.svelte generated by Svelte v3.23.2 */

        function create_fragment$cH(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.453 9.95q.961.058 1.787.468.826.41 1.442 1.066.615.657.966 1.512.352.856.352 1.816 0 1.008-.387 1.893-.386.885-1.049 1.547-.662.662-1.546 1.049-.885.387-1.893.387H6q-1.242 0-2.332-.475-1.09-.475-1.904-1.29-.815-.814-1.29-1.903Q0 14.93 0 13.688q0-.985.31-1.887.311-.903.862-1.658.55-.756 1.324-1.325.774-.568 1.711-.861.434-.129.85-.187.416-.06.861-.082h.012q.515-.786 1.207-1.413.691-.627 1.5-1.066.808-.44 1.705-.668.896-.229 1.845-.229 1.278 0 2.456.417 1.177.416 2.144 1.16.967.744 1.658 1.78.692 1.038 1.008 2.28zm-7.265-4.137q-1.325 0-2.52.544-1.195.545-2.04 1.565.446.117.85.299.405.181.792.416l4.78 2.86 2.731-1.15q.27-.117.545-.204.276-.088.58-.147-.293-.937-.855-1.705-.563-.768-1.319-1.318-.755-.551-1.658-.856-.902-.304-1.886-.304zM2.414 16.395l9.914-4.184-3.832-2.297q-.586-.351-1.23-.539-.645-.188-1.325-.188-.914 0-1.722.364-.809.363-1.412.978-.604.616-.955 1.436-.352.82-.352 1.723 0 .703.234 1.423.235.721.68 1.284zm16.711 1.793q.563 0 1.078-.176.516-.176.961-.516l-7.23-4.324-10.301 4.336q.527.328 1.13.504.604.175 1.237.175zm3.012-1.852q.363-.727.363-1.523 0-.774-.293-1.407t-.791-1.072q-.498-.44-1.166-.68-.668-.24-1.406-.24-.422 0-.838.1t-.815.252q-.398.152-.785.334-.386.181-.761.345Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cH($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft OneDrive" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftonedrive extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cH, create_fragment$cH, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftonenote.svelte generated by Svelte v3.23.2 */

        function create_fragment$cI(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23 1.5Q23.41 1.5 23.7 1.8 24 2.09 24 2.5V21.5Q24 21.91 23.7 22.2 23.41 22.5 23 22.5H7Q6.59 22.5 6.3 22.2 6 21.91 6 21.5V18H1Q0.59 18 0.3 17.7 0 17.41 0 17V7Q0 6.59 0.3 6.3 0.58 6 1 6H6V2.5Q6 2.09 6.3 1.8 6.59 1.5 7 1.5ZM4.56 11 7.39 15.93H9.18V8.07H7.44V13.1L4.71 8.07H2.82V15.93H4.56ZM22.5 21V18H19.5V21ZM22.5 16.5V13.5H19.5V16.5ZM22.5 12V9H19.5V12ZM22.5 7.5V3H7.5V6H11Q11.41 6 11.7 6.3 12 6.59 12 7V17Q12 17.41 11.7 17.7 11.41 18 11 18H7.5V21H18V7.5Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cI($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft OneNote" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftonenote extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cI, create_fragment$cI, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftoutlook.svelte generated by Svelte v3.23.2 */

        function create_fragment$cJ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.88 12.04q0 .45-.11.87-.1.41-.33.74-.22.33-.58.52-.37.2-.87.2t-.85-.2q-.35-.21-.57-.55-.22-.33-.33-.75-.1-.42-.1-.86t.1-.87q.1-.43.34-.76.22-.34.59-.54.36-.2.87-.2t.86.2q.35.21.57.55.22.34.31.77.1.43.1.88zM24 12v9.38q0 .46-.33.8-.33.32-.8.32H7.13q-.46 0-.8-.33-.32-.33-.32-.8V18H1q-.41 0-.7-.3-.3-.29-.3-.7V7q0-.41.3-.7Q.58 6 1 6h6.5V2.55q0-.44.3-.75.3-.3.75-.3h12.9q.44 0 .75.3.3.3.3.75V10.85l1.24.72h.01q.1.07.18.18.07.12.07.25zm-6-8.25v3h3v-3zm0 4.5v3h3v-3zm0 4.5v1.83l3.05-1.83zm-5.25-9v3h3.75v-3zm0 4.5v3h3.75v-3zm0 4.5v2.03l2.41 1.5 1.34-.8v-2.73zM9 3.75V6h2l.13.01.12.04v-2.3zM5.98 15.98q.9 0 1.6-.3.7-.32 1.19-.86.48-.55.73-1.28.25-.74.25-1.61 0-.83-.25-1.55-.24-.71-.71-1.24t-1.15-.83q-.68-.3-1.55-.3-.92 0-1.64.3-.71.3-1.2.85-.5.54-.75 1.3-.25.74-.25 1.63 0 .85.26 1.56.26.72.74 1.23.48.52 1.17.81.69.3 1.56.3zM7.5 21h12.39L12 16.08V17q0 .41-.3.7-.29.3-.7.3H7.5zm15-.13v-7.24l-5.9 3.54Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cJ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Outlook" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftoutlook extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cJ, create_fragment$cJ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftpowerpoint.svelte generated by Svelte v3.23.2 */

        function create_fragment$cK(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.5 1.5q1.453 0 2.795.375 1.342.375 2.508 1.06 1.166.686 2.12 1.641.956.955 1.641 2.121.686 1.166 1.061 2.508Q24 10.547 24 12q0 1.453-.375 2.795-.375 1.342-1.06 2.508-.686 1.166-1.641 2.12-.955.956-2.121 1.641-1.166.686-2.508 1.061-1.342.375-2.795.375-1.29 0-2.52-.305-1.23-.304-2.337-.884-1.108-.58-2.063-1.418-.955-.838-1.693-1.893H.997q-.411 0-.704-.293T0 17.004V6.996q0-.41.293-.703T.996 6h3.89q.739-1.055 1.694-1.893.955-.837 2.063-1.418 1.107-.58 2.337-.884Q12.21 1.5 13.5 1.5zm.75 1.535v8.215h8.215q-.14-1.64-.826-3.076-.686-1.436-1.782-2.531-1.095-1.096-2.537-1.782-1.441-.685-3.07-.826zm-5.262 7.57q0-.68-.228-1.166-.229-.486-.627-.79-.399-.305-.938-.446-.539-.14-1.172-.14H2.848v7.863h1.84v-2.742H5.93q.574 0 1.119-.17t.978-.493q.434-.322.698-.802.263-.48.263-1.114zM13.5 21q1.172 0 2.262-.287t2.056-.82q.967-.534 1.776-1.278.808-.744 1.418-1.664.61-.92.984-1.986.375-1.067.469-2.227h-9.703V3.035q-1.735.14-3.27.908T6.797 6h4.207q.41 0 .703.293t.293.703v10.008q0 .41-.293.703t-.703.293H6.797q.644.715 1.412 1.271.768.557 1.623.944.855.387 1.781.586Q12.54 21 13.5 21zM5.812 9.598q.575 0 .915.228.34.229.34.838 0 .27-.124.44-.123.17-.31.275-.188.105-.422.146-.234.041-.445.041H4.687V9.598Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cK($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft PowerPoint" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftpowerpoint extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cK, create_fragment$cK, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftsharepoint.svelte generated by Svelte v3.23.2 */

        function create_fragment$cL(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 13.5q0 1.242-.475 2.332-.474 1.09-1.289 1.904-.814.815-1.904 1.29-1.09.474-2.332.474-.762 0-1.523-.2-.106.997-.557 1.858-.451.862-1.154 1.494-.704.633-1.606.99-.902.358-1.91.358-1.09 0-2.045-.416-.955-.416-1.664-1.125-.709-.709-1.125-1.664Q6 19.84 6 18.75q0-.188.018-.375.017-.188.04-.375H.997q-.41 0-.703-.293T0 17.004V6.996q0-.41.293-.703T.996 6h3.54q.14-1.277.726-2.373.586-1.096 1.488-1.904Q7.652.914 8.807.457 9.96 0 11.25 0q1.395 0 2.625.533T16.02 1.98q.914.915 1.447 2.145T18 6.75q0 .188-.012.375-.011.188-.035.375 1.242 0 2.344.469 1.101.468 1.928 1.277.826.809 1.3 1.904Q24 12.246 24 13.5zm-12.75-12q-.973 0-1.857.34-.885.34-1.577.943-.691.604-1.154 1.43Q6.2 5.039 6.06 6h4.945q.41 0 .703.293t.293.703v4.945l.21-.035q.212-.75.61-1.424.399-.673.944-1.218.545-.545 1.213-.944.668-.398 1.43-.61.093-.503.093-.96 0-1.09-.416-2.045-.416-.955-1.125-1.664-.709-.709-1.664-1.125Q12.34 1.5 11.25 1.5zM6.117 15.902q.54 0 1.06-.111.522-.111.932-.37.41-.257.662-.679.252-.422.252-1.055 0-.632-.263-1.054-.264-.422-.662-.703-.399-.282-.856-.463l-.855-.34q-.399-.158-.662-.334-.264-.176-.264-.445 0-.2.14-.323.141-.123.335-.193.193-.07.404-.094.21-.023.351-.023.598 0 1.055.152.457.153.95.457V8.543q-.282-.082-.522-.14-.24-.06-.475-.1-.234-.041-.486-.059-.252-.017-.557-.017-.515 0-1.054.117-.54.117-.979.375-.44.258-.715.68-.275.421-.275 1.03 0 .598.263.997.264.398.663.68.398.28.855.474l.856.363q.398.17.662.358.263.187.263.457 0 .222-.123.351-.123.13-.31.2-.188.07-.393.087-.205.018-.369.018-.703 0-1.248-.234-.545-.235-1.107-.621v1.875q1.195.468 2.472.468zM11.25 22.5q.773 0 1.453-.293t1.19-.803q.51-.51.808-1.195.299-.686.299-1.459 0-.668-.223-1.277-.222-.61-.62-1.096-.4-.486-.95-.826-.55-.34-1.207-.48v1.933q0 .41-.293.703t-.703.293H7.57q-.07.375-.07.75 0 .773.293 1.459t.803 1.195q.51.51 1.195.803.686.293 1.459.293zM18 18q.926 0 1.746-.352.82-.351 1.436-.966.615-.616.966-1.43.352-.815.352-1.752 0-.926-.352-1.746-.351-.82-.966-1.436-.616-.615-1.436-.966Q18.926 9 18 9t-1.74.357q-.815.358-1.43.973t-.973 1.43q-.357.814-.357 1.74 0 .129.006.258t.017.258q.551.27 1.02.65t.838.855q.369.475.627 1.026.258.55.387 1.148Q17.18 18 18 18Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cL($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft SharePoint" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftsharepoint extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cL, create_fragment$cL, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftsqlserver.svelte generated by Svelte v3.23.2 */

        function create_fragment$cM(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.724 2.505s-.08.127-.004.315c.046.116.186.256.34.404 0 0 1.615 1.576 1.813 1.804.895 1.033 1.284 2.05 1.32 3.453.022.9-.151 1.692-.573 2.613-.756 1.649-2.35 3.468-4.81 5.49l.36-.12c.233-.173.548-.359 1.292-.766 1.713-.936 3.636-1.798 5.999-2.686 3.399-1.277 8.99-2.776 12.172-3.263l.331-.051-.05-.08c-.292-.452-.49-.731-.73-1.027-.697-.863-1.542-1.567-2.577-2.146-1.422-.797-3.267-1.416-5.6-1.88a67.93 67.93 0 00-2.191-.375 209.29 209.29 0 01-3.924-.64c-.425-.075-1.06-.181-1.481-.272a9.404 9.404 0 01-.961-.258c-.268-.105-.645-.207-.726-.515zm.936.909c.003-.002.063.017.137.042.136.046.316.1.526.159.146.04.307.084.479.127.218.056.399.104.401.107.024.027.391 1.198.516 1.647.048.172.084.315.081.318a.789.789 0 01-.09-.14c-.424-.746-1.097-1.505-1.874-2.116a3.104 3.104 0 01-.176-.144zm1.79.494c.018-.001.099.012.195.034.619.136 1.725.35 2.435.47.119.02.216.04.216.047a.348.348 0 01-.098.062c-.119.06-.602.349-.763.457-.403.27-.766.559-1.03.821a5.4 5.4 0 01-.197.192c-.003 0-.022-.062-.041-.137a12.09 12.09 0 00-.65-1.779 1.801 1.801 0 01-.071-.165c0-.001 0-.002.004-.002zm3.147.598c.02.007.06.13.129.404a6.05 6.05 0 01.153 1.977l-.012.038-.187-.06c-.388-.124-1.02-.31-1.562-.46a6.625 6.625 0 01-.56-.17c0-.022.449-.471.642-.642.369-.326 1.362-1.098 1.397-1.087zm.25.036c.011-.01 1.504.248 2.182.378.506.097 1.237.25 1.281.269.022.008-.054.05-.297.16-.96.432-1.672.82-2.38 1.293-.186.124-.341.226-.344.226-.004 0-.006-.104-.006-.23 0-.69-.139-1.387-.391-1.976a.688.688 0 01-.045-.12zm3.86.764c.011.011-.038.306-.08.48-.132.54-.482 1.344-.914 2.099a2.26 2.26 0 01-.152.246 1.499 1.499 0 01-.219-.115c-.422-.247-.9-.48-1.425-.697a4.588 4.588 0 01-.278-.12c-.024-.022 1.143-.795 1.762-1.166.495-.297 1.292-.741 1.306-.727zm.276.043c.033 0 .695.18 1.037.283.853.255 1.837.614 2.475.904l.265.12-.187.043c-1.561.36-2.9.773-4.188 1.296-.107.044-.2.08-.207.08a.911.911 0 01.075-.185c.388-.823.638-1.687.703-2.42.006-.067.018-.121.027-.121zm-6.58 1.512c.01-.01.514.108.789.185.413.116 1.292.41 1.292.433 0 .004-.097.089-.215.188-.475.397-.934.813-1.483 1.343a5.27 5.27 0 01-.308.285c-.007 0-.01-.023-.006-.05.083-.611.065-1.395-.05-2.193a1.29 1.29 0 01-.02-.19zm10.61.01c.007.008-.234.385-.384.6-.22.314-.537.726-1.261 1.637l-.954 1.202a9.418 9.418 0 01-.269.333c-.003 0-.05-.066-.103-.146a7.584 7.584 0 00-1.47-1.625 9.59 9.59 0 00-.27-.218.427.427 0 01-.074-.063c0-.01.617-.274 1.088-.466a37.02 37.02 0 012.778-.99c.442-.135.912-.27.919-.264zm.278.073a.93.93 0 01.207.1 12.274 12.274 0 012.428 1.824c.194.19.667.683.66.687l-.363.029c-1.53.115-3.486.44-5.37.893-.128.03-.238.056-.246.056-.007 0 .133-.14.311-.312 1.107-1.063 1.611-1.734 2.205-2.934.088-.178.163-.333.166-.342h.002zm-8.088.83c.051.01.523.23.879.408.325.163.818.426.843.449.003.003-.17.093-.386.201-.683.342-1.268.664-1.878 1.037-.175.107-.32.194-.325.194-.015 0-.01-.013.088-.191a7.702 7.702 0 00.738-2.002c.014-.062.03-.1.041-.097zm-.475.084c.01.01-.112.46-.19.7a9.092 9.092 0 01-.835 1.808l-.09.147-.203-.197a2.671 2.671 0 00-.676-.5 1.009 1.009 0 01-.176-.102c0-.03.62-.593 1.098-.998.343-.29 1.064-.867 1.072-.858zm2.888 1.188l.177.115c.407.264.888.619 1.255.924.206.172.605.53.687.616l.044.047-.294.082a53.8 53.8 0 00-4.45 1.424c-.167.061-.31.112-.32.112-.021 0-.042.019.333-.326.96-.883 1.807-1.856 2.44-2.802zm-.759.19c.009.009-.492.71-.789 1.106-.356.473-.99 1.265-1.426 1.78a8.769 8.769 0 01-.346.397c-.01.003-.015-.05-.016-.133 0-.44-.112-.91-.308-1.308-.083-.168-.097-.208-.08-.224.068-.062 1.127-.666 1.794-1.023.459-.246 1.163-.604 1.171-.595zm-4.59 1.125a3.988 3.988 0 01.812.518c.008.005-.087.083-.21.172-.345.249-.87.644-1.173.886-.32.255-.331.263-.295.207.24-.367.36-.574.486-.84.113-.236.224-.516.304-.76a.675.675 0 01.077-.183zm1.223.96c.017-.003.04.028.139.175.207.31.366.722.407 1.058l.008.073-.497.192c-.89.346-1.711.687-2.266.94-.155.072-.428.202-.607.292-.179.09-.325.16-.325.156 0-.004.112-.089.25-.188 1.087-.79 2.025-1.654 2.732-2.519.075-.092.144-.172.153-.178a.016.016 0 01.006-.002zm-.564.14c.015.014-.401.484-.681.77-.7.715-1.396 1.275-2.256 1.821-.108.069-.206.13-.22.138-.023.014.008-.022.386-.434.238-.259.42-.474.628-.743.136-.177.162-.202.362-.346.537-.388 1.767-1.221 1.781-1.207zM9.925 0c-.08-.01-1.371.455-2.2.791-1.123.457-1.996.894-2.534 1.272-.2.14-.452.393-.488.49a.356.356 0 00-.021.123l.488.46 1.158.37L9.087 4l3.153.542.032-.27-.028-.005-.415-.066-.085-.148a27.702 27.702 0 01-1.177-2.325 12.264 12.264 0 01-.53-1.465C9.969.02 9.962.005 9.925 0zm-.061.186h.005c.003.003.017.105.032.225.062.508.176 1 .354 1.53.134.4.136.377-.024.332-.37-.103-2.032-.388-3.234-.555a8.796 8.796 0 01-.357-.053c-.015-.015.867-.477 1.258-.66.501-.232 1.867-.8 1.966-.819zM6.362 1.814l.141.048c.772.262 2.706.632 3.775.72.12.01.222.021.225.024.003.003-.1.058-.228.122-.515.258-1.083.573-1.476.819-.115.072-.22.13-.235.129a4.868 4.868 0 01-.17-.027l-.144-.023-.365-.355c-.641-.62-1.141-1.1-1.335-1.28zm-.143.114l.511.638c.282.35.564.699.626.774.063.075.111.138.108.14-.014.011-.74-.13-1.125-.219a8.532 8.532 0 01-.803-.212l-.2-.064.001-.049c.003-.245.312-.607.836-.976zm4.352.869c.015.001.032.032.077.131.124.272.51 1.008.603 1.15.03.047.08.05-.433-.033-1.23-.198-1.629-.265-1.629-.273a.36.36 0 01.083-.054 7.13 7.13 0 001.107-.767l.175-.147c.006-.005.012-.008.017-.007zm4.309 8.408l-4.808 1.568-4.18 1.846-1.17.31c-.298.282-.613.568-.948.86-.37.321-.716.612-.98.822a7.46 7.46 0 00-.953.945c-.332.414-.592.854-.704 1.193-.2.61-.103 1.228.285 1.798.495.728 1.48 1.468 2.625 1.972.585.256 1.57.588 2.31.774 1.233.312 3.614.65 4.926.7.266.01.62.01.637-.002.028-.019.233-.405.47-.89.806-1.646 1.389-3.19 1.703-4.508.19-.799.338-1.863.434-3.125.027-.354.037-1.533.016-1.934a13.564 13.564 0 00-.183-1.706.435.435 0 01-.012-.15c.014-.01.059-.025.65-.197zm-1.1.645c.045 0 .16 1.114.191 1.82.006.151.005.247-.004.247-.028 0-.615-.345-1.032-.606a28.716 28.716 0 01-1.162-.772c-.035-.028-.031-.029.266-.131.505-.174 1.704-.558 1.742-.558zm-2.448.803c.03 0 .115.047.315.172.75.47 1.766 1.035 2.2 1.225.136.06.151.036-.16.247-.662.45-1.486.892-2.497 1.342a7.59 7.59 0 01-.331.142.989.989 0 01.043-.2c.245-.905.383-1.82.387-2.554.002-.362.002-.364.037-.373h.006zm-.504.193c.021.022.006.834-.02 1.056a9.206 9.206 0 01-.418 1.837c-.014.017-.511-.468-.676-.66a4.918 4.918 0 01-.669-.973c-.082-.162-.214-.484-.202-.493.056-.04 1.971-.78 1.985-.767zm-2.375.936c.004 0 .008.001.01.004a.881.881 0 01.056.131c.116.315.376.782.602 1.08a6.247 6.247 0 001.017 1.06c.023.02.03.016-.562.24a48.53 48.53 0 01-2.294.8c-.327.106-.604.195-.615.2-.033.011-.023-.009.073-.158.427-.666 1.073-1.97 1.435-2.892.062-.16.122-.32.133-.356.015-.052.031-.07.08-.092a.149.149 0 01.065-.017zm-.728.3c.01.009-.174.398-.356.751-.351.686-.739 1.361-1.253 2.185l-.182.288c-.018.027-.026.018-.082-.094a3.307 3.307 0 01-.28-.842 3.39 3.39 0 01.02-1.083c.047-.227.045-.222.152-.276.462-.237 1.966-.942 1.981-.929zm6.268.255v.154a20.106 20.106 0 01-.255 2.992 9.362 9.362 0 01-1.898-.782c-.354-.194-.865-.507-.85-.522.003-.004.154-.083.334-.177.714-.37 1.395-.77 1.988-1.166.222-.148.555-.389.629-.454zM4.981 15.41c.015 0 .011.028-.012.161a4.137 4.137 0 00-.041.39c-.03.532.057.924.32 1.46.074.15.132.274.129.276-.027.023-2.43.726-3.186.933l-.435.12c-.027.008-.029.002-.02-.06.083-.533.49-1.232 1.058-1.82.378-.39.68-.622 1.195-.915a30.782 30.782 0 01.992-.545zm5.669 1.015c.002-.002.091.045.197.107.777.449 1.86.87 2.783 1.081l.084.02-.115.063c-.482.268-2.071.929-3.694 1.537a68.82 68.82 0 00-.513.194.314.314 0 01-.082.027c0-.004.067-.132.149-.286.456-.852.91-1.887 1.144-2.605.023-.073.044-.135.047-.138zm-.578.19a1.39 1.39 0 01-.063.169 23.534 23.534 0 01-1.261 2.54 9.009 9.009 0 01-.252.433c-.005 0-.114-.066-.244-.145-.77-.472-1.452-1.052-1.9-1.617l-.064-.08.332-.091a23.616 23.616 0 003.19-1.103c.142-.06.26-.109.262-.106zm3.59 1.253c.001 0 .002.001.002.003 0 .08-.183.828-.336 1.37-.128.453-.236.808-.435 1.437a8.533 8.533 0 01-.168.504 15.004 15.004 0 01-3-.841 7.964 7.964 0 01-.639-.283c-.006-.007.213-.11.486-.23 1.655-.721 3.369-1.543 3.955-1.896a.432.432 0 01.135-.064zm-8.287.283c.009.009-.454.671-1.1 1.576l-.587.823c-.097.139-.245.358-.329.488l-.153.236-.162-.137c-.191-.16-.525-.501-.677-.69-.312-.389-.523-.798-.607-1.174-.038-.174-.04-.262-.003-.273a176.26 176.26 0 011.934-.455l1.3-.305c.209-.05.382-.09.384-.089zm.465.178l.117.131a6.763 6.763 0 001.706 1.394c.115.066.202.124.195.128a281.967 281.967 0 01-4.33 1.53.858.858 0 01-.072-.048l-.067-.048.105-.152c.34-.493.768-1.035 1.705-2.162zm2.9 2.073c.003-.003.165.054.362.128.473.177.844.292 1.347.418.617.155 1.51.31 2.038.354.08.006.122.016.11.024-.025.016-.56.194-.953.318a258.526 258.526 0 01-4.636 1.363c-.035.007-.157-.025-.157-.04 0-.009.087-.119.193-.246a22.027 22.027 0 001.476-1.984 56.9 56.9 0 01.22-.335zm-.642.018c.005.005-.253.418-.706 1.132-.192.301-.409.645-.483.762-.075.118-.184.298-.242.4l-.107.185-.054-.014c-.13-.035-1.049-.36-1.291-.456-.301-.12-.615-.264-.846-.389-.289-.156-.655-.388-.627-.397l1.105-.302c1.592-.434 2.473-.683 3.05-.864.109-.033.199-.059.2-.057zm4.523 1.061h.006c.015.038-.575 1.67-.79 2.188-.049.116-.066.145-.092.143a55.54 55.54 0 01-1.433-.2c-.906-.138-2.423-.403-2.806-.49l-.089-.02.543-.122c1.164-.262 1.723-.403 2.29-.577a16.544 16.544 0 002.138-.824c.113-.052.21-.093.233-.098Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cM($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft SQL Server" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftsqlserver extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cM, create_fragment$cM, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftteams.svelte generated by Svelte v3.23.2 */

        function create_fragment$cN(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.625 8.127q-.55 0-1.025-.205-.475-.205-.832-.563-.358-.357-.563-.832Q18 6.053 18 5.502q0-.54.205-1.02t.563-.837q.357-.358.832-.563.474-.205 1.025-.205.54 0 1.02.205t.837.563q.358.357.563.837.205.48.205 1.02 0 .55-.205 1.025-.205.475-.563.832-.357.358-.837.563-.48.205-1.02.205zm0-3.75q-.469 0-.797.328-.328.328-.328.797 0 .469.328.797.328.328.797.328.469 0 .797-.328.328-.328.328-.797 0-.469-.328-.797-.328-.328-.797-.328zM24 10.002v5.578q0 .774-.293 1.46-.293.685-.803 1.194-.51.51-1.195.803-.686.293-1.459.293-.445 0-.908-.105-.463-.106-.85-.329-.293.95-.855 1.729-.563.78-1.319 1.336-.756.557-1.67.861-.914.305-1.898.305-1.148 0-2.162-.398-1.014-.399-1.805-1.102-.79-.703-1.312-1.664t-.674-2.086h-5.8q-.411 0-.704-.293T0 16.881V6.873q0-.41.293-.703t.703-.293h8.59q-.34-.715-.34-1.5 0-.727.275-1.365.276-.639.75-1.114.475-.474 1.114-.75.638-.275 1.365-.275t1.365.275q.639.276 1.114.75.474.475.75 1.114.275.638.275 1.365t-.275 1.365q-.276.639-.75 1.113-.475.475-1.114.75-.638.276-1.365.276-.188 0-.375-.024-.188-.023-.375-.058v1.078h10.875q.469 0 .797.328.328.328.328.797zM12.75 2.373q-.41 0-.78.158-.368.158-.638.434-.27.275-.428.639-.158.363-.158.773 0 .41.158.78.159.368.428.638.27.27.639.428.369.158.779.158.41 0 .773-.158.364-.159.64-.428.274-.27.433-.639.158-.369.158-.779 0-.41-.158-.773-.159-.364-.434-.64-.275-.275-.639-.433-.363-.158-.773-.158zM6.937 9.814h2.25V7.94H2.814v1.875h2.25v6h1.875zm10.313 7.313v-6.75H12v6.504q0 .41-.293.703t-.703.293H8.309q.152.809.556 1.5.405.691.985 1.19.58.497 1.318.779.738.281 1.582.281.926 0 1.746-.352.82-.351 1.436-.966.615-.616.966-1.43.352-.815.352-1.752zm5.25-1.547v-5.203h-3.75v6.855q.305.305.691.452.387.146.809.146.469 0 .879-.176.41-.175.715-.48.304-.305.48-.715t.176-.879Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cN($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Teams" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftteams extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cN, create_fragment$cN, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftvisio.svelte generated by Svelte v3.23.2 */

        function create_fragment$cO(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M24 7.609v9.556q0 .424-.302.726-.303.303-.726.303h-5.19q-.072 1.149-.556 2.135-.484.986-1.264 1.717-.78.732-1.803 1.15-1.022.417-2.159.417-1.016 0-1.96-.35-.943-.352-1.705-.969-.762-.617-1.295-1.47-.532-.852-.713-1.856H1.028q-.423 0-.726-.303Q0 18.363 0 17.94V7.609q0-.424.302-.726.303-.302.726-.302h5.238q-.072-.182-.072-.387 0-.424.302-.726L11.274.69q.303-.303.726-.303t.726.303l4.778 4.778q.302.302.302.726 0 .205-.072.387h5.238q.423 0 .726.302.302.302.302.726zM12 2.153l-4.04 4.04.387.388h3.012q.423 0 .726.302.302.302.302.726v2.238l3.653-3.653zM7.161 16.84l3.085-8.13H8.238q-.508 1.489-1.028 2.952-.52 1.464-1.004 2.964-.496-1.488-.992-2.958-.496-1.47-1.004-2.957H2.153l3.037 8.129zM12 22.065q.883 0 1.657-.333t1.355-.913q.58-.581.913-1.355.333-.774.333-1.658 0-.81-.302-1.548-.303-.738-.823-1.318-.52-.581-1.228-.944-.707-.363-1.518-.423v4.367q0 .423-.302.725-.303.303-.726.303H7.923q.206.677.593 1.246.387.568.92.98.532.41 1.185.64.653.23 1.379.23zm10.452-5.42V8.13h-6.158q-.133.133-.441.454-.309.32-.714.725-.405.406-.847.853-.441.448-.828.823-.387.375-.684.641-.296.266-.393.302v.097q.968.036 1.845.411t1.578.998q.702.623 1.186 1.446t.677 1.766Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cO($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Visio" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftvisio extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cO, create_fragment$cO, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microsoftword.svelte generated by Svelte v3.23.2 */

        function create_fragment$cP(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.004 1.5q.41 0 .703.293t.293.703v19.008q0 .41-.293.703t-.703.293H6.996q-.41 0-.703-.293T6 21.504V18H.996q-.41 0-.703-.293T0 17.004V6.996q0-.41.293-.703T.996 6H6V2.496q0-.41.293-.703t.703-.293zM6.035 11.203l1.442 4.735h1.64l1.57-7.876H9.036l-.937 4.653-1.325-4.5H5.38l-1.406 4.523-.938-4.675H1.312l1.57 7.874h1.641zM22.5 21v-3h-15v3zm0-4.5v-3.75H12v3.75zm0-5.25V7.5H12v3.75zm0-5.25V3h-15v3Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cP($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Microsoft Word" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microsoftword extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cP, create_fragment$cP, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Microstrategy.svelte generated by Svelte v3.23.2 */

        function create_fragment$cQ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M9.103 2.596h5.811v18.808h-5.81zm-9.072 0h5.81v18.808H.032zm18.127 0v18.806h5.811V8.339z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cQ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MicroStrategy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Microstrategy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cQ, create_fragment$cQ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Midi.svelte generated by Svelte v3.23.2 */

        function create_fragment$cR(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.775 7.517H24v8.966h-2.225zm-8.562 0h6.506c.66 0 1.045.57 1.045 1.247v6.607c0 .84-.35 1.112-1.112 1.112h-6.439v-5.696h2.225v3.505h3.135V9.54h-5.36zm-3.235 0h2.19v8.966h-2.19zM0 7.517h7.854c.66 0 1.045.57 1.045 1.247v7.72H6.708V9.774H5.427v6.708H3.438V9.775H2.191v6.708H0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cR($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MIDI" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Midi extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cR, create_fragment$cR, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Minds.svelte generated by Svelte v3.23.2 */

        function create_fragment$cS(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.495 18.38a.052.052 0 00.03-.033l.693-2.217 3.192-4.79a.052.052 0 00.003-.004.052.052 0 00.001-.002.052.052 0 00.001-.002.052.052 0 00.002-.005.052.052 0 000-.003.052.052 0 00.002-.003.052.052 0 000-.004.052.052 0 000-.005.052.052 0 000-.003.052.052 0 000-.003l-.416-6.946a.052.052 0 000-.001.052.052 0 00-.001-.005.052.052 0 000-.002.052.052 0 00-.003-.008.052.052 0 00-.002-.005.052.052 0 00-.002-.004.052.052 0 00-.003-.005.052.052 0 00-.003-.003.052.052 0 000-.001L14.818.018l-.001-.002a.052.052 0 00-.004-.003.052.052 0 00-.003-.002.052.052 0 00-.003-.002.052.052 0 00-.002-.001.052.052 0 00-.002-.001.052.052 0 00-.002-.001.052.052 0 00-.001 0 .052.052 0 000-.001.052.052 0 00-.002 0 .052.052 0 00-.002-.001.052.052 0 00-.001 0 .052.052 0 00-.005-.002.052.052 0 00-.004 0 .052.052 0 00-.002 0 .052.052 0 00-.001 0 .052.052 0 00-.001 0 .052.052 0 00-.003 0 .052.052 0 00-.001 0 .052.052 0 00-.001 0H9.22a.052.052 0 00-.003 0 .052.052 0 00-.004 0 .052.052 0 00-.004 0 .052.052 0 00-.003.001.052.052 0 00-.003.001.052.052 0 00-.005.002.052.052 0 00-.004.003.052.052 0 00-.004.002.052.052 0 00-.001 0 .052.052 0 00-.003.004.052.052 0 00-.001 0 .052.052 0 00-.003.003l-4.17 4.31a.052.052 0 00-.003.004.052.052 0 00-.006.009.052.052 0 00-.002.005.052.052 0 00-.002.008.052.052 0 000 .002.052.052 0 00-.001.003.052.052 0 000 .003l-.417 6.95a.052.052 0 000 .001.052.052 0 000 .001.052.052 0 000 .004.052.052 0 000 .004.052.052 0 000 .002.052.052 0 000 .005.052.052 0 00.001 0 .052.052 0 000 .003.052.052 0 00.001.002.052.052 0 00.001.002.052.052 0 00.001.002.052.052 0 00.001.001.052.052 0 00.002.003.052.052 0 00.001.003l3.194 4.79.692 2.214v.002a.052.052 0 000 .001.052.052 0 00.001.002.052.052 0 00.002.003.052.052 0 000 .001.052.052 0 00.001.002.052.052 0 000 .001.052.052 0 00.002.001.052.052 0 00.001.003.052.052 0 00.001.001.052.052 0 00.001.001.052.052 0 00.002.002.052.052 0 00.003.004.052.052 0 00.002.001.052.052 0 00.002.002.052.052 0 00.001 0 .052.052 0 00.003.003.052.052 0 00.001 0 .052.052 0 00.002.001.052.052 0 00.002.002.052.052 0 00.001 0 .052.052 0 00.001 0 .052.052 0 00.001.001.052.052 0 00.002 0 .052.052 0 00.001.001.052.052 0 00.001 0 .052.052 0 00.003.001.052.052 0 00.002 0 .052.052 0 000 .001.052.052 0 00.003 0 .052.052 0 00.002 0 .052.052 0 00.003.001.052.052 0 00.001 0 .052.052 0 00.002 0h6.952a.052.052 0 00.02-.004zm-.058-.1H8.89l7.201-2.095zm.618-2.193L8.62 18.249l2.703-5.677zm.068-.08l-4.733-3.516 5.139-4.124zm.11-.087l.4-7.54 2.668 2.936zm-7.699 2.27l-.646-2.069 3.231-3.36zm-.697-2.166l-3.094-4.64 6.456 1.143zm11.47-4.857l-2.655-2.92 2.256-3.717zm-7.974 1.236L9.3 5.284l7.187 2.983zm-.102.024l-6.507-1.152L9.198 5.31zm5.284-4.26l-7.2-2.99L14.748.152zm.095-.052L14.87.219l4.015 4.149zM4.694 11.14l.403-6.718 4.03.806zm4.473-6.01l-4.014-.803L9.167.18zm.104-.056V.103h5.376zm-.747 13.357v4.143l1.671-1.403zm.057 4.232l1.53.612 1.808.723-1.67-2.737zm3.5 1.335l3.338-1.335-1.67-1.402zm3.394-1.424v-4.143l-1.67 2.74zm-6.858-4.191L12 23.93l3.382-5.547z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cS($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Minds" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Minds extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cS, create_fragment$cS, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Minecraft.svelte generated by Svelte v3.23.2 */

        function create_fragment$cT(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.7397 10.0058l-2.4424.0023-.076.1198-.03-.1175h-2.4586l-.0599.136-.023-.136-2.4793.0023-.0438.1613-.0161-.1613-2.5023.0023-.023.265-.007-.265-2.5184.0046-.0092.242-.0254-.242-2.4954.0023-.016.1567-.0439-.1567H7.2673l-.0968.6705-.0553-.1382-.0254-.0024-.2096-.53-1.189.0024-.023.129-.0622-.129H4.431l-.03.1198-.0691-.1198-1.1659.0023-.136.523h-.3156l-.06.2282-.5506-.7512-1.1337.0023L0 13.0403l1.03.954h1.1244l.1774-.6706.0876.0968h.2995l.5.5737h1.1544l.023-.1082.0807.1082h1.1636l.0207-.1175.0737.1175h1.1751l.09-.629.3018.629h1.1889l.0138-.1451.0507.1451H11.03l.0093-.228.0276.228h2.4954l.023-.2511.0093.2511h1.2235l.0392-.175.0115.175h1.2097l.0506-.152.0139.152h1.1958l.0622-.1336.0185.1336h1.1843l.0714-.122.0208.122h1.175l.6798-.9677-.0323-.1544h.3756l.5346-.7396.4562 1.8594h1.152L24 13.0334l-.0184-.0737-.0738-.2535-.069-.2327s-.219-.712-.2466-.8065c-.0346-.1152-.0714-.2327-.1037-.3456l-.0046-.0184.4838-.583zm-2.325.1682h2.2005l.1567.493h-.6383l.0046.0162c.0254.1083.0554.2189.0853.3295.03.1129.0645.2258.0968.3433.0345.1152.069.235.106.3525.0368.1199.0737.2374.1083.3572.023.0737.0438.1451.0668.2189.023.0737.046.1497.0691.2235l.0692.228c.023.0761.0437.1522.0667.2282h-.9976l-.6268-2.2973h-.6405zm-.3548.0023l.1222.493h-1.295l.1175.56h1.3134l.136.553h-1.3342l.2466 1.182-.9954.0023-.5093-2.788zm-2.553.0023l.4816 2.788h-.9954l-.129-.8986h-.3733l.1221.8986h-.9954l-.3064-2.7857zm-2.5484.0023l.1037 1.0322h-.3272l.03.3111h.3272l.1451 1.4424h-.993l-.09-1.1751-.3686-.0092.076 1.1843h-.993l-.1037-2.7834zm-2.546.0023l.0138.493h-1.272l-.0299 1.719h1.3503l.016.5737h-2.364l.0945-2.7834zm-2.5438.0023l-.0208.493H9.56l-.0415.5692 1.3042.0023-.023.5369-1.3296.0023-.0437.6014 1.3456.0045-.0253.5738H8.387l.2926-2.7811zm-2.5392.0023l-.3226 2.781h-.9908l.1245-.8847-.3273-.0092.083-.5737-.3594-.007-.235 1.477H5.311l.5184-2.7811h.917l-.0806.5138.3157.0092-.076.5369.3548.0046L7.41 10.19zm-5.0346.0046h.9171l-.6475 2.7788h-.9884l.2972-1.1797H2.516l-.1543.5737h-.6406l.159-.5737h-.3595l-.3502 1.1797h-.97l.8917-2.7765h.8986l-.1475.5046.3134.0115L2 11.257h.6959l.1451-.5391h.318zm2.182.0046l-.546 2.7811h-.9885l.6175-2.7788zm12.1683.4217l.0391.3248-.341-.0023-.0437-.3202h-.4217l.0438.3525h.387l.0185.129h-.1936l.0715.5461h.2327l-.0184-.1843.3456-.0023.03.1866h.2373l-.083-.5414h-.1935l-.0162-.1314.3963-.0023-.0553-.3548zm-2.9286.0553l.0369.5737h.364l-.0438-.5737zm-1.1958 1.0046l.0184.5484-1.2166-.0023.0115-.4102h1.1774Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cT($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Minecraft" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Minecraft extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cT, create_fragment$cT, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Minetest.svelte generated by Svelte v3.23.2 */

        function create_fragment$cU(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.69 12.436l-.406.24-2.31 1.355v.558l-1.087.667v1.11l-1.087.664v2.857l4.89-2.872v-4.044zm-.543.96v3.298l-3.803 2.234v-1.583l1.087-.666v-1.11l1.086-.666v-.551zm-3.77-7.854l-1.128.792v4.746l.139.08 1.004.577 1.03-.603V6.152zm.026.654l.475.278v4.339l-.49.286-.597-.344v-4.13zM6.215 0l-4.24 2.491V7.03l.136.08 2.907 1.708v2.205l.134.08 1.061.637 1.196-.717V8.816l2.662-1.565V2.327zm-.003.643l3.316 2V6.93L6.213 8.878 2.52 6.708V2.812zm.654 8.492v1.57l-.653.39-.651-.39V9.135l.651.383zm8.947 2.074l-7.88 4.54v1.434l.869.5v1.107l3.208 1.881 6.79-4.102v-1.166l1.087-.666v-1.15zm-.002.638l3.533 2.061v.515l-1.086.665v1.164l-6.251 3.777-2.66-1.56v-1.11l-.87-.5v-.785zm-2.98-9.03a.258.258 0 00-.143.038l-2.616 1.543v.64l2.753-1.624 3.529 2.067-4.317 2.533a.28.28 0 00-.001.48l3.23 1.92-7.058 4.069-7.067-4.175 3.202-1.89-.544-.32-3.337 1.97a.28.28 0 000 .48l7.608 4.494c.083.049.185.05.27 0l7.606-4.382a.28.28 0 00.003-.482l-3.235-1.922 4.32-2.535a.28.28 0 000-.48L12.96 2.853a.312.312 0 00-.13-.038zm4.207 2.427zm.1.104zm.033.137a.275.275 0 01-.136.237l-.407.24v.468l-3.515 2.062.542.322 3.38-1.983a.279.279 0 00.136-.24zm-14.128 8.17v1.1l-1.086-.665v3.978l6.412 3.82v-1.752l-.924-.555V18.47l-1.141-.666v-2.218zm.544.963l2.173 1.286v2.22l1.141.667V19.9l.925.554v.467L2.5 17.75v-2.681l1.087.666v-.49zM11.88 3.33l-1.809 1.065v.003l1.81-1.067zM3.79 8.095L.309 10.147v6.979L11.99 24l11.681-7.042v-6.7l-3.25-1.909v.64l2.707 1.59v6.062l-11.141 6.716L.85 16.805v-6.027l-.389-.23a.28.28 0 010-.48L3.8 8.098zm19.9 4.34l-.406.24-2.31 1.356v.558l-1.087.666v1.11l-1.087.665v2.857l4.89-2.872v-4.044zm-.543.96v3.3l-3.803 2.233v-1.584l1.086-.665v-1.11l1.087-.666v-.551zm-3.77-7.853l-1.129.792v4.746l.14.08 1.003.577 1.031-.603V6.152zm.025.654l.476.278v4.338l-.49.287-.597-.344v-4.13zM6.216 0l-4.24 2.491V7.03l.136.08L5.02 8.817v2.205l.134.08 1.06.637 1.197-.717V8.815l2.662-1.564V2.327zm-.003.643l3.316 2V6.93L6.214 8.878 2.52 6.708V2.812zm.654 8.492v1.57l-.653.39-.651-.39V9.135l.651.383zm8.947 2.074l-7.88 4.54v1.434l.869.5v1.107l3.208 1.881 6.79-4.102v-1.166l1.087-.666v-1.15zm-.002.638l3.533 2.061v.515l-1.087.665v1.164l-6.25 3.777-2.661-1.56v-1.11l-.87-.5v-.786zm-2.98-9.03a.258.258 0 00-.143.038l-2.616 1.543v.64l2.753-1.624 3.529 2.067-4.318 2.533a.28.28 0 000 .48l3.23 1.92-7.059 4.068-7.067-4.174 3.203-1.89-.544-.32-3.337 1.97a.28.28 0 000 .48L8.07 15.04c.084.05.186.05.27.001l7.607-4.382a.28.28 0 00.003-.482l-3.235-1.922 4.32-2.535a.28.28 0 000-.481L12.96 2.854a.31.31 0 00-.13-.038zm4.207 2.427zm.1.104zm.033.137a.275.275 0 01-.136.236l-.407.24v.47l-3.515 2.061.542.322 3.38-1.983a.279.279 0 00.136-.24zm0 .968v.137c0 .1-.052.191-.136.24l-.156.092 1.37.8v-.64zm3.252 1.897v.64l2.725 1.59v.512l-1.984 1.195-1.764 1.03-3.316-1.949v-.95c0-.098-.05-.19-.135-.24l-2.295-1.363-.543.319 2.43 1.444v.95c0 .1.052.192.137.242l3.586 2.107c.083.05.186.05.27.001l1.901-1.11h.004l1.709-1.03v.902l.001.026c.002.02.007.038.011.054.003.007.007.02.011.027.005.007.007.015.012.026l.014.023c.023.03.048.055.079.075l.022.015.026.011a.08.08 0 00.026.007.264.264 0 00.16-.007l.026-.011c.015-.007.034-.019.047-.027.007-.007.015-.01.022-.019.007-.007.011-.015.018-.018l.019-.023c.004-.007.011-.015.015-.023a.139.139 0 00.022-.05c.003-.008.004-.02.007-.027l.004-.027a.239.239 0 00.001-.026v-2.222c0-.1-.051-.192-.136-.242zm-17.38 5.305v1.1l-1.086-.665v3.978l6.412 3.819v-1.751l-.925-.555v-1.112l-1.14-.666v-2.218zm.544.963l2.173 1.286v2.22l1.14.667v1.107l.925.555v.467l-5.325-3.17v-2.681l1.087.666v-.49zM11.88 3.33l-1.808 1.065v.003l1.81-1.067zM3.792 8.095L.308 10.147v6.978L11.992 24l11.681-7.043v-6.699l-3.25-1.909v.64l2.707 1.59v6.062l-11.141 6.716L.852 16.805v-6.028l-.389-.23a.28.28 0 010-.48L3.8 8.1z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cU($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Minetest" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Minetest extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cU, create_fragment$cU, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mini.svelte generated by Svelte v3.23.2 */

        function create_fragment$cV(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 9.1723h7.5563c.48-.749 1.1108-1.3428 1.8935-1.7828.7822-.4393 1.6314-.659 2.5484-.659.9163 0 1.7673.2203 2.5526.6615.7852.4412 1.4154 1.035 1.8892 1.7803H24l-.7483.7483h-6.3994a4.278 4.278 0 0 1 .299.8886h5.2333l-.7483.749h-4.3692c.0129.1932.019.3396.019.4393 0 .0997-.0061.2468-.019.44h3.4904l-.7489.7483h-2.8572a4.0661 4.0661 0 0 1-.299.8844h2.264l-.7582.7483H16.44c-.4738.7464-1.104 1.3421-1.8892 1.7858-.7853.4437-1.6363.6652-2.5526.6652-.917 0-1.7662-.2209-2.5484-.6627-.7827-.4425-1.4135-1.0388-1.8935-1.7883H5.6418l-.744-.7483h2.2597a4.093 4.093 0 0 1-.296-.8844H4.0062l-.7582-.7483h3.4898c-.0129-.1932-.019-.3403-.019-.44 0-.0997.0061-.2461.019-.4393h-4.36l-.7581-.749h5.2418a4.306 4.306 0 0 1 .296-.8886H.7483zm7.8437 1.0714c-.2382.5581-.3575 1.1428-.3575 1.7538 0 .6111.1193 1.1963.3575 1.7545.2381.5575.5594 1.0394.963 1.4443.4038.405.8838.7268 1.44.9662.5564.2393 1.1404.3587 1.7515.3587.6104 0 1.195-.1194 1.7532-.3587.5575-.2394 1.0388-.5613 1.4424-.9662.4037-.405.725-.8868.9656-1.4443.24-.5582.36-1.1434.36-1.7545 0-.611-.12-1.1957-.36-1.7538-.2406-.5582-.5619-1.0388-.9656-1.4425-.4036-.403-.8849-.7243-1.4424-.9637-.5582-.2393-1.1428-.3587-1.7532-.3587-.6111 0-1.1951.1194-1.7514.3587-.5563.2394-1.0363.5607-1.44.9637-.4037.4037-.725.8843-.9631 1.4425zm.5538 2.9421h.4677l-.0135-1.7729.5661 1.773.52-.0032.5557-1.7606v1.7637h.4991v-2.3766l-.7028-.0006-.603 1.8954-.6148-1.893-.6745-.0018zm3.133 0h.4953v-2.3766h-.4953zm1.0332 0h.477v-1.712l.9488 1.712h.5754v-2.3766h-.4677v1.7219l-.9489-1.7219h-.5846zm2.5483 0h.4862v-2.3766h-.4862z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cV($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mini" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mini extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cV, create_fragment$cV, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Minutemailer.svelte generated by Svelte v3.23.2 */

        function create_fragment$cW(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.564 2.703l3.45 3.734-2.434 4.798 5.14-.921 2.34 5.646L24 2.926 5.564 2.703zm-.636 8.088l.957-.787-1.234.39-.126-.18.51-.495-.669.27C1.813 10.979 0 13.455 0 16.35c0 1.951.822 3.705 2.133 4.947-.563-.99-.885-2.134-.885-3.355 0-2.865 1.809-5.415 4.315-6.42l.315-.766-.75.331-.211-.285.011-.011zm4.364-1.97L10.89 6l9.398-2.201L9.292 8.821z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cW($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Minutemailer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Minutemailer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cW, create_fragment$cW, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mitsubishi.svelte generated by Svelte v3.23.2 */

        function create_fragment$cX(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8 22.38H0l4-6.92h8zm8 0h8l-4-6.92h-8zm0-13.84l-4-6.92-4 6.92 4 6.92Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cX($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mitsubishi" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mitsubishi extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cX, create_fragment$cX, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mix.svelte generated by Svelte v3.23.2 */

        function create_fragment$cY(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.8 6.1v15.15c0 1.35-1.05 2.35-2.4 2.35-1.35 0-2.4-1.05-2.4-2.35V0h24v13.35c0 1.3-1.1 2.35-2.4 2.35-1.35 0-2.45-1.05-2.45-2.35v-1.2c0-1.35-1.05-2.35-2.4-2.35-1.137 0-2.121.803-2.35 1.875V15.5c0 1.35-1.1 2.35-2.4 2.35-1.35 0-2.4-1.05-2.4-2.35V6.25c0-1.3-1.1-2.35-2.4-2.35a2.4 2.4 0 0 0-2.4 2.2z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cY($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mix" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mix extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cY, create_fragment$cY, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mixcloud.svelte generated by Svelte v3.23.2 */

        function create_fragment$cZ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.95 19.062c-.154 0-.31-.045-.445-.135-.369-.25-.465-.75-.225-1.11.738-1.094 1.125-2.381 1.125-3.719s-.387-2.625-1.125-3.721c-.249-.368-.145-.866.216-1.106.375-.249.87-.146 1.108.214.917 1.365 1.396 2.97 1.396 4.62 0 1.648-.479 3.254-1.396 4.619-.135.239-.39.359-.645.359l-.009-.021zM19.66 17.768c-.153 0-.308-.045-.445-.139-.369-.239-.463-.734-.215-1.094.489-.721.747-1.545.747-2.43 0-.855-.258-1.695-.747-2.431-.248-.36-.154-.854.215-1.095s.857-.15 1.106.225c.669.99 1.021 2.145 1.021 3.314 0 1.201-.352 2.34-1.021 3.315-.146.24-.406.36-.661.36v-.025zm-3.73-7.153c-.314-3.197-3.016-5.699-6.3-5.699-2.721 0-5.13 1.748-5.995 4.283C1.588 9.501 0 11.269 0 13.4c0 2.344 1.912 4.254 4.26 4.254h10.908c1.964 0 3.566-1.594 3.566-3.557 0-1.706-1.2-3.129-2.805-3.48v-.002zm-.762 5.446H4.263c-1.466 0-2.669-1.191-2.669-2.658 0-1.465 1.193-2.658 2.669-2.658.71 0 1.381.285 1.886.781.3.314.811.314 1.125 0 .3-.301.3-.811 0-1.125-.555-.542-1.231-.931-1.965-1.111.75-1.665 2.43-2.774 4.305-2.774 2.609 0 4.74 2.129 4.74 4.738 0 .512-.075 1.006-.24 1.486-.135.42.09.869.51 1.02.074.03.165.045.24.045.33 0 .645-.211.75-.54.105-.315.18-.63.225-.96.734.285 1.26 1.005 1.26 1.83 0 1.096-.885 1.979-1.965 1.979l.034-.053z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$cZ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mixcloud" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mixcloud extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$cZ, create_fragment$cZ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mixer.svelte generated by Svelte v3.23.2 */

        function create_fragment$c_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.456 1.375a2.461 2.461 0 0 0-1.65.642C-.134 2.884-.21 4.348.553 5.38l4.917 6.59-4.946 6.65c-.762 1.032-.702 2.496.254 3.363a2.45 2.45 0 0 0 3.617-.344l6.904-9.28a.65.65 0 0 0 0-.763L4.423 2.361a2.432 2.432 0 0 0-1.967-.986zm19.089 0a2.432 2.432 0 0 0-1.968.986l-6.86 9.22a.65.65 0 0 0 0 .762l6.89 9.296a2.45 2.45 0 0 0 3.617.344c.956-.867 1.016-2.331.254-3.363l-4.947-6.65 4.917-6.59c.762-1.032.687-2.496-.254-3.363a2.459 2.459 0 0 0-1.65-.641z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mixer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mixer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c_, create_fragment$c_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mocha.svelte generated by Svelte v3.23.2 */

        function create_fragment$c$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.325 0c-.907 1.116-2.442 2.302-.768 4.814.558.628.838 1.953.768 2.372 0 0 2.512-1.464.977-4.116-.907-1.395-1.326-2.582-.977-3.07zm-2.79 2.582c-.628.767-1.605 1.535-.489 3.279.35.349.489 1.256.489 1.535 0 0 1.673-.978.627-2.792-.628-.907-.906-1.743-.627-2.022zm-5.094 6a.699.699 0 0 0-.697.698c0 2.372.349 10.535 3.837 14.512.14.139.28.208.489.208h5.86c.21 0 .35-.069.489-.208 3.488-3.908 3.837-12.07 3.837-14.512a.7.7 0 0 0-.698-.699H12zm2.023 2.163h9.21c.349 0 .697.278.697.697 0 1.953-.348 7.465-2.72 10.326-.21.14-.35.208-.559.208H9.976a.633.633 0 0 1-.488-.208c-2.372-2.79-2.652-8.373-2.722-10.326 0-.35.28-.697.698-.697zm8.792 4.744s-.071.627-1.745 1.255c-2.303.837-6.348.28-6.348.28.349 1.465.906 2.86 1.743 3.907.07.14.28.209.419.209h3.489c.14 0 .279-.07.418-.209 1.186-1.395 1.745-3.558 2.024-5.442z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$c$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mocha" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mocha extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$c$, create_fragment$c$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mojangstudios.svelte generated by Svelte v3.23.2 */

        function create_fragment$d0(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.912 0A6.913 6.913 0 000 6.912V24h17.088A6.912 6.912 0 0024 17.088V0h-4.992zm10.111 2.594c.566 0 1.024 2.505 1.024 3.07a1.024 1.024 0 11-2.047 0c0-.565.459-3.07 1.023-3.07zM14.41 5.498c.69.19 2.082 3.77 3.637 2.215 1.448-1.448 2.049 7.164 2.049 7.164l-2.05-1.022s.002-2.048-3.07-4.095c-3.809-2.54-8.189-.867-8.189 3.07 0 8.033 13.309 5.12 13.309 5.12s-.002 2.046-2.05 2.046H5.765c-2.047 0-2.05-2.047-2.05-2.047V7.713c0-2.048 2.05-2.049 2.05-2.049h4.093c2.048 0 4.096 2.049 4.096 2.049 0-1.49.117-2.098.328-2.205a.175.175 0 01.13-.01z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d0($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mojang Studios" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mojangstudios extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d0, create_fragment$d0, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Moleculer.svelte generated by Svelte v3.23.2 */

        function create_fragment$d1(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.442.718a2.58 2.58 0 0 0-2.579 2.579 2.58 2.58 0 0 0 1.368 2.275L12.809 8.27a3.505 3.505 0 0 0-1.077-.172 3.505 3.505 0 0 0-3.505 3.505 3.505 3.505 0 0 0 .085.745l-2.83 1.036a2.97 2.97 0 0 0-2.513-1.39A2.97 2.97 0 0 0 0 14.962a2.97 2.97 0 0 0 2.97 2.97 2.97 2.97 0 0 0 2.969-2.97 2.97 2.97 0 0 0-.072-.634l2.716-1.193a3.505 3.505 0 0 0 3.15 1.972 3.505 3.505 0 0 0 2.129-.724l2.276 2.167a4.305 4.305 0 0 0-.749 2.426 4.305 4.305 0 0 0 4.306 4.305A4.305 4.305 0 0 0 24 18.977a4.305 4.305 0 0 0-4.305-4.305 4.305 4.305 0 0 0-2.718.969l-2.424-1.964a3.505 3.505 0 0 0 .684-2.074 3.505 3.505 0 0 0-1.521-2.89l1.204-2.891a2.58 2.58 0 0 0 .522.054 2.58 2.58 0 0 0 2.58-2.58 2.58 2.58 0 0 0-2.58-2.578Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d1($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Moleculer" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Moleculer extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d1, create_fragment$d1, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Monero.svelte generated by Svelte v3.23.2 */

        function create_fragment$d2(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0C5.365 0 0 5.373 0 12.015c0 1.335.228 2.607.618 3.81h3.577V5.729L12 13.545l7.805-7.815v10.095h3.577c.389-1.203.618-2.475.618-3.81C24 5.375 18.635 0 12 0zm-1.788 15.307l-3.417-3.421v6.351H1.758C3.87 21.689 7.678 24 12 24s8.162-2.311 10.245-5.764h-5.04v-6.351l-3.386 3.421-1.788 1.79-1.814-1.79h-.005z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d2($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Monero" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Monero extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d2, create_fragment$d2, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mongodb.svelte generated by Svelte v3.23.2 */

        function create_fragment$d3(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.182 9.518c-1.263-5.56-4.242-7.387-4.562-8.086C12.268.939 11.887 0 11.887 0l-.005.049v.013h-.001a.574.574 0 00-.004.039v.015h-.002l-.002.026v.026h-.003c-.001.008-.001.018-.003.025v.021h-.002c0 .007 0 .015-.002.021v.02h-.002l-.002.032v.002l-.01.05v.008h-.001l-.003.012v.017h-.003v.022h-.005v.018h-.005v.021h-.004v.019h-.004v.017h-.006v.014h-.004v.018h-.004v.014h-.005v.013h-.003v.015h-.004l-.001.004v.01h-.003l-.001.006v.006h-.002a.044.044 0 00-.002.01l-.01.021v.002a.03.03 0 00-.005.007v.008h-.004v.008h-.005v.008h-.003v.01h-.006v.014h-.004v.004h-.004v.008h-.004v.011h-.004v.008h-.006v.011h-.004v.008h-.005v.008h-.003v.01h-.005v.008h-.004v.006h-.004v.008h-.006V.76h-.004v.006h-.005v.008h-.004v.011h-.005v.004h-.003v.008h-.006v.004h-.004v.01h-.004v.004h-.004v.008h-.005v.006h-.003l-.002.004v.004h-.002l-.002.004v.001h-.001a.016.016 0 01-.004.007v.003h-.001l-.012.018v.001l-.01.01v.002l-.003.003v.003h-.002l-.003.003v.001h-.001l-.003.004v.004h-.003l-.002.002v.002h-.002c0 .002-.002.002-.002.003v.003h-.004l-.002.003V.92h-.003v.004h-.004V.93h-.004v.008h-.005V.93h-.005v.004h-.004V.94h-.005v.008h-.005v.004h-.004v.006h-.004v.004h-.004V.97h-.006v.004h-.004V.98h-.005v.004h-.004v.005h-.005v.01h-.002v.004h-.006v.005h-.004v.002h-.004v.004h-.005v.01h-.004v.004h-.005v.004h-.004v.006h-.005v.004h-.005v.004h-.004v.004h-.004v.01h-.004v.005h-.006v.004h-.004v.004h-.005v.006h-.004v.004h-.005v.007h-.004v.004h-.006V1.1h-.002v.004h-.004v.004h-.005v.004h-.004v.006h-.005v.004h-.003l-.001.002v.002h-.002l-.004.004-.004.003v.006h-.004v.005h-.004v.004h-.004v.004h-.003l-.003.003v.003h-.002l-.002.002v.003h-.002c-.005.006-.007.01-.014.016a.366.366 0 00-.051.042l-.022.017v.001h-.001a2.821 2.821 0 01-.05.039v.001l-.073.062V1.34h-.002c-.057.047-.117.1-.186.159V1.5h-.001c-.17.148-.37.338-.595.568l-.015.015-.004.004c-1.36 1.407-3.503 4.339-3.73 9.077-.02.392-.015.773.007 1.144v.009c.109 1.867.695 3.461 1.428 4.756v.001c.292.516.607.985.926 1.405v.001c1.102 1.455 2.227 2.317 2.514 2.526.44 1.023.4 2.779.4 2.779l.644.215s-.131-1.701.053-2.522c.057-.257.192-.476.349-.662a8.38 8.38 0 00.797-.645c.018-.019.028-.036.044-.054 1.52-1.418 4.362-4.91 3.388-10.599z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d3($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MongoDB" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mongodb extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d3, create_fragment$d3, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Monkeytie.svelte generated by Svelte v3.23.2 */

        function create_fragment$d4(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.001 0h-16C1.791 0 0 1.791 0 4.001v15.998C0 22.209 1.791 24 4.001 24h16C22.209 24 24 22.209 24 19.999V4.001C24 1.791 22.209 0 20.001 0zm-7.666 16.295l-.866-6.759-2.579 4.638-2.583-4.623-.858 6.744h-1.93l1.4-10.086H6.43L8.888 10.8l2.454-4.591h1.514l1.397 10.086h-1.918zm6.529-5.736h-1.585v3.257c0 1.095.087 1.151 1.096 1.151h.49l-.171 1.472h-1.293c-1.354 0-1.93-.95-1.93-1.89v-3.997h-1.027l.156-1.47h.855V7.504l1.79-.188v1.775h1.588v1.467h.031zm1.677 5.88h-1.484l.159-1.485h1.487l-.172 1.479.01.006z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d4($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Monkey tie" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Monkeytie extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d4, create_fragment$d4, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Monogram.svelte generated by Svelte v3.23.2 */

        function create_fragment$d5(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.158 0v23.503c0 .451-.533.668-.83.338L12 12.38 3.301 2.73.842 0h22.316zM11.029 13.46L1.672 23.841c-.297.33-.83.111-.83-.338V0l10.187 13.46z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d5($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Monogram" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Monogram extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d5, create_fragment$d5, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Monster.svelte generated by Svelte v3.23.2 */

        function create_fragment$d6(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 0V24H5.42V12.39L12 18.19L18.58 12.39V24H24V0L12 11.23L0 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d6($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Monster" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Monster extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d6, create_fragment$d6, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Monzo.svelte generated by Svelte v3.23.2 */

        function create_fragment$d7(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.99 17.26H12l5.93-5.92v11.04a.45.45-180 0 0 .76.31l4.98-4.97a1.11 1.11-180 0 0 .32-.8V5.29l.01-.01-3.98-3.97a.44.44-180 0 0-.63 0L12 8.69l-7.41-7.4a.44.44-180 0 0-.63 0L0 5.28h.01H0v11.66a1.11 1.11-180 0 0 .32.79l4.97 4.98a.45.45-180 0 0 .76-.32l.01-11.06 5.93 5.94z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d7($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Monzo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Monzo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d7, create_fragment$d7, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Moo.svelte generated by Svelte v3.23.2 */

        function create_fragment$d8(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.964 24c-2.525 0-4.801-1.107-6.34-3.138-1.109-1.417-1.661-3.078-1.661-4.86 0-.555.06-1.109.185-1.602.299-1.785 1.59-4.678 3.93-8.678C9.805 2.767 11.215.554 11.289.554c.123-.246.308-.554.675-.554.372 0 .555.308.741.555 0 0 1.477 2.215 3.199 5.168 2.342 4 3.631 6.893 3.939 8.678.131.492.193 1.045.193 1.6 0 1.785-.555 3.445-1.65 4.861C16.766 22.834 14.424 24 11.964 24zm0-2.092c1.905 0 3.629-.861 4.801-2.341.799-1.044 1.229-2.337 1.229-3.69 0-.432-.059-.801-.123-1.229-.246-1.354-1.293-3.692-3.074-6.833-1.357-2.399-2.525-4.121-2.525-4.121l-.31-.433-.254.37s-1.171 1.785-2.521 4.125c-1.843 3.149-2.893 5.474-3.072 6.839-.061.431-.123.8-.123 1.229 0 1.355.429 2.587 1.229 3.693 1.11 1.538 2.831 2.399 4.74 2.399l.003-.008z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d8($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Moo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Moo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d8, create_fragment$d8, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Moscowmetro.svelte generated by Svelte v3.23.2 */

        function create_fragment$d9(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.603 11.85l-2.481-6.26-2.092 3.66-2.092-3.66-2.481 6.262H6.74v.941h3.736v-.941h-.553l.538-1.555 1.569 2.57 1.569-2.57.538 1.555h-.553v.941h3.751v-.941zm5.335-1.912A9.933 9.933 0 0 0 12 0C6.516 0 2.062 4.453 2.062 9.938c0 2.75 1.121 5.23 2.914 7.023a.804.804 0 0 0 1.375-.568.825.825 0 0 0-.239-.582 8.303 8.303 0 0 1-2.42-5.873c0-4.588 3.72-8.324 8.308-8.324 4.588 0 8.324 3.736 8.324 8.324a8.289 8.289 0 0 1-2.436 5.888l-7.024 7.023L12 24l7.039-7.039a9.891 9.891 0 0 0 2.899-7.023Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d9($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Moscow Metro" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Moscowmetro extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d9, create_fragment$d9, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mozilla.svelte generated by Svelte v3.23.2 */

        function create_fragment$da(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 24V0h24v24H0zM16.39 6.76l-.23.03-.22.04-.21.06-.2.07-.2.07-.19.09-.18.1-.17.11-.17.12-.16.13-.15.14-.14.15-.13.16-.13.17-.11.17-.11.19-.1.19-.09.21-.08-.22-.1-.21-.1-.2-.12-.19-.13-.17-.14-.16-.15-.15-.15-.14-.17-.13-.17-.11-.19-.11-.18-.09-.2-.08-.2-.07-.2-.06-.21-.05-.22-.04-.22-.02-.22-.02h-.43l-.21.02-.2.02-.2.03-.19.05-.18.05-.18.06-.18.07-.16.08-.17.08-.15.1-.15.1-.14.11-.14.12-.13.13-.12.13-.12.14-.11.15-.1.16L7 8.5V6.95H2.65v2.22h1.37v5.86H2.65v2.26h6.33v-2.26H7v-3.81l.01-.21.03-.2.03-.19.04-.18.05-.18.06-.16.07-.16.08-.14.09-.14.11-.12.11-.11.12-.1.14-.09.15-.08.15-.06.17-.05.19-.04.19-.02.21-.01h.17l.16.02.16.03.14.04.14.05.13.06.12.07.11.09.1.1.1.11.08.12.08.14.06.16.06.16.05.19.04.19.03.21.03.23.01.25v6.09h4.3v-2.26H13.7v-3.6l.01-.21.01-.21.02-.2.04-.19.04-.18.05-.18.06-.16.07-.16.08-.14.09-.14.1-.12.12-.11.12-.1.14-.09.14-.08.16-.06.17-.05.19-.04.19-.02.21-.01h.17l.16.02.16.03.14.04.14.05.13.06.12.07.11.09.1.1.09.11.09.12.08.14.06.16.06.16.05.19.04.19.03.21.03.23.01.25v6.09h4.3v-2.26h-1.37v-4.72l-.01-.36-.04-.33-.06-.32-.08-.3-.1-.28-.12-.26-.14-.24-.16-.23-.18-.2-.18-.19-.21-.16-.21-.15-.23-.13-.24-.12-.25-.09-.25-.08-.27-.06-.26-.04-.28-.03h-.52l-.23.02z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$da($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Mozilla" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mozilla extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$da, create_fragment$da, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mta.svelte generated by Svelte v3.23.2 */

        function create_fragment$db(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M15.171 10.07l-1.293-.109v6.861l-1.926.34-.004-7.371-1.637-.145V6.944l4.86.85zm3.668 5.884l-1.142.198-.134-1-1.113.145-.14 1.1-1.473.26 1.458-8.651 1.385.24zm-1.48-2.492l-.305-2.642h-.068l-.31 2.682zM10.991 24c6.59 0 11.932-5.373 11.932-12 0-6.628-5.342-12-11.932-12C6.86 0 3.22 2.112 1.077 5.323l3.307.583.91 6.965c.003-.012.066-.004.066-.004l.998-6.615 3.309.58v10.735l-2.089.367V13.32s.078-1.987.032-2.327c0 0-.09.002-.092-.005l-1.246 7.18-2.075.366L2.672 10.8l-.092-.007c-.032.28.112 2.707.112 2.707v5.298l-1.364.24C3.498 22.044 7.016 24 10.991 24z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$db($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MTA" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mta extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$db, create_fragment$db, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mtr.svelte generated by Svelte v3.23.2 */

        function create_fragment$dc(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.987 1.913c-1.9 0-3.693.321-5.298.883C2.756 4.268 0 7.826 0 12c0 4.147 2.756 7.706 6.689 9.204 1.632.562 3.425.883 5.325.883a16.74 16.74 0 0 0 5.27-.856C21.217 19.759 24 16.174 24 12.027V12c0-4.174-2.783-7.732-6.716-9.204a16.295 16.295 0 0 0-5.297-.883zM10.89 5.257h2.167v3.827c1.525-.402 2.702-1.766 2.782-3.399l2.168.027c-.16 2.73-2.22 4.95-4.897 5.378v1.793c2.676.428 4.736 2.675 4.924 5.404l-2.167.028c-.08-1.633-1.258-2.997-2.783-3.425v3.853h-2.167V14.89a3.775 3.775 0 0 0-2.81 3.425l-2.167-.028a5.868 5.868 0 0 1 4.923-5.404v-1.766C8.187 10.716 6.1 8.468 5.94 5.74l2.167-.027A3.711 3.711 0 0 0 10.89 9.11Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dc($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MTR" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mtr extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dc, create_fragment$dc, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Musescore.svelte generated by Svelte v3.23.2 */

        function create_fragment$dd(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.777 23.997a11.989 11.989 0 0 1-8.98-4.296 12.013 12.013 0 0 1-2.406-4.655A12.1 12.1 0 0 1 .273 9.44a11.926 11.926 0 0 1 1.72-4.064 12.056 12.056 0 0 1 4.056-3.799 11.94 11.94 0 0 1 4.13-1.44 12.211 12.211 0 0 1 3.693.007c1.708.27 3.302.89 4.751 1.848.873.577 1.692 1.29 2.385 2.08a11.966 11.966 0 0 1 2.68 5.196c.402 1.718.416 3.556.039 5.291a12.004 12.004 0 0 1-4.024 6.643 12.013 12.013 0 0 1-4.655 2.407c-.743.195-1.499.316-2.29.367a17.83 17.83 0 0 1-.809.026l-.172-.003zm-6.924-6.684a.488.488 0 0 0 .23-.133.548.548 0 0 0 .139-.232c.013-.043.014-.178.018-2.363.004-2.12.005-2.327.018-2.438.033-.298.076-.51.146-.72.101-.303.224-.516.406-.705.14-.144.26-.232.434-.315a1.76 1.76 0 0 1 .504-.148c.114-.017.382-.024.493-.012a1.803 1.803 0 0 1 1.308.807c.166.25.271.528.327.866l.017.106.004 2.438c.004 2.324.005 2.44.019 2.485a.555.555 0 0 0 .133.226.5.5 0 0 0 .201.128c.052.019.068.021.167.021a.462.462 0 0 0 .37-.145.507.507 0 0 0 .149-.3c.006-.042.008-.774.008-2.407 0-1.542.003-2.375.008-2.428.047-.48.222-.889.523-1.225.183-.204.464-.39.73-.482.21-.074.394-.101.626-.095.304.01.55.066.8.186.284.136.514.341.668.597.178.294.28.662.299 1.083.002.053.013.491.023.973.022 1.002.024 1.063.04 1.238.072.787.307 1.426.711 1.935.087.11.311.333.417.417.435.344.944.555 1.532.634.177.024.507.03.68.012.797-.082 1.53-.463 2.015-1.046.373-.45.606-.99.704-1.64.046-.302.043-.143.046-2.506.003-2.417.007-2.223-.054-2.346a.484.484 0 0 0-.332-.251.584.584 0 0 0-.416.06c-.1.06-.19.183-.22.304-.009.031-.012.478-.016 2.22-.005 2.415 0 2.23-.055 2.51-.18.917-.81 1.522-1.73 1.66a2.358 2.358 0 0 1-.512-.008c-.464-.07-.84-.256-1.13-.557-.332-.345-.53-.816-.601-1.432-.018-.151-.026-.387-.043-1.212-.018-.853-.026-1.05-.047-1.24-.129-1.123-.68-1.983-1.548-2.417a2.773 2.773 0 0 0-1.121-.294c-.55-.035-1.136.12-1.671.441a2.949 2.949 0 0 0-.813.707l-.038.049-.028-.038a2.542 2.542 0 0 0-.235-.261c-.457-.433-1.1-.722-1.78-.8a3.877 3.877 0 0 0-.65-.001c-.635.07-1.141.286-1.559.666-.48.437-.795 1.103-.912 1.926-.056.393-.057.436-.054 2.915l.002 2.184.022.064a.525.525 0 0 0 .359.339c.078.02.188.02.267 0zm11.99-8.863a.687.687 0 0 0 .546-.505.849.849 0 0 0 .008-.3.685.685 0 0 0-.455-.516.678.678 0 0 0-.895.649c0 .055.005.11.012.142a.684.684 0 0 0 .783.53zm-2.667-.138a.495.495 0 0 0 .32-.265c.046-.092.06-.158.067-.343a2.224 2.224 0 0 1 .617-1.49 1.934 1.934 0 0 1 1.146-.587c.145-.022.434-.024.581-.004.307.043.58.143.822.3.244.16.474.4.634.663.202.333.326.763.327 1.127 0 .1.012.184.036.26a.507.507 0 0 0 .94.068c.053-.111.06-.15.059-.35 0-.198-.01-.318-.043-.514-.217-1.298-1.165-2.294-2.426-2.545a2.47 2.47 0 0 0-.625-.055 3.031 3.031 0 0 0-2.738 1.638 3.3 3.3 0 0 0-.366 1.43c-.01.265.037.418.167.544a.509.509 0 0 0 .482.123z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dd($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MuseScore" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Musescore extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dd, create_fragment$dd, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Musicbrainz.svelte generated by Svelte v3.23.2 */

        function create_fragment$de(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.582 0L1.418 5.832v12.336L11.582 24V10.01L7.1 12.668v3.664c.01.111.01.225 0 .336-.103.435-.54.804-1 1.111-.802.537-1.752.509-2.166-.111-.413-.62-.141-1.631.666-2.168.384-.28.863-.399 1.334-.332V6.619c0-.154.134-.252.226-.308L11.582 3zm.836 0v6.162c.574.03 1.14.16 1.668.387a2.225 2.225 0 0 0 1.656-.717 1.02 1.02 0 1 1 1.832-.803l.004.006a1.022 1.022 0 0 1-1.295 1.197c-.34.403-.792.698-1.297.85.34.263.641.576.891.928a1.04 1.04 0 0 1 .777.125c.768.486.568 1.657-.318 1.857-.886.2-1.574-.77-1.09-1.539.02-.03.042-.06.065-.09a3.598 3.598 0 0 0-1.436-1.166 4.142 4.142 0 0 0-1.457-.369v4.01c.855.06 1.256.493 1.555.834.227.256.356.39.578.402.323.018.568.008.806 0a5.44 5.44 0 0 1 .895.022c.94-.017 1.272-.226 1.605-.446a2.533 2.533 0 0 1 1.131-.463 1.027 1.027 0 0 1 .12-.263 1.04 1.04 0 0 1 .105-.137c.023-.025.047-.044.07-.066a4.775 4.775 0 0 1 0-2.405l-.012-.01a1.02 1.02 0 1 1 .692.272h-.057a4.288 4.288 0 0 0 0 1.877h.063a1.02 1.02 0 1 1-.545 1.883l-.047-.033a1 1 0 0 1-.352-.442 1.885 1.885 0 0 0-.814.354 3.03 3.03 0 0 1-.703.365c.757.555 1.772 1.6 2.199 2.299a1.03 1.03 0 0 1 .256-.033 1.02 1.02 0 1 1-.545 1.88l-.047-.03a1.017 1.017 0 0 1-.27-1.376.72.72 0 0 1 .051-.072c-.445-.775-2.026-2.28-2.46-2.387a4.037 4.037 0 0 0-1.31-.117c-.24.008-.513.018-.866 0-.515-.027-.783-.333-1.043-.629-.26-.296-.51-.56-1.055-.611V18.5a1.877 1.877 0 0 0 .426-.135.333.333 0 0 1 .058-.027c.56-.267 1.421-.91 2.096-2.447a1.02 1.02 0 0 1-.27-1.344 1.02 1.02 0 1 1 .915 1.54 6.273 6.273 0 0 1-1.432 2.136 1.785 1.785 0 0 1 .691.306.667.667 0 0 0 .37.168 3.31 3.31 0 0 0 .888-.222 1.02 1.02 0 0 1 1.787-.79v-.005a1.02 1.02 0 0 1-.773 1.683 1.022 1.022 0 0 1-.719-.287 3.935 3.935 0 0 1-1.168.287h-.05a1.313 1.313 0 0 1-.71-.275c-.262-.177-.51-.345-1.402-.12a2.098 2.098 0 0 1-.707.2V24l10.164-5.832V5.832zm4.154 4.904a.352.352 0 0 0-.197.639l.018.01c.163.1.378.053.484-.108v-.002a.352.352 0 0 0-.303-.539zm-4.99 1.928L7.082 9.5v2l4.5-2.668zm8.385.38a.352.352 0 0 0-.295.165v.002a.35.35 0 0 0 .096.473l.013.01a.357.357 0 0 0 .487-.108.352.352 0 0 0-.301-.541zM16.09 8.647a.352.352 0 0 0-.277.163.355.355 0 0 0 .296.54c.482 0 .463-.73-.02-.703zm3.877 2.477a.352.352 0 0 0-.295.164.35.35 0 0 0 .094.475l.015.01a.357.357 0 0 0 .485-.11.352.352 0 0 0-.3-.539zm-4.375 3.594a.352.352 0 0 0-.291.172.35.35 0 0 0-.04.265.352.352 0 1 0 .33-.437zm4.375.789a.352.352 0 0 0-.295.164v.002a.352.352 0 0 0 .094.473l.015.01a.357.357 0 0 0 .485-.108.352.352 0 0 0-.3-.54zm-2.803 2.488v.002a.347.347 0 0 0-.223.084.352.352 0 0 0 .23.62.347.347 0 0 0 .23-.085.348.348 0 0 0 .12-.24.353.353 0 0 0-.35-.38.347.347 0 0 0-.007 0Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$de($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MusicBrainz" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Musicbrainz extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$de, create_fragment$de, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mxlinux.svelte generated by Svelte v3.23.2 */

        function create_fragment$df(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.001 13.301l3.277 3.819-.75.9-2.133-2.521-1.131-1.338.737-.86zM24 2.41v19.182c0 .655-.531 1.186-1.186 1.186H1.186A1.186 1.186 0 0 1 0 21.591V2.409c0-.655.531-1.186 1.186-1.186h21.628c.655 0 1.186.53 1.186 1.186zm-2.241 17.09l-2.116-2.542-2.115-2.541-.586.704-3.25-3.788 4.913-5.73-1.175-1.008-4.76 5.549-4.743-5.527-1.947 1.67 5 5.827-.73.851-1.24-1.465-3.384 4-3.385 4h19.518z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$df($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MX Linux" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mxlinux extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$df, create_fragment$df, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Myspace.svelte generated by Svelte v3.23.2 */

        function create_fragment$dg(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.803 12.274c2.108 0 3.818-1.703 3.818-3.804s-1.71-3.795-3.818-3.795c-2.109 0-3.818 1.71-3.818 3.81 0 2.101 1.709 3.811 3.818 3.811v-.022zm-8.603.705c1.897 0 3.436-1.533 3.436-3.424S13.098 6.13 11.2 6.13 7.764 7.676 7.764 9.566C7.764 11.457 9.299 13 11.2 13v-.021zm-7.8.635c1.71 0 3.093-1.38 3.093-3.081 0-1.704-1.395-3.084-3.105-3.084C1.681 7.449.3 8.829.3 10.539c0 1.7 1.387 3.078 3.095 3.078l.005-.003zm0 .705c-1.96 0-3.4 1.717-3.4 3.495v1.196c0 .17.138.31.31.31h6.18c.171 0 .309-.14.309-.31v-1.196c0-1.779-1.437-3.5-3.398-3.5l-.001.005zm7.8-.56c-2.179 0-3.78 1.915-3.78 3.891v1.331c0 .188.156.344.345.344h6.871c.188 0 .342-.155.342-.344V17.65c0-1.976-1.598-3.891-3.778-3.891zm8.603-.617c-2.422 0-4.197 2.126-4.197 4.323v1.477c0 .21.172.381.382.381h7.63c.21 0 .383-.171.383-.381v-1.477c-.001-2.197-1.776-4.323-4.198-4.323z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dg($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Myspace" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Myspace extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dg, create_fragment$dg, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Mysql.svelte generated by Svelte v3.23.2 */

        function create_fragment$dh(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.405 5.501c-.115 0-.193.014-.274.033v.013h.014c.054.104.146.18.214.273.054.107.1.214.154.32l.014-.015c.094-.066.14-.172.14-.333-.04-.047-.046-.094-.08-.14-.04-.067-.126-.1-.18-.153zM5.77 18.695h-.927a50.854 50.854 0 00-.27-4.41h-.008l-1.41 4.41H2.45l-1.4-4.41h-.01a72.892 72.892 0 00-.195 4.41H0c.055-1.966.192-3.81.41-5.53h1.15l1.335 4.064h.008l1.347-4.064h1.095c.242 2.015.384 3.86.428 5.53zm4.017-4.08c-.378 2.045-.876 3.533-1.492 4.46-.482.716-1.01 1.073-1.583 1.073-.153 0-.34-.046-.566-.138v-.494c.11.017.24.026.386.026.268 0 .483-.075.647-.222.197-.18.295-.382.295-.605 0-.155-.077-.47-.23-.944L6.23 14.615h.91l.727 2.36c.164.536.233.91.205 1.123.4-1.064.678-2.227.835-3.483zm12.325 4.08h-2.63v-5.53h.885v4.85h1.745zm-3.32.135l-1.016-.5c.09-.076.177-.158.255-.25.433-.506.648-1.258.648-2.253 0-1.83-.718-2.746-2.155-2.746-.704 0-1.254.232-1.65.697-.43.508-.646 1.256-.646 2.245 0 .972.19 1.686.574 2.14.35.41.877.615 1.583.615.264 0 .506-.033.725-.098l1.325.772.36-.622zM15.5 17.588c-.225-.36-.337-.94-.337-1.736 0-1.393.424-2.09 1.27-2.09.443 0 .77.167.977.5.224.362.336.936.336 1.723 0 1.404-.424 2.108-1.27 2.108-.445 0-.77-.167-.978-.5zm-1.658-.425c0 .47-.172.856-.516 1.156-.344.3-.803.45-1.384.45-.543 0-1.064-.172-1.573-.515l.237-.476c.438.22.833.328 1.19.328.332 0 .593-.073.783-.22a.754.754 0 00.3-.615c0-.33-.23-.61-.648-.845-.388-.213-1.163-.657-1.163-.657-.422-.307-.632-.636-.632-1.177 0-.45.157-.81.47-1.085.315-.278.72-.415 1.22-.415.512 0 .98.136 1.4.41l-.213.476a2.726 2.726 0 00-1.064-.23c-.283 0-.502.068-.654.206a.685.685 0 00-.248.524c0 .328.234.61.666.85.393.215 1.187.67 1.187.67.433.305.648.63.648 1.168zm9.382-5.852c-.535-.014-.95.04-1.297.188-.1.04-.26.04-.274.167.055.053.063.14.11.214.08.134.218.313.346.407.14.11.28.216.427.31.26.16.555.255.81.416.145.094.293.213.44.313.073.05.12.14.214.172v-.02c-.046-.06-.06-.147-.105-.214-.067-.067-.134-.127-.2-.193a3.223 3.223 0 00-.695-.675c-.214-.146-.682-.35-.77-.595l-.013-.014c.146-.013.32-.066.46-.106.227-.06.435-.047.67-.106.106-.027.213-.06.32-.094v-.06c-.12-.12-.21-.283-.334-.395a8.867 8.867 0 00-1.104-.823c-.21-.134-.476-.22-.697-.334-.08-.04-.214-.06-.26-.127-.12-.146-.19-.34-.275-.514a17.69 17.69 0 01-.547-1.163c-.12-.262-.193-.523-.34-.763-.69-1.137-1.437-1.826-2.586-2.5-.247-.14-.543-.2-.856-.274-.167-.008-.334-.02-.5-.027-.11-.047-.216-.174-.31-.235-.38-.24-1.364-.76-1.644-.072-.18.434.267.862.422 1.082.115.153.26.328.34.5.047.116.06.235.107.356.106.294.207.622.347.897.073.14.153.287.247.413.054.073.146.107.167.227-.094.136-.1.334-.154.5-.24.757-.146 1.693.194 2.25.107.166.362.534.703.393.3-.12.234-.5.32-.835.02-.08.007-.133.048-.187v.015c.094.188.188.367.274.555.206.328.566.668.867.895.16.12.287.328.487.402v-.02h-.015c-.043-.058-.1-.086-.154-.133a3.445 3.445 0 01-.35-.4 8.76 8.76 0 01-.747-1.218c-.11-.21-.202-.436-.29-.643-.04-.08-.04-.2-.107-.24-.1.146-.247.273-.32.453-.127.288-.14.642-.188 1.01-.027.007-.014 0-.027.014-.214-.052-.287-.274-.367-.46-.2-.475-.233-1.238-.06-1.785.047-.14.247-.582.167-.716-.042-.127-.174-.2-.247-.303a2.478 2.478 0 01-.24-.427c-.16-.374-.24-.788-.414-1.162-.08-.173-.22-.354-.334-.513-.127-.18-.267-.307-.368-.52-.033-.073-.08-.194-.027-.274.014-.054.042-.075.094-.09.088-.072.335.022.422.062.247.1.455.194.662.334.094.066.195.193.315.226h.14c.214.047.455.014.655.073.355.114.675.28.962.46a5.953 5.953 0 012.085 2.286c.08.154.115.295.188.455.14.33.313.663.455.982.14.315.275.636.476.897.1.14.502.213.682.286.133.06.34.115.46.188.23.14.454.3.67.454.11.076.443.243.463.378z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dh($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "MySQL" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Mysql extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dh, create_fragment$dh, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/NTwentySix.svelte generated by Svelte v3.23.2 */

        function create_fragment$di(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 3.803v1.195h7.436V3.803H0zM12.69 7.29c-2.034 0-3.038 1.252-3.038 2.684 0 .234.027.468.092.728l1.393.135a3.697 3.697 0 0 1-.09-.793c0-1.072.71-1.586 1.598-1.586.866 0 1.507.485 1.507 1.652 0 1.186-.58 1.995-1.464 2.88-.925.923-2.4 2.027-3.112 2.534v1.092h6.135v-1.195h-4.168c.695-.48 1.69-1.279 2.133-1.72.502-.503 1.931-1.794 1.931-3.636 0-1.903-1.24-2.775-2.918-2.775zm8.34 0c-1.976 0-3.454 1.517-3.454 4.916 0 3.017 1.233 4.508 3.356 4.508 1.754 0 3.068-1.198 3.068-3.172 0-1.542-.823-3.066-2.793-3.066-1.1 0-1.884.51-2.281 1.263 0-1.78.62-3.33 2.094-3.33.937 0 1.309.538 1.507 1.422l1.366-.271c-.321-1.527-1.292-2.27-2.864-2.27zM.075 7.389v9.228h1.33v-6.312c0-.56-.013-.898-.039-1.223h.026c.136.372.298.699.539 1.123l3.732 6.412h1.69V7.39H6.04v6.31c0 .56.013.898.04 1.223h-.028a7.252 7.252 0 0 0-.537-1.123L1.783 7.389H.076zm20.817 4.185c1.114 0 1.744.822 1.744 1.992 0 1.256-.717 2.034-1.701 2.034-1.09 0-1.843-1.001-1.973-2.329.33-1.133 1.063-1.697 1.93-1.697zM0 19.008v1.19h7.436v-1.19H0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$di($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "N26" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class NTwentySix extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$di, create_fragment$di, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nativescript.svelte generated by Svelte v3.23.2 */

        function create_fragment$dj(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.77 1.76A5.68 5.68 0 0 1 5.8 0h12.6c1.37 0 2.65.6 3.83 1.76A5.43 5.43 0 0 1 24 5.7v12.77c0 1.34-.56 2.58-1.68 3.73A5.77 5.77 0 0 1 18.25 24H5.87a6.3 6.3 0 0 1-4.1-1.57C.69 21.45.1 20.03 0 18.13V5.73a5.21 5.21 0 0 1 1.77-3.97zm6.25 8.3l7.93 10.06h2.12c.49-.06.88-.2 1.17-.43.3-.23.5-.56.64-1v-4.94c.08-.95.67-1.54 1.77-1.75-1.1-.4-1.69-1.02-1.77-1.86V5.42c-.12-.44-.33-.8-.64-1.07a1.83 1.83 0 0 0-1.09-.47H16v10.2L8.02 3.87H5.79c-.56.1-.97.3-1.25.6S4.08 5.25 4 5.9v4.85c-.35.69-.9 1.1-1.65 1.25.85.16 1.4.61 1.65 1.36v4.77c.02.55.2 1 .54 1.37.33.36.7.53 1.1.5H8l.02-9.94z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dj($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NativeScript" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nativescript extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dj, create_fragment$dj, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nbb.svelte generated by Svelte v3.23.2 */

        function create_fragment$dk(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.714 11.176h.02l.167 4.327h2.105L6.5 8.482H4.652l-.915 4.288h-.02L3.63 8.482H1.495L0 15.503h1.79zm7.254.649l.01-.02c.462-.098 1.219-.481 1.453-1.583.248-1.16-.362-1.74-1.59-1.74H7.007l-1.494 7.02h2.94c1.209 0 2.153-.619 2.458-2.025.295-1.416-.549-1.613-.944-1.652zm-1.052 1.504c-.099.462-.354.757-.787.757h-.345l.334-1.602h.354c.454 0 .542.373.444.845zm.472-2.753c-.108.511-.452.669-.708.669h-.295l.285-1.347h.266c.403 0 .55.225.452.678zm6.83 2.901c.295-1.416-.55-1.613-.944-1.652l.01-.02c.462-.098 1.219-.481 1.453-1.583.248-1.16-.362-1.74-1.591-1.74h-2.831l-1.495 7.02h2.94c1.21 0 2.153-.619 2.458-2.025zm-1.996-.148c-.098.462-.354.757-.787.757h-.344l.335-1.602h.354c.452 0 .54.373.442.845zm.472-2.753c-.108.511-.453.669-.708.669h-.294l.285-1.347h.266c.402 0 .55.225.45.678zm4.97-2.094h-2.951c.75.615.51 1.669.51 1.669H19.2l2.338 1.857-2.167 1.834h-2.72c-.117.568-.712 1.424-1.125 1.676h4.148L24 12.01z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dk($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NBB" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nbb extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dk, create_fragment$dk, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ndr.svelte generated by Svelte v3.23.2 */

        function create_fragment$dl(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.184 19.325l-3.137-5.648v5.649H0V9.64h2.149l3.267 6.025V9.641h2.047v9.684zm2.279-9.684V.537H8.61v9.104zm0 13.822v-4.138H8.61v4.138zM12.037 9.64c2.395 0 3.63 1.147 3.63 3.368v2.918c0 2.28-1.19 3.398-3.63 3.398H8.61V9.641zm-.19 7.855c1.163 0 1.728-.581 1.728-1.771v-2.498c0-1.176-.58-1.757-1.727-1.757h-1.03v6.026zm9.845 1.83l-1.728-3.718h-1.161v3.717h-2.15V9.641h3.384c2.381 0 3.513.944 3.513 2.962 0 1.335-.493 2.134-1.597 2.613L24 19.326zm-1.568-5.475c.857 0 1.365-.494 1.365-1.32 0-.858-.377-1.177-1.365-1.177H18.76v2.498h1.365z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dl($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NDR" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ndr extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dl, create_fragment$dl, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nec.svelte generated by Svelte v3.23.2 */

        function create_fragment$dm(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.08 9.27H2c.44 0 .95.4 1.19.63l3.36 3.69V9.27H7.7v5.9h-2c-.36-.02-.71-.1-1.12-.49l-3.36-3.7v4.18H.08V9.27zM23.92 15.2c-1.37.19-2.75.2-4.14.09a6.21 6.21 0 01-2.34-.61c-.92-.48-1.22-1.54-1.2-2.5 0-.88.27-1.83 1.07-2.35A4.33 4.33 0 0119 9.27c1.62-.28 3.25-.22 4.84-.04v.84c-1.87-.36-3.85-.27-4.52.58a2.25 2.25 0 00-.48 1.5c0 .8.28 2 1.92 2.24 1.07.15 2.13.03 3.16-.15v.96zM12.2 14.28c.16 0 2.74.02 3.63 0v.88c-1.79.07-3.5.1-5.3.03-1.53-.06-1.8-.82-1.82-1.55V9.27h7.03v.84H11.2v1.5h4.15v.82h-4.15l.02 1.03c.02.57.3.78.99.82z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dm($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NEC" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nec extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dm, create_fragment$dm, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/NeoFourJ.svelte generated by Svelte v3.23.2 */

        function create_fragment$dn(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.717 8.417c-.014 2.959-2.412 5.321-5.391 5.309-2.946-.014-5.306-2.424-5.291-5.407.014-2.9 2.458-5.287 5.391-5.265 2.926.022 5.304 2.434 5.291 5.363zM9.813 24c-2.357.008-4.337-1.965-4.361-4.344-.024-2.33 1.955-4.33 4.295-4.34 2.438-.01 4.395 1.916 4.395 4.326.003 2.383-1.952 4.35-4.329 4.358zM8.923 2.84c0 1.562-1.286 2.847-2.841 2.839C4.533 5.672 3.221 4.35 3.246 2.82 3.271 1.268 4.588-.022 6.126 0c1.531.023 2.797 1.308 2.797 2.84zM21.9 11.948c-2.697 2.356-5 2.779-7.42 1.36-2.14-1.254-3.196-3.721-2.654-6.197.587-2.68 2.506-4.085 6.197-4.467C15.222.642 12.26.025 9.008.821c-.421.102-.241.261-.126.473.786 1.447.383 3.207-.942 4.151-1.325.943-3.126.755-4.218-.49-.322-.367-.427-.269-.654.063C.56 8.691.705 13.697 3.44 17.203c.492.631 1.027 1.219 1.691 1.71.75-3.208 3.394-4.251 5.519-3.888 2.593.442 4.002 2.602 3.758 5.787 3.516-.43 7.927-5.65 7.492-8.864zm-9.088-9.853c.462-.023.87.365.881.835.009.456-.347.827-.807.843-.506.017-.862-.32-.866-.818-.005-.476.328-.837.792-.86zM5.076 6.629c.48.009.853.401.832.876-.019.452-.398.804-.859.798-.46-.006-.821-.366-.828-.827-.007-.483.369-.855.855-.847zm-.721 3.099c.003-.451.374-.824.829-.835.461-.011.825.335.844.803.02.489-.337.878-.813.887-.473.007-.863-.381-.86-.855zm.515 2.371c.023-.46.396-.806.858-.797.479.01.822.391.802.891-.019.468-.384.813-.846.797-.478-.014-.838-.409-.814-.891zm1.992 3.034c-.5.007-.857-.345-.851-.838.006-.46.371-.832.818-.836.47-.004.873.391.869.853-.002.452-.371.813-.836.821zm3.831-12.11c-.469.012-.868-.38-.866-.849.002-.481.384-.84.876-.826.462.013.814.376.813.837-.001.449-.372.827-.823.838zm5.008 15.122c-.494-.004-.856-.375-.838-.858.018-.446.402-.81.855-.808.479.004.85.393.833.875-.015.462-.37.792-.85.791zm1.534-1.77c-.482.011-.872-.367-.866-.84.005-.462.363-.822.825-.833.485-.011.864.356.863.841.001.455-.362.821-.822.832z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dn($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Neo4j" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class NeoFourJ extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dn, create_fragment$dn, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Neovim.svelte generated by Svelte v3.23.2 */

        function create_fragment$do(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.902,4.998l3.864,5.754v12.151l-4.207-4.198V5.344L2.902,4.998 M2.97,4.287L2.107,5.158v13.734l5.112,5.101 v-13.38L2.97,4.287L2.97,4.287z M21.858,5.207L16.676,0v13.331l4.335,6.519c0,0,0.882-0.957,0.882-0.957L21.858,5.207z M7.215,0.001 l13.29,20.28L16.786,24L3.489,3.765L7.215,0.001z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$do($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Neovim" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Neovim extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$do, create_fragment$do, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nestjs.svelte generated by Svelte v3.23.2 */

        function create_fragment$dp(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.131.047c-.173 0-.334.037-.483.087.316.21.49.49.576.806.007.043.019.074.025.117a.681.681 0 0 1 .013.112c.024.545-.143.614-.26.936-.18.415-.13.861.086 1.22a.74.74 0 0 0 .074.137c-.235-1.568 1.073-1.803 1.314-2.293.019-.428-.334-.713-.613-.911a1.37 1.37 0 0 0-.732-.21zM16.102.4c-.024.143-.006.106-.012.18-.006.05-.006.112-.012.161-.013.05-.025.1-.044.149-.012.05-.03.1-.05.149l-.067.142c-.02.025-.031.05-.05.075l-.037.055a2.152 2.152 0 0 1-.093.124c-.037.038-.068.081-.112.112v.006c-.037.031-.074.068-.118.1-.13.099-.278.173-.415.266-.043.03-.087.056-.124.093a.906.906 0 0 0-.118.099c-.043.037-.074.074-.111.118-.031.037-.068.08-.093.124a1.582 1.582 0 0 0-.087.13c-.025.05-.043.093-.068.142-.019.05-.037.093-.05.143a2.007 2.007 0 0 0-.043.155c-.006.025-.006.056-.012.08-.007.025-.007.05-.013.075 0 .05-.006.105-.006.155 0 .037 0 .074.006.111 0 .05.006.1.019.155.006.05.018.1.03.15.02.049.032.098.05.148.013.03.031.062.044.087l-1.426-.552c-.241-.068-.477-.13-.719-.186l-.39-.093c-.372-.074-.75-.13-1.128-.167-.013 0-.019-.006-.031-.006A11.082 11.082 0 0 0 8.9 2.855c-.378.025-.756.074-1.134.136a12.45 12.45 0 0 0-.837.174l-.279.074c-.092.037-.18.08-.266.118l-.205.093c-.012.006-.024.006-.03.012-.063.031-.118.056-.174.087a2.738 2.738 0 0 0-.236.118c-.043.018-.086.043-.124.062a.559.559 0 0 1-.055.03c-.056.032-.112.063-.162.094a1.56 1.56 0 0 0-.148.093c-.044.03-.087.055-.124.086-.006.007-.013.007-.019.013-.037.025-.08.056-.118.087l-.012.012-.093.074c-.012.007-.025.019-.037.025-.031.025-.062.056-.093.08-.006.013-.019.02-.025.025-.037.038-.074.069-.111.106-.007 0-.007.006-.013.012a1.742 1.742 0 0 0-.111.106c-.007.006-.007.012-.013.012a1.454 1.454 0 0 0-.093.1c-.012.012-.03.024-.043.036a1.374 1.374 0 0 1-.106.112c-.006.012-.018.019-.024.03-.05.05-.093.1-.143.15l-.018.018c-.1.106-.205.211-.317.304-.111.1-.229.192-.347.273a3.777 3.777 0 0 1-.762.421c-.13.056-.267.106-.403.149-.26.056-.527.161-.756.18-.05 0-.105.012-.155.018l-.155.037-.149.056c-.05.019-.099.044-.148.068-.044.031-.093.056-.137.087a1.011 1.011 0 0 0-.124.106c-.043.03-.087.074-.124.111-.037.043-.074.08-.105.124-.031.05-.068.093-.093.143a1.092 1.092 0 0 0-.087.142c-.025.056-.05.106-.068.161-.019.05-.037.106-.056.161-.012.05-.025.1-.03.15 0 .005-.007.012-.007.018-.012.056-.012.13-.019.167C.006 7.95 0 7.986 0 8.03a.657.657 0 0 0 .074.31v.006c.019.037.044.075.069.112.024.037.05.074.08.111.031.031.068.069.106.1a.906.906 0 0 0 .117.099c.149.13.186.173.378.272.031.019.062.031.1.05.006 0 .012.006.018.006 0 .013 0 .019.006.031a1.272 1.272 0 0 0 .08.298c.02.037.032.074.05.111.007.013.013.025.02.031.024.05.049.093.073.137l.093.13c.031.037.069.08.106.118.037.037.074.068.118.105 0 0 .006.006.012.006.037.031.074.062.112.087a.986.986 0 0 0 .136.08c.043.025.093.05.142.069a.73.73 0 0 0 .124.043c.007.006.013.006.025.012.025.007.056.013.08.019-.018.335-.024.65.026.762.055.124.328-.254.6-.688-.036.428-.061.93 0 1.079.069.155.44-.329.763-.862 4.395-1.016 8.405 2.02 8.826 6.31-.08-.67-.905-1.041-1.283-.948-.186.458-.502 1.047-1.01 1.413.043-.41.025-.83-.062-1.24a4.009 4.009 0 0 1-.769 1.562c-.588.043-1.177-.242-1.487-.67-.025-.018-.031-.055-.05-.08-.018-.043-.037-.087-.05-.13a.515.515 0 0 1-.037-.13c-.006-.044-.006-.087-.006-.137v-.093a.992.992 0 0 1 .031-.13c.013-.043.025-.086.044-.13.024-.043.043-.087.074-.13.105-.298.105-.54-.087-.682a.706.706 0 0 0-.118-.062c-.024-.006-.055-.018-.08-.025l-.05-.018a.847.847 0 0 0-.13-.031.472.472 0 0 0-.13-.019 1.01 1.01 0 0 0-.136-.012c-.031 0-.062.006-.093.006a.484.484 0 0 0-.137.019c-.043.006-.086.012-.13.024a1.068 1.068 0 0 0-.13.044c-.043.018-.08.037-.124.056-.037.018-.074.043-.118.062-1.444.942-.582 3.148.403 3.787-.372.068-.75.148-.855.229l-.013.012c.267.161.546.298.837.416.397.13.818.247 1.004.297v.006a5.996 5.996 0 0 0 1.562.112c2.746-.192 4.996-2.281 5.405-5.033l.037.161c.019.112.043.23.056.347v.006c.012.056.018.112.025.162v.024c.006.056.012.112.012.162.006.068.012.136.012.204v.1c0 .03.007.067.007.098 0 .038-.007.075-.007.112v.087c0 .043-.006.08-.006.124 0 .025 0 .05-.006.08 0 .044-.006.087-.006.137-.006.018-.006.037-.006.055l-.02.143c0 .019 0 .037-.005.056-.007.062-.019.118-.025.18v.012l-.037.174v.018l-.037.167c0 .007-.007.02-.007.025a1.663 1.663 0 0 1-.043.168v.018c-.019.062-.037.118-.05.174-.006.006-.006.012-.006.012l-.056.186c-.024.062-.043.118-.068.18-.025.062-.043.124-.068.18-.025.062-.05.117-.074.18h-.007c-.024.055-.05.117-.08.173a.302.302 0 0 1-.019.043c-.006.006-.006.013-.012.019a5.867 5.867 0 0 1-1.742 2.082c-.05.031-.099.069-.149.106-.012.012-.03.018-.043.03a2.603 2.603 0 0 1-.136.094l.018.037h.007l.26-.037h.006c.161-.025.322-.056.483-.087.044-.006.093-.019.137-.031l.087-.019c.043-.006.086-.018.13-.024.037-.013.074-.02.111-.031.62-.15 1.221-.354 1.798-.595a9.926 9.926 0 0 1-3.85 3.142c.714-.05 1.426-.167 2.114-.366a9.903 9.903 0 0 0 5.857-4.68 9.893 9.893 0 0 1-1.667 3.986 9.758 9.758 0 0 0 1.655-1.376 9.824 9.824 0 0 0 2.61-5.268c.21.98.272 1.99.18 2.987 4.474-6.241.371-12.712-1.346-14.416-.006-.013-.012-.019-.012-.031-.006.006-.006.006-.006.012 0-.006 0-.006-.007-.012 0 .074-.006.148-.012.223a8.34 8.34 0 0 1-.062.415c-.03.136-.068.273-.105.41-.044.13-.093.266-.15.396a5.322 5.322 0 0 1-.185.378 4.735 4.735 0 0 1-.477.688c-.093.111-.192.21-.292.31a3.994 3.994 0 0 1-.18.155l-.142.124a3.459 3.459 0 0 1-.347.241 4.295 4.295 0 0 1-.366.211c-.13.062-.26.118-.39.174a4.364 4.364 0 0 1-.818.223c-.143.025-.285.037-.422.05a4.914 4.914 0 0 1-.297.012 4.66 4.66 0 0 1-.422-.025 3.137 3.137 0 0 1-.421-.062 3.136 3.136 0 0 1-.415-.105h-.007c.137-.013.273-.025.41-.05a4.493 4.493 0 0 0 .818-.223c.136-.05.266-.112.39-.174.13-.062.248-.13.372-.204.118-.08.235-.161.347-.248.112-.087.217-.18.316-.279.105-.093.198-.198.291-.304.093-.111.18-.223.26-.334.013-.019.026-.044.038-.062.062-.1.124-.199.18-.298a4.272 4.272 0 0 0 .334-.775c.044-.13.075-.266.106-.403.025-.142.05-.278.062-.415.012-.142.025-.285.025-.421 0-.1-.007-.199-.013-.298a6.726 6.726 0 0 0-.05-.415 4.493 4.493 0 0 0-.092-.415c-.044-.13-.087-.267-.137-.397-.05-.13-.111-.26-.173-.384-.069-.124-.137-.248-.211-.366a6.843 6.843 0 0 0-.248-.34c-.093-.106-.186-.212-.285-.317a3.878 3.878 0 0 0-.161-.155c-.28-.217-.57-.421-.862-.607a1.154 1.154 0 0 0-.124-.062 2.415 2.415 0 0 0-.589-.26Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dp($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NestJS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nestjs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dp, create_fragment$dp, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Netapp.svelte generated by Svelte v3.23.2 */

        function create_fragment$dq(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 2v20h9.33V10h5.34v12H24V2Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dq($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NetApp" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Netapp extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dq, create_fragment$dq, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Netflix.svelte generated by Svelte v3.23.2 */

        function create_fragment$dr(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.388.004l4.75 13.462v-.007l.377 1.06c2.088 5.91 3.21 9.077 3.216 9.084.004 0 .32.02.702.04 1.156.05 2.59.18 3.676.31.25.03.466.04.48.03L13.88 10.62l-.436-1.23-2.423-6.852c-.46-1.3-.85-2.408-.87-2.45L10.117 0H5.393zm8.509.008l-.01 5.307-.008 5.307-.437-1.232v-.002l-.565 11.811c.555 1.568.852 2.404.855 2.408.004.004.32.024.702.042 1.157.05 2.59.18 3.68.31.25.03.467.04.48.03.013-.01.02-5.42.017-12.012L18.603.01h-4.706zM5.388.002v11.992c0 6.595.007 11.997.015 12.005.008.008.416-.03.907-.086.49-.06 1.17-.13 1.51-.16.518-.05 2.068-.15 2.248-.15.052 0 .056-.27.063-5.081l.008-5.08.38 1.06.13.375.57-11.801-.19-.547-.88-2.44-.03-.087z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dr($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Netflix" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Netflix extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dr, create_fragment$dr, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Netlify.svelte generated by Svelte v3.23.2 */

        function create_fragment$ds(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M16.934 8.519a1.044 1.044 0 0 1 .303.23l2.349-1.045-2.192-2.171-.491 2.954zM12.06 6.546a1.305 1.305 0 0 1 .209.574l3.497 1.482a1.044 1.044 0 0 1 .355-.177l.574-3.55-2.13-2.234-2.505 3.852v.053zm11.933 5.491l-3.748-3.748-2.548 1.044 6.264 2.662s.053.042.032.042zm-.627.606l-6.013-2.569a1.044 1.044 0 0 1-.7.407l-.647 3.957a1.044 1.044 0 0 1 .303.731l3.633.762 3.33-3.31v-.062zM15.4 9.25L12.132 7.86a1.2 1.2 0 0 1-1.044.543h-.199L8.185 12.58l7.225-3.132v.01a.887.887 0 0 1 0-.167.052.052 0 0 0-.01-.041zm3.967 7.308l-3.195-.658a1.096 1.096 0 0 1-.46.344l-.761 4.72 4.437-4.396s-.01.02-.021.02zm-4.469-.324a1.044 1.044 0 0 1-.616-.71l-5.95-1.222-.084.136 5.398 7.81.323-.324.919-5.67s.031.022.01.011zm-6.441-2.652l5.878 1.211a1.044 1.044 0 0 1 .824-.522l.637-3.894-.135-.115-7.308 3.132a1.817 1.817 0 0 1 .104.188zm-2.464.981l-.125-.125-2.537 1.044 1.232 1.222 1.399-2.172zm1.67.397a1.368 1.368 0 0 1-.563.125 1.389 1.389 0 0 1-.45-.073l-1.544 2.245 6.765 6.702 1.19-1.18zm-.95-2.641a1.702 1.702 0 0 1 .314 0 1.378 1.378 0 0 1 .344 0l2.735-4.25a1.19 1.19 0 0 1-.334-.824 1.242 1.242 0 0 1 0-.271l-3.32-1.535-2.672 2.6zm.303-7.402l3.237 1.378a1.242 1.242 0 0 1 .835-.282 1.357 1.357 0 0 1 .397.063l2.526-3.947L11.923.041 7.016 4.854s-.01.052 0 .063zm-1.21 8.164a1.566 1.566 0 0 1 .24-.334L3.278 8.613 0 11.797l5.804 1.284zm-.262.7L.533 12.735l2.203 2.235 2.777-1.18z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$ds($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Netlify" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Netlify extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$ds, create_fragment$ds, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Newrelic.svelte generated by Svelte v3.23.2 */

        function create_fragment$dt(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.9994 16.3548a4.354 4.354 0 1 1 4.354-4.354 4.3598 4.3598 0 0 1-4.354 4.354zm0-8.1333a3.7793 3.7793 0 1 0 3.7793 3.7792 3.7836 3.7836 0 0 0-3.7793-3.7792zm1.0289 10.9181a6.9722 6.9722 0 1 1 6.9737-6.9722 6.9808 6.9808 0 0 1-6.9737 6.9722zm0-13.3639a6.3974 6.3974 0 1 0 6.3989 6.3975 6.4046 6.4046 0 0 0-6.399-6.4032zm-2.1727 15.998c-5.3657 0-9.7571-2.9617-10.6782-7.2037C-.9521 9.3725 3.4307 3.991 9.9488 2.5727a15.0552 15.0552 0 0 1 3.193-.3463c5.3657 0 9.7571 2.9616 10.6782 7.2021.5504 2.5305-.171 5.1732-2.0319 7.445-1.8609 2.2719-4.5983 3.8684-7.7396 4.5524a15.0495 15.0495 0 0 1-3.193.3477zm2.2848-18.9682a14.479 14.479 0 0 0-3.0694.329C3.8632 4.484-.3241 9.5594.7392 14.448c.8622 3.9747 5.0295 6.7538 10.1164 6.7538a14.4833 14.4833 0 0 0 3.0708-.3334c3.0177-.6567 5.653-2.2029 7.4163-4.354 1.7631-2.1512 2.427-4.5984 1.9154-6.9593-.8636-3.9776-5.0236-6.7538-10.1163-6.7538Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dt($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "New Relic" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Newrelic extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dt, create_fragment$dt, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Newyorktimes.svelte generated by Svelte v3.23.2 */

        function create_fragment$du(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M21.272,14.815h-0.098c-0.747,2.049-2.335,3.681-4.363,4.483v-4.483l2.444-2.182l-2.444-2.182V7.397 c2.138,0.006,3.885-1.703,3.927-3.84c0-2.629-2.509-3.556-3.927-3.556c-0.367-0.007-0.734,0.033-1.091,0.12v0.131h0.556 c0.801-0.141,1.565,0.394,1.706,1.195C17.99,1.491,17.996,1.537,18,1.583c-0.033,0.789-0.7,1.401-1.488,1.367 c-0.02-0.001-0.041-0.002-0.061-0.004c-2.444,0-5.323-1.985-8.454-1.985C5.547,0.83,3.448,2.692,3.284,5.139 C3.208,6.671,4.258,8.031,5.76,8.346v-0.12C5.301,7.931,5.041,7.407,5.084,6.862c0.074-1.015,0.957-1.779,1.973-1.705 C7.068,5.159,7.08,5.16,7.091,5.161c2.629,0,6.872,2.182,9.501,2.182h0.098v3.142l-2.444,2.182l2.444,2.182v4.549 c-0.978,0.322-2.003,0.481-3.033,0.469c-1.673,0.084-3.318-0.456-4.614-1.516l4.429-1.985V7.451l-6.196,2.727 c0.592-1.75,1.895-3.168,3.589-3.905V6.175c-4.516,1.004-8.138,4.243-8.138,8.705c0,5.193,4.025,9.12,9.818,9.12 c6.011,0,8.727-4.363,8.727-8.814V14.815z M8.858,18.186c-1.363-1.362-2.091-3.235-2.007-5.16c-0.016-0.88,0.109-1.756,0.371-2.596 l2.051-0.938v8.476L8.858,18.186z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$du($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "New York Times" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Newyorktimes extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$du, create_fragment$du, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/NextDotJs.svelte generated by Svelte v3.23.2 */

        function create_fragment$dv(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dv($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Next.js" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class NextDotJs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dv, create_fragment$dv, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nextcloud.svelte generated by Svelte v3.23.2 */

        function create_fragment$dw(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.018 6.537c-2.5 0-4.6 1.712-5.241 4.015-.56-1.232-1.793-2.105-3.225-2.105A3.569 3.569 0 0 0 0 12a3.569 3.569 0 0 0 3.552 3.553c1.432 0 2.664-.874 3.224-2.106.641 2.304 2.742 4.016 5.242 4.016 2.487 0 4.576-1.693 5.231-3.977.569 1.21 1.783 2.067 3.198 2.067A3.568 3.568 0 0 0 24 12a3.569 3.569 0 0 0-3.553-3.553c-1.416 0-2.63.858-3.199 2.067-.654-2.284-2.743-3.978-5.23-3.977zm0 2.085c1.878 0 3.378 1.5 3.378 3.378 0 1.878-1.5 3.378-3.378 3.378A3.362 3.362 0 0 1 8.641 12c0-1.878 1.5-3.378 3.377-3.378zm-8.466 1.91c.822 0 1.467.645 1.467 1.468s-.644 1.467-1.467 1.468A1.452 1.452 0 0 1 2.085 12c0-.823.644-1.467 1.467-1.467zm16.895 0c.823 0 1.468.645 1.468 1.468s-.645 1.468-1.468 1.468A1.452 1.452 0 0 1 18.98 12c0-.823.644-1.467 1.467-1.467z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dw($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nextcloud" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nextcloud extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dw, create_fragment$dw, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nextdoor.svelte generated by Svelte v3.23.2 */

        function create_fragment$dx(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.993 9.816L12 2.473l-4.12 2.524V2.473H4.124v4.819L.004 9.816l1.961 3.202 2.16-1.315v9.826h15.749v-9.826l2.159 1.315 1.96-3.202");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dx($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nextdoor" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nextdoor extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dx, create_fragment$dx, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nfc.svelte generated by Svelte v3.23.2 */

        function create_fragment$dy(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M23.96 1.98A1.89 1.89 0 0022.14.2c-1.1-.07-4.66-.12-5.69-.12 1.83 1.26 2.08 3.64 2.26 8.06.1 2.62 0 11.8 0 12.2l-.05 2.5-9.63-9.64v-3l7.66 7.65c.02-1.52.04-3.5.04-5.3 0-1.76-.03-3.35-.08-4.2-.29-4.81-.74-7.07-3.25-7.96a7.88 7.88 0 00-2.68-.35c-1 0-7.87 0-8.87.05A1.85 1.85 0 00.05 1.9c-.06.98-.07 19.17 0 20.17.05.98.8 1.72 1.8 1.78 1.1.06 4.67.07 5.7.07-1.83-1.26-2.08-3.64-2.26-8.06-.1-2.62 0-11.8 0-12.2l.05-2.5 9.63 9.64v3L7.3 6.16c-.02 1.52-.04 3.5-.04 5.3 0 1.76.03 3.35.08 4.2.29 4.81.74 7.07 3.25 7.95.77.28 1.49.34 2.68.36 1 0 7.87 0 8.86-.05a1.85 1.85 0 001.82-1.81c.05-.98.06-19.13 0-20.12Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dy($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NFC" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nfc extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dy, create_fragment$dy, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nginx.svelte generated by Svelte v3.23.2 */

        function create_fragment$dz(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12 0L1.605 6v12L12 24l10.395-6V6L12 0zm6 16.59c0 .705-.646 1.29-1.529 1.29-.631 0-1.351-.255-1.801-.81l-6-7.141v6.66c0 .721-.57 1.29-1.274 1.29H7.32c-.721 0-1.29-.6-1.29-1.29V7.41c0-.705.63-1.29 1.5-1.29.646 0 1.38.255 1.83.81l5.97 7.141V7.41c0-.721.6-1.29 1.29-1.29h.075c.72 0 1.29.6 1.29 1.29v9.18H18z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dz($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NGINX" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nginx extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dz, create_fragment$dz, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Niconico.svelte generated by Svelte v3.23.2 */

        function create_fragment$dA(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.4787 7.534v12.1279A2.0213 2.0213 0 0 0 2.5 21.6832h2.3888l1.323 2.0948a.4778.4778 0 0 0 .4043.2205.4778.4778 0 0 0 .441-.2205l1.323-2.0948h6.9828l1.323 2.0948a.4778.4778 0 0 0 .441.2205c.1838 0 .3308-.0735.4043-.2205l1.323-2.0948h2.6462a2.0213 2.0213 0 0 0 2.0213-2.0213V7.5339a2.0213 2.0213 0 0 0-2.0213-1.9845h-7.681l4.4468-4.4469L17.1637 0l-5.1452 5.1452L6.8 0 5.6973 1.1025l4.4102 4.4102H2.5367a2.0213 2.0213 0 0 0-2.058 2.058z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dA($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "niconico" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Niconico extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dA, create_fragment$dA, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nim.svelte generated by Svelte v3.23.2 */

        function create_fragment$dB(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.095 2.9s-.92.778-1.857 1.55c-.964-.032-2.856.199-3.88.598C5.412 4.408 4.582 3.7 4.582 3.7s-.709 1.305-1.154 2.07c-.662.377-1.325.8-1.917 1.36C.824 6.84.026 6.482 0 6.471c.911 1.966 1.524 3.935 3.19 5.119 2.654-4.483 14.983-4.07 17.691-.025 1.75-.977 2.43-3.078 3.119-5.018-.075.026-1.012.362-1.619.61-.363-.423-1.217-1.072-1.702-1.385a96.008 96.008 0 00-1.131-2.122s-.794.632-1.715 1.322c-1.243-.246-2.747-.544-4.012-.47A52.988 52.988 0 0112.095 2.9z M.942 10.65l2.189 5.671c3.801 5.366 13.508 5.739 17.74.104 1.001-2.415 2.352-5.808 2.352-5.808-1.086 1.721-2.852 2.909-3.94 3.549-.774.453-2.558.727-2.558.727l-4.684-2.597-4.71 2.545s-1.761-.303-2.558-.701c-1.608-.919-2.69-2.004-3.83-3.49z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dB($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nim" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nim extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dB, create_fragment$dB, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nintendo.svelte generated by Svelte v3.23.2 */

        function create_fragment$dC(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 .6h7.1l9.85 15.9V.6H24v22.8h-7.04L7.06 7.5v15.9H0V.6");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dC($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nintendo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nintendo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dC, create_fragment$dC, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nintendo3ds.svelte generated by Svelte v3.23.2 */

        function create_fragment$dD(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.653 16.63a.712.712 0 1 0 1.424 0 .712.712 0 1 0-1.424 0m-9.45 4.238h7.575c.3 0 .524-.225.544-.524v-5.175c-.02-.282-.263-.525-.544-.507H8.203a.54.54 0 0 0-.544.525v5.156c0 .301.244.525.544.525zm13.051-3.525a.729.729 0 0 0 .73-.729.73.73 0 1 0-.73.729zm-1.443-.019a.714.714 0 1 0 .001 1.427.714.714 0 0 0-.001-1.427zm-.713-2.137a.712.712 0 1 0 1.424 0 .712.712 0 1 0-1.424 0M2.54 16.612a1.65 1.65 0 1 0 3.3 0 1.65 1.65 0 1 0-3.3 0M21.272 0H2.728A2.73 2.73 0 0 0-.01 2.72v18.542C.009 22.781 1.228 24 2.728 24h18.526a2.753 2.753 0 0 0 2.756-2.719V2.737C23.991 1.219 22.772 0 21.272 0zm1.913 21.281a1.92 1.92 0 0 1-1.912 1.912H2.728a1.92 1.92 0 0 1-1.913-1.912v-8.456h22.369v8.456zm0-9.694H.815v-8.85A1.92 1.92 0 0 1 2.728.824h18.544c1.049 0 1.912.863 1.912 1.913v8.85 M17.409 3.112H6.534c-.3 0-.544.263-.544.563V9.15c0 .3.226.563.544.563h10.875a.548.548 0 0 0 .544-.563V3.656a.543.543 0 0 0-.544-.544z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dD($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nintendo 3DS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nintendo3ds extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dD, create_fragment$dD, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nintendogamecube.svelte generated by Svelte v3.23.2 */

        function create_fragment$dE(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M6.815 15.128l4.704 2.715V12.41L6.813 9.696v5.433zM4.79 16.296l6.73 3.883V24L1.48 18.207V6.617l3.31 1.91v7.77zM12 6.146L7.297 8.864 12 11.58l4.705-2.717L12 6.147zM12 3.813l5.66 3.275 3.31-1.91L12 0 1.973 5.79 5.28 7.697 12 3.813zm7.208 12.483v-3.948l-2.023 1.167v1.614l-4.704 2.715v.005-5.436L22.52 6.62v11.588l-10.04 5.795v-3.817l6.728-3.888z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dE($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nintendo GameCube" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nintendogamecube extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dE, create_fragment$dE, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nintendonetwork.svelte generated by Svelte v3.23.2 */

        function create_fragment$dF(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.9645 8.6861a.645.645 0 0 1-.5193-.2664c-2.1109-2.893-5.5554-4.624-9.2154-4.624a11.4744 11.4744 0 0 0-4.6887.9864.6413.6413 0 0 1-.8493-.3375.6563.6563 0 0 1 .3325-.8593 12.7795 12.7795 0 0 1 5.2055-1.0946c4.0672 0 7.9003 1.9265 10.2527 5.1544a.66.66 0 0 1-.137.9128.6326.6326 0 0 1-.381.1282M.9023 8.9788c0-.4919.411-.8892.9178-.8892h2.3313c.2104 0 .3636-.0958.5566-.2291a9.2229 9.2229 0 0 1 5.2677-1.6339c5.01 0 9.0735 3.9415 9.0735 8.802v8.0771a.9078.9078 0 0 1-.9216.8942h-2.9551a.909.909 0 0 1-.924-.8942v-8.0771c0-2.289-1.9116-4.1457-4.274-4.1457-2.3599 0-4.2715 1.8555-4.2715 4.1457v8.0771A.909.909 0 0 1 4.779 24H1.824a.9078.9078 0 0 1-.9216-.8942V8.98M4.302 2.5915a14.5479 14.5479 0 0 1 5.98-1.274c4.822 0 9.0747 2.3288 11.6488 5.8792a.6397.6397 0 0 0 .9041.1408.67.67 0 0 0 .137-.9228C20.155 2.528 15.5162 0 10.281 0a15.7907 15.7907 0 0 0-6.502 1.3873.6625.6625 0 0 0-.33.8693.6401.6401 0 0 0 .8518.3362Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dF($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nintendo Network" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nintendonetwork extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dF, create_fragment$dF, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nintendoswitch.svelte generated by Svelte v3.23.2 */

        function create_fragment$dG(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M14.176 24h3.674c3.376 0 6.15-2.774 6.15-6.15V6.15C24 2.775 21.226 0 17.85 0H14.1c-.074 0-.15.074-.15.15v23.7c-.001.076.075.15.226.15zm4.574-13.199c1.351 0 2.399 1.125 2.399 2.398 0 1.352-1.125 2.4-2.399 2.4-1.35 0-2.4-1.049-2.4-2.4-.075-1.349 1.05-2.398 2.4-2.398zM11.4 0H6.15C2.775 0 0 2.775 0 6.15v11.7C0 21.226 2.775 24 6.15 24h5.25c.074 0 .15-.074.15-.149V.15c.001-.076-.075-.15-.15-.15zM9.676 22.051H6.15c-2.326 0-4.201-1.875-4.201-4.201V6.15c0-2.326 1.875-4.201 4.201-4.201H9.6l.076 20.102zM3.75 7.199c0 1.275.975 2.25 2.25 2.25s2.25-.975 2.25-2.25c0-1.273-.975-2.25-2.25-2.25s-2.25.977-2.25 2.25z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dG($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nintendo Switch" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nintendoswitch extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dG, create_fragment$dG, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nissan.svelte generated by Svelte v3.23.2 */

        function create_fragment$dH(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M20.576 14.955l-.01.028c-1.247 3.643-4.685 6.086-8.561 6.086-3.876 0-7.32-2.448-8.562-6.09l-.01-.029H.71v.329l1.133.133c.7.08.847.39 1.038.78l.048.096c1.638 3.495 5.204 5.752 9.08 5.752 3.877 0 7.443-2.257 9.081-5.747l.048-.095c.19-.39.338-.7 1.038-.781l1.134-.134v-.328zM3.443 9.012c1.247-3.643 4.686-6.09 8.562-6.09 3.876 0 7.319 2.447 8.562 6.09l.01.028h2.728v-.328l-1.134-.133c-.7-.081-.847-.39-1.038-.781l-.047-.096C19.448 4.217 15.88 1.96 12.005 1.96c-3.881 0-7.443 2.257-9.081 5.752l-.048.095c-.19.39-.338.7-1.038.781l-1.133.133v.329h2.724zm13.862 1.586l-1.743 2.795h.752l.31-.5h2.033l.31.5h.747l-1.743-2.795zm1.033 1.766h-1.395l.7-1.124zm2.81-1.066l2.071 2.095H24v-2.795h-.614v2.085l-2.062-2.085h-.795v2.795h.619zM0 13.393h.619v-2.095l2.076 2.095h.781v-2.795h-.619v2.085L.795 10.598H0zm4.843-2.795h.619v2.795h-.62zm4.486 2.204c-.02.005-.096.005-.124.005H6.743v.572h2.5c.019 0 .167 0 .195-.005.51-.048.743-.472.743-.843 0-.381-.243-.79-.705-.833-.09-.01-.166-.01-.2-.01H7.643a.83.83 0 0 1-.181-.014c-.129-.034-.176-.148-.176-.243 0-.086.047-.2.18-.238a.68.68 0 0 1 .172-.014h2.357v-.562H7.6c-.1 0-.176.004-.238.014a.792.792 0 0 0-.695.805c0 .343.214.743.685.81.086.009.205.009.258.009H9.2c.029 0 .1 0 .114.005.181.023.243.157.243.276a.262.262 0 0 1-.228.266zm4.657 0c-.02.005-.096.005-.129.005H11.4v.572h2.5c.019 0 .167 0 .195-.005.51-.048.743-.472.743-.843 0-.381-.243-.79-.705-.833-.09-.01-.166-.01-.2-.01H12.3a.83.83 0 0 1-.181-.014c-.129-.034-.176-.148-.176-.243 0-.086.047-.2.18-.238a.68.68 0 0 1 .172-.014h2.357v-.562h-2.395c-.1 0-.176.004-.238.014a.792.792 0 0 0-.695.805c0 .343.214.743.686.81.085.009.204.009.257.009h1.59c.029 0 .1 0 .114.005.181.023.243.157.243.276a.267.267 0 0 1-.228.266Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dH($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nissan" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nissan extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dH, create_fragment$dH, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nixos.svelte generated by Svelte v3.23.2 */

        function create_fragment$dI(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M7.352 1.592l-1.364.002L5.32 2.75l1.557 2.713-3.137-.008-1.32 2.34H14.11l-1.353-2.332-3.192-.006-2.214-3.865zm6.175 0l-2.687.025 5.846 10.127 1.341-2.34-1.59-2.765 2.24-3.85-.683-1.182h-1.336l-1.57 2.705-1.56-2.72zm6.887 4.195l-5.846 10.125 2.696-.008 1.601-2.76 4.453.016.682-1.183-.666-1.157-3.13-.008L21.778 8.1l-1.365-2.313zM9.432 8.086l-2.696.008-1.601 2.76-4.453-.016L0 12.02l.666 1.157 3.13.008-1.575 2.71 1.365 2.315L9.432 8.086zM7.33 12.25l-.006.01-.002-.004-1.342 2.34 1.59 2.765-2.24 3.85.684 1.182H7.35l.004-.006h.001l1.567-2.698 1.558 2.72 2.688-.026-.004-.006h.01L7.33 12.25zm2.55 3.93l1.354 2.332 3.192.006 2.215 3.865 1.363-.002.668-1.156-1.557-2.713 3.137.008 1.32-2.34H9.881Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dI($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NixOS" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nixos extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dI, create_fragment$dI, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/NodeRed.svelte generated by Svelte v3.23.2 */

        function create_fragment$dJ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M3 0C1.338 0 0 1.338 0 3v6.107h2.858c1.092 0 1.97.868 1.964 1.96v.021c.812-.095 1.312-.352 1.674-.683.416-.382.69-.91 1.016-1.499.325-.59.71-1.244 1.408-1.723.575-.395 1.355-.644 2.384-.686v-.45c0-1.092.88-1.976 1.972-1.976h7.893c1.091 0 1.974.884 1.974 1.976v1.942c0 1.091-.883 2.029-1.974 2.029h-7.893c-1.092 0-1.972-.938-1.972-2.03v-.453c-.853.037-1.408.236-1.798.504-.48.33-.774.802-1.086 1.368-.312.565-.63 1.22-1.222 1.763l-.077.069c3.071.415 4.465 1.555 5.651 2.593 1.39 1.215 2.476 2.275 6.3 2.288v-.46c0-1.092.894-1.946 1.986-1.946H24V3c0-1.662-1.338-3-3-3zm10.276 5.41c-.369 0-.687.268-.687.637v1.942c0 .368.318.636.687.636h7.892a.614.614 0 0 0 .635-.636V6.047a.614.614 0 0 0-.635-.636zM0 10.448v3.267h2.858a.696.696 0 0 0 .678-.69v-1.942c0-.368-.31-.635-.678-.635zm4.821 1.67v.907A1.965 1.965 0 0 1 2.858 15H0v6c0 1.662 1.338 3 3 3h18c1.662 0 3-1.338 3-3v-1.393h-2.942c-1.092 0-1.986-.913-1.986-2.005v-.445c-4.046-.032-5.598-1.333-6.983-2.544-1.437-1.257-2.751-2.431-7.268-2.496zM21.058 15a.644.644 0 0 0-.647.66v1.942c0 .368.278.612.647.612H24V15z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dJ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Node-RED" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class NodeRed extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dJ, create_fragment$dJ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/NodeDotJs.svelte generated by Svelte v3.23.2 */

        function create_fragment$dK(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M11.998,24c-0.321,0-0.641-0.084-0.922-0.247l-2.936-1.737c-0.438-0.245-0.224-0.332-0.08-0.383 c0.585-0.203,0.703-0.25,1.328-0.604c0.065-0.037,0.151-0.023,0.218,0.017l2.256,1.339c0.082,0.045,0.197,0.045,0.272,0l8.795-5.076 c0.082-0.047,0.134-0.141,0.134-0.238V6.921c0-0.099-0.053-0.192-0.137-0.242l-8.791-5.072c-0.081-0.047-0.189-0.047-0.271,0 L3.075,6.68C2.99,6.729,2.936,6.825,2.936,6.921v10.15c0,0.097,0.054,0.189,0.139,0.235l2.409,1.392 c1.307,0.654,2.108-0.116,2.108-0.89V7.787c0-0.142,0.114-0.253,0.256-0.253h1.115c0.139,0,0.255,0.112,0.255,0.253v10.021 c0,1.745-0.95,2.745-2.604,2.745c-0.508,0-0.909,0-2.026-0.551L2.28,18.675c-0.57-0.329-0.922-0.945-0.922-1.604V6.921 c0-0.659,0.353-1.275,0.922-1.603l8.795-5.082c0.557-0.315,1.296-0.315,1.848,0l8.794,5.082c0.57,0.329,0.924,0.944,0.924,1.603 v10.15c0,0.659-0.354,1.273-0.924,1.604l-8.794,5.078C12.643,23.916,12.324,24,11.998,24z M19.099,13.993 c0-1.9-1.284-2.406-3.987-2.763c-2.731-0.361-3.009-0.548-3.009-1.187c0-0.528,0.235-1.233,2.258-1.233 c1.807,0,2.473,0.389,2.747,1.607c0.024,0.115,0.129,0.199,0.247,0.199h1.141c0.071,0,0.138-0.031,0.186-0.081 c0.048-0.054,0.074-0.123,0.067-0.196c-0.177-2.098-1.571-3.076-4.388-3.076c-2.508,0-4.004,1.058-4.004,2.833 c0,1.925,1.488,2.457,3.895,2.695c2.88,0.282,3.103,0.703,3.103,1.269c0,0.983-0.789,1.402-2.642,1.402 c-2.327,0-2.839-0.584-3.011-1.742c-0.02-0.124-0.126-0.215-0.253-0.215h-1.137c-0.141,0-0.254,0.112-0.254,0.253 c0,1.482,0.806,3.248,4.655,3.248C17.501,17.007,19.099,15.91,19.099,13.993z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dK($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Node.js" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class NodeDotJs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dK, create_fragment$dK, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nodemon.svelte generated by Svelte v3.23.2 */

        function create_fragment$dL(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M22.33 7.851l-.716-.398c1.101-1.569 1.758-3.927.934-7.453 0 0-1.857 5.029-5.59 4.863l-4.37-2.431a1.171 1.171 0 0 0-.536-.15h-.101a1.183 1.183 0 0 0-.538.15L7.042 4.863C3.309 5.03 1.452 0 1.452 0c-.825 3.526-.166 5.884.934 7.453l-.716.398a1.133 1.133 0 0 0-.589.988l.022 14.591c0 .203.109.392.294.491a.58.58 0 0 0 .584 0l5.79-3.204c.366-.211.589-.582.589-.987v-6.817c0-.406.223-.783.588-.984l2.465-1.372a1.19 1.19 0 0 1 .59-.154c.2 0 .407.05.585.154l2.465 1.372c.365.201.588.578.588.984v6.817c0 .405.226.779.59.987l5.788 3.204a.59.59 0 0 0 .589 0 .564.564 0 0 0 .292-.491l.019-14.591a1.129 1.129 0 0 0-.589-.988z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dL($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nodemon" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nodemon extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dL, create_fragment$dL, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nokia.svelte generated by Svelte v3.23.2 */

        function create_fragment$dM(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M1.156 13.954H0v-3.892h1.998l2.294 2.905v-2.905h1.156v3.892H3.489l-2.333-2.956v2.956m9.82-1.204c0 .54-.097.728-.257.907-.244.266-.6.346-1.289.346H7.457c-.686 0-1.044-.08-1.289-.346-.16-.18-.256-.365-.256-.907v-1.5c0-.54.096-.727.256-.906.245-.266.603-.347 1.289-.347H9.43c.688 0 1.045.08 1.29.347.16.18.256.365.256.907v1.5m-1.594.267c.264 0 .356-.017.42-.074.06-.053.086-.12.086-.35v-1.187c0-.23-.026-.297-.085-.35-.065-.059-.157-.074-.42-.074H7.505c-.264 0-.357.015-.42.074-.06.053-.085.12-.085.35v1.187c0 .23.026.297.085.35.063.057.156.074.42.074h1.876m3.273-2.956v3.892h-1.207v-3.892h1.207m2.04 0h1.595l-2.152 1.82 2.427 2.072h-1.706l-2.204-2.03 2.04-1.861m2.092 0h1.208v3.891h-1.208m5.812 0l-.357-.678h-2.337l-.353.678h-1.334l2.14-3.892h1.502L24 13.954h-1.4m-2.275-1.523h1.5l-.75-1.41-.75 1.41");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dM($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nokia" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nokia extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dM, create_fragment$dM, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Notepadplusplus.svelte generated by Svelte v3.23.2 */

        function create_fragment$dN(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.674 2.398c.506-.405 1.214-.203 1.822-.203.709.304 1.215.911 1.62 1.519.202.202.405.607.708.607.405-.304.71-.607 1.114-.81 1.012-.303 2.126-.506 3.037 0 .506.506.709 1.215.81 1.924-.101 1.316-.607 2.632-1.518 3.543-.304.101-.507.203-.81.304.202.405.506.81.607 1.316.101.304-.304.506-.506.709-.911.81-2.227 1.012-3.442 1.215-.304-.102-.506-.102-.81-.203.101.405.304.911.506 1.316.203-.101.506-.202.709-.304.405 0 .81.304 1.113.507.81 0 1.62-.102 2.329 0 1.012.303 2.126.1 3.037.708v.304c-1.114.304-2.328.304-3.442.81-.506.304-1.114.101-1.62 0-.405.607-1.012 1.114-1.822 1.114-.608-.102-1.013-.608-1.316-1.114h-1.823c-.303.202-.506.506-.81.405-.303 0-.506-.304-.708-.405H10.23c-.91 0-1.923-.101-2.834.101-.405.203-.81-.202-1.215-.303H4.967c-.101 1.214.607 2.43 1.215 3.442.405.708 1.012 1.518 1.923 1.72.71.203 1.62.203 2.126-.404.405-1.013-.1-2.025-.607-2.835-.506.203-1.316.203-1.417.911.202.101.405.304.607.405 0-.202-.101-.506-.101-.709.405.102 1.012.304.911.81-.202.405-.709.507-1.114.608-.607 0-.91-.608-1.214-1.114-.304-.506.1-1.012.506-1.215.405-.202.607-.607 1.113-.708.709 0 1.62.1 2.025.81.608 1.012 1.215 2.43.506 3.644-.1.304-.405.304-.607.405-.304.101-.608.405-1.012.506-1.013.203-2.228.203-3.038-.405-.91-.708-1.518-1.822-2.126-2.834-.506-.911-.708-1.924-.91-2.936H.512c-.608-.203-.503-.9-.507-1.418.405-.202.81-.303 1.114-.405.304-.1.709.102 1.012.102.507-.102 1.013-.102 1.418-.304 0 0 .1-.101.202-.101.101-.405.101-.81.203-1.114v1.316h.607c.405-.91.709-1.72 1.417-2.227.203-.203.304-.405.507-.506.202-.101.405.101.506.303-.608.71-.405 1.722.101 2.43-.304.203-.607.506-.911.81.202.608.709.81 1.316 1.013-.506-.405-1.012-.81-.911-1.418.202-.304.709-.202 1.012-.304-.202-.303-.506-.607-.607-.91 0-.608.202-1.114.405-1.62.101 0 .304.1.405.1 0 .203 0 .406.101.608.506.304 1.012.304 1.62.405a4.16 4.16 0 002.227 0v-.506c.101-.304.203-.81.608-.608 0 .405-.102.81-.102 1.215s.203.709.405.911c.608.71.101 1.823 1.013 2.43-.102-.405-.203-.708-.304-1.113v-.102c.101-.405.607-.607.911-.708-.202-.507-.81-.102-1.012.202a4.375 4.375 0 01-.608-.709v-.607c-.101-.506 0-1.114.304-1.62h.405c-.101.405-.203.81-.304 1.114.203 0 .405 0 .608.101.708.101 1.518-.101 2.126-.506l.607-.304c.405.203.81.405 1.215.304 1.012-.203 2.227-.405 3.037-1.215-.101-.202-.202-.405-.202-.607-.304-.405-.507-.912-.912-1.215-.404-.203-.91-.405-1.417-.608-.506.405-.709 1.013-1.113 1.418-.507.303-1.215.405-1.823.303-.708-.202-1.215-.607-1.822-1.012a2.697 2.697 0 01-.608-1.012c-.1-.304-.202-.507-.202-.81-.101-.304-.101-.81-.405-.911-1.114-.507-2.126-.81-3.138-.71-.81.305-1.721.406-2.43 1.114-1.013.912-1.62 2.126-2.025 3.443 0 .1-.101.202-.101.303 0 0 0 .102-.101.203-.203-.304-.405 0-.608.101.203-.709.405-1.316.709-1.924.506-1.316 1.316-2.53 2.632-3.24a6.108 6.108 0 011.924-.607c1.113 0 2.227.304 3.24.71.1-.912.303-1.722.708-2.532.101-.202.405-.405.709-.607m.81.405c-.81.1-1.317.81-1.52 1.518-.303.911-.404 1.924 0 2.835.102.405.203 1.012.608 1.215v.101c.608.607 1.62 1.012 2.531.81.304-.203.709-.405.912-.81.607-1.215.708-2.632.303-3.847-.303-.203-.708-.506-.91-.911-.406-.608-1.115-1.215-1.924-.911m3.442 2.227c0 .81.1 1.62 0 2.43.91.303 1.822.708 2.227 1.518.304-.405.81-.708 1.114-1.012.607-.911 1.214-2.227.708-3.341-.202-.709-1.012-1.012-1.72-.911-.81.202-1.823.506-2.33 1.316M5.879 11.914c-.304.506-.708 1.114-.607 1.721.405 0 .91 0 1.316-.202-.304-.506-.405-1.114-.203-1.62-.303 0-.405 0-.506.101m1.62.405c-.101.506 0 1.012.304 1.316.202-.202.405-.304.708-.506 0-.202.102-.405.102-.506-.304-.203-.81-.203-1.114-.304m7.998.203c.202.506.81.81 1.012 1.316-.1.202-.405.506-.202.708.101-.506.506-.708.911-.91h-.709c-.202-.406-.303-.81-.607-1.114a.308.308 0 00-.405 0m-2.43.202v.81c.101.101.304.202.405.202.101-.303.405-.405.709-.405.405.71 1.215.608 1.923.608-.303-.304-.607-.506-.91-.81-.102-.101-.203-.405-.406-.405-.405.101-.81.101-1.215.101-.202-.1-.405-.1-.506-.1m-3.847.202c-.101.404-.304.708-.709.91.203 0 .507.102.71.102.202-.304.1-.709.1-1.012h-.1m.708 0l-.304.91c.911.102 1.924.102 2.835 0-.101-.404-.304-.708-.608-1.012-.607.102-1.316.102-1.923.102m7.289.506v.303c.304.102.709.102 1.012.102-.303-.304-.708-.304-1.012-.405m-16.198.405c-.203.303-.304.506-.608.708-.303.203-.202.608-.101.81.506.102 1.012.102 1.519.102-.102-.304-.304-.507-.405-.81 0-.304.405-.405.405-.71-.304-.1-.507-.1-.81-.1m1.012.1c-.101.203-.101.406-.202.608.1.203.202.507.405.709 0 0 .1-.101.202-.101-.304-.405-.101-.81.101-1.215h-.506m.911.202c-.101.102-.101.102-.101.203-.202.202-.202.405-.202.607 0 .102.1.203.1.203.305.202.305-.506 0-.608.203-.1.305-.303.406-.506l-.203.101v-.1.1m4.05 0c.101.203.101.304.101.507h.81c.202.202.405 0 .607 0 .507-.102.912.202 1.317.202h2.632v-.405c-1.215 0-2.329-.202-3.544.203-.303 0-.607-.203-.91-.203-.102-.506-.71-.304-1.013-.304m-3.645.405c.709 0 1.519 0 2.227.102 0-.102.102-.203.102-.304-.304-.304-.81-.203-1.114-.203-.405 0-1.114-.1-1.215.405m10.63 0h1.62c.203 0 .304-.1.304-.303h-1.316c-.304.1-.709 0-.608.303m2.835-.303c0 .1-.101.202-.101.202.405.101.91.101 1.417.101.608.102 1.215.102 1.822-.1-.202-.102-.405-.305-.607-.305-.911 0-1.721.102-2.531.102m3.746-.102c0 .203 0 .405-.101.507-.102 0-.203.1-.304.202v.506c.607 0 1.215-.303 1.822-.405.101-.202 0-.405 0-.607-.405 0-.91-.203-1.417-.203m-17.11.81c0 .102.102.203.102.203.81.101 1.62 0 2.43 0 0 0 0-.101-.102-.101-.81 0-1.62-.203-2.43-.102m4.151.102c.102.1.102.202.203.303h4.758s.101-.101.101-.202c-1.316-.101-2.733-.101-4.05-.101H7.6m6.277-.102v.304c.81 0 1.62 0 2.43-.101.708.202 1.417.101 2.126 0 .405 0 .709.202 1.012.101.101-.506-.607-.304-.91-.405-.71.101-1.52 0-2.228.101a9.757 9.757 0 00-2.43 0m2.43.507c.304.303.506.607.911.81.506.1.911-.203 1.316-.507-.202-.405-.607.203-.81.304-.506-.203-1.012-.405-1.417-.607m-12.149 0c.101.708.203 1.417.405 2.024.506.81.81 1.62 1.417 2.43.608.607 1.215 1.316 2.126 1.417.71 0 1.418.203 2.025-.202a1.808 1.808 0 00.911-2.227c-.303-.709-.405-1.519-1.113-1.924-.911-.506-2.329.405-2.126 1.417 0-1.113 1.62-1.822 2.227-.81.405.81.911 1.823.506 2.734-.708 1.012-2.227 1.114-3.24.405-.303-.304-.81-.607-1.113-1.114-.304-.506-.506-1.012-.81-1.417-.506-.81-.506-1.822-.911-2.632 0 0-.203-.101-.304-.101m4.96 2.834v.506c-.505.304-.91-.202-1.214-.405l.506.507c.405.1.81.1 1.013-.304-.102 0-.203-.203-.304-.304M20.862 5.536c.202 0 .405-.101.506-.101.202.304.202.709.101 1.113-.304.304-.81 0-1.012-.404.1-.304.303-.405.405-.608m-7.087 1.012c-.101-.708.911-.708 1.316-.404.202.506-.101 1.214-.709 1.214-.303-.202-.708-.405-.607-.81zm-9.922 4.05c-.1.607-.303 1.114-.405 1.721v1.215s.102-.101.203-.101c.101-.405.101-.81.202-1.114l.608-1.822c-.203-.304-.405-.101-.608.101zm9.416 4.05c0-.102 0-.102 0 0z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dN($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Notepad++" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Notepadplusplus extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dN, create_fragment$dN, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Notion.svelte generated by Svelte v3.23.2 */

        function create_fragment$dO(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M4.459 4.208c.746.606 1.026.56 2.428.466l13.215-.793c.28 0 .047-.28-.046-.326L17.86 1.968c-.42-.326-.981-.7-2.055-.607L3.01 2.295c-.466.046-.56.28-.374.466zm.793 3.08v13.904c0 .747.373 1.027 1.214.98l14.523-.84c.841-.046.935-.56.935-1.167V6.354c0-.606-.233-.933-.748-.887l-15.177.887c-.56.047-.747.327-.747.933zm14.337.745c.093.42 0 .84-.42.888l-.7.14v10.264c-.608.327-1.168.514-1.635.514-.748 0-.935-.234-1.495-.933l-4.577-7.186v6.952L12.21 19s0 .84-1.168.84l-3.222.186c-.093-.186 0-.653.327-.746l.84-.233V9.854L7.822 9.76c-.094-.42.14-1.026.793-1.073l3.456-.233 4.764 7.279v-6.44l-1.215-.139c-.093-.514.28-.887.747-.933zM1.936 1.035l13.31-.98c1.634-.14 2.055-.047 3.082.7l4.249 2.986c.7.513.934.653.934 1.213v16.378c0 1.026-.373 1.634-1.68 1.726l-15.458.934c-.98.047-1.448-.093-1.962-.747l-3.129-4.06c-.56-.747-.793-1.306-.793-1.96V2.667c0-.839.374-1.54 1.447-1.632z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dO($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Notion" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Notion extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dO, create_fragment$dO, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Notist.svelte generated by Svelte v3.23.2 */

        function create_fragment$dP(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M5.934 3.801c-1.099.11-2.288.4-3.038.74-1.069.499-1.259.869-.909 1.868.36 1.04.19 2.308-1 7.505C.109 17.79-.04 18.6.01 19.32c.04.47.09.63.29.79.22.179.33.189 1.688.129 3.408-.17 4.057-.22 4.267-.34.24-.13.25-.2.44-1.758.32-2.868 1.788-7.155 3.027-8.894 1.06-1.479 2.359-2.128 3.098-1.549.78.62.76 1.559-.13 4.147-.68 1.999-.79 2.428-.909 3.617-.15 1.46.13 2.489.96 3.408.849.94 2.118 1.409 3.846 1.409 1.64 0 2.968-.41 4.377-1.339 1.29-.86 2.828-2.608 3.008-3.428.1-.41-.07-.859-.35-.969-.41-.15-.65-.04-1.389.63-.859.78-1.249.949-2.008.889-1.01-.08-1.45-.66-1.45-1.919 0-.899.09-1.349.65-3.317.79-2.728.93-3.967.58-5.027-.57-1.768-2.978-2.538-5.646-1.798-1.449.41-3.238 1.449-4.597 2.688-.38.34-.68.59-.68.56 0-.02.07-.35.16-.72.34-1.499.2-2.248-.479-2.598-.39-.2-1.599-.26-2.828-.13z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dP($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Notist" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Notist extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dP, create_fragment$dP, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Npm.svelte generated by Svelte v3.23.2 */

        function create_fragment$dQ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M0 7.334v8h6.666v1.332H12v-1.332h12v-8H0zm6.666 6.664H5.334v-4H3.999v4H1.335V8.667h5.331v5.331zm4 0v1.336H8.001V8.667h5.334v5.332h-2.669v-.001zm12.001 0h-1.33v-4h-1.336v4h-1.335v-4h-1.33v4h-2.671V8.667h8.002v5.331zM10.665 10H12v2.667h-1.335V10z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dQ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NPM" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Npm extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dQ, create_fragment$dQ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nucleo.svelte generated by Svelte v3.23.2 */

        function create_fragment$dR(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M13.7993 12A1.7994 1.7994 0 0 1 12 13.7994 1.7994 1.7994 0 0 1 10.2006 12 1.7994 1.7994 0 0 1 12 10.2006 1.7994 1.7994 0 0 1 13.7993 12m1.4731 3.2622a35.2223 35.2223 0 0 1-3.3126 2.9618 44.0775 44.0775 0 0 1-3.3126-2.9618 35.2127 35.2127 0 0 1-2.9611-3.3126A35.2127 35.2127 0 0 1 8.6472 8.637a43.9342 43.9342 0 0 1 3.3126-2.9611 43.9342 43.9342 0 0 1 3.3126 2.9611 35.1287 35.1287 0 0 1 2.9611 3.3126 29.2652 29.2652 0 0 1-2.961 3.3126m1.004-7.5806a40.9184 40.9184 0 0 0-3.1621-2.861c2.9611-2.1592 5.722-3.4632 7.6292-3.4632a1.8893 1.8893 0 0 1 1.4053.4523c1.1042 1.1042.2507 4.2662-2.359 8.0803h1.656a25.0968 25.0968 0 0 0 1.4054-2.4592c1.4053-3.0115 1.506-5.32.2999-6.5748a3.6587 3.6587 0 0 0-2.458-.8517c-3.2124 0-8.3333 3.0115-12.9997 7.6773a40.9184 40.9184 0 0 0-2.861 3.162C1.721 6.5792.6672 2.9655 1.8212 1.8115a1.9685 1.9685 0 0 1 1.4053-.4523c1.707 0 4.1157 1.0545 6.6755 2.8112V2.5642C7.3924.9076 5.0335.0043 3.2264.0043a3.2292 3.2292 0 0 0-2.359.8535c-1.2547 1.2548-1.103 3.5633.3017 6.5748 1.3045 2.8106 3.6635 5.9223 6.5244 8.8337a40.9184 40.9184 0 0 0 3.1621 2.861c-2.9108 2.1592-5.722 3.463-7.6293 3.463a1.8917 1.8917 0 0 1-1.4052-.454c-1.1042-1.1042-.2508-4.2662 2.359-8.0808H2.5743a25.167 25.167 0 0 0-1.4053 2.459c-1.4047 3.014-1.506 5.322-.3017 6.5779a3.2316 3.2316 0 0 0 2.359.8529c3.2124 0 8.3321-3.0115 12.9997-7.6772a40.808 40.808 0 0 0 2.861-3.1621c3.1092 4.2645 4.166 7.8782 3.0114 9.0303a1.8905 1.8905 0 0 1-1.4052.4517c-1.7064 0-4.1158-1.0538-6.6756-2.8106v1.656c2.5598 1.6086 4.9188 2.5623 6.6756 2.5623a3.2292 3.2292 0 0 0 2.3589-.8535c1.2548-1.2548 1.1042-3.5633-.2999-6.5748-1.256-2.861-3.6149-5.9727-6.4759-8.8858Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dR($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nucleo" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nucleo extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dR, create_fragment$dR, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nuget.svelte generated by Svelte v3.23.2 */

        function create_fragment$dS(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M17.67 21.633a3.995 3.995 0 1 1 0-7.99 3.995 3.995 0 0 1 0 7.99m-7.969-9.157a2.497 2.497 0 1 1 0-4.994 2.497 2.497 0 0 1 0 4.994m8.145-7.795h-6.667a6.156 6.156 0 0 0-6.154 6.155v6.667a6.154 6.154 0 0 0 6.154 6.154h6.667A6.154 6.154 0 0 0 24 17.503v-6.667a6.155 6.155 0 0 0-6.154-6.155M3.995 2.339a1.998 1.998 0 1 1-3.996 0 1.998 1.998 0 0 1 3.996 0");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dS($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NuGet" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nuget extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dS, create_fragment$dS, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nuke.svelte generated by Svelte v3.23.2 */

        function create_fragment$dT(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.293.004c6.625.162 11.865 5.664 11.703 12.29-.162 6.625-5.664 11.865-12.29 11.703C5.081 23.835-.159 18.333.003 11.707l.001-.025C.18 5.066 5.678-.158 12.293.004zm0 1.238c-5.941-.164-10.89 4.52-11.054 10.461s4.52 10.89 10.461 11.054c5.941.164 10.89-4.52 11.054-10.461l.001-.025c.15-5.932-4.53-10.866-10.462-11.029zm5.842 8.302h2.4c.976 0 .682-.873.682-.873a9.587 9.587 0 0 0-2.111-3.431l-.005.011a10.052 10.052 0 0 0-3.355-2.329.612.612 0 0 0-.894.622c-.044.802-.142 2.395-.142 2.395s.016.769-.627.769c-.813.011-1.489-.044-1.489-.044a2.314 2.314 0 0 1-1.255-.545L8.868 3.511a1.09 1.09 0 0 0-1.407-.196 9.758 9.758 0 0 0-4.713 5.384c-.256.714.333.806.731.806h6a2.086 2.086 0 0 1 1.68.627c.785.824 1.331 1.369 1.331 1.369s.48.54 1.26 1.358c.431.459.632 1.089.545 1.713 0 0-.295 5.744-.295 6-.027.398.038.993.769.775a9.756 9.756 0 0 0 5.618-4.424 1.091 1.091 0 0 0-.12-1.418l-2.471-2.607a2.303 2.303 0 0 1-.496-1.282s-.022-.682.033-1.489c.044-.643.802-.583.802-.583zm-2.362 1.374c-.475.469-1.484.229-2.22-.545-.736-.775-.924-1.801-.45-2.254.475-.453 1.502-.239 2.239.536.737.774.906 1.794.431 2.263z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dT($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nuke" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nuke extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dT, create_fragment$dT, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Numpy.svelte generated by Svelte v3.23.2 */

        function create_fragment$dU(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.315 4.876L6.3048 2.8517l-4.401 2.1965 4.1186 2.0683zm1.8381.9277l4.2045 2.1223-4.3622 2.1906-4.125-2.0718zm5.6153-2.9213l4.3193 2.1658-3.863 1.9402-4.2131-2.1252zm-1.859-.9329L12.021 0 8.1742 1.9193l4.0068 2.0208zm-3.0401 16.7443V24l4.7107-2.3507-.0053-5.3085zm4.7037-4.2057l-.0052-5.2528-4.6985 2.3356v5.2546zm5.6553-.9845v5.327l-4.0178 2.0052-.0029-5.3028zm0-1.8626V6.4214l-4.0253 2.001.0034 5.2633zM11.2062 11.571L8.0333 9.9756v6.895s-3.8804-8.2564-4.2399-8.998c-.0463-.0957-.2371-.2007-.2858-.2262C2.8118 7.2812.773 6.2485.773 6.2485V18.43l2.8204 1.5076v-6.3674s3.8392 7.3775 3.878 7.458c.0389.0807.4245.8582.8362 1.1314.5485.363 2.8992 1.7766 2.8992 1.7766z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dU($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NumPy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Numpy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dU, create_fragment$dU, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nutanix.svelte generated by Svelte v3.23.2 */

        function create_fragment$dV(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M.393 3.617A.395.395 0 000 4.012c0 .12.054.225.139.297l8.507 7.404a.39.39 0 01-.013.588l-8.52 7.412a.393.393 0 00.28.67h4.86c.103 0 .195-.04.265-.104l9.17-7.98a.396.396 0 00.001-.596L5.518 3.721a.386.386 0 00-.264-.104H.393zm18.359 0a.389.389 0 00-.273.113l-4.717 4.106a.392.392 0 00-.04.564l2.428 2.114a.393.393 0 00.291.129.394.394 0 00.278-.118l7.127-6.203a.389.389 0 00.154-.31.395.395 0 00-.393-.395h-4.855zm-2.31 9.742c-.116 0-.22.05-.292.13l-2.427 2.113a.392.392 0 00.039.564l4.717 4.104c.07.07.166.113.273.113h4.855a.393.393 0 00.239-.705l-7.127-6.203a.393.393 0 00-.278-.116Z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dV($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nutanix" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nutanix extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dV, create_fragment$dV, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/NuxtDotJs.svelte generated by Svelte v3.23.2 */

        function create_fragment$dW(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M19.7237 20.273l.023-.045a.74.74 0 00.053-.117l.002-.005a1.1601 1.1601 0 00.054-.607l.001.007a1.7952 1.7952 0 00-.235-.6232l.005.008-5.3177-9.3541-.812-1.4202-.8072 1.4202-5.3146 9.3541a1.8502 1.8502 0 00-.204.6041l-.001.011a1.2572 1.2572 0 00.08.7131l-.003-.008a.8091.8091 0 00.05.102l-.002-.004c.16.275.5.602 1.2501.602h9.8993c.157 0 .925-.032 1.2801-.637zM13.496 10.956l4.8595 8.549H8.6384zm10.2502 7.935L16.7293 6.5292c-.072-.13-.477-.787-1.1821-.787-.317 0-.772.135-1.1421.785l-.9071 1.5902.807 1.4202 1.2502-2.2123 6.9419 12.1815h-2.6404a1.1871 1.1871 0 01-.058.6081l.003-.008a.7721.7721 0 01-.057.126l.002-.004-.023.045c-.355.6051-1.1221.6371-1.2721.6371h4.1295c.152 0 .917-.032 1.2721-.637.157-.2751.27-.7372-.107-1.3822zM7.3022 20.308a.9891.9891 0 01-.045-.092l-.002-.006a1.2282 1.2282 0 01-.084-.712l-.001.007H1.4985l8.43-14.834 2.7674 4.8647.802-1.4202-2.4122-4.2495c-.067-.122-.4751-.7771-1.1772-.7771-.317 0-.772.137-1.1421.7871L.2274 18.8898c-.0721.13-.4251.8121-.0751 1.4172.16.275.5.6021 1.2502.6021h7.1518c-.745 0-1.09-.322-1.2501-.602z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dW($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Nuxt.js" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class NuxtDotJs extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dW, create_fragment$dW, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Nvidia.svelte generated by Svelte v3.23.2 */

        function create_fragment$dX(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M8.948 8.798v-1.43a6.7 6.7 0 0 1 .424-.018c3.922-.124 6.493 3.374 6.493 3.374s-2.774 3.851-5.75 3.851c-.398 0-.787-.062-1.158-.185v-4.346c1.528.185 1.837.857 2.747 2.385l2.04-1.714s-1.492-1.952-4-1.952a6.016 6.016 0 0 0-.796.035m0-4.735v2.138l.424-.027c5.45-.185 9.01 4.47 9.01 4.47s-4.08 4.964-8.33 4.964c-.37 0-.733-.035-1.095-.097v1.325c.3.035.61.062.91.062 3.957 0 6.82-2.023 9.593-4.408.459.371 2.34 1.263 2.73 1.652-2.633 2.208-8.772 3.984-12.253 3.984-.335 0-.653-.018-.971-.053v1.864H24V4.063zm0 10.326v1.131c-3.657-.654-4.673-4.46-4.673-4.46s1.758-1.944 4.673-2.262v1.237H8.94c-1.528-.186-2.73 1.245-2.73 1.245s.68 2.412 2.739 3.11M2.456 10.9s2.164-3.197 6.5-3.533V6.201C4.153 6.59 0 10.653 0 10.653s2.35 6.802 8.948 7.42v-1.237c-4.84-.6-6.492-5.936-6.492-5.936z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dX($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "NVIDIA" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Nvidia extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dX, create_fragment$dX, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Obsstudio.svelte generated by Svelte v3.23.2 */

        function create_fragment$dY(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12,24C5.383,24,0,18.617,0,12S5.383,0,12,0s12,5.383,12,12S18.617,24,12,24z M12,1.109 C5.995,1.109,1.11,5.995,1.11,12C1.11,18.005,5.995,22.89,12,22.89S22.89,18.005,22.89,12C22.89,5.995,18.005,1.109,12,1.109z M6.182,5.99c0.352-1.698,1.503-3.229,3.05-3.996c-0.269,0.273-0.595,0.483-0.844,0.78c-1.02,1.1-1.48,2.692-1.199,4.156 c0.355,2.235,2.455,4.06,4.732,4.028c1.765,0.079,3.485-0.937,4.348-2.468c1.848,0.063,3.645,1.017,4.7,2.548 c0.54,0.799,0.962,1.736,0.991,2.711c-0.342-1.295-1.202-2.446-2.375-3.095c-1.135-0.639-2.529-0.802-3.772-0.425 c-1.56,0.448-2.849,1.723-3.293,3.293c-0.377,1.25-0.216,2.628,0.377,3.772c-0.825,1.429-2.315,2.449-3.932,2.756 c-1.244,0.261-2.551,0.059-3.709-0.464c1.036,0.302,2.161,0.355,3.191-0.011c1.381-0.457,2.522-1.567,3.024-2.935 c0.556-1.49,0.345-3.261-0.591-4.54c-0.7-1.007-1.803-1.717-3.002-1.969c-0.38-0.068-0.764-0.098-1.148-0.134 c-0.611-1.231-0.834-2.66-0.528-3.996L6.182,5.99z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dY($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "OBS Studio" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Obsstudio extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dY, create_fragment$dY, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Ocaml.svelte generated by Svelte v3.23.2 */

        function create_fragment$dZ(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M12.186 21.63c-.085-.169-.186-.523-.254-.675-.067-.135-.27-.506-.37-.625-.22-.253-.27-.27-.338-.607-.119-.574-.405-1.587-.76-2.295-.186-.372-.49-.676-.76-.946-.236-.236-.776-.624-.877-.607-.895.169-1.165 1.046-1.586 1.738-.237.388-.473.709-.659 1.114-.168.371-.152.793-.439 1.114a2.95 2.95 0 0 0-.624 1.097c-.034.084-.101.928-.186 1.13l1.317-.084c1.232.085.877.557 2.785.456l3.02-.101a5.372 5.372 0 0 0-.27-.709zm8.776-20.084H3.038a3.018 3.018 0 0 0-3.021 3.02v6.583c.439-.152 1.046-1.08 1.249-1.3.337-.388.405-.894.574-1.198.388-.709.455-1.215 1.333-1.215.405 0 .574.101.844.473.186.253.523.742.675 1.063.186.371.473.86.608.962.1.067.185.135.27.169.135.05.253-.051.354-.119.118-.1.169-.286.287-.556.169-.389.338-.827.439-.996.169-.27.236-.608.422-.76.27-.236.641-.253.742-.27.557-.118.81.27 1.08.507.186.168.422.489.608.91.135.338.304.66.388.845.068.185.237.49.338.86.101.321.337.574.439.743 0 0 .152.405 1.03.777a7.5 7.5 0 0 0 .81.286c.388.135.759.119 1.231.068.338 0 .524-.49.676-.878.084-.236.185-.894.236-1.08.05-.185-.085-.32.034-.49.135-.185.219-.202.286-.438.17-.523 1.114-.54 1.654-.54.456 0 .389.439 1.148.287.439-.085.86.05 1.317.185.388.102.76.22.979.473.135.169.489.996.135 1.03.033.033.067.118.118.151-.085.321-.422.085-.625.051-.253-.05-.439 0-.692.118-.439.186-1.063.169-1.451.49-.32.27-.32.86-.473 1.198 0 0-.422 1.063-1.316 1.721-.237.17-.692.574-1.671.726-.439.068-.86.068-1.317.05-.219-.016-.438-.016-.658-.016-.135 0-.574-.017-.557.034l-.05.118a.6.6 0 0 0 .033.169c.017.1.017.185.034.27 0 .185-.017.388 0 .574.017.388.169.742.186 1.147.017.439.236.912.455 1.266.085.135.203.152.254.32.067.186 0 .406.033.608.118.794.355 1.637.71 2.363v.017c.438-.067.894-.236 1.468-.32 1.063-.153 2.531-.085 3.476-.17 2.397-.219 3.697.98 5.84.49V4.567a3.043 3.043 0 0 0-3.038-3.021zm-8.945 14.177c0-.034 0-.034 0 0zM5.553 18.49c.169-.371.27-.777.405-1.148.135-.354.337-.86.692-1.046-.05-.05-.743-.068-.928-.085-.203-.017-.406-.05-.608-.084a22.96 22.96 0 0 1-1.148-.236c-.22-.051-.979-.321-1.13-.389-.389-.168-.642-.658-.929-.607-.185.034-.371.101-.49.287-.1.152-.134.422-.202.607-.084.203-.22.405-.32.608-.237.354-.625.675-.794 1.03-.033.084-.05.168-.084.253v4.067c.202.034.405.068.624.135 1.688.456 2.093.49 3.747.304l.152-.017c.118-.27.22-1.164.304-1.434.067-.22.152-.389.186-.591.033-.203 0-.405-.017-.59-.034-.49.354-.66.54-1.064z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$dZ($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "OCaml" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Ocaml extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$dZ, create_fragment$dZ, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Octave.svelte generated by Svelte v3.23.2 */

        function create_fragment$d_(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M10.492.008C8.08-.082 5.837.723 4.21 2.492c-1.3 1.413-2.024 3.255-2.225 5.274h-.42C.702 7.766 0 8.468 0 9.33v4.74c0 .862.702 1.565 1.564 1.565h2.09a16.887 16.887 0 0 0 2.567 3.685c4.458 4.845 10.69 6.032 14.552 3.014h2.1c.577 0 1.05-.473 1.05-1.05V18.42a1.03 1.03 0 0 0-.257-.668c.857-3.431-.045-7.637-2.518-11.211.002-.017.01-.032.01-.049V4.48a.821.821 0 0 0-.816-.818H18.64C16.13 1.372 13.208.11 10.492.008zm1.748 2.178c1.78-.009 3.688.621 5.422 1.85a.796.796 0 0 0-.15.444v2.012c0 .448.368.819.816.819h2.014a.787.787 0 0 0 .392-.116c2.246 3.3 2.733 7.317 1.239 10.174H20.01c-.578 0-1.051.474-1.051 1.05v1.792c-2.989 1.3-7 .222-9.957-2.99a12.734 12.734 0 0 1-1.549-2.096c.256-.279.416-.647.416-1.055V9.33c0-.862-.702-1.564-1.564-1.564h-.409c.237-1.363.78-2.61 1.686-3.594 1.224-1.33 2.878-1.978 4.658-1.986zm6.088 2.01h2.014c.162 0 .283.122.283.284v2.012c0 .163-.12.285-.283.285h-2.014a.28.28 0 0 1-.285-.285V4.48a.28.28 0 0 1 .285-.285zM1.564 8.298h4.74c.577 0 1.032.455 1.032 1.031v4.74c0 .576-.455 1.032-1.031 1.032h-4.74A1.023 1.023 0 0 1 .532 14.07V9.33c0-.576.455-1.031 1.031-1.031zm18.446 9.603h2.863c.291 0 .52.226.52.518v2.863a.512.512 0 0 1-.52.518H20.01a.51.51 0 0 1-.518-.518V18.42a.51.51 0 0 1 .518-.518z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d_($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Octave" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Octave extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d_, create_fragment$d_, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Octopusdeploy.svelte generated by Svelte v3.23.2 */

        function create_fragment$d$(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M2.18 18.212c1.805-1.162 3.928-3.162 3.122-5.51-.437-1.282-1.046-2.379-1.127-3.762a8.478 8.478 0 0 1 .515-3.46C6.31 1.14 11.126-.917 15.481.389c4.03 1.216 6.808 5.893 5.119 9.973-.965 2.356-1.395 4.173.755 6.006.582.496 2 1.24 1.992 2.123 0 1.163-2.27-.244-2.522-.445.286.503 3.138 3.487 1.325 3.688-1.67.194-3.147-2.139-4.15-3.142-1.686-1.682-1.395 2.042-1.403 2.81 0 1.212-.868 3.676-2.41 2.072-1.27-1.321-.775-3.433-1.674-4.905-.968-1.612-2.58 1.612-2.983 2.2-.45.66-2.713 3.844-3.596 2.147-.725-1.38.434-3.538 1.007-4.785-.209.453-1.685 1.123-2.115 1.34a5.738 5.738 0 0 1-3.057.706c-2.267-.163-.527-1.368.387-1.96l.023-.005z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				attr(svg, "fill", /*color*/ ctx[0]);
        			}
        		},
        		i: noop,
        		o: noop,
        		d(detaching) {
        			if (detaching) detach(svg);
        		}
        	};
        }

        function instance$d$($$self, $$props, $$invalidate) {
        	let { color = "currentColor" } = $$props;
        	let { size = 24 } = $$props;
        	let { title = "Octopus Deploy" } = $$props;

        	$$self.$set = $$props => {
        		if ("color" in $$props) $$invalidate(0, color = $$props.color);
        		if ("size" in $$props) $$invalidate(1, size = $$props.size);
        		if ("title" in $$props) $$invalidate(2, title = $$props.title);
        	};

        	return [color, size, title];
        }

        class Octopusdeploy extends SvelteComponent {
        	constructor(options) {
        		super();
        		init(this, options, instance$d$, create_fragment$d$, safe_not_equal, { color: 0, size: 1, title: 2 });
        	}
        }

        /* src/components/Oculus.svelte generated by Svelte v3.23.2 */

        function create_fragment$e0(ctx) {
        	let svg;
        	let title_1;
        	let t;
        	let path;

        	return {
        		c() {
        			svg = svg_element("svg");
        			title_1 = svg_element("title");
        			t = text(/*title*/ ctx[2]);
        			path = svg_element("path");
        			attr(path, "d", "M18.135 13.949c-.319.221-.675.355-1.057.416s-.761.049-1.142.049H8.063c-.382 0-.762.014-1.145-.049-.381-.063-.734-.195-1.057-.416-.643-.451-1.027-1.17-1.027-1.951 0-.796.387-1.515 1.029-1.95.314-.225.674-.359 1.049-.42s.75-.061 1.141-.061h7.875c.375 0 .765-.014 1.14.046s.735.194 1.051.405c.645.434 1.02 1.17 1.02 1.949 0 .78-.391 1.5-1.035 1.95l.031.032zm3.174-7.555c-.845-.678-1.812-1.146-2.865-1.398-.6-.146-1.203-.211-1.822-.23-.449-.015-.899-.01-1.364-.01H8.76c-.457 0-.915-.005-1.372.01-.618.021-1.222.083-1.825.23-1.051.254-2.025.723-2.865 1.4C.99 7.761 0 9.82 0 12c0 2.182.99 4.241 2.689 5.606.846.678 1.815 1.146 2.865 1.4.603.146 1.206.211 1.823.229.45.016.9.012 1.365.012h6.496c.449 0 .914.004 1.364-.012.615-.018 1.215-.082 1.814-.229 1.05-.256 2.011-.723 2.866-1.402C23.01 16.24 24 14.18 24 12c0-2.181-.99-4.241-2.691-5.606z");
        			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        			attr(svg, "width", /*size*/ ctx[1]);
        			attr(svg, "height", /*size*/ ctx[1]);
        			attr(svg, "fill", /*color*/ ctx[0]);
        			attr(svg, "viewBox", "0 0 24 24");
        		},
        		m(target, anchor) {
        			insert(target, svg, anchor);
        			append(svg, title_1);
        			append(title_1, t);
        			append(svg, path);
        		},
        		p(ctx, [dirty]) {
        			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);

        			if (dirty & /*size*/ 2) {
        				attr(svg, "width", /*size*/ ctx[1]);
        			}

        			if (dirty & /*size*/ 2) {
        				attr(svg, "height", /*size*/ ctx[1]);
        			}

        			if (dirty & /*color*/ 1) {
        				att